#####################################################################################
#
# SecureSocial 2 Settings
#
#####################################################################################

# if running with a different application.context make sure you change:
# onLoginGoTo = <application.context>
# onLogoutGoTo = <application.context>/login

# if running behind a https connection (which you should) change:
#ssl=true

smtp {
    host=localhost
    #port=25
    #ssl=true
    #user="lmarini@illinois.edu"
    #password=your_password
    from="devnull@ncsa.illinois.edu"
    fromName="Clowder"
    # if false, all email will come from the 'from' email specified above
    mimicuser=false
}

securesocial {

    cookie {
    
        makeTransient="true"
        
        #Default should be 30
        idleTimeoutInMinutes=30
    }
    
    #
    # If enabled, get gravatar image for user
    #
    enableGravatarSupport=True
    
    #
    # If enabled, sets the path to your copy of Bootstrap.css to be used instead of the default one provided by SecureSocial
    #
    #bootstrapCssPath="your path"


    #
    # If enabled, sets the Favicon to display when in SecureSocial pages
    #
    #faviconPath="your path"


    #
    # If enabled, sets the path to your copy of JQuery to be used instead of the default one provided by SecureSocial
    #
    #jqueryPath="your path"


    #
    # If enabled, injects this Css file into all SecureSocial pages, allowing for minor style customizations
    # If you want to do major changes, please read about custom templates in SecureSocial
    #
    #customCssPath="your path"

    #
    # Where to redirect the user if SecureSocial can't figure that out from
    # the request that led the use to the login page
    #
    onLoginGoTo=/

    #
    # Where to redirect the user when he logs out. If not set SecureSocial will redirect to the login page
    #
    onLogoutGoTo=/login

    #
    # Enable SSL for oauth callback urls and login/signup/password recovery pages
    #
    ssl=false

    twitter {
        requestTokenUrl="https://api.twitter.com/oauth/request_token"
        accessTokenUrl="https://api.twitter.com/oauth/access_token"
        authorizationUrl="https://api.twitter.com/oauth/authorize"
        consumerKey=your_consumer_key
        consumerSecret=your_consumer_secret
    }

    facebook {
        authorizationUrl="https://graph.facebook.com/oauth/authorize"
        accessTokenUrl="https://graph.facebook.com/oauth/access_token"
        clientId=your_client_id
        clientSecret=your_client_secret
        # this scope is the minimum SecureSocial requires.  You can add more if required by your app.
        scope=email
    }

    google {
        authorizationUrl="https://accounts.google.com/o/oauth2/auth"
        accessTokenUrl="https://accounts.google.com/o/oauth2/token"
        clientId=your_client_id
        clientSecret=your_client_secret
        scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"
    }

    linkedin {
        requestTokenUrl="https://api.linkedin.com/uas/oauth/requestToken"
        accessTokenUrl="https://api.linkedin.com/uas/oauth/accessToken"
        authorizationUrl="https://api.linkedin.com/uas/oauth/authenticate"
        consumerKey=your_consumer_key
        consumerSecret=your_consumer_secret
    }
        
    github {
        authorizationUrl="https://github.com/login/oauth/authorize"
        accessTokenUrl="https://github.com/login/oauth/access_token"
        clientId=your_client_id
        clientSecret=your_client_secret
    }

    foursquare {
        authorizationUrl="https://foursquare.com/oauth2/authenticate"
        accessTokenUrl="https://foursquare.com/oauth2/access_token"
        clientId=your_client_id
        clientSecret=your_client_secret
    }

    xing {
        requestTokenUrl="https://api.xing.com/v1/request_token"
        accessTokenUrl="https://api.xing.com/v1/access_token"
        authorizationUrl="https://api.xing.com/v1/authorize"
        consumerKey=your_consumer_key
        consumerSecret=your_consumer_secret
    }

    orcid {
        authorizationUrl="https://orcid.org/oauth/authorize"
        accessTokenUrl="https://orcid.org/oauth/token"
        clientId=your_client_id
        clientSecret=your_client_secret
        scope="/authenticate"
    }

    crowd {
        # url where custom clowder script is installed
        url="http://localhost/clowder.php"
        # timout of token, should be short for security
        timeout=5
    }
    
    cilogon {
        authorizationUrl="https://cilogon.org/authorize"
        accessTokenUrl="https://cilogon.org/oauth2/token"
        userinfoUrl="https://cilogon.org/oauth2/userinfo"
        clientId=your_client_id
        clientSecret=your_client_secret
        scope="openid profile email"
        # to be able to filter on groups you will need to add org.cilogon.userinfo to the scope
        # and add a list of groups that will have access to clowder.
        #scope="openid profile email org.cilogon.userinfo"
        #groups=["cn=org_isda,ou=Groups,dc=ncsa,dc=illinois,dc=edu"]
    }

    ldap {
        url="http://localhost/ldap"
        hostname="ldap.example.com"
        group="test"
        port="636"
        baseDN="dc=example,dc=com"
        userDN="ou=people"
        groupDN="ou=groups"
        objectClass="inetorgperson"
        trustAllCertificates=false
        provider="ldap"
    }

    userpass {
        #
        # Enable username support, otherwise SecureSocial will use the emails as user names
        #
        withUserNameSupport=false
        sendWelcomeEmail=true
        enableGravatarSupport=true
        tokenDuration=60
        tokenDeleteInterval=5
        signupSkipLogin=false
    }
}
