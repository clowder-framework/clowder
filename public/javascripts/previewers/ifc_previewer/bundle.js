let referenceUrl;

(function ($, Configuration) {

    let useTab = Configuration.tab;
    referenceUrl = Configuration.url;
    let previewer = Configuration.previewer;

    console.log(Configuration.previewer);

}(jQuery, Configuration));

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":1,"buffer":2,"ieee754":3}],3:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],4:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeMorphedAttributes = computeMorphedAttributes;
exports.computeTangents = computeTangents;
exports.estimateBytesUsed = estimateBytesUsed;
exports.interleaveAttributes = interleaveAttributes;
exports.mergeBufferAttributes = mergeBufferAttributes;
exports.mergeBufferGeometries = mergeBufferGeometries;
exports.mergeVertices = mergeVertices;
exports.toTrianglesDrawMode = toTrianglesDrawMode;

var _three = require("three");

function computeTangents(geometry) {
  geometry.computeTangents();
  console.warn('THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead.');
}
/**
	 * @param  {Array<BufferGeometry>} geometries
	 * @param  {Boolean} useGroups
	 * @return {BufferGeometry}
	 */


function mergeBufferGeometries(geometries, useGroups = false) {
  const isIndexed = geometries[0].index !== null;
  const attributesUsed = new Set(Object.keys(geometries[0].attributes));
  const morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));
  const attributes = {};
  const morphAttributes = {};
  const morphTargetsRelative = geometries[0].morphTargetsRelative;
  const mergedGeometry = new _three.BufferGeometry();
  let offset = 0;

  for (let i = 0; i < geometries.length; ++i) {
    const geometry = geometries[i];
    let attributesCount = 0; // ensure that all geometries are indexed, or none

    if (isIndexed !== (geometry.index !== null)) {
      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');
      return null;
    } // gather attributes, exit early if they're different


    for (const name in geometry.attributes) {
      if (!attributesUsed.has(name)) {
        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure "' + name + '" attribute exists among all geometries, or in none of them.');
        return null;
      }

      if (attributes[name] === undefined) attributes[name] = [];
      attributes[name].push(geometry.attributes[name]);
      attributesCount++;
    } // ensure geometries have the same number of attributes


    if (attributesCount !== attributesUsed.size) {
      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.');
      return null;
    } // gather morph attributes, exit early if they're different


    if (morphTargetsRelative !== geometry.morphTargetsRelative) {
      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.');
      return null;
    }

    for (const name in geometry.morphAttributes) {
      if (!morphAttributesUsed.has(name)) {
        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.');
        return null;
      }

      if (morphAttributes[name] === undefined) morphAttributes[name] = [];
      morphAttributes[name].push(geometry.morphAttributes[name]);
    } // gather .userData


    mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];
    mergedGeometry.userData.mergedUserData.push(geometry.userData);

    if (useGroups) {
      let count;

      if (isIndexed) {
        count = geometry.index.count;
      } else if (geometry.attributes.position !== undefined) {
        count = geometry.attributes.position.count;
      } else {
        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute');
        return null;
      }

      mergedGeometry.addGroup(offset, count, i);
      offset += count;
    }
  } // merge indices


  if (isIndexed) {
    let indexOffset = 0;
    const mergedIndex = [];

    for (let i = 0; i < geometries.length; ++i) {
      const index = geometries[i].index;

      for (let j = 0; j < index.count; ++j) {
        mergedIndex.push(index.getX(j) + indexOffset);
      }

      indexOffset += geometries[i].attributes.position.count;
    }

    mergedGeometry.setIndex(mergedIndex);
  } // merge attributes


  for (const name in attributes) {
    const mergedAttribute = mergeBufferAttributes(attributes[name]);

    if (!mergedAttribute) {
      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.');
      return null;
    }

    mergedGeometry.setAttribute(name, mergedAttribute);
  } // merge morph attributes


  for (const name in morphAttributes) {
    const numMorphTargets = morphAttributes[name][0].length;
    if (numMorphTargets === 0) break;
    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};
    mergedGeometry.morphAttributes[name] = [];

    for (let i = 0; i < numMorphTargets; ++i) {
      const morphAttributesToMerge = [];

      for (let j = 0; j < morphAttributes[name].length; ++j) {
        morphAttributesToMerge.push(morphAttributes[name][j][i]);
      }

      const mergedMorphAttribute = mergeBufferAttributes(morphAttributesToMerge);

      if (!mergedMorphAttribute) {
        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.');
        return null;
      }

      mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);
    }
  }

  return mergedGeometry;
}
/**
 * @param {Array<BufferAttribute>} attributes
 * @return {BufferAttribute}
 */


function mergeBufferAttributes(attributes) {
  let TypedArray;
  let itemSize;
  let normalized;
  let arrayLength = 0;

  for (let i = 0; i < attributes.length; ++i) {
    const attribute = attributes[i];

    if (attribute.isInterleavedBufferAttribute) {
      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.');
      return null;
    }

    if (TypedArray === undefined) TypedArray = attribute.array.constructor;

    if (TypedArray !== attribute.array.constructor) {
      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.');
      return null;
    }

    if (itemSize === undefined) itemSize = attribute.itemSize;

    if (itemSize !== attribute.itemSize) {
      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.');
      return null;
    }

    if (normalized === undefined) normalized = attribute.normalized;

    if (normalized !== attribute.normalized) {
      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.');
      return null;
    }

    arrayLength += attribute.array.length;
  }

  const array = new TypedArray(arrayLength);
  let offset = 0;

  for (let i = 0; i < attributes.length; ++i) {
    array.set(attributes[i].array, offset);
    offset += attributes[i].array.length;
  }

  return new _three.BufferAttribute(array, itemSize, normalized);
}
/**
 * @param {Array<BufferAttribute>} attributes
 * @return {Array<InterleavedBufferAttribute>}
 */


function interleaveAttributes(attributes) {
  // Interleaves the provided attributes into an InterleavedBuffer and returns
  // a set of InterleavedBufferAttributes for each attribute
  let TypedArray;
  let arrayLength = 0;
  let stride = 0; // calculate the the length and type of the interleavedBuffer

  for (let i = 0, l = attributes.length; i < l; ++i) {
    const attribute = attributes[i];
    if (TypedArray === undefined) TypedArray = attribute.array.constructor;

    if (TypedArray !== attribute.array.constructor) {
      console.error('AttributeBuffers of different types cannot be interleaved');
      return null;
    }

    arrayLength += attribute.array.length;
    stride += attribute.itemSize;
  } // Create the set of buffer attributes


  const interleavedBuffer = new _three.InterleavedBuffer(new TypedArray(arrayLength), stride);
  let offset = 0;
  const res = [];
  const getters = ['getX', 'getY', 'getZ', 'getW'];
  const setters = ['setX', 'setY', 'setZ', 'setW'];

  for (let j = 0, l = attributes.length; j < l; j++) {
    const attribute = attributes[j];
    const itemSize = attribute.itemSize;
    const count = attribute.count;
    const iba = new _three.InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, attribute.normalized);
    res.push(iba);
    offset += itemSize; // Move the data for each attribute into the new interleavedBuffer
    // at the appropriate offset

    for (let c = 0; c < count; c++) {
      for (let k = 0; k < itemSize; k++) {
        iba[setters[k]](c, attribute[getters[k]](c));
      }
    }
  }

  return res;
}
/**
 * @param {Array<BufferGeometry>} geometry
 * @return {number}
 */


function estimateBytesUsed(geometry) {
  // Return the estimated memory used by this geometry in bytes
  // Calculate using itemSize, count, and BYTES_PER_ELEMENT to account
  // for InterleavedBufferAttributes.
  let mem = 0;

  for (const name in geometry.attributes) {
    const attr = geometry.getAttribute(name);
    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;
  }

  const indices = geometry.getIndex();
  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;
  return mem;
}
/**
 * @param {BufferGeometry} geometry
 * @param {number} tolerance
 * @return {BufferGeometry>}
 */


function mergeVertices(geometry, tolerance = 1e-4) {
  tolerance = Math.max(tolerance, Number.EPSILON); // Generate an index buffer if the geometry doesn't have one, or optimize it
  // if it's already available.

  const hashToIndex = {};
  const indices = geometry.getIndex();
  const positions = geometry.getAttribute('position');
  const vertexCount = indices ? indices.count : positions.count; // next value for triangle indices

  let nextIndex = 0; // attributes and new attribute arrays

  const attributeNames = Object.keys(geometry.attributes);
  const attrArrays = {};
  const morphAttrsArrays = {};
  const newIndices = [];
  const getters = ['getX', 'getY', 'getZ', 'getW']; // initialize the arrays

  for (let i = 0, l = attributeNames.length; i < l; i++) {
    const name = attributeNames[i];
    attrArrays[name] = [];
    const morphAttr = geometry.morphAttributes[name];

    if (morphAttr) {
      morphAttrsArrays[name] = new Array(morphAttr.length).fill().map(() => []);
    }
  } // convert the error tolerance to an amount of decimal places to truncate to


  const decimalShift = Math.log10(1 / tolerance);
  const shiftMultiplier = Math.pow(10, decimalShift);

  for (let i = 0; i < vertexCount; i++) {
    const index = indices ? indices.getX(i) : i; // Generate a hash for the vertex attributes at the current index 'i'

    let hash = '';

    for (let j = 0, l = attributeNames.length; j < l; j++) {
      const name = attributeNames[j];
      const attribute = geometry.getAttribute(name);
      const itemSize = attribute.itemSize;

      for (let k = 0; k < itemSize; k++) {
        // double tilde truncates the decimal value
        hash += `${~~(attribute[getters[k]](index) * shiftMultiplier)},`;
      }
    } // Add another reference to the vertex if it's already
    // used by another index


    if (hash in hashToIndex) {
      newIndices.push(hashToIndex[hash]);
    } else {
      // copy data to the new index in the attribute arrays
      for (let j = 0, l = attributeNames.length; j < l; j++) {
        const name = attributeNames[j];
        const attribute = geometry.getAttribute(name);
        const morphAttr = geometry.morphAttributes[name];
        const itemSize = attribute.itemSize;
        const newarray = attrArrays[name];
        const newMorphArrays = morphAttrsArrays[name];

        for (let k = 0; k < itemSize; k++) {
          const getterFunc = getters[k];
          newarray.push(attribute[getterFunc](index));

          if (morphAttr) {
            for (let m = 0, ml = morphAttr.length; m < ml; m++) {
              newMorphArrays[m].push(morphAttr[m][getterFunc](index));
            }
          }
        }
      }

      hashToIndex[hash] = nextIndex;
      newIndices.push(nextIndex);
      nextIndex++;
    }
  } // Generate typed arrays from new attribute arrays and update
  // the attributeBuffers


  const result = geometry.clone();

  for (let i = 0, l = attributeNames.length; i < l; i++) {
    const name = attributeNames[i];
    const oldAttribute = geometry.getAttribute(name);
    const buffer = new oldAttribute.array.constructor(attrArrays[name]);
    const attribute = new _three.BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);
    result.setAttribute(name, attribute); // Update the attribute arrays

    if (name in morphAttrsArrays) {
      for (let j = 0; j < morphAttrsArrays[name].length; j++) {
        const oldMorphAttribute = geometry.morphAttributes[name][j];
        const buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[name][j]);
        const morphAttribute = new _three.BufferAttribute(buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized);
        result.morphAttributes[name][j] = morphAttribute;
      }
    }
  } // indices


  result.setIndex(newIndices);
  return result;
}
/**
 * @param {BufferGeometry} geometry
 * @param {number} drawMode
 * @return {BufferGeometry>}
 */


function toTrianglesDrawMode(geometry, drawMode) {
  if (drawMode === _three.TrianglesDrawMode) {
    console.warn('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.');
    return geometry;
  }

  if (drawMode === _three.TriangleFanDrawMode || drawMode === _three.TriangleStripDrawMode) {
    let index = geometry.getIndex(); // generate index if not present

    if (index === null) {
      const indices = [];
      const position = geometry.getAttribute('position');

      if (position !== undefined) {
        for (let i = 0; i < position.count; i++) {
          indices.push(i);
        }

        geometry.setIndex(indices);
        index = geometry.getIndex();
      } else {
        console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');
        return geometry;
      }
    } //


    const numberOfTriangles = index.count - 2;
    const newIndices = [];

    if (drawMode === _three.TriangleFanDrawMode) {
      // gl.TRIANGLE_FAN
      for (let i = 1; i <= numberOfTriangles; i++) {
        newIndices.push(index.getX(0));
        newIndices.push(index.getX(i));
        newIndices.push(index.getX(i + 1));
      }
    } else {
      // gl.TRIANGLE_STRIP
      for (let i = 0; i < numberOfTriangles; i++) {
        if (i % 2 === 0) {
          newIndices.push(index.getX(i));
          newIndices.push(index.getX(i + 1));
          newIndices.push(index.getX(i + 2));
        } else {
          newIndices.push(index.getX(i + 2));
          newIndices.push(index.getX(i + 1));
          newIndices.push(index.getX(i));
        }
      }
    }

    if (newIndices.length / 3 !== numberOfTriangles) {
      console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');
    } // build final geometry


    const newGeometry = geometry.clone();
    newGeometry.setIndex(newIndices);
    newGeometry.clearGroups();
    return newGeometry;
  } else {
    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);
    return geometry;
  }
}
/**
 * Calculates the morphed attributes of a morphed/skinned BufferGeometry.
 * Helpful for Raytracing or Decals.
 * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.
 * @return {Object} An Object with original position/normal attributes and morphed ones.
 */


function computeMorphedAttributes(object) {
  if (object.geometry.isBufferGeometry !== true) {
    console.error('THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.');
    return null;
  }

  const _vA = new _three.Vector3();

  const _vB = new _three.Vector3();

  const _vC = new _three.Vector3();

  const _tempA = new _three.Vector3();

  const _tempB = new _three.Vector3();

  const _tempC = new _three.Vector3();

  const _morphA = new _three.Vector3();

  const _morphB = new _three.Vector3();

  const _morphC = new _three.Vector3();

  function _calculateMorphedAttributeData(object, material, attribute, morphAttribute, morphTargetsRelative, a, b, c, modifiedAttributeArray) {
    _vA.fromBufferAttribute(attribute, a);

    _vB.fromBufferAttribute(attribute, b);

    _vC.fromBufferAttribute(attribute, c);

    const morphInfluences = object.morphTargetInfluences;

    if (material.morphTargets && morphAttribute && morphInfluences) {
      _morphA.set(0, 0, 0);

      _morphB.set(0, 0, 0);

      _morphC.set(0, 0, 0);

      for (let i = 0, il = morphAttribute.length; i < il; i++) {
        const influence = morphInfluences[i];
        const morph = morphAttribute[i];
        if (influence === 0) continue;

        _tempA.fromBufferAttribute(morph, a);

        _tempB.fromBufferAttribute(morph, b);

        _tempC.fromBufferAttribute(morph, c);

        if (morphTargetsRelative) {
          _morphA.addScaledVector(_tempA, influence);

          _morphB.addScaledVector(_tempB, influence);

          _morphC.addScaledVector(_tempC, influence);
        } else {
          _morphA.addScaledVector(_tempA.sub(_vA), influence);

          _morphB.addScaledVector(_tempB.sub(_vB), influence);

          _morphC.addScaledVector(_tempC.sub(_vC), influence);
        }
      }

      _vA.add(_morphA);

      _vB.add(_morphB);

      _vC.add(_morphC);
    }

    if (object.isSkinnedMesh) {
      object.boneTransform(a, _vA);
      object.boneTransform(b, _vB);
      object.boneTransform(c, _vC);
    }

    modifiedAttributeArray[a * 3 + 0] = _vA.x;
    modifiedAttributeArray[a * 3 + 1] = _vA.y;
    modifiedAttributeArray[a * 3 + 2] = _vA.z;
    modifiedAttributeArray[b * 3 + 0] = _vB.x;
    modifiedAttributeArray[b * 3 + 1] = _vB.y;
    modifiedAttributeArray[b * 3 + 2] = _vB.z;
    modifiedAttributeArray[c * 3 + 0] = _vC.x;
    modifiedAttributeArray[c * 3 + 1] = _vC.y;
    modifiedAttributeArray[c * 3 + 2] = _vC.z;
  }

  const geometry = object.geometry;
  const material = object.material;
  let a, b, c;
  const index = geometry.index;
  const positionAttribute = geometry.attributes.position;
  const morphPosition = geometry.morphAttributes.position;
  const morphTargetsRelative = geometry.morphTargetsRelative;
  const normalAttribute = geometry.attributes.normal;
  const morphNormal = geometry.morphAttributes.position;
  const groups = geometry.groups;
  const drawRange = geometry.drawRange;
  let i, j, il, jl;
  let group, groupMaterial;
  let start, end;
  const modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);
  const modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);

  if (index !== null) {
    // indexed buffer geometry
    if (Array.isArray(material)) {
      for (i = 0, il = groups.length; i < il; i++) {
        group = groups[i];
        groupMaterial = material[group.materialIndex];
        start = Math.max(group.start, drawRange.start);
        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);

        for (j = start, jl = end; j < jl; j += 3) {
          a = index.getX(j);
          b = index.getX(j + 1);
          c = index.getX(j + 2);

          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);

          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);
        }
      }
    } else {
      start = Math.max(0, drawRange.start);
      end = Math.min(index.count, drawRange.start + drawRange.count);

      for (i = start, il = end; i < il; i += 3) {
        a = index.getX(i);
        b = index.getX(i + 1);
        c = index.getX(i + 2);

        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);

        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);
      }
    }
  } else {
    // non-indexed buffer geometry
    if (Array.isArray(material)) {
      for (i = 0, il = groups.length; i < il; i++) {
        group = groups[i];
        groupMaterial = material[group.materialIndex];
        start = Math.max(group.start, drawRange.start);
        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);

        for (j = start, jl = end; j < jl; j += 3) {
          a = j;
          b = j + 1;
          c = j + 2;

          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);

          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);
        }
      }
    } else {
      start = Math.max(0, drawRange.start);
      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);

      for (i = start, il = end; i < il; i += 3) {
        a = i;
        b = i + 1;
        c = i + 2;

        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);

        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);
      }
    }
  }

  const morphedPositionAttribute = new _three.Float32BufferAttribute(modifiedPosition, 3);
  const morphedNormalAttribute = new _three.Float32BufferAttribute(modifiedNormal, 3);
  return {
    positionAttribute: positionAttribute,
    normalAttribute: normalAttribute,
    morphedPositionAttribute: morphedPositionAttribute,
    morphedNormalAttribute: morphedNormalAttribute
  };
}

},{"three":10}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IFCLoader = void 0;

var _webIfcApi = require("./ifc/web-ifc-api.js");

var _three = require("three");

var _BufferGeometryUtils = require("./BufferGeometryUtils.js");

const IdAttrName = 'expressID';

const merge = (geoms, createGroups = false) => {
  return (0, _BufferGeometryUtils.mergeBufferGeometries)(geoms, createGroups);
};

const newFloatAttr = (data, size) => {
  return new _three.BufferAttribute(new Float32Array(data), size);
};

const newIntAttr = (data, size) => {
  return new _three.BufferAttribute(new Uint32Array(data), size);
};

const DEFAULT = 'default';
const PropsNames = {
  aggregates: {
    name: _webIfcApi.IFCRELAGGREGATES,
    relating: 'RelatingObject',
    related: 'RelatedObjects',
    key: 'children'
  },
  spatial: {
    name: _webIfcApi.IFCRELCONTAINEDINSPATIALSTRUCTURE,
    relating: 'RelatingStructure',
    related: 'RelatedElements',
    key: 'children'
  },
  psets: {
    name: _webIfcApi.IFCRELDEFINESBYPROPERTIES,
    relating: 'RelatingPropertyDefinition',
    related: 'RelatedObjects',
    key: 'hasPsets'
  },
  materials: {
    name: _webIfcApi.IFCRELASSOCIATESMATERIAL,
    relating: 'RelatingMaterial',
    related: 'RelatedObjects',
    key: 'hasMaterial'
  },
  type: {
    name: _webIfcApi.IFCRELDEFINESBYTYPE,
    relating: 'RelatingType',
    related: 'RelatedObjects',
    key: 'hasType'
  }
};

class IFCParser {
  constructor(state, BVH) {
    this.state = state;
    this.BVH = BVH;
    this.loadedModels = 0;
    this.currentWebIfcID = -1;
    this.currentModelID = -1;
  }

  async parse(buffer) {
    if (this.state.api.wasmModule === undefined) await this.state.api.Init();
    this.newIfcModel(buffer);
    this.loadedModels++;
    return this.loadAllGeometry();
  }

  newIfcModel(buffer) {
    const data = new Uint8Array(buffer);
    this.currentWebIfcID = this.state.api.OpenModel(data, this.state.webIfcSettings);
    this.currentModelID = this.state.useJSON ? this.loadedModels : this.currentWebIfcID;
    this.state.models[this.currentModelID] = {
      modelID: this.currentModelID,
      mesh: {},
      items: {},
      types: {},
      jsonData: {}
    };
  }

  loadAllGeometry() {
    this.saveAllPlacedGeometriesByMaterial();
    return this.generateAllGeometriesByMaterial();
  }

  generateAllGeometriesByMaterial() {
    const {
      geometry,
      materials
    } = this.getGeometryAndMaterials();
    this.BVH.applyThreeMeshBVH(geometry);
    const mesh = new _three.Mesh(geometry, materials);
    mesh.modelID = this.currentModelID;
    this.state.models[this.currentModelID].mesh = mesh;
    return mesh;
  }

  getGeometryAndMaterials() {
    const items = this.state.models[this.currentModelID].items;
    const mergedByMaterial = [];
    const materials = [];

    for (const materialID in items) {
      materials.push(items[materialID].material);
      const geometries = Object.values(items[materialID].geometries);
      mergedByMaterial.push(merge(geometries));
    }

    const geometry = merge(mergedByMaterial, true);
    return {
      geometry,
      materials
    };
  }

  saveAllPlacedGeometriesByMaterial() {
    const flatMeshes = this.state.api.LoadAllGeometry(this.currentWebIfcID);

    for (let i = 0; i < flatMeshes.size(); i++) {
      const flatMesh = flatMeshes.get(i);
      const placedGeom = flatMesh.geometries;

      for (let j = 0; j < placedGeom.size(); j++) {
        this.savePlacedGeometry(placedGeom.get(j), flatMesh.expressID);
      }
    }
  }

  savePlacedGeometry(placedGeometry, id) {
    const geometry = this.getBufferGeometry(placedGeometry);
    geometry.computeVertexNormals();
    const matrix = this.getMeshMatrix(placedGeometry.flatTransformation);
    geometry.applyMatrix4(matrix);
    this.saveGeometryByMaterial(geometry, placedGeometry, id);
  }

  getBufferGeometry(placed) {
    const geometry = this.state.api.GetGeometry(this.currentWebIfcID, placed.geometryExpressID);
    const vertexData = this.getVertices(geometry);
    const indices = this.getIndices(geometry);
    const {
      vertices,
      normals
    } = this.extractVertexData(vertexData);
    return this.ifcGeomToBufferGeom(vertices, normals, indices);
  }

  getVertices(geometry) {
    const vData = geometry.GetVertexData();
    const vDataSize = geometry.GetVertexDataSize();
    return this.state.api.GetVertexArray(vData, vDataSize);
  }

  getIndices(geometry) {
    const iData = geometry.GetIndexData();
    const iDataSize = geometry.GetIndexDataSize();
    return this.state.api.GetIndexArray(iData, iDataSize);
  }

  getMeshMatrix(matrix) {
    const mat = new _three.Matrix4();
    mat.fromArray(matrix);
    return mat;
  }

  ifcGeomToBufferGeom(vertices, normals, indexData) {
    const geometry = new _three.BufferGeometry();
    geometry.setAttribute('position', newFloatAttr(vertices, 3));
    geometry.setAttribute('normal', newFloatAttr(normals, 3));
    geometry.setIndex(new _three.BufferAttribute(indexData, 1));
    return geometry;
  }

  extractVertexData(vertexData) {
    const vertices = [];
    const normals = [];
    let isNormalData = false;

    for (let i = 0; i < vertexData.length; i++) {
      isNormalData ? normals.push(vertexData[i]) : vertices.push(vertexData[i]);
      if ((i + 1) % 3 == 0) isNormalData = !isNormalData;
    }

    return {
      vertices,
      normals
    };
  }

  saveGeometryByMaterial(geom, placedGeom, id) {
    const color = placedGeom.color;
    const colorID = `${color.x}${color.y}${color.z}${color.w}`;
    this.storeGeometryAttribute(id, geom);
    this.createMaterial(colorID, color);
    const item = this.state.models[this.currentModelID].items[colorID];
    const currentGeom = item.geometries[id];
    if (!currentGeom) return item.geometries[id] = geom;
    const merged = merge([currentGeom, geom]);
    item.geometries[id] = merged;
  }

  storeGeometryAttribute(id, geometry) {
    const size = geometry.attributes.position.count;
    const idAttribute = new Array(size).fill(id);
    geometry.setAttribute(IdAttrName, newIntAttr(idAttribute, 1));
  }

  createMaterial(colorID, color) {
    const items = this.state.models[this.currentModelID].items;
    if (items[colorID]) return;
    const col = new _three.Color(color.x, color.y, color.z);
    const newMaterial = new _three.MeshLambertMaterial({
      color: col,
      side: _three.DoubleSide
    });
    newMaterial.transparent = color.w !== 1;
    if (newMaterial.transparent) newMaterial.opacity = color.w;
    items[colorID] = {
      material: newMaterial,
      geometries: {}
    };
  }

}

class SubsetManager {
  constructor(state, BVH) {
    this.selected = {};
    this.state = state;
    this.BVH = BVH;
  }

  getSubset(modelID, material) {
    const currentMat = this.matIDNoConfig(modelID, material);
    if (!this.selected[currentMat]) return null;
    return this.selected[currentMat].mesh;
  }

  removeSubset(modelID, parent, material) {
    const currentMat = this.matIDNoConfig(modelID, material);
    if (!this.selected[currentMat]) return;
    if (parent) parent.remove(this.selected[currentMat].mesh);
    delete this.selected[currentMat];
  }

  createSubset(config) {
    if (!this.isConfigValid(config)) return;
    if (this.isPreviousSelection(config)) return;
    if (this.isEasySelection(config)) return this.addToPreviousSelection(config);
    this.updatePreviousSelection(config.scene, config);
    return this.createSelectionInScene(config);
  }

  createSelectionInScene(config) {
    const filtered = this.filter(config);
    const {
      geomsByMaterial,
      materials
    } = this.getGeomAndMat(filtered);
    const isDefMaterial = this.isDefaultMat(config);
    const geometry = this.getMergedGeometry(geomsByMaterial, isDefMaterial);
    const mats = isDefMaterial ? materials : config.material;
    this.BVH.applyThreeMeshBVH(geometry);
    const mesh = new _three.Mesh(geometry, mats);
    this.selected[this.matID(config)].mesh = mesh;
    mesh.modelID = config.modelID;
    config.scene.add(mesh);
    return mesh;
  }

  getMergedGeometry(geomsByMaterial, hasDefaultMaterial) {
    return geomsByMaterial.length > 0 ? merge(geomsByMaterial, hasDefaultMaterial) : new _three.BufferGeometry();
  }

  isConfigValid(config) {
    return this.isValid(config.scene) && this.isValid(config.modelID) && this.isValid(config.ids) && this.isValid(config.removePrevious);
  }

  isValid(item) {
    return item != undefined && item != null;
  }

  getGeomAndMat(filtered) {
    const geomsByMaterial = [];
    const materials = [];

    for (const matID in filtered) {
      const geoms = Object.values(filtered[matID].geometries);
      if (!geoms.length) continue;
      materials.push(filtered[matID].material);
      if (geoms.length > 1) geomsByMaterial.push(merge(geoms));else geomsByMaterial.push(...geoms);
    }

    return {
      geomsByMaterial,
      materials
    };
  }

  updatePreviousSelection(parent, config) {
    const previous = this.selected[this.matID(config)];
    if (!previous) return this.newSelectionGroup(config);
    parent.remove(previous.mesh);
    config.removePrevious ? previous.ids = new Set(config.ids) : config.ids.forEach(id => previous.ids.add(id));
  }

  newSelectionGroup(config) {
    this.selected[this.matID(config)] = {
      ids: new Set(config.ids),
      mesh: {}
    };
  }

  isPreviousSelection(config) {
    if (!this.selected[this.matID(config)]) return false;
    if (this.containsIds(config)) return true;
    const previousIds = this.selected[this.matID(config)].ids;
    return JSON.stringify(config.ids) === JSON.stringify(previousIds);
  }

  containsIds(config) {
    const newIds = config.ids;
    const previous = Array.from(this.selected[this.matID(config)].ids);
    return newIds.every((i => v => i = previous.indexOf(v, i) + 1)(0));
  }

  addToPreviousSelection(config) {
    const previous = this.selected[this.matID(config)];
    const filtered = this.filter(config);
    const geometries = Object.values(filtered).map(i => Object.values(i.geometries)).flat();
    const previousGeom = previous.mesh.geometry;
    previous.mesh.geometry = merge([previousGeom, ...geometries]);
    config.ids.forEach(id => previous.ids.add(id));
  }

  filter(config) {
    const ids = this.selected[this.matID(config)].ids;
    const items = this.state.models[config.modelID].items;
    const filtered = {};

    for (const matID in items) {
      filtered[matID] = {
        material: items[matID].material,
        geometries: this.filterGeometries(ids, items[matID].geometries)
      };
    }

    return filtered;
  }

  filterGeometries(selectedIDs, geometries) {
    const ids = Array.from(selectedIDs);
    return Object.keys(geometries).filter(key => ids.includes(parseInt(key, 10))).reduce((obj, key) => {
      return { ...obj,
        [key]: geometries[key]
      };
    }, {});
  }

  isEasySelection(config) {
    const matID = this.matID(config);
    if (!config.removePrevious && !this.isDefaultMat(config) && this.selected[matID]) return true;
  }

  isDefaultMat(config) {
    return this.matIDNoConfig(config.modelID) === this.matID(config);
  }

  matID(config) {
    let name;
    if (!config.material) name = DEFAULT;else name = config.material.uuid || DEFAULT;
    return name.concat(' - ').concat(config.modelID.toString());
  }

  matIDNoConfig(modelID, material) {
    let name = DEFAULT;
    if (material) name = material.uuid;
    return name.concat(' - ').concat(modelID.toString());
  }

}

const IfcElements = {
  103090709: 'IFCPROJECT',
  4097777520: 'IFCSITE',
  4031249490: 'IFCBUILDING',
  3124254112: 'IFCBUILDINGSTOREY',
  3856911033: 'IFCSPACE',
  1674181508: 'IFCANNOTATION',
  25142252: 'IFCCONTROLLER',
  32344328: 'IFCBOILER',
  76236018: 'IFCLAMP',
  90941305: 'IFCPUMP',
  177149247: 'IFCAIRTERMINALBOX',
  182646315: 'IFCFLOWINSTRUMENT',
  263784265: 'IFCFURNISHINGELEMENT',
  264262732: 'IFCELECTRICGENERATOR',
  277319702: 'IFCAUDIOVISUALAPPLIANCE',
  310824031: 'IFCPIPEFITTING',
  331165859: 'IFCSTAIR',
  342316401: 'IFCDUCTFITTING',
  377706215: 'IFCMECHANICALFASTENER',
  395920057: 'IFCDOOR',
  402227799: 'IFCELECTRICMOTOR',
  413509423: 'IFCSYSTEMFURNITUREELEMENT',
  484807127: 'IFCEVAPORATOR',
  486154966: 'IFCWINDOWSTANDARDCASE',
  629592764: 'IFCLIGHTFIXTURE',
  630975310: 'IFCUNITARYCONTROLELEMENT',
  635142910: 'IFCCABLECARRIERFITTING',
  639361253: 'IFCCOIL',
  647756555: 'IFCFASTENER',
  707683696: 'IFCFLOWSTORAGEDEVICE',
  738039164: 'IFCPROTECTIVEDEVICE',
  753842376: 'IFCBEAM',
  812556717: 'IFCTANK',
  819412036: 'IFCFILTER',
  843113511: 'IFCCOLUMN',
  862014818: 'IFCELECTRICDISTRIBUTIONBOARD',
  900683007: 'IFCFOOTING',
  905975707: 'IFCCOLUMNSTANDARDCASE',
  926996030: 'IFCVOIDINGFEATURE',
  979691226: 'IFCREINFORCINGBAR',
  987401354: 'IFCFLOWSEGMENT',
  1003880860: 'IFCELECTRICTIMECONTROL',
  1051757585: 'IFCCABLEFITTING',
  1052013943: 'IFCDISTRIBUTIONCHAMBERELEMENT',
  1062813311: 'IFCDISTRIBUTIONCONTROLELEMENT',
  1073191201: 'IFCMEMBER',
  1095909175: 'IFCBUILDINGELEMENTPROXY',
  1156407060: 'IFCPLATESTANDARDCASE',
  1162798199: 'IFCSWITCHINGDEVICE',
  1329646415: 'IFCSHADINGDEVICE',
  1335981549: 'IFCDISCRETEACCESSORY',
  1360408905: 'IFCDUCTSILENCER',
  1404847402: 'IFCSTACKTERMINAL',
  1426591983: 'IFCFIRESUPPRESSIONTERMINAL',
  1437502449: 'IFCMEDICALDEVICE',
  1509553395: 'IFCFURNITURE',
  1529196076: 'IFCSLAB',
  1620046519: 'IFCTRANSPORTELEMENT',
  1634111441: 'IFCAIRTERMINAL',
  1658829314: 'IFCENERGYCONVERSIONDEVICE',
  1677625105: 'IFCCIVILELEMENT',
  1687234759: 'IFCPILE',
  1904799276: 'IFCELECTRICAPPLIANCE',
  1911478936: 'IFCMEMBERSTANDARDCASE',
  1945004755: 'IFCDISTRIBUTIONELEMENT',
  1973544240: 'IFCCOVERING',
  1999602285: 'IFCSPACEHEATER',
  2016517767: 'IFCROOF',
  2056796094: 'IFCAIRTOAIRHEATRECOVERY',
  2058353004: 'IFCFLOWCONTROLLER',
  2068733104: 'IFCHUMIDIFIER',
  2176052936: 'IFCJUNCTIONBOX',
  2188021234: 'IFCFLOWMETER',
  2223149337: 'IFCFLOWTERMINAL',
  2262370178: 'IFCRAILING',
  2272882330: 'IFCCONDENSER',
  2295281155: 'IFCPROTECTIVEDEVICETRIPPINGUNIT',
  2320036040: 'IFCREINFORCINGMESH',
  2347447852: 'IFCTENDONANCHOR',
  2391383451: 'IFCVIBRATIONISOLATOR',
  2391406946: 'IFCWALL',
  2474470126: 'IFCMOTORCONNECTION',
  2769231204: 'IFCVIRTUALELEMENT',
  2814081492: 'IFCENGINE',
  2906023776: 'IFCBEAMSTANDARDCASE',
  2938176219: 'IFCBURNER',
  2979338954: 'IFCBUILDINGELEMENTPART',
  3024970846: 'IFCRAMP',
  3026737570: 'IFCTUBEBUNDLE',
  3027962421: 'IFCSLABSTANDARDCASE',
  3040386961: 'IFCDISTRIBUTIONFLOWELEMENT',
  3053780830: 'IFCSANITARYTERMINAL',
  3079942009: 'IFCOPENINGSTANDARDCASE',
  3087945054: 'IFCALARM',
  3101698114: 'IFCSURFACEFEATURE',
  3127900445: 'IFCSLABELEMENTEDCASE',
  3132237377: 'IFCFLOWMOVINGDEVICE',
  3171933400: 'IFCPLATE',
  3221913625: 'IFCCOMMUNICATIONSAPPLIANCE',
  3242481149: 'IFCDOORSTANDARDCASE',
  3283111854: 'IFCRAMPFLIGHT',
  3296154744: 'IFCCHIMNEY',
  3304561284: 'IFCWINDOW',
  3310460725: 'IFCELECTRICFLOWSTORAGEDEVICE',
  3319311131: 'IFCHEATEXCHANGER',
  3415622556: 'IFCFAN',
  3420628829: 'IFCSOLARDEVICE',
  3493046030: 'IFCGEOGRAPHICELEMENT',
  3495092785: 'IFCCURTAINWALL',
  3508470533: 'IFCFLOWTREATMENTDEVICE',
  3512223829: 'IFCWALLSTANDARDCASE',
  3518393246: 'IFCDUCTSEGMENT',
  3571504051: 'IFCCOMPRESSOR',
  3588315303: 'IFCOPENINGELEMENT',
  3612865200: 'IFCPIPESEGMENT',
  3640358203: 'IFCCOOLINGTOWER',
  3651124850: 'IFCPROJECTIONELEMENT',
  3694346114: 'IFCOUTLET',
  3747195512: 'IFCEVAPORATIVECOOLER',
  3758799889: 'IFCCABLECARRIERSEGMENT',
  3824725483: 'IFCTENDON',
  3825984169: 'IFCTRANSFORMER',
  3902619387: 'IFCCHILLER',
  4074379575: 'IFCDAMPER',
  4086658281: 'IFCSENSOR',
  4123344466: 'IFCELEMENTASSEMBLY',
  4136498852: 'IFCCOOLEDBEAM',
  4156078855: 'IFCWALLELEMENTEDCASE',
  4175244083: 'IFCINTERCEPTOR',
  4207607924: 'IFCVALVE',
  4217484030: 'IFCCABLESEGMENT',
  4237592921: 'IFCWASTETERMINAL',
  4252922144: 'IFCSTAIRFLIGHT',
  4278956645: 'IFCFLOWFITTING',
  4288193352: 'IFCACTUATOR',
  4292641817: 'IFCUNITARYEQUIPMENT',
  3009204131: 'IFCGRID'
};
const IfcTypesMap = {
  3821786052: 'IFCACTIONREQUEST',
  2296667514: 'IFCACTOR',
  3630933823: 'IFCACTORROLE',
  4288193352: 'IFCACTUATOR',
  2874132201: 'IFCACTUATORTYPE',
  618182010: 'IFCADDRESS',
  1635779807: 'IFCADVANCEDBREP',
  2603310189: 'IFCADVANCEDBREPWITHVOIDS',
  3406155212: 'IFCADVANCEDFACE',
  1634111441: 'IFCAIRTERMINAL',
  177149247: 'IFCAIRTERMINALBOX',
  1411407467: 'IFCAIRTERMINALBOXTYPE',
  3352864051: 'IFCAIRTERMINALTYPE',
  2056796094: 'IFCAIRTOAIRHEATRECOVERY',
  1871374353: 'IFCAIRTOAIRHEATRECOVERYTYPE',
  3087945054: 'IFCALARM',
  3001207471: 'IFCALARMTYPE',
  325726236: 'IFCALIGNMENT',
  749761778: 'IFCALIGNMENT2DHORIZONTAL',
  3199563722: 'IFCALIGNMENT2DHORIZONTALSEGMENT',
  2483840362: 'IFCALIGNMENT2DSEGMENT',
  3379348081: 'IFCALIGNMENT2DVERSEGCIRCULARARC',
  3239324667: 'IFCALIGNMENT2DVERSEGLINE',
  4263986512: 'IFCALIGNMENT2DVERSEGPARABOLICARC',
  53199957: 'IFCALIGNMENT2DVERTICAL',
  2029264950: 'IFCALIGNMENT2DVERTICALSEGMENT',
  3512275521: 'IFCALIGNMENTCURVE',
  1674181508: 'IFCANNOTATION',
  669184980: 'IFCANNOTATIONFILLAREA',
  639542469: 'IFCAPPLICATION',
  411424972: 'IFCAPPLIEDVALUE',
  130549933: 'IFCAPPROVAL',
  3869604511: 'IFCAPPROVALRELATIONSHIP',
  3798115385: 'IFCARBITRARYCLOSEDPROFILEDEF',
  1310608509: 'IFCARBITRARYOPENPROFILEDEF',
  2705031697: 'IFCARBITRARYPROFILEDEFWITHVOIDS',
  3460190687: 'IFCASSET',
  3207858831: 'IFCASYMMETRICISHAPEPROFILEDEF',
  277319702: 'IFCAUDIOVISUALAPPLIANCE',
  1532957894: 'IFCAUDIOVISUALAPPLIANCETYPE',
  4261334040: 'IFCAXIS1PLACEMENT',
  3125803723: 'IFCAXIS2PLACEMENT2D',
  2740243338: 'IFCAXIS2PLACEMENT3D',
  1967976161: 'IFCBSPLINECURVE',
  2461110595: 'IFCBSPLINECURVEWITHKNOTS',
  2887950389: 'IFCBSPLINESURFACE',
  167062518: 'IFCBSPLINESURFACEWITHKNOTS',
  753842376: 'IFCBEAM',
  2906023776: 'IFCBEAMSTANDARDCASE',
  819618141: 'IFCBEAMTYPE',
  4196446775: 'IFCBEARING',
  3649138523: 'IFCBEARINGTYPE',
  616511568: 'IFCBLOBTEXTURE',
  1334484129: 'IFCBLOCK',
  32344328: 'IFCBOILER',
  231477066: 'IFCBOILERTYPE',
  3649129432: 'IFCBOOLEANCLIPPINGRESULT',
  2736907675: 'IFCBOOLEANRESULT',
  4037036970: 'IFCBOUNDARYCONDITION',
  1136057603: 'IFCBOUNDARYCURVE',
  1560379544: 'IFCBOUNDARYEDGECONDITION',
  3367102660: 'IFCBOUNDARYFACECONDITION',
  1387855156: 'IFCBOUNDARYNODECONDITION',
  2069777674: 'IFCBOUNDARYNODECONDITIONWARPING',
  1260505505: 'IFCBOUNDEDCURVE',
  4182860854: 'IFCBOUNDEDSURFACE',
  2581212453: 'IFCBOUNDINGBOX',
  2713105998: 'IFCBOXEDHALFSPACE',
  644574406: 'IFCBRIDGE',
  963979645: 'IFCBRIDGEPART',
  4031249490: 'IFCBUILDING',
  3299480353: 'IFCBUILDINGELEMENT',
  2979338954: 'IFCBUILDINGELEMENTPART',
  39481116: 'IFCBUILDINGELEMENTPARTTYPE',
  1095909175: 'IFCBUILDINGELEMENTPROXY',
  1909888760: 'IFCBUILDINGELEMENTPROXYTYPE',
  1950629157: 'IFCBUILDINGELEMENTTYPE',
  3124254112: 'IFCBUILDINGSTOREY',
  1177604601: 'IFCBUILDINGSYSTEM',
  2938176219: 'IFCBURNER',
  2188180465: 'IFCBURNERTYPE',
  2898889636: 'IFCCSHAPEPROFILEDEF',
  635142910: 'IFCCABLECARRIERFITTING',
  395041908: 'IFCCABLECARRIERFITTINGTYPE',
  3758799889: 'IFCCABLECARRIERSEGMENT',
  3293546465: 'IFCCABLECARRIERSEGMENTTYPE',
  1051757585: 'IFCCABLEFITTING',
  2674252688: 'IFCCABLEFITTINGTYPE',
  4217484030: 'IFCCABLESEGMENT',
  1285652485: 'IFCCABLESEGMENTTYPE',
  3999819293: 'IFCCAISSONFOUNDATION',
  3203706013: 'IFCCAISSONFOUNDATIONTYPE',
  1123145078: 'IFCCARTESIANPOINT',
  574549367: 'IFCCARTESIANPOINTLIST',
  1675464909: 'IFCCARTESIANPOINTLIST2D',
  2059837836: 'IFCCARTESIANPOINTLIST3D',
  59481748: 'IFCCARTESIANTRANSFORMATIONOPERATOR',
  3749851601: 'IFCCARTESIANTRANSFORMATIONOPERATOR2D',
  3486308946: 'IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM',
  3331915920: 'IFCCARTESIANTRANSFORMATIONOPERATOR3D',
  1416205885: 'IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM',
  3150382593: 'IFCCENTERLINEPROFILEDEF',
  3902619387: 'IFCCHILLER',
  2951183804: 'IFCCHILLERTYPE',
  3296154744: 'IFCCHIMNEY',
  2197970202: 'IFCCHIMNEYTYPE',
  2611217952: 'IFCCIRCLE',
  2937912522: 'IFCCIRCLEHOLLOWPROFILEDEF',
  1383045692: 'IFCCIRCLEPROFILEDEF',
  1062206242: 'IFCCIRCULARARCSEGMENT2D',
  1677625105: 'IFCCIVILELEMENT',
  3893394355: 'IFCCIVILELEMENTTYPE',
  747523909: 'IFCCLASSIFICATION',
  647927063: 'IFCCLASSIFICATIONREFERENCE',
  2205249479: 'IFCCLOSEDSHELL',
  639361253: 'IFCCOIL',
  2301859152: 'IFCCOILTYPE',
  776857604: 'IFCCOLOURRGB',
  3285139300: 'IFCCOLOURRGBLIST',
  3264961684: 'IFCCOLOURSPECIFICATION',
  843113511: 'IFCCOLUMN',
  905975707: 'IFCCOLUMNSTANDARDCASE',
  300633059: 'IFCCOLUMNTYPE',
  3221913625: 'IFCCOMMUNICATIONSAPPLIANCE',
  400855858: 'IFCCOMMUNICATIONSAPPLIANCETYPE',
  2542286263: 'IFCCOMPLEXPROPERTY',
  3875453745: 'IFCCOMPLEXPROPERTYTEMPLATE',
  3732776249: 'IFCCOMPOSITECURVE',
  15328376: 'IFCCOMPOSITECURVEONSURFACE',
  2485617015: 'IFCCOMPOSITECURVESEGMENT',
  1485152156: 'IFCCOMPOSITEPROFILEDEF',
  3571504051: 'IFCCOMPRESSOR',
  3850581409: 'IFCCOMPRESSORTYPE',
  2272882330: 'IFCCONDENSER',
  2816379211: 'IFCCONDENSERTYPE',
  2510884976: 'IFCCONIC',
  370225590: 'IFCCONNECTEDFACESET',
  1981873012: 'IFCCONNECTIONCURVEGEOMETRY',
  2859738748: 'IFCCONNECTIONGEOMETRY',
  45288368: 'IFCCONNECTIONPOINTECCENTRICITY',
  2614616156: 'IFCCONNECTIONPOINTGEOMETRY',
  2732653382: 'IFCCONNECTIONSURFACEGEOMETRY',
  775493141: 'IFCCONNECTIONVOLUMEGEOMETRY',
  1959218052: 'IFCCONSTRAINT',
  3898045240: 'IFCCONSTRUCTIONEQUIPMENTRESOURCE',
  2185764099: 'IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE',
  1060000209: 'IFCCONSTRUCTIONMATERIALRESOURCE',
  4105962743: 'IFCCONSTRUCTIONMATERIALRESOURCETYPE',
  488727124: 'IFCCONSTRUCTIONPRODUCTRESOURCE',
  1525564444: 'IFCCONSTRUCTIONPRODUCTRESOURCETYPE',
  2559216714: 'IFCCONSTRUCTIONRESOURCE',
  2574617495: 'IFCCONSTRUCTIONRESOURCETYPE',
  3419103109: 'IFCCONTEXT',
  3050246964: 'IFCCONTEXTDEPENDENTUNIT',
  3293443760: 'IFCCONTROL',
  25142252: 'IFCCONTROLLER',
  578613899: 'IFCCONTROLLERTYPE',
  2889183280: 'IFCCONVERSIONBASEDUNIT',
  2713554722: 'IFCCONVERSIONBASEDUNITWITHOFFSET',
  4136498852: 'IFCCOOLEDBEAM',
  335055490: 'IFCCOOLEDBEAMTYPE',
  3640358203: 'IFCCOOLINGTOWER',
  2954562838: 'IFCCOOLINGTOWERTYPE',
  1785450214: 'IFCCOORDINATEOPERATION',
  1466758467: 'IFCCOORDINATEREFERENCESYSTEM',
  3895139033: 'IFCCOSTITEM',
  1419761937: 'IFCCOSTSCHEDULE',
  602808272: 'IFCCOSTVALUE',
  1973544240: 'IFCCOVERING',
  1916426348: 'IFCCOVERINGTYPE',
  3295246426: 'IFCCREWRESOURCE',
  1815067380: 'IFCCREWRESOURCETYPE',
  2506170314: 'IFCCSGPRIMITIVE3D',
  2147822146: 'IFCCSGSOLID',
  539742890: 'IFCCURRENCYRELATIONSHIP',
  3495092785: 'IFCCURTAINWALL',
  1457835157: 'IFCCURTAINWALLTYPE',
  2601014836: 'IFCCURVE',
  2827736869: 'IFCCURVEBOUNDEDPLANE',
  2629017746: 'IFCCURVEBOUNDEDSURFACE',
  1186437898: 'IFCCURVESEGMENT2D',
  3800577675: 'IFCCURVESTYLE',
  1105321065: 'IFCCURVESTYLEFONT',
  2367409068: 'IFCCURVESTYLEFONTANDSCALING',
  3510044353: 'IFCCURVESTYLEFONTPATTERN',
  1213902940: 'IFCCYLINDRICALSURFACE',
  4074379575: 'IFCDAMPER',
  3961806047: 'IFCDAMPERTYPE',
  3426335179: 'IFCDEEPFOUNDATION',
  1306400036: 'IFCDEEPFOUNDATIONTYPE',
  3632507154: 'IFCDERIVEDPROFILEDEF',
  1765591967: 'IFCDERIVEDUNIT',
  1045800335: 'IFCDERIVEDUNITELEMENT',
  2949456006: 'IFCDIMENSIONALEXPONENTS',
  32440307: 'IFCDIRECTION',
  1335981549: 'IFCDISCRETEACCESSORY',
  2635815018: 'IFCDISCRETEACCESSORYTYPE',
  1945343521: 'IFCDISTANCEEXPRESSION',
  1052013943: 'IFCDISTRIBUTIONCHAMBERELEMENT',
  1599208980: 'IFCDISTRIBUTIONCHAMBERELEMENTTYPE',
  562808652: 'IFCDISTRIBUTIONCIRCUIT',
  1062813311: 'IFCDISTRIBUTIONCONTROLELEMENT',
  2063403501: 'IFCDISTRIBUTIONCONTROLELEMENTTYPE',
  1945004755: 'IFCDISTRIBUTIONELEMENT',
  3256556792: 'IFCDISTRIBUTIONELEMENTTYPE',
  3040386961: 'IFCDISTRIBUTIONFLOWELEMENT',
  3849074793: 'IFCDISTRIBUTIONFLOWELEMENTTYPE',
  3041715199: 'IFCDISTRIBUTIONPORT',
  3205830791: 'IFCDISTRIBUTIONSYSTEM',
  1154170062: 'IFCDOCUMENTINFORMATION',
  770865208: 'IFCDOCUMENTINFORMATIONRELATIONSHIP',
  3732053477: 'IFCDOCUMENTREFERENCE',
  395920057: 'IFCDOOR',
  2963535650: 'IFCDOORLININGPROPERTIES',
  1714330368: 'IFCDOORPANELPROPERTIES',
  3242481149: 'IFCDOORSTANDARDCASE',
  526551008: 'IFCDOORSTYLE',
  2323601079: 'IFCDOORTYPE',
  445594917: 'IFCDRAUGHTINGPREDEFINEDCOLOUR',
  4006246654: 'IFCDRAUGHTINGPREDEFINEDCURVEFONT',
  342316401: 'IFCDUCTFITTING',
  869906466: 'IFCDUCTFITTINGTYPE',
  3518393246: 'IFCDUCTSEGMENT',
  3760055223: 'IFCDUCTSEGMENTTYPE',
  1360408905: 'IFCDUCTSILENCER',
  2030761528: 'IFCDUCTSILENCERTYPE',
  3900360178: 'IFCEDGE',
  476780140: 'IFCEDGECURVE',
  1472233963: 'IFCEDGELOOP',
  1904799276: 'IFCELECTRICAPPLIANCE',
  663422040: 'IFCELECTRICAPPLIANCETYPE',
  862014818: 'IFCELECTRICDISTRIBUTIONBOARD',
  2417008758: 'IFCELECTRICDISTRIBUTIONBOARDTYPE',
  3310460725: 'IFCELECTRICFLOWSTORAGEDEVICE',
  3277789161: 'IFCELECTRICFLOWSTORAGEDEVICETYPE',
  264262732: 'IFCELECTRICGENERATOR',
  1534661035: 'IFCELECTRICGENERATORTYPE',
  402227799: 'IFCELECTRICMOTOR',
  1217240411: 'IFCELECTRICMOTORTYPE',
  1003880860: 'IFCELECTRICTIMECONTROL',
  712377611: 'IFCELECTRICTIMECONTROLTYPE',
  1758889154: 'IFCELEMENT',
  4123344466: 'IFCELEMENTASSEMBLY',
  2397081782: 'IFCELEMENTASSEMBLYTYPE',
  1623761950: 'IFCELEMENTCOMPONENT',
  2590856083: 'IFCELEMENTCOMPONENTTYPE',
  1883228015: 'IFCELEMENTQUANTITY',
  339256511: 'IFCELEMENTTYPE',
  2777663545: 'IFCELEMENTARYSURFACE',
  1704287377: 'IFCELLIPSE',
  2835456948: 'IFCELLIPSEPROFILEDEF',
  1658829314: 'IFCENERGYCONVERSIONDEVICE',
  2107101300: 'IFCENERGYCONVERSIONDEVICETYPE',
  2814081492: 'IFCENGINE',
  132023988: 'IFCENGINETYPE',
  3747195512: 'IFCEVAPORATIVECOOLER',
  3174744832: 'IFCEVAPORATIVECOOLERTYPE',
  484807127: 'IFCEVAPORATOR',
  3390157468: 'IFCEVAPORATORTYPE',
  4148101412: 'IFCEVENT',
  211053100: 'IFCEVENTTIME',
  4024345920: 'IFCEVENTTYPE',
  297599258: 'IFCEXTENDEDPROPERTIES',
  4294318154: 'IFCEXTERNALINFORMATION',
  3200245327: 'IFCEXTERNALREFERENCE',
  1437805879: 'IFCEXTERNALREFERENCERELATIONSHIP',
  1209101575: 'IFCEXTERNALSPATIALELEMENT',
  2853485674: 'IFCEXTERNALSPATIALSTRUCTUREELEMENT',
  2242383968: 'IFCEXTERNALLYDEFINEDHATCHSTYLE',
  1040185647: 'IFCEXTERNALLYDEFINEDSURFACESTYLE',
  3548104201: 'IFCEXTERNALLYDEFINEDTEXTFONT',
  477187591: 'IFCEXTRUDEDAREASOLID',
  2804161546: 'IFCEXTRUDEDAREASOLIDTAPERED',
  2556980723: 'IFCFACE',
  2047409740: 'IFCFACEBASEDSURFACEMODEL',
  1809719519: 'IFCFACEBOUND',
  803316827: 'IFCFACEOUTERBOUND',
  3008276851: 'IFCFACESURFACE',
  807026263: 'IFCFACETEDBREP',
  3737207727: 'IFCFACETEDBREPWITHVOIDS',
  24185140: 'IFCFACILITY',
  1310830890: 'IFCFACILITYPART',
  4219587988: 'IFCFAILURECONNECTIONCONDITION',
  3415622556: 'IFCFAN',
  346874300: 'IFCFANTYPE',
  647756555: 'IFCFASTENER',
  2489546625: 'IFCFASTENERTYPE',
  2827207264: 'IFCFEATUREELEMENT',
  2143335405: 'IFCFEATUREELEMENTADDITION',
  1287392070: 'IFCFEATUREELEMENTSUBTRACTION',
  738692330: 'IFCFILLAREASTYLE',
  374418227: 'IFCFILLAREASTYLEHATCHING',
  315944413: 'IFCFILLAREASTYLETILES',
  819412036: 'IFCFILTER',
  1810631287: 'IFCFILTERTYPE',
  1426591983: 'IFCFIRESUPPRESSIONTERMINAL',
  4222183408: 'IFCFIRESUPPRESSIONTERMINALTYPE',
  2652556860: 'IFCFIXEDREFERENCESWEPTAREASOLID',
  2058353004: 'IFCFLOWCONTROLLER',
  3907093117: 'IFCFLOWCONTROLLERTYPE',
  4278956645: 'IFCFLOWFITTING',
  3198132628: 'IFCFLOWFITTINGTYPE',
  182646315: 'IFCFLOWINSTRUMENT',
  4037862832: 'IFCFLOWINSTRUMENTTYPE',
  2188021234: 'IFCFLOWMETER',
  3815607619: 'IFCFLOWMETERTYPE',
  3132237377: 'IFCFLOWMOVINGDEVICE',
  1482959167: 'IFCFLOWMOVINGDEVICETYPE',
  987401354: 'IFCFLOWSEGMENT',
  1834744321: 'IFCFLOWSEGMENTTYPE',
  707683696: 'IFCFLOWSTORAGEDEVICE',
  1339347760: 'IFCFLOWSTORAGEDEVICETYPE',
  2223149337: 'IFCFLOWTERMINAL',
  2297155007: 'IFCFLOWTERMINALTYPE',
  3508470533: 'IFCFLOWTREATMENTDEVICE',
  3009222698: 'IFCFLOWTREATMENTDEVICETYPE',
  900683007: 'IFCFOOTING',
  1893162501: 'IFCFOOTINGTYPE',
  263784265: 'IFCFURNISHINGELEMENT',
  4238390223: 'IFCFURNISHINGELEMENTTYPE',
  1509553395: 'IFCFURNITURE',
  1268542332: 'IFCFURNITURETYPE',
  3493046030: 'IFCGEOGRAPHICELEMENT',
  4095422895: 'IFCGEOGRAPHICELEMENTTYPE',
  987898635: 'IFCGEOMETRICCURVESET',
  3448662350: 'IFCGEOMETRICREPRESENTATIONCONTEXT',
  2453401579: 'IFCGEOMETRICREPRESENTATIONITEM',
  4142052618: 'IFCGEOMETRICREPRESENTATIONSUBCONTEXT',
  3590301190: 'IFCGEOMETRICSET',
  3009204131: 'IFCGRID',
  852622518: 'IFCGRIDAXIS',
  178086475: 'IFCGRIDPLACEMENT',
  2706460486: 'IFCGROUP',
  812098782: 'IFCHALFSPACESOLID',
  3319311131: 'IFCHEATEXCHANGER',
  1251058090: 'IFCHEATEXCHANGERTYPE',
  2068733104: 'IFCHUMIDIFIER',
  1806887404: 'IFCHUMIDIFIERTYPE',
  1484403080: 'IFCISHAPEPROFILEDEF',
  3905492369: 'IFCIMAGETEXTURE',
  3570813810: 'IFCINDEXEDCOLOURMAP',
  2571569899: 'IFCINDEXEDPOLYCURVE',
  178912537: 'IFCINDEXEDPOLYGONALFACE',
  2294589976: 'IFCINDEXEDPOLYGONALFACEWITHVOIDS',
  1437953363: 'IFCINDEXEDTEXTUREMAP',
  2133299955: 'IFCINDEXEDTRIANGLETEXTUREMAP',
  4175244083: 'IFCINTERCEPTOR',
  3946677679: 'IFCINTERCEPTORTYPE',
  3113134337: 'IFCINTERSECTIONCURVE',
  2391368822: 'IFCINVENTORY',
  3741457305: 'IFCIRREGULARTIMESERIES',
  3020489413: 'IFCIRREGULARTIMESERIESVALUE',
  2176052936: 'IFCJUNCTIONBOX',
  4288270099: 'IFCJUNCTIONBOXTYPE',
  572779678: 'IFCLSHAPEPROFILEDEF',
  3827777499: 'IFCLABORRESOURCE',
  428585644: 'IFCLABORRESOURCETYPE',
  1585845231: 'IFCLAGTIME',
  76236018: 'IFCLAMP',
  1051575348: 'IFCLAMPTYPE',
  2655187982: 'IFCLIBRARYINFORMATION',
  3452421091: 'IFCLIBRARYREFERENCE',
  4162380809: 'IFCLIGHTDISTRIBUTIONDATA',
  629592764: 'IFCLIGHTFIXTURE',
  1161773419: 'IFCLIGHTFIXTURETYPE',
  1566485204: 'IFCLIGHTINTENSITYDISTRIBUTION',
  1402838566: 'IFCLIGHTSOURCE',
  125510826: 'IFCLIGHTSOURCEAMBIENT',
  2604431987: 'IFCLIGHTSOURCEDIRECTIONAL',
  4266656042: 'IFCLIGHTSOURCEGONIOMETRIC',
  1520743889: 'IFCLIGHTSOURCEPOSITIONAL',
  3422422726: 'IFCLIGHTSOURCESPOT',
  1281925730: 'IFCLINE',
  3092502836: 'IFCLINESEGMENT2D',
  388784114: 'IFCLINEARPLACEMENT',
  1154579445: 'IFCLINEARPOSITIONINGELEMENT',
  2624227202: 'IFCLOCALPLACEMENT',
  1008929658: 'IFCLOOP',
  1425443689: 'IFCMANIFOLDSOLIDBREP',
  3057273783: 'IFCMAPCONVERSION',
  2347385850: 'IFCMAPPEDITEM',
  1838606355: 'IFCMATERIAL',
  1847130766: 'IFCMATERIALCLASSIFICATIONRELATIONSHIP',
  3708119000: 'IFCMATERIALCONSTITUENT',
  2852063980: 'IFCMATERIALCONSTITUENTSET',
  760658860: 'IFCMATERIALDEFINITION',
  2022407955: 'IFCMATERIALDEFINITIONREPRESENTATION',
  248100487: 'IFCMATERIALLAYER',
  3303938423: 'IFCMATERIALLAYERSET',
  1303795690: 'IFCMATERIALLAYERSETUSAGE',
  1847252529: 'IFCMATERIALLAYERWITHOFFSETS',
  2199411900: 'IFCMATERIALLIST',
  2235152071: 'IFCMATERIALPROFILE',
  164193824: 'IFCMATERIALPROFILESET',
  3079605661: 'IFCMATERIALPROFILESETUSAGE',
  3404854881: 'IFCMATERIALPROFILESETUSAGETAPERING',
  552965576: 'IFCMATERIALPROFILEWITHOFFSETS',
  3265635763: 'IFCMATERIALPROPERTIES',
  853536259: 'IFCMATERIALRELATIONSHIP',
  1507914824: 'IFCMATERIALUSAGEDEFINITION',
  2597039031: 'IFCMEASUREWITHUNIT',
  377706215: 'IFCMECHANICALFASTENER',
  2108223431: 'IFCMECHANICALFASTENERTYPE',
  1437502449: 'IFCMEDICALDEVICE',
  1114901282: 'IFCMEDICALDEVICETYPE',
  1073191201: 'IFCMEMBER',
  1911478936: 'IFCMEMBERSTANDARDCASE',
  3181161470: 'IFCMEMBERTYPE',
  3368373690: 'IFCMETRIC',
  2998442950: 'IFCMIRROREDPROFILEDEF',
  2706619895: 'IFCMONETARYUNIT',
  2474470126: 'IFCMOTORCONNECTION',
  977012517: 'IFCMOTORCONNECTIONTYPE',
  1918398963: 'IFCNAMEDUNIT',
  3888040117: 'IFCOBJECT',
  219451334: 'IFCOBJECTDEFINITION',
  3701648758: 'IFCOBJECTPLACEMENT',
  2251480897: 'IFCOBJECTIVE',
  4143007308: 'IFCOCCUPANT',
  590820931: 'IFCOFFSETCURVE',
  3388369263: 'IFCOFFSETCURVE2D',
  3505215534: 'IFCOFFSETCURVE3D',
  2485787929: 'IFCOFFSETCURVEBYDISTANCES',
  2665983363: 'IFCOPENSHELL',
  3588315303: 'IFCOPENINGELEMENT',
  3079942009: 'IFCOPENINGSTANDARDCASE',
  4251960020: 'IFCORGANIZATION',
  1411181986: 'IFCORGANIZATIONRELATIONSHIP',
  643959842: 'IFCORIENTATIONEXPRESSION',
  1029017970: 'IFCORIENTEDEDGE',
  144952367: 'IFCOUTERBOUNDARYCURVE',
  3694346114: 'IFCOUTLET',
  2837617999: 'IFCOUTLETTYPE',
  1207048766: 'IFCOWNERHISTORY',
  2529465313: 'IFCPARAMETERIZEDPROFILEDEF',
  2519244187: 'IFCPATH',
  1682466193: 'IFCPCURVE',
  2382730787: 'IFCPERFORMANCEHISTORY',
  3566463478: 'IFCPERMEABLECOVERINGPROPERTIES',
  3327091369: 'IFCPERMIT',
  2077209135: 'IFCPERSON',
  101040310: 'IFCPERSONANDORGANIZATION',
  3021840470: 'IFCPHYSICALCOMPLEXQUANTITY',
  2483315170: 'IFCPHYSICALQUANTITY',
  2226359599: 'IFCPHYSICALSIMPLEQUANTITY',
  1687234759: 'IFCPILE',
  1158309216: 'IFCPILETYPE',
  310824031: 'IFCPIPEFITTING',
  804291784: 'IFCPIPEFITTINGTYPE',
  3612865200: 'IFCPIPESEGMENT',
  4231323485: 'IFCPIPESEGMENTTYPE',
  597895409: 'IFCPIXELTEXTURE',
  2004835150: 'IFCPLACEMENT',
  603570806: 'IFCPLANARBOX',
  1663979128: 'IFCPLANAREXTENT',
  220341763: 'IFCPLANE',
  3171933400: 'IFCPLATE',
  1156407060: 'IFCPLATESTANDARDCASE',
  4017108033: 'IFCPLATETYPE',
  2067069095: 'IFCPOINT',
  4022376103: 'IFCPOINTONCURVE',
  1423911732: 'IFCPOINTONSURFACE',
  2924175390: 'IFCPOLYLOOP',
  2775532180: 'IFCPOLYGONALBOUNDEDHALFSPACE',
  2839578677: 'IFCPOLYGONALFACESET',
  3724593414: 'IFCPOLYLINE',
  3740093272: 'IFCPORT',
  1946335990: 'IFCPOSITIONINGELEMENT',
  3355820592: 'IFCPOSTALADDRESS',
  759155922: 'IFCPREDEFINEDCOLOUR',
  2559016684: 'IFCPREDEFINEDCURVEFONT',
  3727388367: 'IFCPREDEFINEDITEM',
  3778827333: 'IFCPREDEFINEDPROPERTIES',
  3967405729: 'IFCPREDEFINEDPROPERTYSET',
  1775413392: 'IFCPREDEFINEDTEXTFONT',
  677532197: 'IFCPRESENTATIONITEM',
  2022622350: 'IFCPRESENTATIONLAYERASSIGNMENT',
  1304840413: 'IFCPRESENTATIONLAYERWITHSTYLE',
  3119450353: 'IFCPRESENTATIONSTYLE',
  2417041796: 'IFCPRESENTATIONSTYLEASSIGNMENT',
  2744685151: 'IFCPROCEDURE',
  569719735: 'IFCPROCEDURETYPE',
  2945172077: 'IFCPROCESS',
  4208778838: 'IFCPRODUCT',
  673634403: 'IFCPRODUCTDEFINITIONSHAPE',
  2095639259: 'IFCPRODUCTREPRESENTATION',
  3958567839: 'IFCPROFILEDEF',
  2802850158: 'IFCPROFILEPROPERTIES',
  103090709: 'IFCPROJECT',
  653396225: 'IFCPROJECTLIBRARY',
  2904328755: 'IFCPROJECTORDER',
  3843373140: 'IFCPROJECTEDCRS',
  3651124850: 'IFCPROJECTIONELEMENT',
  2598011224: 'IFCPROPERTY',
  986844984: 'IFCPROPERTYABSTRACTION',
  871118103: 'IFCPROPERTYBOUNDEDVALUE',
  1680319473: 'IFCPROPERTYDEFINITION',
  148025276: 'IFCPROPERTYDEPENDENCYRELATIONSHIP',
  4166981789: 'IFCPROPERTYENUMERATEDVALUE',
  3710013099: 'IFCPROPERTYENUMERATION',
  2752243245: 'IFCPROPERTYLISTVALUE',
  941946838: 'IFCPROPERTYREFERENCEVALUE',
  1451395588: 'IFCPROPERTYSET',
  3357820518: 'IFCPROPERTYSETDEFINITION',
  492091185: 'IFCPROPERTYSETTEMPLATE',
  3650150729: 'IFCPROPERTYSINGLEVALUE',
  110355661: 'IFCPROPERTYTABLEVALUE',
  3521284610: 'IFCPROPERTYTEMPLATE',
  1482703590: 'IFCPROPERTYTEMPLATEDEFINITION',
  738039164: 'IFCPROTECTIVEDEVICE',
  2295281155: 'IFCPROTECTIVEDEVICETRIPPINGUNIT',
  655969474: 'IFCPROTECTIVEDEVICETRIPPINGUNITTYPE',
  1842657554: 'IFCPROTECTIVEDEVICETYPE',
  3219374653: 'IFCPROXY',
  90941305: 'IFCPUMP',
  2250791053: 'IFCPUMPTYPE',
  2044713172: 'IFCQUANTITYAREA',
  2093928680: 'IFCQUANTITYCOUNT',
  931644368: 'IFCQUANTITYLENGTH',
  2090586900: 'IFCQUANTITYSET',
  3252649465: 'IFCQUANTITYTIME',
  2405470396: 'IFCQUANTITYVOLUME',
  825690147: 'IFCQUANTITYWEIGHT',
  2262370178: 'IFCRAILING',
  2893384427: 'IFCRAILINGTYPE',
  3024970846: 'IFCRAMP',
  3283111854: 'IFCRAMPFLIGHT',
  2324767716: 'IFCRAMPFLIGHTTYPE',
  1469900589: 'IFCRAMPTYPE',
  1232101972: 'IFCRATIONALBSPLINECURVEWITHKNOTS',
  683857671: 'IFCRATIONALBSPLINESURFACEWITHKNOTS',
  2770003689: 'IFCRECTANGLEHOLLOWPROFILEDEF',
  3615266464: 'IFCRECTANGLEPROFILEDEF',
  2798486643: 'IFCRECTANGULARPYRAMID',
  3454111270: 'IFCRECTANGULARTRIMMEDSURFACE',
  3915482550: 'IFCRECURRENCEPATTERN',
  2433181523: 'IFCREFERENCE',
  4021432810: 'IFCREFERENT',
  3413951693: 'IFCREGULARTIMESERIES',
  1580146022: 'IFCREINFORCEMENTBARPROPERTIES',
  3765753017: 'IFCREINFORCEMENTDEFINITIONPROPERTIES',
  979691226: 'IFCREINFORCINGBAR',
  2572171363: 'IFCREINFORCINGBARTYPE',
  3027567501: 'IFCREINFORCINGELEMENT',
  964333572: 'IFCREINFORCINGELEMENTTYPE',
  2320036040: 'IFCREINFORCINGMESH',
  2310774935: 'IFCREINFORCINGMESHTYPE',
  160246688: 'IFCRELAGGREGATES',
  3939117080: 'IFCRELASSIGNS',
  1683148259: 'IFCRELASSIGNSTOACTOR',
  2495723537: 'IFCRELASSIGNSTOCONTROL',
  1307041759: 'IFCRELASSIGNSTOGROUP',
  1027710054: 'IFCRELASSIGNSTOGROUPBYFACTOR',
  4278684876: 'IFCRELASSIGNSTOPROCESS',
  2857406711: 'IFCRELASSIGNSTOPRODUCT',
  205026976: 'IFCRELASSIGNSTORESOURCE',
  1865459582: 'IFCRELASSOCIATES',
  4095574036: 'IFCRELASSOCIATESAPPROVAL',
  919958153: 'IFCRELASSOCIATESCLASSIFICATION',
  2728634034: 'IFCRELASSOCIATESCONSTRAINT',
  982818633: 'IFCRELASSOCIATESDOCUMENT',
  3840914261: 'IFCRELASSOCIATESLIBRARY',
  2655215786: 'IFCRELASSOCIATESMATERIAL',
  826625072: 'IFCRELCONNECTS',
  1204542856: 'IFCRELCONNECTSELEMENTS',
  3945020480: 'IFCRELCONNECTSPATHELEMENTS',
  4201705270: 'IFCRELCONNECTSPORTTOELEMENT',
  3190031847: 'IFCRELCONNECTSPORTS',
  2127690289: 'IFCRELCONNECTSSTRUCTURALACTIVITY',
  1638771189: 'IFCRELCONNECTSSTRUCTURALMEMBER',
  504942748: 'IFCRELCONNECTSWITHECCENTRICITY',
  3678494232: 'IFCRELCONNECTSWITHREALIZINGELEMENTS',
  3242617779: 'IFCRELCONTAINEDINSPATIALSTRUCTURE',
  886880790: 'IFCRELCOVERSBLDGELEMENTS',
  2802773753: 'IFCRELCOVERSSPACES',
  2565941209: 'IFCRELDECLARES',
  2551354335: 'IFCRELDECOMPOSES',
  693640335: 'IFCRELDEFINES',
  1462361463: 'IFCRELDEFINESBYOBJECT',
  4186316022: 'IFCRELDEFINESBYPROPERTIES',
  307848117: 'IFCRELDEFINESBYTEMPLATE',
  781010003: 'IFCRELDEFINESBYTYPE',
  3940055652: 'IFCRELFILLSELEMENT',
  279856033: 'IFCRELFLOWCONTROLELEMENTS',
  427948657: 'IFCRELINTERFERESELEMENTS',
  3268803585: 'IFCRELNESTS',
  1441486842: 'IFCRELPOSITIONS',
  750771296: 'IFCRELPROJECTSELEMENT',
  1245217292: 'IFCRELREFERENCEDINSPATIALSTRUCTURE',
  4122056220: 'IFCRELSEQUENCE',
  366585022: 'IFCRELSERVICESBUILDINGS',
  3451746338: 'IFCRELSPACEBOUNDARY',
  3523091289: 'IFCRELSPACEBOUNDARY1STLEVEL',
  1521410863: 'IFCRELSPACEBOUNDARY2NDLEVEL',
  1401173127: 'IFCRELVOIDSELEMENT',
  478536968: 'IFCRELATIONSHIP',
  816062949: 'IFCREPARAMETRISEDCOMPOSITECURVESEGMENT',
  1076942058: 'IFCREPRESENTATION',
  3377609919: 'IFCREPRESENTATIONCONTEXT',
  3008791417: 'IFCREPRESENTATIONITEM',
  1660063152: 'IFCREPRESENTATIONMAP',
  2914609552: 'IFCRESOURCE',
  2943643501: 'IFCRESOURCEAPPROVALRELATIONSHIP',
  1608871552: 'IFCRESOURCECONSTRAINTRELATIONSHIP',
  2439245199: 'IFCRESOURCELEVELRELATIONSHIP',
  1042787934: 'IFCRESOURCETIME',
  1856042241: 'IFCREVOLVEDAREASOLID',
  3243963512: 'IFCREVOLVEDAREASOLIDTAPERED',
  4158566097: 'IFCRIGHTCIRCULARCONE',
  3626867408: 'IFCRIGHTCIRCULARCYLINDER',
  2016517767: 'IFCROOF',
  2781568857: 'IFCROOFTYPE',
  2341007311: 'IFCROOT',
  2778083089: 'IFCROUNDEDRECTANGLEPROFILEDEF',
  448429030: 'IFCSIUNIT',
  3053780830: 'IFCSANITARYTERMINAL',
  1768891740: 'IFCSANITARYTERMINALTYPE',
  1054537805: 'IFCSCHEDULINGTIME',
  2157484638: 'IFCSEAMCURVE',
  2042790032: 'IFCSECTIONPROPERTIES',
  4165799628: 'IFCSECTIONREINFORCEMENTPROPERTIES',
  1862484736: 'IFCSECTIONEDSOLID',
  1290935644: 'IFCSECTIONEDSOLIDHORIZONTAL',
  1509187699: 'IFCSECTIONEDSPINE',
  4086658281: 'IFCSENSOR',
  1783015770: 'IFCSENSORTYPE',
  1329646415: 'IFCSHADINGDEVICE',
  4074543187: 'IFCSHADINGDEVICETYPE',
  867548509: 'IFCSHAPEASPECT',
  3982875396: 'IFCSHAPEMODEL',
  4240577450: 'IFCSHAPEREPRESENTATION',
  4124623270: 'IFCSHELLBASEDSURFACEMODEL',
  3692461612: 'IFCSIMPLEPROPERTY',
  3663146110: 'IFCSIMPLEPROPERTYTEMPLATE',
  4097777520: 'IFCSITE',
  1529196076: 'IFCSLAB',
  3127900445: 'IFCSLABELEMENTEDCASE',
  3027962421: 'IFCSLABSTANDARDCASE',
  2533589738: 'IFCSLABTYPE',
  2609359061: 'IFCSLIPPAGECONNECTIONCONDITION',
  3420628829: 'IFCSOLARDEVICE',
  1072016465: 'IFCSOLARDEVICETYPE',
  723233188: 'IFCSOLIDMODEL',
  3856911033: 'IFCSPACE',
  1999602285: 'IFCSPACEHEATER',
  1305183839: 'IFCSPACEHEATERTYPE',
  3812236995: 'IFCSPACETYPE',
  1412071761: 'IFCSPATIALELEMENT',
  710998568: 'IFCSPATIALELEMENTTYPE',
  2706606064: 'IFCSPATIALSTRUCTUREELEMENT',
  3893378262: 'IFCSPATIALSTRUCTUREELEMENTTYPE',
  463610769: 'IFCSPATIALZONE',
  2481509218: 'IFCSPATIALZONETYPE',
  451544542: 'IFCSPHERE',
  4015995234: 'IFCSPHERICALSURFACE',
  1404847402: 'IFCSTACKTERMINAL',
  3112655638: 'IFCSTACKTERMINALTYPE',
  331165859: 'IFCSTAIR',
  4252922144: 'IFCSTAIRFLIGHT',
  1039846685: 'IFCSTAIRFLIGHTTYPE',
  338393293: 'IFCSTAIRTYPE',
  682877961: 'IFCSTRUCTURALACTION',
  3544373492: 'IFCSTRUCTURALACTIVITY',
  2515109513: 'IFCSTRUCTURALANALYSISMODEL',
  1179482911: 'IFCSTRUCTURALCONNECTION',
  2273995522: 'IFCSTRUCTURALCONNECTIONCONDITION',
  1004757350: 'IFCSTRUCTURALCURVEACTION',
  4243806635: 'IFCSTRUCTURALCURVECONNECTION',
  214636428: 'IFCSTRUCTURALCURVEMEMBER',
  2445595289: 'IFCSTRUCTURALCURVEMEMBERVARYING',
  2757150158: 'IFCSTRUCTURALCURVEREACTION',
  3136571912: 'IFCSTRUCTURALITEM',
  1807405624: 'IFCSTRUCTURALLINEARACTION',
  2162789131: 'IFCSTRUCTURALLOAD',
  385403989: 'IFCSTRUCTURALLOADCASE',
  3478079324: 'IFCSTRUCTURALLOADCONFIGURATION',
  1252848954: 'IFCSTRUCTURALLOADGROUP',
  1595516126: 'IFCSTRUCTURALLOADLINEARFORCE',
  609421318: 'IFCSTRUCTURALLOADORRESULT',
  2668620305: 'IFCSTRUCTURALLOADPLANARFORCE',
  2473145415: 'IFCSTRUCTURALLOADSINGLEDISPLACEMENT',
  1973038258: 'IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION',
  1597423693: 'IFCSTRUCTURALLOADSINGLEFORCE',
  1190533807: 'IFCSTRUCTURALLOADSINGLEFORCEWARPING',
  2525727697: 'IFCSTRUCTURALLOADSTATIC',
  3408363356: 'IFCSTRUCTURALLOADTEMPERATURE',
  530289379: 'IFCSTRUCTURALMEMBER',
  1621171031: 'IFCSTRUCTURALPLANARACTION',
  2082059205: 'IFCSTRUCTURALPOINTACTION',
  734778138: 'IFCSTRUCTURALPOINTCONNECTION',
  1235345126: 'IFCSTRUCTURALPOINTREACTION',
  3689010777: 'IFCSTRUCTURALREACTION',
  2986769608: 'IFCSTRUCTURALRESULTGROUP',
  3657597509: 'IFCSTRUCTURALSURFACEACTION',
  1975003073: 'IFCSTRUCTURALSURFACECONNECTION',
  3979015343: 'IFCSTRUCTURALSURFACEMEMBER',
  2218152070: 'IFCSTRUCTURALSURFACEMEMBERVARYING',
  603775116: 'IFCSTRUCTURALSURFACEREACTION',
  2830218821: 'IFCSTYLEMODEL',
  3958052878: 'IFCSTYLEDITEM',
  3049322572: 'IFCSTYLEDREPRESENTATION',
  148013059: 'IFCSUBCONTRACTRESOURCE',
  4095615324: 'IFCSUBCONTRACTRESOURCETYPE',
  2233826070: 'IFCSUBEDGE',
  2513912981: 'IFCSURFACE',
  699246055: 'IFCSURFACECURVE',
  2028607225: 'IFCSURFACECURVESWEPTAREASOLID',
  3101698114: 'IFCSURFACEFEATURE',
  2809605785: 'IFCSURFACEOFLINEAREXTRUSION',
  4124788165: 'IFCSURFACEOFREVOLUTION',
  2934153892: 'IFCSURFACEREINFORCEMENTAREA',
  1300840506: 'IFCSURFACESTYLE',
  3303107099: 'IFCSURFACESTYLELIGHTING',
  1607154358: 'IFCSURFACESTYLEREFRACTION',
  1878645084: 'IFCSURFACESTYLERENDERING',
  846575682: 'IFCSURFACESTYLESHADING',
  1351298697: 'IFCSURFACESTYLEWITHTEXTURES',
  626085974: 'IFCSURFACETEXTURE',
  2247615214: 'IFCSWEPTAREASOLID',
  1260650574: 'IFCSWEPTDISKSOLID',
  1096409881: 'IFCSWEPTDISKSOLIDPOLYGONAL',
  230924584: 'IFCSWEPTSURFACE',
  1162798199: 'IFCSWITCHINGDEVICE',
  2315554128: 'IFCSWITCHINGDEVICETYPE',
  2254336722: 'IFCSYSTEM',
  413509423: 'IFCSYSTEMFURNITUREELEMENT',
  1580310250: 'IFCSYSTEMFURNITUREELEMENTTYPE',
  3071757647: 'IFCTSHAPEPROFILEDEF',
  985171141: 'IFCTABLE',
  2043862942: 'IFCTABLECOLUMN',
  531007025: 'IFCTABLEROW',
  812556717: 'IFCTANK',
  5716631: 'IFCTANKTYPE',
  3473067441: 'IFCTASK',
  1549132990: 'IFCTASKTIME',
  2771591690: 'IFCTASKTIMERECURRING',
  3206491090: 'IFCTASKTYPE',
  912023232: 'IFCTELECOMADDRESS',
  3824725483: 'IFCTENDON',
  2347447852: 'IFCTENDONANCHOR',
  3081323446: 'IFCTENDONANCHORTYPE',
  3663046924: 'IFCTENDONCONDUIT',
  2281632017: 'IFCTENDONCONDUITTYPE',
  2415094496: 'IFCTENDONTYPE',
  2387106220: 'IFCTESSELLATEDFACESET',
  901063453: 'IFCTESSELLATEDITEM',
  4282788508: 'IFCTEXTLITERAL',
  3124975700: 'IFCTEXTLITERALWITHEXTENT',
  1447204868: 'IFCTEXTSTYLE',
  1983826977: 'IFCTEXTSTYLEFONTMODEL',
  2636378356: 'IFCTEXTSTYLEFORDEFINEDFONT',
  1640371178: 'IFCTEXTSTYLETEXTMODEL',
  280115917: 'IFCTEXTURECOORDINATE',
  1742049831: 'IFCTEXTURECOORDINATEGENERATOR',
  2552916305: 'IFCTEXTUREMAP',
  1210645708: 'IFCTEXTUREVERTEX',
  3611470254: 'IFCTEXTUREVERTEXLIST',
  1199560280: 'IFCTIMEPERIOD',
  3101149627: 'IFCTIMESERIES',
  581633288: 'IFCTIMESERIESVALUE',
  1377556343: 'IFCTOPOLOGICALREPRESENTATIONITEM',
  1735638870: 'IFCTOPOLOGYREPRESENTATION',
  1935646853: 'IFCTOROIDALSURFACE',
  3825984169: 'IFCTRANSFORMER',
  1692211062: 'IFCTRANSFORMERTYPE',
  2595432518: 'IFCTRANSITIONCURVESEGMENT2D',
  1620046519: 'IFCTRANSPORTELEMENT',
  2097647324: 'IFCTRANSPORTELEMENTTYPE',
  2715220739: 'IFCTRAPEZIUMPROFILEDEF',
  2916149573: 'IFCTRIANGULATEDFACESET',
  1229763772: 'IFCTRIANGULATEDIRREGULARNETWORK',
  3593883385: 'IFCTRIMMEDCURVE',
  3026737570: 'IFCTUBEBUNDLE',
  1600972822: 'IFCTUBEBUNDLETYPE',
  1628702193: 'IFCTYPEOBJECT',
  3736923433: 'IFCTYPEPROCESS',
  2347495698: 'IFCTYPEPRODUCT',
  3698973494: 'IFCTYPERESOURCE',
  427810014: 'IFCUSHAPEPROFILEDEF',
  180925521: 'IFCUNITASSIGNMENT',
  630975310: 'IFCUNITARYCONTROLELEMENT',
  3179687236: 'IFCUNITARYCONTROLELEMENTTYPE',
  4292641817: 'IFCUNITARYEQUIPMENT',
  1911125066: 'IFCUNITARYEQUIPMENTTYPE',
  4207607924: 'IFCVALVE',
  728799441: 'IFCVALVETYPE',
  1417489154: 'IFCVECTOR',
  2799835756: 'IFCVERTEX',
  2759199220: 'IFCVERTEXLOOP',
  1907098498: 'IFCVERTEXPOINT',
  1530820697: 'IFCVIBRATIONDAMPER',
  3956297820: 'IFCVIBRATIONDAMPERTYPE',
  2391383451: 'IFCVIBRATIONISOLATOR',
  3313531582: 'IFCVIBRATIONISOLATORTYPE',
  2769231204: 'IFCVIRTUALELEMENT',
  891718957: 'IFCVIRTUALGRIDINTERSECTION',
  926996030: 'IFCVOIDINGFEATURE',
  2391406946: 'IFCWALL',
  4156078855: 'IFCWALLELEMENTEDCASE',
  3512223829: 'IFCWALLSTANDARDCASE',
  1898987631: 'IFCWALLTYPE',
  4237592921: 'IFCWASTETERMINAL',
  1133259667: 'IFCWASTETERMINALTYPE',
  3304561284: 'IFCWINDOW',
  336235671: 'IFCWINDOWLININGPROPERTIES',
  512836454: 'IFCWINDOWPANELPROPERTIES',
  486154966: 'IFCWINDOWSTANDARDCASE',
  1299126871: 'IFCWINDOWSTYLE',
  4009809668: 'IFCWINDOWTYPE',
  4088093105: 'IFCWORKCALENDAR',
  1028945134: 'IFCWORKCONTROL',
  4218914973: 'IFCWORKPLAN',
  3342526732: 'IFCWORKSCHEDULE',
  1236880293: 'IFCWORKTIME',
  2543172580: 'IFCZSHAPEPROFILEDEF',
  1033361043: 'IFCZONE'
};

class PropertyManager {
  constructor(state) {
    this.state = state;
  }

  getExpressId(geometry, faceIndex) {
    if (!geometry.index) return;
    const geoIndex = geometry.index.array;
    return geometry.attributes[IdAttrName].getX(geoIndex[3 * faceIndex]);
  }

  getItemProperties(modelID, id, recursive = false) {
    return this.state.useJSON ? { ...this.state.models[modelID].jsonData[id]
    } : this.state.api.GetLine(modelID, id, recursive);
  }

  getAllItemsOfType(modelID, type, verbose) {
    return this.state.useJSON ? this.getAllItemsOfTypeJSON(modelID, type, verbose) : this.getAllItemsOfTypeWebIfcAPI(modelID, type, verbose);
  }

  getPropertySets(modelID, elementID, recursive = false) {
    return this.state.useJSON ? this.getPropertyJSON(modelID, elementID, recursive, PropsNames.psets) : this.getPropertyWebIfcAPI(modelID, elementID, recursive, PropsNames.psets);
  }

  getTypeProperties(modelID, elementID, recursive = false) {
    return this.state.useJSON ? this.getPropertyJSON(modelID, elementID, recursive, PropsNames.type) : this.getPropertyWebIfcAPI(modelID, elementID, recursive, PropsNames.type);
  }

  getMaterialsProperties(modelID, elementID, recursive = false) {
    return this.state.useJSON ? this.getPropertyJSON(modelID, elementID, recursive, PropsNames.materials) : this.getPropertyWebIfcAPI(modelID, elementID, recursive, PropsNames.materials);
  }

  getSpatialStructure(modelID) {
    return this.state.useJSON ? this.getSpatialStructureJSON(modelID) : this.getSpatialStructureWebIfcAPI(modelID);
  }

  getSpatialStructureJSON(modelID) {
    const chunks = this.getSpatialTreeChunks(modelID);
    const projectID = this.getAllItemsOfTypeJSON(modelID, _webIfcApi.IFCPROJECT, false)[0];
    const project = this.newIfcProject(projectID);
    this.getSpatialNode(modelID, project, chunks);
    return { ...project
    };
  }

  getSpatialStructureWebIfcAPI(modelID) {
    const chunks = this.getSpatialTreeChunks(modelID);
    const projectID = this.state.api.GetLineIDsWithType(modelID, _webIfcApi.IFCPROJECT).get(0);
    const project = this.newIfcProject(projectID);
    this.getSpatialNode(modelID, project, chunks);
    return project;
  }

  getAllItemsOfTypeJSON(modelID, type, verbose) {
    const data = this.state.models[modelID].jsonData;
    const typeName = IfcTypesMap[type];

    if (!typeName) {
      throw new Error(`Type not found: ${type}`);
    }

    return this.filterJSONItemsByType(data, typeName, verbose);
  }

  filterJSONItemsByType(data, typeName, verbose) {
    const result = [];
    Object.keys(data).forEach(key => {
      const numKey = parseInt(key);

      if (data[numKey].type.toUpperCase() === typeName) {
        result.push(verbose ? { ...data[numKey]
        } : numKey);
      }
    });
    return result;
  }

  getItemsByIDJSON(modelID, ids) {
    const data = this.state.models[modelID].jsonData;
    const result = [];
    ids.forEach(id => result.push({ ...data[id]
    }));
    return result;
  }

  getPropertyJSON(modelID, elementID, recursive = false, propName) {
    const resultIDs = this.getAllRelatedItemsOfTypeJSON(modelID, elementID, propName);
    const result = this.getItemsByIDJSON(modelID, resultIDs);

    if (recursive) {
      result.forEach(result => this.getJSONReferencesRecursively(modelID, result));
    }

    return result;
  }

  getJSONReferencesRecursively(modelID, jsonObject) {
    if (jsonObject == undefined) return;
    const keys = Object.keys(jsonObject);

    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      this.getJSONItem(modelID, jsonObject, key);
    }
  }

  getJSONItem(modelID, jsonObject, key) {
    if (Array.isArray(jsonObject[key])) {
      return this.getMultipleJSONItems(modelID, jsonObject, key);
    }

    if (jsonObject[key] && jsonObject[key].type === 5) {
      jsonObject[key] = this.getItemsByIDJSON(modelID, [jsonObject[key].value])[0];
      this.getJSONReferencesRecursively(modelID, jsonObject[key]);
    }
  }

  getMultipleJSONItems(modelID, jsonObject, key) {
    jsonObject[key] = jsonObject[key].map(item => {
      if (item.type === 5) {
        item = this.getItemsByIDJSON(modelID, [item.value])[0];
        this.getJSONReferencesRecursively(modelID, item);
      }

      return item;
    });
  }

  getPropertyWebIfcAPI(modelID, elementID, recursive = false, propName) {
    const propSetIds = this.getAllRelatedItemsOfTypeWebIfcAPI(modelID, elementID, propName);
    return propSetIds.map(id => this.state.api.GetLine(modelID, id, recursive));
  }

  getAllItemsOfTypeWebIfcAPI(modelID, type, verbose) {
    const items = [];
    const lines = this.state.api.GetLineIDsWithType(modelID, type);

    for (let i = 0; i < lines.size(); i++) items.push(lines.get(i));

    if (verbose) return items.map(id => this.state.api.GetLine(modelID, id));
    return items;
  }

  newIfcProject(id) {
    return {
      expressID: id,
      type: 'IFCPROJECT',
      children: []
    };
  }

  getSpatialTreeChunks(modelID) {
    const treeChunks = {};
    const json = this.state.useJSON;

    if (json) {
      this.getChunksJSON(modelID, treeChunks, PropsNames.aggregates);
      this.getChunksJSON(modelID, treeChunks, PropsNames.spatial);
    } else {
      this.getChunksWebIfcAPI(modelID, treeChunks, PropsNames.aggregates);
      this.getChunksWebIfcAPI(modelID, treeChunks, PropsNames.spatial);
    }

    return treeChunks;
  }

  getChunksJSON(modelID, chunks, propNames) {
    const relation = this.getAllItemsOfTypeJSON(modelID, propNames.name, true);
    relation.forEach(rel => {
      this.saveChunk(chunks, propNames, rel);
    });
  }

  getChunksWebIfcAPI(modelID, chunks, propNames) {
    const relation = this.state.api.GetLineIDsWithType(modelID, propNames.name);

    for (let i = 0; i < relation.size(); i++) {
      const rel = this.state.api.GetLine(modelID, relation.get(i), false);
      this.saveChunk(chunks, propNames, rel);
    }
  }

  saveChunk(chunks, propNames, rel) {
    const relating = rel[propNames.relating].value;
    const related = rel[propNames.related].map(r => r.value);

    if (chunks[relating] == undefined) {
      chunks[relating] = related;
    } else {
      chunks[relating] = chunks[relating].concat(related);
    }
  }

  getSpatialNode(modelID, node, treeChunks) {
    this.getChildren(modelID, node, treeChunks, PropsNames.aggregates);
    this.getChildren(modelID, node, treeChunks, PropsNames.spatial);
  }

  getChildren(modelID, node, treeChunks, propNames) {
    const children = treeChunks[node.expressID];
    if (children == undefined) return;
    const prop = propNames.key;
    node[prop] = children.map(child => {
      const node = this.newNode(modelID, child);
      this.getSpatialNode(modelID, node, treeChunks);
      return node;
    });
  }

  newNode(modelID, id) {
    const typeName = this.getNodeType(modelID, id);
    return {
      expressID: id,
      type: typeName,
      children: []
    };
  }

  getNodeType(modelID, id) {
    if (this.state.useJSON) return this.state.models[modelID].jsonData[id].type;
    const typeID = this.state.models[modelID].types[id];
    return IfcElements[typeID];
  }

  getAllRelatedItemsOfTypeJSON(modelID, id, propNames) {
    const lines = this.getAllItemsOfTypeJSON(modelID, propNames.name, true);
    const IDs = [];
    lines.forEach(line => {
      const isRelated = this.isRelated(id, line, propNames);
      if (isRelated) this.getRelated(line, propNames, IDs);
    });
    return IDs;
  }

  getAllRelatedItemsOfTypeWebIfcAPI(modelID, id, propNames) {
    const lines = this.state.api.GetLineIDsWithType(modelID, propNames.name);
    const IDs = [];

    for (let i = 0; i < lines.size(); i++) {
      const rel = this.state.api.GetLine(modelID, lines.get(i));
      const isRelated = this.isRelated(id, rel, propNames);
      if (isRelated) this.getRelated(rel, propNames, IDs);
    }

    return IDs;
  }

  getRelated(rel, propNames, IDs) {
    const element = rel[propNames.relating];
    if (!Array.isArray(element)) IDs.push(element.value);else element.forEach(ele => IDs.push(ele.value));
  }

  isRelated(id, rel, propNames) {
    const relatedItems = rel[propNames.related];

    if (Array.isArray(relatedItems)) {
      const values = relatedItems.map(item => item.value);
      return values.includes(id);
    }

    return relatedItems.value === id;
  }

}

class TypeManager {
  constructor(state) {
    this.state = state;
  }

  getAllTypes() {
    for (const modelID in this.state.models) {
      const types = this.state.models[modelID].types;
      if (Object.keys(types).length == 0) this.getAllTypesOfModel(parseInt(modelID));
    }
  }

  getAllTypesOfModel(modelID) {
    this.state.models[modelID].types;
    const elements = Object.keys(IfcElements).map(e => parseInt(e));
    const types = this.state.models[modelID].types;
    elements.forEach(type => {
      const lines = this.state.api.GetLineIDsWithType(modelID, type);

      for (let i = 0; i < lines.size(); i++) types[lines.get(i)] = type;
    });
  }

}

let modelIdCounter = 0;
const nullIfcManagerErrorMessage = 'IfcManager is null!';

class IFCModel extends _three.Mesh {
  constructor() {
    super(...arguments);
    this.modelID = modelIdCounter++;
    this.ifcManager = null;
    this.mesh = this;
  }

  setIFCManager(manager) {
    this.ifcManager = manager;
  }

  setWasmPath(path) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    this.ifcManager.setWasmPath(path);
  }

  close(scene) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    this.ifcManager.close(this.modelID, scene);
  }

  getExpressId(geometry, faceIndex) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    return this.ifcManager.getExpressId(geometry, faceIndex);
  }

  getAllItemsOfType(type, verbose) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    return this.ifcManager.getAllItemsOfType(this.modelID, type, verbose);
  }

  getItemProperties(id, recursive = false) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    return this.ifcManager.getItemProperties(this.modelID, id, recursive);
  }

  getPropertySets(id, recursive = false) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    return this.ifcManager.getPropertySets(this.modelID, id, recursive);
  }

  getTypeProperties(id, recursive = false) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    return this.ifcManager.getTypeProperties(this.modelID, id, recursive);
  }

  getIfcType(id) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    return this.ifcManager.getIfcType(this.modelID, id);
  }

  getSpatialStructure() {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    return this.ifcManager.getSpatialStructure(this.modelID);
  }

  getSubset(material) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    return this.ifcManager.getSubset(this.modelID, material);
  }

  removeSubset(parent, material) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    this.ifcManager.removeSubset(this.modelID, parent, material);
  }

  createSubset(config) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    const modelConfig = { ...config,
      modelID: this.modelID
    };
    return this.ifcManager.createSubset(modelConfig);
  }

  hideItems(ids) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    this.ifcManager.hideItems(this.modelID, ids);
  }

  hideAllItems() {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    this.ifcManager.hideAllItems(this.modelID);
  }

  showItems(ids) {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    this.ifcManager.showItems(this.modelID, ids);
  }

  showAllItems() {
    if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);
    this.ifcManager.showAllItems(this.modelID);
  }

}

class BvhManager {
  initializeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast) {
    this.computeBoundsTree = computeBoundsTree;
    this.disposeBoundsTree = disposeBoundsTree;
    this.acceleratedRaycast = acceleratedRaycast;
    this.setupThreeMeshBVH();
  }

  applyThreeMeshBVH(geometry) {
    if (this.computeBoundsTree) geometry.computeBoundsTree();
  }

  setupThreeMeshBVH() {
    if (!this.computeBoundsTree || !this.disposeBoundsTree || !this.acceleratedRaycast) return;
    _three.BufferGeometry.prototype.computeBoundsTree = this.computeBoundsTree;
    _three.BufferGeometry.prototype.disposeBoundsTree = this.disposeBoundsTree;
    _three.Mesh.prototype.raycast = this.acceleratedRaycast;
  }

}

class ItemsHider {
  constructor(state) {
    this.modelCoordinates = {};
    this.expressIDCoordinatesMap = {};
    this.state = state;
  }

  processCoordinates(modelID) {
    const attributes = this.getAttributes(modelID);
    const ids = Array.from(attributes.expressID.array);
    this.expressIDCoordinatesMap[modelID] = {};

    for (let i = 0; i < ids.length; i++) {
      if (!this.expressIDCoordinatesMap[modelID][ids[i]]) {
        this.expressIDCoordinatesMap[modelID][ids[i]] = [];
      }

      const current = this.expressIDCoordinatesMap[modelID];
      current[ids[i]].push(3 * i);
    }

    this.initializeCoordinates(modelID);
  }

  hideItems(modelID, ids) {
    this.editCoordinates(modelID, ids, true);
  }

  showItems(modelID, ids) {
    this.editCoordinates(modelID, ids, false);
  }

  editCoordinates(modelID, ids, hide) {
    const current = this.expressIDCoordinatesMap[modelID];
    const indices = [];
    ids.forEach(id => {
      if (current[id]) indices.push(...current[id]);
    });
    const coords = this.getCoordinates(modelID);
    const initial = this.modelCoordinates[modelID];
    if (hide) indices.forEach(i => coords.set([0, 0, 0], i));else indices.forEach(i => coords.set([initial[i], initial[i + 1], initial[i + 2]], i));
    this.getAttributes(modelID).position.needsUpdate = true;
  }

  showAllItems(modelID) {
    if (this.modelCoordinates[modelID]) {
      this.resetCoordinates(modelID);
      this.getAttributes(modelID).position.needsUpdate = true;
    }
  }

  hideAllItems(modelID) {
    this.getCoordinates(modelID).fill(0);
    this.getAttributes(modelID).position.needsUpdate = true;
  }

  initializeCoordinates(modelID) {
    const coordinates = this.getCoordinates(modelID);

    if (!this.modelCoordinates[modelID]) {
      this.modelCoordinates[modelID] = new Float32Array(coordinates);
    }
  }

  resetCoordinates(modelID) {
    const initial = this.modelCoordinates[modelID];
    this.getCoordinates(modelID).set(initial);
  }

  getCoordinates(modelID) {
    return this.getAttributes(modelID).position.array;
  }

  getAttributes(modelID) {
    return this.state.models[modelID].mesh.geometry.attributes;
  }

}

class IFCManager {
  constructor() {
    this.state = {
      models: [],
      api: new _webIfcApi.IfcAPI(),
      useJSON: false
    };
    this.BVH = new BvhManager();
    this.parser = new IFCParser(this.state, this.BVH);
    this.subsets = new SubsetManager(this.state, this.BVH);
    this.properties = new PropertyManager(this.state);
    this.types = new TypeManager(this.state);
    this.hider = new ItemsHider(this.state);
  }

  async parse(buffer) {
    const mesh = await this.parser.parse(buffer);
    this.state.useJSON ? this.disposeMemory() : this.types.getAllTypes();
    this.hider.processCoordinates(mesh.modelID);
    const model = new IFCModel(mesh.geometry, mesh.material);
    model.setIFCManager(this);
    return model;
  }

  setWasmPath(path) {
    this.state.api.SetWasmPath(path);
  }

  applyWebIfcConfig(settings) {
    this.state.webIfcSettings = settings;
  }

  useJSONData(useJSON = true) {
    this.state.useJSON = useJSON;
    this.disposeMemory();
  }

  addModelJSONData(modelID, data) {
    const model = this.state.models[modelID];

    if (model) {
      model.jsonData = data;
    }
  }

  disposeMemory() {
    this.state.api = null;
    this.state.api = new _webIfcApi.IfcAPI();
  }

  setupThreeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast) {
    this.BVH.initializeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast);
  }

  close(modelID, scene) {
    this.state.api.CloseModel(modelID);

    if (scene) {
      scene.remove(this.state.models[modelID].mesh);
    }

    delete this.state.models[modelID];
  }

  getExpressId(geometry, faceIndex) {
    return this.properties.getExpressId(geometry, faceIndex);
  }

  getAllItemsOfType(modelID, type, verbose) {
    return this.properties.getAllItemsOfType(modelID, type, verbose);
  }

  getItemProperties(modelID, id, recursive = false) {
    return this.properties.getItemProperties(modelID, id, recursive);
  }

  getPropertySets(modelID, id, recursive = false) {
    return this.properties.getPropertySets(modelID, id, recursive);
  }

  getTypeProperties(modelID, id, recursive = false) {
    return this.properties.getTypeProperties(modelID, id, recursive);
  }

  getMaterialsProperties(modelID, id, recursive = false) {
    return this.properties.getMaterialsProperties(modelID, id, recursive);
  }

  getIfcType(modelID, id) {
    const typeID = this.state.models[modelID].types[id];
    return IfcElements[typeID];
  }

  getSpatialStructure(modelID) {
    return this.properties.getSpatialStructure(modelID);
  }

  getSubset(modelID, material) {
    return this.subsets.getSubset(modelID, material);
  }

  removeSubset(modelID, parent, material) {
    this.subsets.removeSubset(modelID, parent, material);
  }

  createSubset(config) {
    return this.subsets.createSubset(config);
  }

  hideItems(modelID, ids) {
    this.hider.hideItems(modelID, ids);
  }

  hideAllItems(modelID) {
    this.hider.hideAllItems(modelID);
  }

  showItems(modelID, ids) {
    this.hider.showItems(modelID, ids);
  }

  showAllItems(modelID) {
    this.hider.showAllItems(modelID);
  }

}

class IFCLoader extends _three.Loader {
  constructor(manager) {
    super(manager);
    this.ifcManager = new IFCManager();
  }

  load(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new _three.FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setResponseType('arraybuffer');
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, async function (buffer) {
      try {
        if (typeof buffer == 'string') {
          throw new Error('IFC files must be given as a buffer!');
        }

        onLoad(await scope.parse(buffer));
      } catch (e) {
        if (onError) {
          onError(e);
        } else {
          console.error(e);
        }

        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  }

  parse(buffer) {
    return this.ifcManager.parse(buffer);
  }

}

exports.IFCLoader = IFCLoader;

},{"./BufferGeometryUtils.js":5,"./ifc/web-ifc-api.js":8,"three":10}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrbitControls = exports.MapControls = void 0;

var _three = require("three");

// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one-finger move
//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move
const _changeEvent = {
  type: 'change'
};
const _startEvent = {
  type: 'start'
};
const _endEvent = {
  type: 'end'
};

class OrbitControls extends _three.EventDispatcher {
  constructor(object, domElement) {
    super();
    if (domElement === undefined) console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.');
    if (domElement === document) console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.');
    this.object = object;
    this.domElement = domElement;
    this.domElement.style.touchAction = 'none'; // disable touch scroll
    // Set to false to disable this control

    this.enabled = true; // "target" sets the location of focus, where the object orbits around

    this.target = new _three.Vector3(); // How far you can dolly in and out ( PerspectiveCamera only )

    this.minDistance = 0;
    this.maxDistance = Infinity; // How far you can zoom in and out ( OrthographicCamera only )

    this.minZoom = 0;
    this.maxZoom = Infinity; // How far you can orbit vertically, upper and lower limits.
    // Range is 0 to Math.PI radians.

    this.minPolarAngle = 0; // radians

    this.maxPolarAngle = Math.PI; // radians
    // How far you can orbit horizontally, upper and lower limits.
    // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )

    this.minAzimuthAngle = -Infinity; // radians

    this.maxAzimuthAngle = Infinity; // radians
    // Set to true to enable damping (inertia)
    // If damping is enabled, you must call controls.update() in your animation loop

    this.enableDamping = false;
    this.dampingFactor = 0.05; // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
    // Set to false to disable zooming

    this.enableZoom = true;
    this.zoomSpeed = 1.0; // Set to false to disable rotating

    this.enableRotate = true;
    this.rotateSpeed = 1.0; // Set to false to disable panning

    this.enablePan = true;
    this.panSpeed = 1.0;
    this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up

    this.keyPanSpeed = 7.0; // pixels moved per arrow key push
    // Set to true to automatically rotate around the target
    // If auto-rotate is enabled, you must call controls.update() in your animation loop

    this.autoRotate = false;
    this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60
    // The four arrow keys

    this.keys = {
      LEFT: 'ArrowLeft',
      UP: 'ArrowUp',
      RIGHT: 'ArrowRight',
      BOTTOM: 'ArrowDown'
    }; // Mouse buttons

    this.mouseButtons = {
      LEFT: _three.MOUSE.ROTATE,
      MIDDLE: _three.MOUSE.DOLLY,
      RIGHT: _three.MOUSE.PAN
    }; // Touch fingers

    this.touches = {
      ONE: _three.TOUCH.ROTATE,
      TWO: _three.TOUCH.DOLLY_PAN
    }; // for reset

    this.target0 = this.target.clone();
    this.position0 = this.object.position.clone();
    this.zoom0 = this.object.zoom; // the target DOM element for key events

    this._domElementKeyEvents = null; //
    // public methods
    //

    this.getPolarAngle = function () {
      return spherical.phi;
    };

    this.getAzimuthalAngle = function () {
      return spherical.theta;
    };

    this.getDistance = function () {
      return this.object.position.distanceTo(this.target);
    };

    this.listenToKeyEvents = function (domElement) {
      domElement.addEventListener('keydown', onKeyDown);
      this._domElementKeyEvents = domElement;
    };

    this.saveState = function () {
      scope.target0.copy(scope.target);
      scope.position0.copy(scope.object.position);
      scope.zoom0 = scope.object.zoom;
    };

    this.reset = function () {
      scope.target.copy(scope.target0);
      scope.object.position.copy(scope.position0);
      scope.object.zoom = scope.zoom0;
      scope.object.updateProjectionMatrix();
      scope.dispatchEvent(_changeEvent);
      scope.update();
      state = STATE.NONE;
    }; // this method is exposed, but perhaps it would be better if we can make it private...


    this.update = function () {
      const offset = new _three.Vector3(); // so camera.up is the orbit axis

      const quat = new _three.Quaternion().setFromUnitVectors(object.up, new _three.Vector3(0, 1, 0));
      const quatInverse = quat.clone().invert();
      const lastPosition = new _three.Vector3();
      const lastQuaternion = new _three.Quaternion();
      const twoPI = 2 * Math.PI;
      return function update() {
        const position = scope.object.position;
        offset.copy(position).sub(scope.target); // rotate offset to "y-axis-is-up" space

        offset.applyQuaternion(quat); // angle from z-axis around y-axis

        spherical.setFromVector3(offset);

        if (scope.autoRotate && state === STATE.NONE) {
          rotateLeft(getAutoRotationAngle());
        }

        if (scope.enableDamping) {
          spherical.theta += sphericalDelta.theta * scope.dampingFactor;
          spherical.phi += sphericalDelta.phi * scope.dampingFactor;
        } else {
          spherical.theta += sphericalDelta.theta;
          spherical.phi += sphericalDelta.phi;
        } // restrict theta to be between desired limits


        let min = scope.minAzimuthAngle;
        let max = scope.maxAzimuthAngle;

        if (isFinite(min) && isFinite(max)) {
          if (min < -Math.PI) min += twoPI;else if (min > Math.PI) min -= twoPI;
          if (max < -Math.PI) max += twoPI;else if (max > Math.PI) max -= twoPI;

          if (min <= max) {
            spherical.theta = Math.max(min, Math.min(max, spherical.theta));
          } else {
            spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);
          }
        } // restrict phi to be between desired limits


        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
        spherical.makeSafe();
        spherical.radius *= scale; // restrict radius to be between desired limits

        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius)); // move target to panned location

        if (scope.enableDamping === true) {
          scope.target.addScaledVector(panOffset, scope.dampingFactor);
        } else {
          scope.target.add(panOffset);
        }

        offset.setFromSpherical(spherical); // rotate offset back to "camera-up-vector-is-up" space

        offset.applyQuaternion(quatInverse);
        position.copy(scope.target).add(offset);
        scope.object.lookAt(scope.target);

        if (scope.enableDamping === true) {
          sphericalDelta.theta *= 1 - scope.dampingFactor;
          sphericalDelta.phi *= 1 - scope.dampingFactor;
          panOffset.multiplyScalar(1 - scope.dampingFactor);
        } else {
          sphericalDelta.set(0, 0, 0);
          panOffset.set(0, 0, 0);
        }

        scale = 1; // update condition is:
        // min(camera displacement, camera rotation in radians)^2 > EPS
        // using small-angle approximation cos(x/2) = 1 - x^2 / 8

        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {
          scope.dispatchEvent(_changeEvent);
          lastPosition.copy(scope.object.position);
          lastQuaternion.copy(scope.object.quaternion);
          zoomChanged = false;
          return true;
        }

        return false;
      };
    }();

    this.dispose = function () {
      scope.domElement.removeEventListener('contextmenu', onContextMenu);
      scope.domElement.removeEventListener('pointerdown', onPointerDown);
      scope.domElement.removeEventListener('pointercancel', onPointerCancel);
      scope.domElement.removeEventListener('wheel', onMouseWheel);
      scope.domElement.removeEventListener('pointermove', onPointerMove);
      scope.domElement.removeEventListener('pointerup', onPointerUp);

      if (scope._domElementKeyEvents !== null) {
        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown);
      } //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

    }; //
    // internals
    //


    const scope = this;
    const STATE = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    };
    let state = STATE.NONE;
    const EPS = 0.000001; // current position in spherical coordinates

    const spherical = new _three.Spherical();
    const sphericalDelta = new _three.Spherical();
    let scale = 1;
    const panOffset = new _three.Vector3();
    let zoomChanged = false;
    const rotateStart = new _three.Vector2();
    const rotateEnd = new _three.Vector2();
    const rotateDelta = new _three.Vector2();
    const panStart = new _three.Vector2();
    const panEnd = new _three.Vector2();
    const panDelta = new _three.Vector2();
    const dollyStart = new _three.Vector2();
    const dollyEnd = new _three.Vector2();
    const dollyDelta = new _three.Vector2();
    const pointers = [];
    const pointerPositions = {};

    function getAutoRotationAngle() {
      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
    }

    function getZoomScale() {
      return Math.pow(0.95, scope.zoomSpeed);
    }

    function rotateLeft(angle) {
      sphericalDelta.theta -= angle;
    }

    function rotateUp(angle) {
      sphericalDelta.phi -= angle;
    }

    const panLeft = function () {
      const v = new _three.Vector3();
      return function panLeft(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix

        v.multiplyScalar(-distance);
        panOffset.add(v);
      };
    }();

    const panUp = function () {
      const v = new _three.Vector3();
      return function panUp(distance, objectMatrix) {
        if (scope.screenSpacePanning === true) {
          v.setFromMatrixColumn(objectMatrix, 1);
        } else {
          v.setFromMatrixColumn(objectMatrix, 0);
          v.crossVectors(scope.object.up, v);
        }

        v.multiplyScalar(distance);
        panOffset.add(v);
      };
    }(); // deltaX and deltaY are in pixels; right and down are positive


    const pan = function () {
      const offset = new _three.Vector3();
      return function pan(deltaX, deltaY) {
        const element = scope.domElement;

        if (scope.object.isPerspectiveCamera) {
          // perspective
          const position = scope.object.position;
          offset.copy(position).sub(scope.target);
          let targetDistance = offset.length(); // half of the fov is center to top of screen

          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0); // we use only clientHeight here so aspect ratio does not distort speed

          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
        } else if (scope.object.isOrthographicCamera) {
          // orthographic
          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
        } else {
          // camera neither orthographic nor perspective
          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');
          scope.enablePan = false;
        }
      };
    }();

    function dollyOut(dollyScale) {
      if (scope.object.isPerspectiveCamera) {
        scale /= dollyScale;
      } else if (scope.object.isOrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    function dollyIn(dollyScale) {
      if (scope.object.isPerspectiveCamera) {
        scale *= dollyScale;
      } else if (scope.object.isOrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    } //
    // event callbacks - update the object state
    //


    function handleMouseDownRotate(event) {
      rotateStart.set(event.clientX, event.clientY);
    }

    function handleMouseDownDolly(event) {
      dollyStart.set(event.clientX, event.clientY);
    }

    function handleMouseDownPan(event) {
      panStart.set(event.clientX, event.clientY);
    }

    function handleMouseMoveRotate(event) {
      rotateEnd.set(event.clientX, event.clientY);
      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
      const element = scope.domElement;
      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
      rotateStart.copy(rotateEnd);
      scope.update();
    }

    function handleMouseMoveDolly(event) {
      dollyEnd.set(event.clientX, event.clientY);
      dollyDelta.subVectors(dollyEnd, dollyStart);

      if (dollyDelta.y > 0) {
        dollyOut(getZoomScale());
      } else if (dollyDelta.y < 0) {
        dollyIn(getZoomScale());
      }

      dollyStart.copy(dollyEnd);
      scope.update();
    }

    function handleMouseMovePan(event) {
      panEnd.set(event.clientX, event.clientY);
      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
      pan(panDelta.x, panDelta.y);
      panStart.copy(panEnd);
      scope.update();
    }

    function handleMouseWheel(event) {
      if (event.deltaY < 0) {
        dollyIn(getZoomScale());
      } else if (event.deltaY > 0) {
        dollyOut(getZoomScale());
      }

      scope.update();
    }

    function handleKeyDown(event) {
      let needsUpdate = false;

      switch (event.code) {
        case scope.keys.UP:
          pan(0, scope.keyPanSpeed);
          needsUpdate = true;
          break;

        case scope.keys.BOTTOM:
          pan(0, -scope.keyPanSpeed);
          needsUpdate = true;
          break;

        case scope.keys.LEFT:
          pan(scope.keyPanSpeed, 0);
          needsUpdate = true;
          break;

        case scope.keys.RIGHT:
          pan(-scope.keyPanSpeed, 0);
          needsUpdate = true;
          break;
      }

      if (needsUpdate) {
        // prevent the browser from scrolling on cursor keys
        event.preventDefault();
        scope.update();
      }
    }

    function handleTouchStartRotate() {
      if (pointers.length === 1) {
        rotateStart.set(pointers[0].pageX, pointers[0].pageY);
      } else {
        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
        rotateStart.set(x, y);
      }
    }

    function handleTouchStartPan() {
      if (pointers.length === 1) {
        panStart.set(pointers[0].pageX, pointers[0].pageY);
      } else {
        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
        panStart.set(x, y);
      }
    }

    function handleTouchStartDolly() {
      const dx = pointers[0].pageX - pointers[1].pageX;
      const dy = pointers[0].pageY - pointers[1].pageY;
      const distance = Math.sqrt(dx * dx + dy * dy);
      dollyStart.set(0, distance);
    }

    function handleTouchStartDollyPan() {
      if (scope.enableZoom) handleTouchStartDolly();
      if (scope.enablePan) handleTouchStartPan();
    }

    function handleTouchStartDollyRotate() {
      if (scope.enableZoom) handleTouchStartDolly();
      if (scope.enableRotate) handleTouchStartRotate();
    }

    function handleTouchMoveRotate(event) {
      if (pointers.length == 1) {
        rotateEnd.set(event.pageX, event.pageY);
      } else {
        const position = getSecondPointerPosition(event);
        const x = 0.5 * (event.pageX + position.x);
        const y = 0.5 * (event.pageY + position.y);
        rotateEnd.set(x, y);
      }

      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
      const element = scope.domElement;
      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
      rotateStart.copy(rotateEnd);
    }

    function handleTouchMovePan(event) {
      if (pointers.length === 1) {
        panEnd.set(event.pageX, event.pageY);
      } else {
        const position = getSecondPointerPosition(event);
        const x = 0.5 * (event.pageX + position.x);
        const y = 0.5 * (event.pageY + position.y);
        panEnd.set(x, y);
      }

      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
      pan(panDelta.x, panDelta.y);
      panStart.copy(panEnd);
    }

    function handleTouchMoveDolly(event) {
      const position = getSecondPointerPosition(event);
      const dx = event.pageX - position.x;
      const dy = event.pageY - position.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      dollyEnd.set(0, distance);
      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
      dollyOut(dollyDelta.y);
      dollyStart.copy(dollyEnd);
    }

    function handleTouchMoveDollyPan(event) {
      if (scope.enableZoom) handleTouchMoveDolly(event);
      if (scope.enablePan) handleTouchMovePan(event);
    }

    function handleTouchMoveDollyRotate(event) {
      if (scope.enableZoom) handleTouchMoveDolly(event);
      if (scope.enableRotate) handleTouchMoveRotate(event);
    } //
    // event handlers - FSM: listen for events and reset state
    //


    function onPointerDown(event) {
      if (scope.enabled === false) return;

      if (pointers.length === 0) {
        scope.domElement.setPointerCapture(event.pointerId);
        scope.domElement.addEventListener('pointermove', onPointerMove);
        scope.domElement.addEventListener('pointerup', onPointerUp);
      } //


      addPointer(event);

      if (event.pointerType === 'touch') {
        onTouchStart(event);
      } else {
        onMouseDown(event);
      }
    }

    function onPointerMove(event) {
      if (scope.enabled === false) return;

      if (event.pointerType === 'touch') {
        onTouchMove(event);
      } else {
        onMouseMove(event);
      }
    }

    function onPointerUp(event) {
      removePointer(event);

      if (pointers.length === 0) {
        scope.domElement.releasePointerCapture(event.pointerId);
        scope.domElement.removeEventListener('pointermove', onPointerMove);
        scope.domElement.removeEventListener('pointerup', onPointerUp);
      }

      scope.dispatchEvent(_endEvent);
      state = STATE.NONE;
    }

    function onPointerCancel(event) {
      removePointer(event);
    }

    function onMouseDown(event) {
      let mouseAction;

      switch (event.button) {
        case 0:
          mouseAction = scope.mouseButtons.LEFT;
          break;

        case 1:
          mouseAction = scope.mouseButtons.MIDDLE;
          break;

        case 2:
          mouseAction = scope.mouseButtons.RIGHT;
          break;

        default:
          mouseAction = -1;
      }

      switch (mouseAction) {
        case _three.MOUSE.DOLLY:
          if (scope.enableZoom === false) return;
          handleMouseDownDolly(event);
          state = STATE.DOLLY;
          break;

        case _three.MOUSE.ROTATE:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (scope.enablePan === false) return;
            handleMouseDownPan(event);
            state = STATE.PAN;
          } else {
            if (scope.enableRotate === false) return;
            handleMouseDownRotate(event);
            state = STATE.ROTATE;
          }

          break;

        case _three.MOUSE.PAN:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (scope.enableRotate === false) return;
            handleMouseDownRotate(event);
            state = STATE.ROTATE;
          } else {
            if (scope.enablePan === false) return;
            handleMouseDownPan(event);
            state = STATE.PAN;
          }

          break;

        default:
          state = STATE.NONE;
      }

      if (state !== STATE.NONE) {
        scope.dispatchEvent(_startEvent);
      }
    }

    function onMouseMove(event) {
      if (scope.enabled === false) return;

      switch (state) {
        case STATE.ROTATE:
          if (scope.enableRotate === false) return;
          handleMouseMoveRotate(event);
          break;

        case STATE.DOLLY:
          if (scope.enableZoom === false) return;
          handleMouseMoveDolly(event);
          break;

        case STATE.PAN:
          if (scope.enablePan === false) return;
          handleMouseMovePan(event);
          break;
      }
    }

    function onMouseWheel(event) {
      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return;
      event.preventDefault();
      scope.dispatchEvent(_startEvent);
      handleMouseWheel(event);
      scope.dispatchEvent(_endEvent);
    }

    function onKeyDown(event) {
      if (scope.enabled === false || scope.enablePan === false) return;
      handleKeyDown(event);
    }

    function onTouchStart(event) {
      trackPointer(event);

      switch (pointers.length) {
        case 1:
          switch (scope.touches.ONE) {
            case _three.TOUCH.ROTATE:
              if (scope.enableRotate === false) return;
              handleTouchStartRotate();
              state = STATE.TOUCH_ROTATE;
              break;

            case _three.TOUCH.PAN:
              if (scope.enablePan === false) return;
              handleTouchStartPan();
              state = STATE.TOUCH_PAN;
              break;

            default:
              state = STATE.NONE;
          }

          break;

        case 2:
          switch (scope.touches.TWO) {
            case _three.TOUCH.DOLLY_PAN:
              if (scope.enableZoom === false && scope.enablePan === false) return;
              handleTouchStartDollyPan();
              state = STATE.TOUCH_DOLLY_PAN;
              break;

            case _three.TOUCH.DOLLY_ROTATE:
              if (scope.enableZoom === false && scope.enableRotate === false) return;
              handleTouchStartDollyRotate();
              state = STATE.TOUCH_DOLLY_ROTATE;
              break;

            default:
              state = STATE.NONE;
          }

          break;

        default:
          state = STATE.NONE;
      }

      if (state !== STATE.NONE) {
        scope.dispatchEvent(_startEvent);
      }
    }

    function onTouchMove(event) {
      trackPointer(event);

      switch (state) {
        case STATE.TOUCH_ROTATE:
          if (scope.enableRotate === false) return;
          handleTouchMoveRotate(event);
          scope.update();
          break;

        case STATE.TOUCH_PAN:
          if (scope.enablePan === false) return;
          handleTouchMovePan(event);
          scope.update();
          break;

        case STATE.TOUCH_DOLLY_PAN:
          if (scope.enableZoom === false && scope.enablePan === false) return;
          handleTouchMoveDollyPan(event);
          scope.update();
          break;

        case STATE.TOUCH_DOLLY_ROTATE:
          if (scope.enableZoom === false && scope.enableRotate === false) return;
          handleTouchMoveDollyRotate(event);
          scope.update();
          break;

        default:
          state = STATE.NONE;
      }
    }

    function onContextMenu(event) {
      if (scope.enabled === false) return;
      event.preventDefault();
    }

    function addPointer(event) {
      pointers.push(event);
    }

    function removePointer(event) {
      delete pointerPositions[event.pointerId];

      for (let i = 0; i < pointers.length; i++) {
        if (pointers[i].pointerId == event.pointerId) {
          pointers.splice(i, 1);
          return;
        }
      }
    }

    function trackPointer(event) {
      let position = pointerPositions[event.pointerId];

      if (position === undefined) {
        position = new _three.Vector2();
        pointerPositions[event.pointerId] = position;
      }

      position.set(event.pageX, event.pageY);
    }

    function getSecondPointerPosition(event) {
      const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
      return pointerPositions[pointer.pointerId];
    } //


    scope.domElement.addEventListener('contextmenu', onContextMenu);
    scope.domElement.addEventListener('pointerdown', onPointerDown);
    scope.domElement.addEventListener('pointercancel', onPointerCancel);
    scope.domElement.addEventListener('wheel', onMouseWheel, {
      passive: false
    }); // force an update at start

    this.update();
  }

} // This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
// This is very similar to OrbitControls, another set of touch behavior
//
//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate
//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
//    Pan - left mouse, or arrow keys / touch: one-finger move


exports.OrbitControls = OrbitControls;

class MapControls extends OrbitControls {
  constructor(object, domElement) {
    super(object, domElement);
    this.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up

    this.mouseButtons.LEFT = _three.MOUSE.PAN;
    this.mouseButtons.RIGHT = _three.MOUSE.ROTATE;
    this.touches.ONE = _three.TOUCH.PAN;
    this.touches.TWO = _three.TOUCH.DOLLY_ROTATE;
  }

}

exports.MapControls = MapControls;

},{"three":10}],8:[function(require,module,exports){
(function (process,Buffer,__filename,__argument0,__argument1,__argument2,__argument3,__dirname){(function (){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcHumidifier=exports.IfcHeatingValueMeasure=exports.IfcHeatFluxDensityMeasure=exports.IfcHeatExchangerTypeEnum=exports.IfcHeatExchangerType=exports.IfcHeatExchanger=exports.IfcHalfSpaceSolid=exports.IfcGroup=exports.IfcGridTypeEnum=exports.IfcGridPlacement=exports.IfcGridAxis=exports.IfcGrid=exports.IfcGloballyUniqueId=exports.IfcGlobalOrLocalEnum=exports.IfcGeometricSet=exports.IfcGeometricRepresentationSubContext=exports.IfcGeometricRepresentationItem=exports.IfcGeometricRepresentationContext=exports.IfcGeometricProjectionEnum=exports.IfcGeometricCurveSet=exports.IfcGeographicElementTypeEnum=exports.IfcGeographicElementType=exports.IfcGeographicElement=exports.IfcFurnitureTypeEnum=exports.IfcFurnitureType=exports.IfcFurniture=exports.IfcFurnishingElementType=exports.IfcFurnishingElement=exports.IfcFrequencyMeasure=exports.IfcForceMeasure=exports.IfcFootingTypeEnum=exports.IfcFootingType=exports.IfcFooting=exports.IfcFontWeight=exports.IfcFontVariant=exports.IfcFontStyle=exports.IfcFlowTreatmentDeviceType=exports.IfcFlowTreatmentDevice=exports.IfcFlowTerminalType=exports.IfcFlowTerminal=exports.IfcFlowStorageDeviceType=exports.IfcFlowStorageDevice=exports.IfcFlowSegmentType=exports.IfcFlowSegment=exports.IfcFlowMovingDeviceType=exports.IfcFlowMovingDevice=exports.IfcFlowMeterTypeEnum=exports.IfcFlowMeterType=exports.IfcFlowMeter=exports.IfcFlowInstrumentTypeEnum=exports.IfcFlowInstrumentType=exports.IfcFlowInstrument=exports.IfcFlowFittingType=exports.IfcFlowFitting=exports.IfcFlowDirectionEnum=exports.IfcFlowControllerType=exports.IfcFlowController=exports.IfcFixedReferenceSweptAreaSolid=exports.IfcFireSuppressionTerminalTypeEnum=exports.IfcFireSuppressionTerminalType=exports.IfcFireSuppressionTerminal=exports.IfcFilterTypeEnum=exports.IfcFilterType=exports.IfcFilter=exports.IfcFillAreaStyleTiles=exports.IfcFillAreaStyleHatching=exports.IfcFillAreaStyle=exports.IfcFeatureElementSubtraction=exports.IfcFeatureElementAddition=exports.IfcFeatureElement=exports.IfcFastenerTypeEnum=exports.IfcFastenerType=exports.IfcFastener=exports.IfcFanTypeEnum=exports.IfcFanType=exports.IfcFan=exports.IfcFailureConnectionCondition=exports.IfcFacilityPart=exports.IfcFacility=exports.IfcFacetedBrepWithVoids=exports.IfcFacetedBrep=exports.IfcFaceSurface=exports.IfcFaceOuterBound=exports.IfcFaceBound=exports.IfcFaceBasedSurfaceModel=exports.IfcFace=exports.IfcExtrudedAreaSolidTapered=exports.IfcExtrudedAreaSolid=exports.IfcExternallyDefinedTextFont=exports.IfcExternallyDefinedSurfaceStyle=exports.IfcExternallyDefinedHatchStyle=exports.IfcExternalSpatialStructureElement=exports.IfcExternalSpatialElementTypeEnum=exports.IfcExternalSpatialElement=exports.IfcExternalReferenceRelationship=exports.IfcExternalReference=exports.IfcExternalInformation=exports.IfcExtendedProperties=exports.IfcEventTypeEnum=exports.IfcEventType=exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcMaterialProperties=exports.IfcMaterialProfileWithOffsets=exports.IfcMaterialProfileSetUsageTapering=exports.IfcMaterialProfileSetUsage=exports.IfcMaterialProfileSet=exports.IfcMaterialProfile=exports.IfcMaterialList=exports.IfcMaterialLayerWithOffsets=exports.IfcMaterialLayerSetUsage=exports.IfcMaterialLayerSet=exports.IfcMaterialLayer=exports.IfcMaterialDefinitionRepresentation=exports.IfcMaterialDefinition=exports.IfcMaterialConstituentSet=exports.IfcMaterialConstituent=exports.IfcMaterialClassificationRelationship=exports.IfcMaterial=exports.IfcMassPerLengthMeasure=exports.IfcMassMeasure=exports.IfcMassFlowRateMeasure=exports.IfcMassDensityMeasure=exports.IfcMappedItem=exports.IfcMapConversion=exports.IfcManifoldSolidBrep=exports.IfcMagneticFluxMeasure=exports.IfcMagneticFluxDensityMeasure=exports.IfcLuminousIntensityMeasure=exports.IfcLuminousIntensityDistributionMeasure=exports.IfcLuminousFluxMeasure=exports.IfcLoop=exports.IfcLogicalOperatorEnum=exports.IfcLogical=exports.IfcLocalPlacement=exports.IfcLoadGroupTypeEnum=exports.IfcLinearVelocityMeasure=exports.IfcLinearStiffnessMeasure=exports.IfcLinearPositioningElement=exports.IfcLinearPlacement=exports.IfcLinearMomentMeasure=exports.IfcLinearForceMeasure=exports.IfcLineSegment2D=exports.IfcLine=exports.IfcLightSourceSpot=exports.IfcLightSourcePositional=exports.IfcLightSourceGoniometric=exports.IfcLightSourceDirectional=exports.IfcLightSourceAmbient=exports.IfcLightSource=exports.IfcLightIntensityDistribution=exports.IfcLightFixtureTypeEnum=exports.IfcLightFixtureType=exports.IfcLightFixture=exports.IfcLightEmissionSourceEnum=exports.IfcLightDistributionData=exports.IfcLightDistributionCurveEnum=exports.IfcLibraryReference=exports.IfcLibraryInformation=exports.IfcLengthMeasure=exports.IfcLayerSetDirectionEnum=exports.IfcLanguageId=exports.IfcLampTypeEnum=exports.IfcLampType=exports.IfcLamp=exports.IfcLagTime=exports.IfcLaborResourceTypeEnum=exports.IfcLaborResourceType=exports.IfcLaborResource=exports.IfcLabel=exports.IfcLShapeProfileDef=exports.IfcKnotType=exports.IfcKinematicViscosityMeasure=exports.IfcJunctionBoxTypeEnum=exports.IfcJunctionBoxType=exports.IfcJunctionBox=exports.IfcIsothermalMoistureCapacityMeasure=exports.IfcIrregularTimeSeriesValue=exports.IfcIrregularTimeSeries=exports.IfcIonConcentrationMeasure=exports.IfcInventoryTypeEnum=exports.IfcInventory=exports.IfcIntersectionCurve=exports.IfcInternalOrExternalEnum=exports.IfcInterceptorTypeEnum=exports.IfcInterceptorType=exports.IfcInterceptor=exports.IfcIntegerCountRateMeasure=exports.IfcInteger=exports.IfcInductanceMeasure=exports.IfcIndexedTriangleTextureMap=exports.IfcIndexedTextureMap=exports.IfcIndexedPolygonalFaceWithVoids=exports.IfcIndexedPolygonalFace=exports.IfcIndexedPolyCurve=exports.IfcIndexedColourMap=exports.IfcImageTexture=exports.IfcIlluminanceMeasure=exports.IfcIdentifier=exports.IfcIShapeProfileDef=exports.IfcHumidifierTypeEnum=exports.IfcHumidifierType=exports.IfcHumidifier=exports.IfcHeatingValueMeasure=exports.IfcHeatFluxDensityMeasure=exports.IfcHeatExchangerTypeEnum=exports.IfcHeatExchangerType=exports.IfcHeatExchanger=exports.IfcHalfSpaceSolid=exports.IfcGroup=exports.IfcGridTypeEnum=exports.IfcGridPlacement=exports.IfcGridAxis=exports.IfcGrid=exports.IfcGloballyUniqueId=exports.IfcGlobalOrLocalEnum=exports.IfcGeometricSet=exports.IfcGeometricRepresentationSubContext=exports.IfcGeometricRepresentationItem=exports.IfcGeometricRepresentationContext=exports.IfcGeometricProjectionEnum=exports.IfcGeometricCurveSet=exports.IfcGeographicElementTypeEnum=exports.IfcGeographicElementType=exports.IfcGeographicElement=exports.IfcFurnitureTypeEnum=exports.IfcFurnitureType=exports.IfcFurniture=exports.IfcFurnishingElementType=exports.IfcFurnishingElement=exports.IfcFrequencyMeasure=exports.IfcForceMeasure=exports.IfcFootingTypeEnum=exports.IfcFootingType=exports.IfcFooting=exports.IfcFontWeight=exports.IfcFontVariant=exports.IfcFontStyle=exports.IfcFlowTreatmentDeviceType=exports.IfcFlowTreatmentDevice=exports.IfcFlowTerminalType=exports.IfcFlowTerminal=exports.IfcFlowStorageDeviceType=exports.IfcFlowStorageDevice=exports.IfcFlowSegmentType=exports.IfcFlowSegment=exports.IfcFlowMovingDeviceType=exports.IfcFlowMovingDevice=exports.IfcFlowMeterTypeEnum=exports.IfcFlowMeterType=exports.IfcFlowMeter=exports.IfcFlowInstrumentTypeEnum=exports.IfcFlowInstrumentType=exports.IfcFlowInstrument=exports.IfcFlowFittingType=exports.IfcFlowFitting=exports.IfcFlowDirectionEnum=exports.IfcFlowControllerType=exports.IfcFlowController=exports.IfcFixedReferenceSweptAreaSolid=exports.IfcFireSuppressionTerminalTypeEnum=exports.IfcFireSuppressionTerminalType=exports.IfcFireSuppressionTerminal=exports.IfcFilterTypeEnum=exports.IfcFilterType=exports.IfcFilter=exports.IfcFillAreaStyleTiles=exports.IfcFillAreaStyleHatching=exports.IfcFillAreaStyle=exports.IfcFeatureElementSubtraction=exports.IfcFeatureElementAddition=exports.IfcFeatureElement=exports.IfcFastenerTypeEnum=exports.IfcFastenerType=exports.IfcFastener=exports.IfcFanTypeEnum=exports.IfcFanType=exports.IfcFan=exports.IfcFailureConnectionCondition=exports.IfcFacilityPart=exports.IfcFacility=exports.IfcFacetedBrepWithVoids=exports.IfcFacetedBrep=exports.IfcFaceSurface=exports.IfcFaceOuterBound=exports.IfcFaceBound=exports.IfcFaceBasedSurfaceModel=exports.IfcFace=exports.IfcExtrudedAreaSolidTapered=exports.IfcExtrudedAreaSolid=exports.IfcExternallyDefinedTextFont=exports.IfcExternallyDefinedSurfaceStyle=exports.IfcExternallyDefinedHatchStyle=exports.IfcExternalSpatialStructureElement=exports.IfcExternalSpatialElementTypeEnum=exports.IfcExternalSpatialElement=exports.IfcExternalReferenceRelationship=exports.IfcExternalReference=exports.IfcExternalInformation=exports.IfcExtendedProperties=exports.IfcEventTypeEnum=exports.IfcEventType=exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcPolyLoop=exports.IfcPointOnSurface=exports.IfcPointOnCurve=exports.IfcPoint=exports.IfcPlateTypeEnum=exports.IfcPlateType=exports.IfcPlateStandardCase=exports.IfcPlate=exports.IfcPlaneAngleMeasure=exports.IfcPlane=exports.IfcPlanarForceMeasure=exports.IfcPlanarExtent=exports.IfcPlanarBox=exports.IfcPlacement=exports.IfcPixelTexture=exports.IfcPipeSegmentTypeEnum=exports.IfcPipeSegmentType=exports.IfcPipeSegment=exports.IfcPipeFittingTypeEnum=exports.IfcPipeFittingType=exports.IfcPipeFitting=exports.IfcPileTypeEnum=exports.IfcPileType=exports.IfcPileConstructionEnum=exports.IfcPile=exports.IfcPhysicalSimpleQuantity=exports.IfcPhysicalQuantity=exports.IfcPhysicalOrVirtualEnum=exports.IfcPhysicalComplexQuantity=exports.IfcPersonAndOrganization=exports.IfcPerson=exports.IfcPermitTypeEnum=exports.IfcPermit=exports.IfcPermeableCoveringProperties=exports.IfcPermeableCoveringOperationEnum=exports.IfcPerformanceHistoryTypeEnum=exports.IfcPerformanceHistory=exports.IfcPcurve=exports.IfcPath=exports.IfcParameterizedProfileDef=exports.IfcParameterValue=exports.IfcPHMeasure=exports.IfcOwnerHistory=exports.IfcOutletTypeEnum=exports.IfcOutletType=exports.IfcOutlet=exports.IfcOuterBoundaryCurve=exports.IfcOrientedEdge=exports.IfcOrientationExpression=exports.IfcOrganizationRelationship=exports.IfcOrganization=exports.IfcOpeningStandardCase=exports.IfcOpeningElementTypeEnum=exports.IfcOpeningElement=exports.IfcOpenShell=exports.IfcOffsetCurveByDistances=exports.IfcOffsetCurve3D=exports.IfcOffsetCurve2D=exports.IfcOffsetCurve=exports.IfcOccupantTypeEnum=exports.IfcOccupant=exports.IfcObjectiveEnum=exports.IfcObjective=exports.IfcObjectTypeEnum=exports.IfcObjectPlacement=exports.IfcObjectDefinition=exports.IfcObject=exports.IfcNumericMeasure=exports.IfcNullStyle=exports.IfcNormalisedRatioMeasure=exports.IfcNonNegativeLengthMeasure=exports.IfcNamedUnit=exports.IfcMotorConnectionTypeEnum=exports.IfcMotorConnectionType=exports.IfcMotorConnection=exports.IfcMonthInYearNumber=exports.IfcMonetaryUnit=exports.IfcMonetaryMeasure=exports.IfcMomentOfInertiaMeasure=exports.IfcMolecularWeightMeasure=exports.IfcMoistureDiffusivityMeasure=exports.IfcModulusOfSubgradeReactionMeasure=exports.IfcModulusOfRotationalSubgradeReactionMeasure=exports.IfcModulusOfLinearSubgradeReactionMeasure=exports.IfcModulusOfElasticityMeasure=exports.IfcMirroredProfileDef=exports.IfcMetric=exports.IfcMemberTypeEnum=exports.IfcMemberType=exports.IfcMemberStandardCase=exports.IfcMember=exports.IfcMedicalDeviceTypeEnum=exports.IfcMedicalDeviceType=exports.IfcMedicalDevice=exports.IfcMechanicalFastenerTypeEnum=exports.IfcMechanicalFastenerType=exports.IfcMechanicalFastener=exports.IfcMeasureWithUnit=exports.IfcMaterialUsageDefinition=exports.IfcMaterialRelationship=exports.IfcMaterialProperties=exports.IfcMaterialProfileWithOffsets=exports.IfcMaterialProfileSetUsageTapering=exports.IfcMaterialProfileSetUsage=exports.IfcMaterialProfileSet=exports.IfcMaterialProfile=exports.IfcMaterialList=exports.IfcMaterialLayerWithOffsets=exports.IfcMaterialLayerSetUsage=exports.IfcMaterialLayerSet=exports.IfcMaterialLayer=exports.IfcMaterialDefinitionRepresentation=exports.IfcMaterialDefinition=exports.IfcMaterialConstituentSet=exports.IfcMaterialConstituent=exports.IfcMaterialClassificationRelationship=exports.IfcMaterial=exports.IfcMassPerLengthMeasure=exports.IfcMassMeasure=exports.IfcMassFlowRateMeasure=exports.IfcMassDensityMeasure=exports.IfcMappedItem=exports.IfcMapConversion=exports.IfcManifoldSolidBrep=exports.IfcMagneticFluxMeasure=exports.IfcMagneticFluxDensityMeasure=exports.IfcLuminousIntensityMeasure=exports.IfcLuminousIntensityDistributionMeasure=exports.IfcLuminousFluxMeasure=exports.IfcLoop=exports.IfcLogicalOperatorEnum=exports.IfcLogical=exports.IfcLocalPlacement=exports.IfcLoadGroupTypeEnum=exports.IfcLinearVelocityMeasure=exports.IfcLinearStiffnessMeasure=exports.IfcLinearPositioningElement=exports.IfcLinearPlacement=exports.IfcLinearMomentMeasure=exports.IfcLinearForceMeasure=exports.IfcLineSegment2D=exports.IfcLine=exports.IfcLightSourceSpot=exports.IfcLightSourcePositional=exports.IfcLightSourceGoniometric=exports.IfcLightSourceDirectional=exports.IfcLightSourceAmbient=exports.IfcLightSource=exports.IfcLightIntensityDistribution=exports.IfcLightFixtureTypeEnum=exports.IfcLightFixtureType=exports.IfcLightFixture=exports.IfcLightEmissionSourceEnum=exports.IfcLightDistributionData=exports.IfcLightDistributionCurveEnum=exports.IfcLibraryReference=exports.IfcLibraryInformation=exports.IfcLengthMeasure=exports.IfcLayerSetDirectionEnum=exports.IfcLanguageId=exports.IfcLampTypeEnum=exports.IfcLampType=exports.IfcLamp=exports.IfcLagTime=exports.IfcLaborResourceTypeEnum=exports.IfcLaborResourceType=exports.IfcLaborResource=exports.IfcLabel=exports.IfcLShapeProfileDef=exports.IfcKnotType=exports.IfcKinematicViscosityMeasure=exports.IfcJunctionBoxTypeEnum=exports.IfcJunctionBoxType=exports.IfcJunctionBox=exports.IfcIsothermalMoistureCapacityMeasure=exports.IfcIrregularTimeSeriesValue=exports.IfcIrregularTimeSeries=exports.IfcIonConcentrationMeasure=exports.IfcInventoryTypeEnum=exports.IfcInventory=exports.IfcIntersectionCurve=exports.IfcInternalOrExternalEnum=exports.IfcInterceptorTypeEnum=exports.IfcInterceptorType=exports.IfcInterceptor=exports.IfcIntegerCountRateMeasure=exports.IfcInteger=exports.IfcInductanceMeasure=exports.IfcIndexedTriangleTextureMap=exports.IfcIndexedTextureMap=exports.IfcIndexedPolygonalFaceWithVoids=exports.IfcIndexedPolygonalFace=exports.IfcIndexedPolyCurve=exports.IfcIndexedColourMap=exports.IfcImageTexture=exports.IfcIlluminanceMeasure=exports.IfcIdentifier=exports.IfcIShapeProfileDef=exports.IfcHumidifierTypeEnum=exports.IfcHumidifierType=exports.IfcHumidifier=exports.IfcHeatingValueMeasure=exports.IfcHeatFluxDensityMeasure=exports.IfcHeatExchangerTypeEnum=exports.IfcHeatExchangerType=exports.IfcHeatExchanger=exports.IfcHalfSpaceSolid=exports.IfcGroup=exports.IfcGridTypeEnum=exports.IfcGridPlacement=exports.IfcGridAxis=exports.IfcGrid=exports.IfcGloballyUniqueId=exports.IfcGlobalOrLocalEnum=exports.IfcGeometricSet=exports.IfcGeometricRepresentationSubContext=exports.IfcGeometricRepresentationItem=exports.IfcGeometricRepresentationContext=exports.IfcGeometricProjectionEnum=exports.IfcGeometricCurveSet=exports.IfcGeographicElementTypeEnum=exports.IfcGeographicElementType=exports.IfcGeographicElement=exports.IfcFurnitureTypeEnum=exports.IfcFurnitureType=exports.IfcFurniture=exports.IfcFurnishingElementType=exports.IfcFurnishingElement=exports.IfcFrequencyMeasure=exports.IfcForceMeasure=exports.IfcFootingTypeEnum=exports.IfcFootingType=exports.IfcFooting=exports.IfcFontWeight=exports.IfcFontVariant=exports.IfcFontStyle=exports.IfcFlowTreatmentDeviceType=exports.IfcFlowTreatmentDevice=exports.IfcFlowTerminalType=exports.IfcFlowTerminal=exports.IfcFlowStorageDeviceType=exports.IfcFlowStorageDevice=exports.IfcFlowSegmentType=exports.IfcFlowSegment=exports.IfcFlowMovingDeviceType=exports.IfcFlowMovingDevice=exports.IfcFlowMeterTypeEnum=exports.IfcFlowMeterType=exports.IfcFlowMeter=exports.IfcFlowInstrumentTypeEnum=exports.IfcFlowInstrumentType=exports.IfcFlowInstrument=exports.IfcFlowFittingType=exports.IfcFlowFitting=exports.IfcFlowDirectionEnum=exports.IfcFlowControllerType=exports.IfcFlowController=exports.IfcFixedReferenceSweptAreaSolid=exports.IfcFireSuppressionTerminalTypeEnum=exports.IfcFireSuppressionTerminalType=exports.IfcFireSuppressionTerminal=exports.IfcFilterTypeEnum=exports.IfcFilterType=exports.IfcFilter=exports.IfcFillAreaStyleTiles=exports.IfcFillAreaStyleHatching=exports.IfcFillAreaStyle=exports.IfcFeatureElementSubtraction=exports.IfcFeatureElementAddition=exports.IfcFeatureElement=exports.IfcFastenerTypeEnum=exports.IfcFastenerType=exports.IfcFastener=exports.IfcFanTypeEnum=exports.IfcFanType=exports.IfcFan=exports.IfcFailureConnectionCondition=exports.IfcFacilityPart=exports.IfcFacility=exports.IfcFacetedBrepWithVoids=exports.IfcFacetedBrep=exports.IfcFaceSurface=exports.IfcFaceOuterBound=exports.IfcFaceBound=exports.IfcFaceBasedSurfaceModel=exports.IfcFace=exports.IfcExtrudedAreaSolidTapered=exports.IfcExtrudedAreaSolid=exports.IfcExternallyDefinedTextFont=exports.IfcExternallyDefinedSurfaceStyle=exports.IfcExternallyDefinedHatchStyle=exports.IfcExternalSpatialStructureElement=exports.IfcExternalSpatialElementTypeEnum=exports.IfcExternalSpatialElement=exports.IfcExternalReferenceRelationship=exports.IfcExternalReference=exports.IfcExternalInformation=exports.IfcExtendedProperties=exports.IfcEventTypeEnum=exports.IfcEventType=exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcReferentTypeEnum=exports.IfcReferent=exports.IfcReference=exports.IfcRecurrenceTypeEnum=exports.IfcRecurrencePattern=exports.IfcRectangularTrimmedSurface=exports.IfcRectangularPyramid=exports.IfcRectangleProfileDef=exports.IfcRectangleHollowProfileDef=exports.IfcReal=exports.IfcRationalBSplineSurfaceWithKnots=exports.IfcRationalBSplineCurveWithKnots=exports.IfcRatioMeasure=exports.IfcRampTypeEnum=exports.IfcRampType=exports.IfcRampFlightTypeEnum=exports.IfcRampFlightType=exports.IfcRampFlight=exports.IfcRamp=exports.IfcRailingTypeEnum=exports.IfcRailingType=exports.IfcRailing=exports.IfcRadioActivityMeasure=exports.IfcQuantityWeight=exports.IfcQuantityVolume=exports.IfcQuantityTime=exports.IfcQuantitySet=exports.IfcQuantityLength=exports.IfcQuantityCount=exports.IfcQuantityArea=exports.IfcPumpTypeEnum=exports.IfcPumpType=exports.IfcPump=exports.IfcProxy=exports.IfcProtectiveDeviceTypeEnum=exports.IfcProtectiveDeviceType=exports.IfcProtectiveDeviceTrippingUnitTypeEnum=exports.IfcProtectiveDeviceTrippingUnitType=exports.IfcProtectiveDeviceTrippingUnit=exports.IfcProtectiveDevice=exports.IfcPropertyTemplateDefinition=exports.IfcPropertyTemplate=exports.IfcPropertyTableValue=exports.IfcPropertySingleValue=exports.IfcPropertySetTemplateTypeEnum=exports.IfcPropertySetTemplate=exports.IfcPropertySetDefinition=exports.IfcPropertySet=exports.IfcPropertyReferenceValue=exports.IfcPropertyListValue=exports.IfcPropertyEnumeration=exports.IfcPropertyEnumeratedValue=exports.IfcPropertyDependencyRelationship=exports.IfcPropertyDefinition=exports.IfcPropertyBoundedValue=exports.IfcPropertyAbstraction=exports.IfcProperty=exports.IfcProjectionElementTypeEnum=exports.IfcProjectionElement=exports.IfcProjectedOrTrueLengthEnum=exports.IfcProjectedCRS=exports.IfcProjectOrderTypeEnum=exports.IfcProjectOrder=exports.IfcProjectLibrary=exports.IfcProject=exports.IfcProfileTypeEnum=exports.IfcProfileProperties=exports.IfcProfileDef=exports.IfcProductRepresentation=exports.IfcProductDefinitionShape=exports.IfcProduct=exports.IfcProcess=exports.IfcProcedureTypeEnum=exports.IfcProcedureType=exports.IfcProcedure=exports.IfcPressureMeasure=exports.IfcPresentationStyleAssignment=exports.IfcPresentationStyle=exports.IfcPresentationLayerWithStyle=exports.IfcPresentationLayerAssignment=exports.IfcPresentationItem=exports.IfcPresentableText=exports.IfcPreferredSurfaceCurveRepresentation=exports.IfcPreDefinedTextFont=exports.IfcPreDefinedPropertySet=exports.IfcPreDefinedProperties=exports.IfcPreDefinedItem=exports.IfcPreDefinedCurveFont=exports.IfcPreDefinedColour=exports.IfcPowerMeasure=exports.IfcPostalAddress=exports.IfcPositiveRatioMeasure=exports.IfcPositivePlaneAngleMeasure=exports.IfcPositiveLengthMeasure=exports.IfcPositiveInteger=exports.IfcPositioningElement=exports.IfcPort=exports.IfcPolyline=exports.IfcPolygonalFaceSet=exports.IfcPolygonalBoundedHalfSpace=exports.IfcPolyLoop=exports.IfcPointOnSurface=exports.IfcPointOnCurve=exports.IfcPoint=exports.IfcPlateTypeEnum=exports.IfcPlateType=exports.IfcPlateStandardCase=exports.IfcPlate=exports.IfcPlaneAngleMeasure=exports.IfcPlane=exports.IfcPlanarForceMeasure=exports.IfcPlanarExtent=exports.IfcPlanarBox=exports.IfcPlacement=exports.IfcPixelTexture=exports.IfcPipeSegmentTypeEnum=exports.IfcPipeSegmentType=exports.IfcPipeSegment=exports.IfcPipeFittingTypeEnum=exports.IfcPipeFittingType=exports.IfcPipeFitting=exports.IfcPileTypeEnum=exports.IfcPileType=exports.IfcPileConstructionEnum=exports.IfcPile=exports.IfcPhysicalSimpleQuantity=exports.IfcPhysicalQuantity=exports.IfcPhysicalOrVirtualEnum=exports.IfcPhysicalComplexQuantity=exports.IfcPersonAndOrganization=exports.IfcPerson=exports.IfcPermitTypeEnum=exports.IfcPermit=exports.IfcPermeableCoveringProperties=exports.IfcPermeableCoveringOperationEnum=exports.IfcPerformanceHistoryTypeEnum=exports.IfcPerformanceHistory=exports.IfcPcurve=exports.IfcPath=exports.IfcParameterizedProfileDef=exports.IfcParameterValue=exports.IfcPHMeasure=exports.IfcOwnerHistory=exports.IfcOutletTypeEnum=exports.IfcOutletType=exports.IfcOutlet=exports.IfcOuterBoundaryCurve=exports.IfcOrientedEdge=exports.IfcOrientationExpression=exports.IfcOrganizationRelationship=exports.IfcOrganization=exports.IfcOpeningStandardCase=exports.IfcOpeningElementTypeEnum=exports.IfcOpeningElement=exports.IfcOpenShell=exports.IfcOffsetCurveByDistances=exports.IfcOffsetCurve3D=exports.IfcOffsetCurve2D=exports.IfcOffsetCurve=exports.IfcOccupantTypeEnum=exports.IfcOccupant=exports.IfcObjectiveEnum=exports.IfcObjective=exports.IfcObjectTypeEnum=exports.IfcObjectPlacement=exports.IfcObjectDefinition=exports.IfcObject=exports.IfcNumericMeasure=exports.IfcNullStyle=exports.IfcNormalisedRatioMeasure=exports.IfcNonNegativeLengthMeasure=exports.IfcNamedUnit=exports.IfcMotorConnectionTypeEnum=exports.IfcMotorConnectionType=exports.IfcMotorConnection=exports.IfcMonthInYearNumber=exports.IfcMonetaryUnit=exports.IfcMonetaryMeasure=exports.IfcMomentOfInertiaMeasure=exports.IfcMolecularWeightMeasure=exports.IfcMoistureDiffusivityMeasure=exports.IfcModulusOfSubgradeReactionMeasure=exports.IfcModulusOfRotationalSubgradeReactionMeasure=exports.IfcModulusOfLinearSubgradeReactionMeasure=exports.IfcModulusOfElasticityMeasure=exports.IfcMirroredProfileDef=exports.IfcMetric=exports.IfcMemberTypeEnum=exports.IfcMemberType=exports.IfcMemberStandardCase=exports.IfcMember=exports.IfcMedicalDeviceTypeEnum=exports.IfcMedicalDeviceType=exports.IfcMedicalDevice=exports.IfcMechanicalFastenerTypeEnum=exports.IfcMechanicalFastenerType=exports.IfcMechanicalFastener=exports.IfcMeasureWithUnit=exports.IfcMaterialUsageDefinition=exports.IfcMaterialRelationship=exports.IfcMaterialProperties=exports.IfcMaterialProfileWithOffsets=exports.IfcMaterialProfileSetUsageTapering=exports.IfcMaterialProfileSetUsage=exports.IfcMaterialProfileSet=exports.IfcMaterialProfile=exports.IfcMaterialList=exports.IfcMaterialLayerWithOffsets=exports.IfcMaterialLayerSetUsage=exports.IfcMaterialLayerSet=exports.IfcMaterialLayer=exports.IfcMaterialDefinitionRepresentation=exports.IfcMaterialDefinition=exports.IfcMaterialConstituentSet=exports.IfcMaterialConstituent=exports.IfcMaterialClassificationRelationship=exports.IfcMaterial=exports.IfcMassPerLengthMeasure=exports.IfcMassMeasure=exports.IfcMassFlowRateMeasure=exports.IfcMassDensityMeasure=exports.IfcMappedItem=exports.IfcMapConversion=exports.IfcManifoldSolidBrep=exports.IfcMagneticFluxMeasure=exports.IfcMagneticFluxDensityMeasure=exports.IfcLuminousIntensityMeasure=exports.IfcLuminousIntensityDistributionMeasure=exports.IfcLuminousFluxMeasure=exports.IfcLoop=exports.IfcLogicalOperatorEnum=exports.IfcLogical=exports.IfcLocalPlacement=exports.IfcLoadGroupTypeEnum=exports.IfcLinearVelocityMeasure=exports.IfcLinearStiffnessMeasure=exports.IfcLinearPositioningElement=exports.IfcLinearPlacement=exports.IfcLinearMomentMeasure=exports.IfcLinearForceMeasure=exports.IfcLineSegment2D=exports.IfcLine=exports.IfcLightSourceSpot=exports.IfcLightSourcePositional=exports.IfcLightSourceGoniometric=exports.IfcLightSourceDirectional=exports.IfcLightSourceAmbient=exports.IfcLightSource=exports.IfcLightIntensityDistribution=exports.IfcLightFixtureTypeEnum=exports.IfcLightFixtureType=exports.IfcLightFixture=exports.IfcLightEmissionSourceEnum=exports.IfcLightDistributionData=exports.IfcLightDistributionCurveEnum=exports.IfcLibraryReference=exports.IfcLibraryInformation=exports.IfcLengthMeasure=exports.IfcLayerSetDirectionEnum=exports.IfcLanguageId=exports.IfcLampTypeEnum=exports.IfcLampType=exports.IfcLamp=exports.IfcLagTime=exports.IfcLaborResourceTypeEnum=exports.IfcLaborResourceType=exports.IfcLaborResource=exports.IfcLabel=exports.IfcLShapeProfileDef=exports.IfcKnotType=exports.IfcKinematicViscosityMeasure=exports.IfcJunctionBoxTypeEnum=exports.IfcJunctionBoxType=exports.IfcJunctionBox=exports.IfcIsothermalMoistureCapacityMeasure=exports.IfcIrregularTimeSeriesValue=exports.IfcIrregularTimeSeries=exports.IfcIonConcentrationMeasure=exports.IfcInventoryTypeEnum=exports.IfcInventory=exports.IfcIntersectionCurve=exports.IfcInternalOrExternalEnum=exports.IfcInterceptorTypeEnum=exports.IfcInterceptorType=exports.IfcInterceptor=exports.IfcIntegerCountRateMeasure=exports.IfcInteger=exports.IfcInductanceMeasure=exports.IfcIndexedTriangleTextureMap=exports.IfcIndexedTextureMap=exports.IfcIndexedPolygonalFaceWithVoids=exports.IfcIndexedPolygonalFace=exports.IfcIndexedPolyCurve=exports.IfcIndexedColourMap=exports.IfcImageTexture=exports.IfcIlluminanceMeasure=exports.IfcIdentifier=exports.IfcIShapeProfileDef=exports.IfcHumidifierTypeEnum=exports.IfcHumidifierType=exports.IfcHumidifier=exports.IfcHeatingValueMeasure=exports.IfcHeatFluxDensityMeasure=exports.IfcHeatExchangerTypeEnum=exports.IfcHeatExchangerType=exports.IfcHeatExchanger=exports.IfcHalfSpaceSolid=exports.IfcGroup=exports.IfcGridTypeEnum=exports.IfcGridPlacement=exports.IfcGridAxis=exports.IfcGrid=exports.IfcGloballyUniqueId=exports.IfcGlobalOrLocalEnum=exports.IfcGeometricSet=exports.IfcGeometricRepresentationSubContext=exports.IfcGeometricRepresentationItem=exports.IfcGeometricRepresentationContext=exports.IfcGeometricProjectionEnum=exports.IfcGeometricCurveSet=exports.IfcGeographicElementTypeEnum=exports.IfcGeographicElementType=exports.IfcGeographicElement=exports.IfcFurnitureTypeEnum=exports.IfcFurnitureType=exports.IfcFurniture=exports.IfcFurnishingElementType=exports.IfcFurnishingElement=exports.IfcFrequencyMeasure=exports.IfcForceMeasure=exports.IfcFootingTypeEnum=exports.IfcFootingType=exports.IfcFooting=exports.IfcFontWeight=exports.IfcFontVariant=exports.IfcFontStyle=exports.IfcFlowTreatmentDeviceType=exports.IfcFlowTreatmentDevice=exports.IfcFlowTerminalType=exports.IfcFlowTerminal=exports.IfcFlowStorageDeviceType=exports.IfcFlowStorageDevice=exports.IfcFlowSegmentType=exports.IfcFlowSegment=exports.IfcFlowMovingDeviceType=exports.IfcFlowMovingDevice=exports.IfcFlowMeterTypeEnum=exports.IfcFlowMeterType=exports.IfcFlowMeter=exports.IfcFlowInstrumentTypeEnum=exports.IfcFlowInstrumentType=exports.IfcFlowInstrument=exports.IfcFlowFittingType=exports.IfcFlowFitting=exports.IfcFlowDirectionEnum=exports.IfcFlowControllerType=exports.IfcFlowController=exports.IfcFixedReferenceSweptAreaSolid=exports.IfcFireSuppressionTerminalTypeEnum=exports.IfcFireSuppressionTerminalType=exports.IfcFireSuppressionTerminal=exports.IfcFilterTypeEnum=exports.IfcFilterType=exports.IfcFilter=exports.IfcFillAreaStyleTiles=exports.IfcFillAreaStyleHatching=exports.IfcFillAreaStyle=exports.IfcFeatureElementSubtraction=exports.IfcFeatureElementAddition=exports.IfcFeatureElement=exports.IfcFastenerTypeEnum=exports.IfcFastenerType=exports.IfcFastener=exports.IfcFanTypeEnum=exports.IfcFanType=exports.IfcFan=exports.IfcFailureConnectionCondition=exports.IfcFacilityPart=exports.IfcFacility=exports.IfcFacetedBrepWithVoids=exports.IfcFacetedBrep=exports.IfcFaceSurface=exports.IfcFaceOuterBound=exports.IfcFaceBound=exports.IfcFaceBasedSurfaceModel=exports.IfcFace=exports.IfcExtrudedAreaSolidTapered=exports.IfcExtrudedAreaSolid=exports.IfcExternallyDefinedTextFont=exports.IfcExternallyDefinedSurfaceStyle=exports.IfcExternallyDefinedHatchStyle=exports.IfcExternalSpatialStructureElement=exports.IfcExternalSpatialElementTypeEnum=exports.IfcExternalSpatialElement=exports.IfcExternalReferenceRelationship=exports.IfcExternalReference=exports.IfcExternalInformation=exports.IfcExtendedProperties=exports.IfcEventTypeEnum=exports.IfcEventType=exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcSectionedSolid=exports.IfcSectionalAreaIntegralMeasure=exports.IfcSectionTypeEnum=exports.IfcSectionReinforcementProperties=exports.IfcSectionProperties=exports.IfcSectionModulusMeasure=exports.IfcSeamCurve=exports.IfcSchedulingTime=exports.IfcSanitaryTerminalTypeEnum=exports.IfcSanitaryTerminalType=exports.IfcSanitaryTerminal=exports.IfcSIUnitName=exports.IfcSIUnit=exports.IfcSIPrefix=exports.IfcRoundedRectangleProfileDef=exports.IfcRotationalStiffnessMeasure=exports.IfcRotationalMassMeasure=exports.IfcRotationalFrequencyMeasure=exports.IfcRoot=exports.IfcRoofTypeEnum=exports.IfcRoofType=exports.IfcRoof=exports.IfcRoleEnum=exports.IfcRightCircularCylinder=exports.IfcRightCircularCone=exports.IfcRevolvedAreaSolidTapered=exports.IfcRevolvedAreaSolid=exports.IfcResourceTime=exports.IfcResourceLevelRelationship=exports.IfcResourceConstraintRelationship=exports.IfcResourceApprovalRelationship=exports.IfcResource=exports.IfcRepresentationMap=exports.IfcRepresentationItem=exports.IfcRepresentationContext=exports.IfcRepresentation=exports.IfcReparametrisedCompositeCurveSegment=exports.IfcRelationship=exports.IfcRelVoidsElement=exports.IfcRelSpaceBoundary2ndLevel=exports.IfcRelSpaceBoundary1stLevel=exports.IfcRelSpaceBoundary=exports.IfcRelServicesBuildings=exports.IfcRelSequence=exports.IfcRelReferencedInSpatialStructure=exports.IfcRelProjectsElement=exports.IfcRelPositions=exports.IfcRelNests=exports.IfcRelInterferesElements=exports.IfcRelFlowControlElements=exports.IfcRelFillsElement=exports.IfcRelDefinesByType=exports.IfcRelDefinesByTemplate=exports.IfcRelDefinesByProperties=exports.IfcRelDefinesByObject=exports.IfcRelDefines=exports.IfcRelDecomposes=exports.IfcRelDeclares=exports.IfcRelCoversSpaces=exports.IfcRelCoversBldgElements=exports.IfcRelContainedInSpatialStructure=exports.IfcRelConnectsWithRealizingElements=exports.IfcRelConnectsWithEccentricity=exports.IfcRelConnectsStructuralMember=exports.IfcRelConnectsStructuralActivity=exports.IfcRelConnectsPorts=exports.IfcRelConnectsPortToElement=exports.IfcRelConnectsPathElements=exports.IfcRelConnectsElements=exports.IfcRelConnects=exports.IfcRelAssociatesMaterial=exports.IfcRelAssociatesLibrary=exports.IfcRelAssociatesDocument=exports.IfcRelAssociatesConstraint=exports.IfcRelAssociatesClassification=exports.IfcRelAssociatesApproval=exports.IfcRelAssociates=exports.IfcRelAssignsToResource=exports.IfcRelAssignsToProduct=exports.IfcRelAssignsToProcess=exports.IfcRelAssignsToGroupByFactor=exports.IfcRelAssignsToGroup=exports.IfcRelAssignsToControl=exports.IfcRelAssignsToActor=exports.IfcRelAssigns=exports.IfcRelAggregates=exports.IfcReinforcingMeshTypeEnum=exports.IfcReinforcingMeshType=exports.IfcReinforcingMesh=exports.IfcReinforcingElementType=exports.IfcReinforcingElement=exports.IfcReinforcingBarTypeEnum=exports.IfcReinforcingBarType=exports.IfcReinforcingBarSurfaceEnum=exports.IfcReinforcingBarRoleEnum=exports.IfcReinforcingBar=exports.IfcReinforcementDefinitionProperties=exports.IfcReinforcementBarProperties=exports.IfcRegularTimeSeries=exports.IfcReflectanceMethodEnum=exports.IfcReferentTypeEnum=exports.IfcReferent=exports.IfcReference=exports.IfcRecurrenceTypeEnum=exports.IfcRecurrencePattern=exports.IfcRectangularTrimmedSurface=exports.IfcRectangularPyramid=exports.IfcRectangleProfileDef=exports.IfcRectangleHollowProfileDef=exports.IfcReal=exports.IfcRationalBSplineSurfaceWithKnots=exports.IfcRationalBSplineCurveWithKnots=exports.IfcRatioMeasure=exports.IfcRampTypeEnum=exports.IfcRampType=exports.IfcRampFlightTypeEnum=exports.IfcRampFlightType=exports.IfcRampFlight=exports.IfcRamp=exports.IfcRailingTypeEnum=exports.IfcRailingType=exports.IfcRailing=exports.IfcRadioActivityMeasure=exports.IfcQuantityWeight=exports.IfcQuantityVolume=exports.IfcQuantityTime=exports.IfcQuantitySet=exports.IfcQuantityLength=exports.IfcQuantityCount=exports.IfcQuantityArea=exports.IfcPumpTypeEnum=exports.IfcPumpType=exports.IfcPump=exports.IfcProxy=exports.IfcProtectiveDeviceTypeEnum=exports.IfcProtectiveDeviceType=exports.IfcProtectiveDeviceTrippingUnitTypeEnum=exports.IfcProtectiveDeviceTrippingUnitType=exports.IfcProtectiveDeviceTrippingUnit=exports.IfcProtectiveDevice=exports.IfcPropertyTemplateDefinition=exports.IfcPropertyTemplate=exports.IfcPropertyTableValue=exports.IfcPropertySingleValue=exports.IfcPropertySetTemplateTypeEnum=exports.IfcPropertySetTemplate=exports.IfcPropertySetDefinition=exports.IfcPropertySet=exports.IfcPropertyReferenceValue=exports.IfcPropertyListValue=exports.IfcPropertyEnumeration=exports.IfcPropertyEnumeratedValue=exports.IfcPropertyDependencyRelationship=exports.IfcPropertyDefinition=exports.IfcPropertyBoundedValue=exports.IfcPropertyAbstraction=exports.IfcProperty=exports.IfcProjectionElementTypeEnum=exports.IfcProjectionElement=exports.IfcProjectedOrTrueLengthEnum=exports.IfcProjectedCRS=exports.IfcProjectOrderTypeEnum=exports.IfcProjectOrder=exports.IfcProjectLibrary=exports.IfcProject=exports.IfcProfileTypeEnum=exports.IfcProfileProperties=exports.IfcProfileDef=exports.IfcProductRepresentation=exports.IfcProductDefinitionShape=exports.IfcProduct=exports.IfcProcess=exports.IfcProcedureTypeEnum=exports.IfcProcedureType=exports.IfcProcedure=exports.IfcPressureMeasure=exports.IfcPresentationStyleAssignment=exports.IfcPresentationStyle=exports.IfcPresentationLayerWithStyle=exports.IfcPresentationLayerAssignment=exports.IfcPresentationItem=exports.IfcPresentableText=exports.IfcPreferredSurfaceCurveRepresentation=exports.IfcPreDefinedTextFont=exports.IfcPreDefinedPropertySet=exports.IfcPreDefinedProperties=exports.IfcPreDefinedItem=exports.IfcPreDefinedCurveFont=exports.IfcPreDefinedColour=exports.IfcPowerMeasure=exports.IfcPostalAddress=exports.IfcPositiveRatioMeasure=exports.IfcPositivePlaneAngleMeasure=exports.IfcPositiveLengthMeasure=exports.IfcPositiveInteger=exports.IfcPositioningElement=exports.IfcPort=exports.IfcPolyline=exports.IfcPolygonalFaceSet=exports.IfcPolygonalBoundedHalfSpace=exports.IfcPolyLoop=exports.IfcPointOnSurface=exports.IfcPointOnCurve=exports.IfcPoint=exports.IfcPlateTypeEnum=exports.IfcPlateType=exports.IfcPlateStandardCase=exports.IfcPlate=exports.IfcPlaneAngleMeasure=exports.IfcPlane=exports.IfcPlanarForceMeasure=exports.IfcPlanarExtent=exports.IfcPlanarBox=exports.IfcPlacement=exports.IfcPixelTexture=exports.IfcPipeSegmentTypeEnum=exports.IfcPipeSegmentType=exports.IfcPipeSegment=exports.IfcPipeFittingTypeEnum=exports.IfcPipeFittingType=exports.IfcPipeFitting=exports.IfcPileTypeEnum=exports.IfcPileType=exports.IfcPileConstructionEnum=exports.IfcPile=exports.IfcPhysicalSimpleQuantity=exports.IfcPhysicalQuantity=exports.IfcPhysicalOrVirtualEnum=exports.IfcPhysicalComplexQuantity=exports.IfcPersonAndOrganization=exports.IfcPerson=exports.IfcPermitTypeEnum=exports.IfcPermit=exports.IfcPermeableCoveringProperties=exports.IfcPermeableCoveringOperationEnum=exports.IfcPerformanceHistoryTypeEnum=exports.IfcPerformanceHistory=exports.IfcPcurve=exports.IfcPath=exports.IfcParameterizedProfileDef=exports.IfcParameterValue=exports.IfcPHMeasure=exports.IfcOwnerHistory=exports.IfcOutletTypeEnum=exports.IfcOutletType=exports.IfcOutlet=exports.IfcOuterBoundaryCurve=exports.IfcOrientedEdge=exports.IfcOrientationExpression=exports.IfcOrganizationRelationship=exports.IfcOrganization=exports.IfcOpeningStandardCase=exports.IfcOpeningElementTypeEnum=exports.IfcOpeningElement=exports.IfcOpenShell=exports.IfcOffsetCurveByDistances=exports.IfcOffsetCurve3D=exports.IfcOffsetCurve2D=exports.IfcOffsetCurve=exports.IfcOccupantTypeEnum=exports.IfcOccupant=exports.IfcObjectiveEnum=exports.IfcObjective=exports.IfcObjectTypeEnum=exports.IfcObjectPlacement=exports.IfcObjectDefinition=exports.IfcObject=exports.IfcNumericMeasure=exports.IfcNullStyle=exports.IfcNormalisedRatioMeasure=exports.IfcNonNegativeLengthMeasure=exports.IfcNamedUnit=exports.IfcMotorConnectionTypeEnum=exports.IfcMotorConnectionType=exports.IfcMotorConnection=exports.IfcMonthInYearNumber=exports.IfcMonetaryUnit=exports.IfcMonetaryMeasure=exports.IfcMomentOfInertiaMeasure=exports.IfcMolecularWeightMeasure=exports.IfcMoistureDiffusivityMeasure=exports.IfcModulusOfSubgradeReactionMeasure=exports.IfcModulusOfRotationalSubgradeReactionMeasure=exports.IfcModulusOfLinearSubgradeReactionMeasure=exports.IfcModulusOfElasticityMeasure=exports.IfcMirroredProfileDef=exports.IfcMetric=exports.IfcMemberTypeEnum=exports.IfcMemberType=exports.IfcMemberStandardCase=exports.IfcMember=exports.IfcMedicalDeviceTypeEnum=exports.IfcMedicalDeviceType=exports.IfcMedicalDevice=exports.IfcMechanicalFastenerTypeEnum=exports.IfcMechanicalFastenerType=exports.IfcMechanicalFastener=exports.IfcMeasureWithUnit=exports.IfcMaterialUsageDefinition=exports.IfcMaterialRelationship=exports.IfcMaterialProperties=exports.IfcMaterialProfileWithOffsets=exports.IfcMaterialProfileSetUsageTapering=exports.IfcMaterialProfileSetUsage=exports.IfcMaterialProfileSet=exports.IfcMaterialProfile=exports.IfcMaterialList=exports.IfcMaterialLayerWithOffsets=exports.IfcMaterialLayerSetUsage=exports.IfcMaterialLayerSet=exports.IfcMaterialLayer=exports.IfcMaterialDefinitionRepresentation=exports.IfcMaterialDefinition=exports.IfcMaterialConstituentSet=exports.IfcMaterialConstituent=exports.IfcMaterialClassificationRelationship=exports.IfcMaterial=exports.IfcMassPerLengthMeasure=exports.IfcMassMeasure=exports.IfcMassFlowRateMeasure=exports.IfcMassDensityMeasure=exports.IfcMappedItem=exports.IfcMapConversion=exports.IfcManifoldSolidBrep=exports.IfcMagneticFluxMeasure=exports.IfcMagneticFluxDensityMeasure=exports.IfcLuminousIntensityMeasure=exports.IfcLuminousIntensityDistributionMeasure=exports.IfcLuminousFluxMeasure=exports.IfcLoop=exports.IfcLogicalOperatorEnum=exports.IfcLogical=exports.IfcLocalPlacement=exports.IfcLoadGroupTypeEnum=exports.IfcLinearVelocityMeasure=exports.IfcLinearStiffnessMeasure=exports.IfcLinearPositioningElement=exports.IfcLinearPlacement=exports.IfcLinearMomentMeasure=exports.IfcLinearForceMeasure=exports.IfcLineSegment2D=exports.IfcLine=exports.IfcLightSourceSpot=exports.IfcLightSourcePositional=exports.IfcLightSourceGoniometric=exports.IfcLightSourceDirectional=exports.IfcLightSourceAmbient=exports.IfcLightSource=exports.IfcLightIntensityDistribution=exports.IfcLightFixtureTypeEnum=exports.IfcLightFixtureType=exports.IfcLightFixture=exports.IfcLightEmissionSourceEnum=exports.IfcLightDistributionData=exports.IfcLightDistributionCurveEnum=exports.IfcLibraryReference=exports.IfcLibraryInformation=exports.IfcLengthMeasure=exports.IfcLayerSetDirectionEnum=exports.IfcLanguageId=exports.IfcLampTypeEnum=exports.IfcLampType=exports.IfcLamp=exports.IfcLagTime=exports.IfcLaborResourceTypeEnum=exports.IfcLaborResourceType=exports.IfcLaborResource=exports.IfcLabel=exports.IfcLShapeProfileDef=exports.IfcKnotType=exports.IfcKinematicViscosityMeasure=exports.IfcJunctionBoxTypeEnum=exports.IfcJunctionBoxType=exports.IfcJunctionBox=exports.IfcIsothermalMoistureCapacityMeasure=exports.IfcIrregularTimeSeriesValue=exports.IfcIrregularTimeSeries=exports.IfcIonConcentrationMeasure=exports.IfcInventoryTypeEnum=exports.IfcInventory=exports.IfcIntersectionCurve=exports.IfcInternalOrExternalEnum=exports.IfcInterceptorTypeEnum=exports.IfcInterceptorType=exports.IfcInterceptor=exports.IfcIntegerCountRateMeasure=exports.IfcInteger=exports.IfcInductanceMeasure=exports.IfcIndexedTriangleTextureMap=exports.IfcIndexedTextureMap=exports.IfcIndexedPolygonalFaceWithVoids=exports.IfcIndexedPolygonalFace=exports.IfcIndexedPolyCurve=exports.IfcIndexedColourMap=exports.IfcImageTexture=exports.IfcIlluminanceMeasure=exports.IfcIdentifier=exports.IfcIShapeProfileDef=exports.IfcHumidifierTypeEnum=exports.IfcHumidifierType=exports.IfcHumidifier=exports.IfcHeatingValueMeasure=exports.IfcHeatFluxDensityMeasure=exports.IfcHeatExchangerTypeEnum=exports.IfcHeatExchangerType=exports.IfcHeatExchanger=exports.IfcHalfSpaceSolid=exports.IfcGroup=exports.IfcGridTypeEnum=exports.IfcGridPlacement=exports.IfcGridAxis=exports.IfcGrid=exports.IfcGloballyUniqueId=exports.IfcGlobalOrLocalEnum=exports.IfcGeometricSet=exports.IfcGeometricRepresentationSubContext=exports.IfcGeometricRepresentationItem=exports.IfcGeometricRepresentationContext=exports.IfcGeometricProjectionEnum=exports.IfcGeometricCurveSet=exports.IfcGeographicElementTypeEnum=exports.IfcGeographicElementType=exports.IfcGeographicElement=exports.IfcFurnitureTypeEnum=exports.IfcFurnitureType=exports.IfcFurniture=exports.IfcFurnishingElementType=exports.IfcFurnishingElement=exports.IfcFrequencyMeasure=exports.IfcForceMeasure=exports.IfcFootingTypeEnum=exports.IfcFootingType=exports.IfcFooting=exports.IfcFontWeight=exports.IfcFontVariant=exports.IfcFontStyle=exports.IfcFlowTreatmentDeviceType=exports.IfcFlowTreatmentDevice=exports.IfcFlowTerminalType=exports.IfcFlowTerminal=exports.IfcFlowStorageDeviceType=exports.IfcFlowStorageDevice=exports.IfcFlowSegmentType=exports.IfcFlowSegment=exports.IfcFlowMovingDeviceType=exports.IfcFlowMovingDevice=exports.IfcFlowMeterTypeEnum=exports.IfcFlowMeterType=exports.IfcFlowMeter=exports.IfcFlowInstrumentTypeEnum=exports.IfcFlowInstrumentType=exports.IfcFlowInstrument=exports.IfcFlowFittingType=exports.IfcFlowFitting=exports.IfcFlowDirectionEnum=exports.IfcFlowControllerType=exports.IfcFlowController=exports.IfcFixedReferenceSweptAreaSolid=exports.IfcFireSuppressionTerminalTypeEnum=exports.IfcFireSuppressionTerminalType=exports.IfcFireSuppressionTerminal=exports.IfcFilterTypeEnum=exports.IfcFilterType=exports.IfcFilter=exports.IfcFillAreaStyleTiles=exports.IfcFillAreaStyleHatching=exports.IfcFillAreaStyle=exports.IfcFeatureElementSubtraction=exports.IfcFeatureElementAddition=exports.IfcFeatureElement=exports.IfcFastenerTypeEnum=exports.IfcFastenerType=exports.IfcFastener=exports.IfcFanTypeEnum=exports.IfcFanType=exports.IfcFan=exports.IfcFailureConnectionCondition=exports.IfcFacilityPart=exports.IfcFacility=exports.IfcFacetedBrepWithVoids=exports.IfcFacetedBrep=exports.IfcFaceSurface=exports.IfcFaceOuterBound=exports.IfcFaceBound=exports.IfcFaceBasedSurfaceModel=exports.IfcFace=exports.IfcExtrudedAreaSolidTapered=exports.IfcExtrudedAreaSolid=exports.IfcExternallyDefinedTextFont=exports.IfcExternallyDefinedSurfaceStyle=exports.IfcExternallyDefinedHatchStyle=exports.IfcExternalSpatialStructureElement=exports.IfcExternalSpatialElementTypeEnum=exports.IfcExternalSpatialElement=exports.IfcExternalReferenceRelationship=exports.IfcExternalReference=exports.IfcExternalInformation=exports.IfcExtendedProperties=exports.IfcEventTypeEnum=exports.IfcEventType=exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcStructuralSurfaceMemberTypeEnum=exports.IfcStructuralSurfaceMember=exports.IfcStructuralSurfaceConnection=exports.IfcStructuralSurfaceActivityTypeEnum=exports.IfcStructuralSurfaceAction=exports.IfcStructuralResultGroup=exports.IfcStructuralReaction=exports.IfcStructuralPointReaction=exports.IfcStructuralPointConnection=exports.IfcStructuralPointAction=exports.IfcStructuralPlanarAction=exports.IfcStructuralMember=exports.IfcStructuralLoadTemperature=exports.IfcStructuralLoadStatic=exports.IfcStructuralLoadSingleForceWarping=exports.IfcStructuralLoadSingleForce=exports.IfcStructuralLoadSingleDisplacementDistortion=exports.IfcStructuralLoadSingleDisplacement=exports.IfcStructuralLoadPlanarForce=exports.IfcStructuralLoadOrResult=exports.IfcStructuralLoadLinearForce=exports.IfcStructuralLoadGroup=exports.IfcStructuralLoadConfiguration=exports.IfcStructuralLoadCase=exports.IfcStructuralLoad=exports.IfcStructuralLinearAction=exports.IfcStructuralItem=exports.IfcStructuralCurveReaction=exports.IfcStructuralCurveMemberVarying=exports.IfcStructuralCurveMemberTypeEnum=exports.IfcStructuralCurveMember=exports.IfcStructuralCurveConnection=exports.IfcStructuralCurveActivityTypeEnum=exports.IfcStructuralCurveAction=exports.IfcStructuralConnectionCondition=exports.IfcStructuralConnection=exports.IfcStructuralAnalysisModel=exports.IfcStructuralActivity=exports.IfcStructuralAction=exports.IfcStateEnum=exports.IfcStairTypeEnum=exports.IfcStairType=exports.IfcStairFlightTypeEnum=exports.IfcStairFlightType=exports.IfcStairFlight=exports.IfcStair=exports.IfcStackTerminalTypeEnum=exports.IfcStackTerminalType=exports.IfcStackTerminal=exports.IfcSphericalSurface=exports.IfcSphere=exports.IfcSpecularRoughness=exports.IfcSpecularExponent=exports.IfcSpecificHeatCapacityMeasure=exports.IfcSpatialZoneTypeEnum=exports.IfcSpatialZoneType=exports.IfcSpatialZone=exports.IfcSpatialStructureElementType=exports.IfcSpatialStructureElement=exports.IfcSpatialElementType=exports.IfcSpatialElement=exports.IfcSpaceTypeEnum=exports.IfcSpaceType=exports.IfcSpaceHeaterTypeEnum=exports.IfcSpaceHeaterType=exports.IfcSpaceHeater=exports.IfcSpace=exports.IfcSoundPressureMeasure=exports.IfcSoundPressureLevelMeasure=exports.IfcSoundPowerMeasure=exports.IfcSoundPowerLevelMeasure=exports.IfcSolidModel=exports.IfcSolidAngleMeasure=exports.IfcSolarDeviceTypeEnum=exports.IfcSolarDeviceType=exports.IfcSolarDevice=exports.IfcSlippageConnectionCondition=exports.IfcSlabTypeEnum=exports.IfcSlabType=exports.IfcSlabStandardCase=exports.IfcSlabElementedCase=exports.IfcSlab=exports.IfcSite=exports.IfcSimplePropertyTemplateTypeEnum=exports.IfcSimplePropertyTemplate=exports.IfcSimpleProperty=exports.IfcShellBasedSurfaceModel=exports.IfcShearModulusMeasure=exports.IfcShapeRepresentation=exports.IfcShapeModel=exports.IfcShapeAspect=exports.IfcShadingDeviceTypeEnum=exports.IfcShadingDeviceType=exports.IfcShadingDevice=exports.IfcSequenceEnum=exports.IfcSensorTypeEnum=exports.IfcSensorType=exports.IfcSensor=exports.IfcSectionedSpine=exports.IfcSectionedSolidHorizontal=exports.IfcSectionedSolid=exports.IfcSectionalAreaIntegralMeasure=exports.IfcSectionTypeEnum=exports.IfcSectionReinforcementProperties=exports.IfcSectionProperties=exports.IfcSectionModulusMeasure=exports.IfcSeamCurve=exports.IfcSchedulingTime=exports.IfcSanitaryTerminalTypeEnum=exports.IfcSanitaryTerminalType=exports.IfcSanitaryTerminal=exports.IfcSIUnitName=exports.IfcSIUnit=exports.IfcSIPrefix=exports.IfcRoundedRectangleProfileDef=exports.IfcRotationalStiffnessMeasure=exports.IfcRotationalMassMeasure=exports.IfcRotationalFrequencyMeasure=exports.IfcRoot=exports.IfcRoofTypeEnum=exports.IfcRoofType=exports.IfcRoof=exports.IfcRoleEnum=exports.IfcRightCircularCylinder=exports.IfcRightCircularCone=exports.IfcRevolvedAreaSolidTapered=exports.IfcRevolvedAreaSolid=exports.IfcResourceTime=exports.IfcResourceLevelRelationship=exports.IfcResourceConstraintRelationship=exports.IfcResourceApprovalRelationship=exports.IfcResource=exports.IfcRepresentationMap=exports.IfcRepresentationItem=exports.IfcRepresentationContext=exports.IfcRepresentation=exports.IfcReparametrisedCompositeCurveSegment=exports.IfcRelationship=exports.IfcRelVoidsElement=exports.IfcRelSpaceBoundary2ndLevel=exports.IfcRelSpaceBoundary1stLevel=exports.IfcRelSpaceBoundary=exports.IfcRelServicesBuildings=exports.IfcRelSequence=exports.IfcRelReferencedInSpatialStructure=exports.IfcRelProjectsElement=exports.IfcRelPositions=exports.IfcRelNests=exports.IfcRelInterferesElements=exports.IfcRelFlowControlElements=exports.IfcRelFillsElement=exports.IfcRelDefinesByType=exports.IfcRelDefinesByTemplate=exports.IfcRelDefinesByProperties=exports.IfcRelDefinesByObject=exports.IfcRelDefines=exports.IfcRelDecomposes=exports.IfcRelDeclares=exports.IfcRelCoversSpaces=exports.IfcRelCoversBldgElements=exports.IfcRelContainedInSpatialStructure=exports.IfcRelConnectsWithRealizingElements=exports.IfcRelConnectsWithEccentricity=exports.IfcRelConnectsStructuralMember=exports.IfcRelConnectsStructuralActivity=exports.IfcRelConnectsPorts=exports.IfcRelConnectsPortToElement=exports.IfcRelConnectsPathElements=exports.IfcRelConnectsElements=exports.IfcRelConnects=exports.IfcRelAssociatesMaterial=exports.IfcRelAssociatesLibrary=exports.IfcRelAssociatesDocument=exports.IfcRelAssociatesConstraint=exports.IfcRelAssociatesClassification=exports.IfcRelAssociatesApproval=exports.IfcRelAssociates=exports.IfcRelAssignsToResource=exports.IfcRelAssignsToProduct=exports.IfcRelAssignsToProcess=exports.IfcRelAssignsToGroupByFactor=exports.IfcRelAssignsToGroup=exports.IfcRelAssignsToControl=exports.IfcRelAssignsToActor=exports.IfcRelAssigns=exports.IfcRelAggregates=exports.IfcReinforcingMeshTypeEnum=exports.IfcReinforcingMeshType=exports.IfcReinforcingMesh=exports.IfcReinforcingElementType=exports.IfcReinforcingElement=exports.IfcReinforcingBarTypeEnum=exports.IfcReinforcingBarType=exports.IfcReinforcingBarSurfaceEnum=exports.IfcReinforcingBarRoleEnum=exports.IfcReinforcingBar=exports.IfcReinforcementDefinitionProperties=exports.IfcReinforcementBarProperties=exports.IfcRegularTimeSeries=exports.IfcReflectanceMethodEnum=exports.IfcReferentTypeEnum=exports.IfcReferent=exports.IfcReference=exports.IfcRecurrenceTypeEnum=exports.IfcRecurrencePattern=exports.IfcRectangularTrimmedSurface=exports.IfcRectangularPyramid=exports.IfcRectangleProfileDef=exports.IfcRectangleHollowProfileDef=exports.IfcReal=exports.IfcRationalBSplineSurfaceWithKnots=exports.IfcRationalBSplineCurveWithKnots=exports.IfcRatioMeasure=exports.IfcRampTypeEnum=exports.IfcRampType=exports.IfcRampFlightTypeEnum=exports.IfcRampFlightType=exports.IfcRampFlight=exports.IfcRamp=exports.IfcRailingTypeEnum=exports.IfcRailingType=exports.IfcRailing=exports.IfcRadioActivityMeasure=exports.IfcQuantityWeight=exports.IfcQuantityVolume=exports.IfcQuantityTime=exports.IfcQuantitySet=exports.IfcQuantityLength=exports.IfcQuantityCount=exports.IfcQuantityArea=exports.IfcPumpTypeEnum=exports.IfcPumpType=exports.IfcPump=exports.IfcProxy=exports.IfcProtectiveDeviceTypeEnum=exports.IfcProtectiveDeviceType=exports.IfcProtectiveDeviceTrippingUnitTypeEnum=exports.IfcProtectiveDeviceTrippingUnitType=exports.IfcProtectiveDeviceTrippingUnit=exports.IfcProtectiveDevice=exports.IfcPropertyTemplateDefinition=exports.IfcPropertyTemplate=exports.IfcPropertyTableValue=exports.IfcPropertySingleValue=exports.IfcPropertySetTemplateTypeEnum=exports.IfcPropertySetTemplate=exports.IfcPropertySetDefinition=exports.IfcPropertySet=exports.IfcPropertyReferenceValue=exports.IfcPropertyListValue=exports.IfcPropertyEnumeration=exports.IfcPropertyEnumeratedValue=exports.IfcPropertyDependencyRelationship=exports.IfcPropertyDefinition=exports.IfcPropertyBoundedValue=exports.IfcPropertyAbstraction=exports.IfcProperty=exports.IfcProjectionElementTypeEnum=exports.IfcProjectionElement=exports.IfcProjectedOrTrueLengthEnum=exports.IfcProjectedCRS=exports.IfcProjectOrderTypeEnum=exports.IfcProjectOrder=exports.IfcProjectLibrary=exports.IfcProject=exports.IfcProfileTypeEnum=exports.IfcProfileProperties=exports.IfcProfileDef=exports.IfcProductRepresentation=exports.IfcProductDefinitionShape=exports.IfcProduct=exports.IfcProcess=exports.IfcProcedureTypeEnum=exports.IfcProcedureType=exports.IfcProcedure=exports.IfcPressureMeasure=exports.IfcPresentationStyleAssignment=exports.IfcPresentationStyle=exports.IfcPresentationLayerWithStyle=exports.IfcPresentationLayerAssignment=exports.IfcPresentationItem=exports.IfcPresentableText=exports.IfcPreferredSurfaceCurveRepresentation=exports.IfcPreDefinedTextFont=exports.IfcPreDefinedPropertySet=exports.IfcPreDefinedProperties=exports.IfcPreDefinedItem=exports.IfcPreDefinedCurveFont=exports.IfcPreDefinedColour=exports.IfcPowerMeasure=exports.IfcPostalAddress=exports.IfcPositiveRatioMeasure=exports.IfcPositivePlaneAngleMeasure=exports.IfcPositiveLengthMeasure=exports.IfcPositiveInteger=exports.IfcPositioningElement=exports.IfcPort=exports.IfcPolyline=exports.IfcPolygonalFaceSet=exports.IfcPolygonalBoundedHalfSpace=exports.IfcPolyLoop=exports.IfcPointOnSurface=exports.IfcPointOnCurve=exports.IfcPoint=exports.IfcPlateTypeEnum=exports.IfcPlateType=exports.IfcPlateStandardCase=exports.IfcPlate=exports.IfcPlaneAngleMeasure=exports.IfcPlane=exports.IfcPlanarForceMeasure=exports.IfcPlanarExtent=exports.IfcPlanarBox=exports.IfcPlacement=exports.IfcPixelTexture=exports.IfcPipeSegmentTypeEnum=exports.IfcPipeSegmentType=exports.IfcPipeSegment=exports.IfcPipeFittingTypeEnum=exports.IfcPipeFittingType=exports.IfcPipeFitting=exports.IfcPileTypeEnum=exports.IfcPileType=exports.IfcPileConstructionEnum=exports.IfcPile=exports.IfcPhysicalSimpleQuantity=exports.IfcPhysicalQuantity=exports.IfcPhysicalOrVirtualEnum=exports.IfcPhysicalComplexQuantity=exports.IfcPersonAndOrganization=exports.IfcPerson=exports.IfcPermitTypeEnum=exports.IfcPermit=exports.IfcPermeableCoveringProperties=exports.IfcPermeableCoveringOperationEnum=exports.IfcPerformanceHistoryTypeEnum=exports.IfcPerformanceHistory=exports.IfcPcurve=exports.IfcPath=exports.IfcParameterizedProfileDef=exports.IfcParameterValue=exports.IfcPHMeasure=exports.IfcOwnerHistory=exports.IfcOutletTypeEnum=exports.IfcOutletType=exports.IfcOutlet=exports.IfcOuterBoundaryCurve=exports.IfcOrientedEdge=exports.IfcOrientationExpression=exports.IfcOrganizationRelationship=exports.IfcOrganization=exports.IfcOpeningStandardCase=exports.IfcOpeningElementTypeEnum=exports.IfcOpeningElement=exports.IfcOpenShell=exports.IfcOffsetCurveByDistances=exports.IfcOffsetCurve3D=exports.IfcOffsetCurve2D=exports.IfcOffsetCurve=exports.IfcOccupantTypeEnum=exports.IfcOccupant=exports.IfcObjectiveEnum=exports.IfcObjective=exports.IfcObjectTypeEnum=exports.IfcObjectPlacement=exports.IfcObjectDefinition=exports.IfcObject=exports.IfcNumericMeasure=exports.IfcNullStyle=exports.IfcNormalisedRatioMeasure=exports.IfcNonNegativeLengthMeasure=exports.IfcNamedUnit=exports.IfcMotorConnectionTypeEnum=exports.IfcMotorConnectionType=exports.IfcMotorConnection=exports.IfcMonthInYearNumber=exports.IfcMonetaryUnit=exports.IfcMonetaryMeasure=exports.IfcMomentOfInertiaMeasure=exports.IfcMolecularWeightMeasure=exports.IfcMoistureDiffusivityMeasure=exports.IfcModulusOfSubgradeReactionMeasure=exports.IfcModulusOfRotationalSubgradeReactionMeasure=exports.IfcModulusOfLinearSubgradeReactionMeasure=exports.IfcModulusOfElasticityMeasure=exports.IfcMirroredProfileDef=exports.IfcMetric=exports.IfcMemberTypeEnum=exports.IfcMemberType=exports.IfcMemberStandardCase=exports.IfcMember=exports.IfcMedicalDeviceTypeEnum=exports.IfcMedicalDeviceType=exports.IfcMedicalDevice=exports.IfcMechanicalFastenerTypeEnum=exports.IfcMechanicalFastenerType=exports.IfcMechanicalFastener=exports.IfcMeasureWithUnit=exports.IfcMaterialUsageDefinition=exports.IfcMaterialRelationship=exports.IfcMaterialProperties=exports.IfcMaterialProfileWithOffsets=exports.IfcMaterialProfileSetUsageTapering=exports.IfcMaterialProfileSetUsage=exports.IfcMaterialProfileSet=exports.IfcMaterialProfile=exports.IfcMaterialList=exports.IfcMaterialLayerWithOffsets=exports.IfcMaterialLayerSetUsage=exports.IfcMaterialLayerSet=exports.IfcMaterialLayer=exports.IfcMaterialDefinitionRepresentation=exports.IfcMaterialDefinition=exports.IfcMaterialConstituentSet=exports.IfcMaterialConstituent=exports.IfcMaterialClassificationRelationship=exports.IfcMaterial=exports.IfcMassPerLengthMeasure=exports.IfcMassMeasure=exports.IfcMassFlowRateMeasure=exports.IfcMassDensityMeasure=exports.IfcMappedItem=exports.IfcMapConversion=exports.IfcManifoldSolidBrep=exports.IfcMagneticFluxMeasure=exports.IfcMagneticFluxDensityMeasure=exports.IfcLuminousIntensityMeasure=exports.IfcLuminousIntensityDistributionMeasure=exports.IfcLuminousFluxMeasure=exports.IfcLoop=exports.IfcLogicalOperatorEnum=exports.IfcLogical=exports.IfcLocalPlacement=exports.IfcLoadGroupTypeEnum=exports.IfcLinearVelocityMeasure=exports.IfcLinearStiffnessMeasure=exports.IfcLinearPositioningElement=exports.IfcLinearPlacement=exports.IfcLinearMomentMeasure=exports.IfcLinearForceMeasure=exports.IfcLineSegment2D=exports.IfcLine=exports.IfcLightSourceSpot=exports.IfcLightSourcePositional=exports.IfcLightSourceGoniometric=exports.IfcLightSourceDirectional=exports.IfcLightSourceAmbient=exports.IfcLightSource=exports.IfcLightIntensityDistribution=exports.IfcLightFixtureTypeEnum=exports.IfcLightFixtureType=exports.IfcLightFixture=exports.IfcLightEmissionSourceEnum=exports.IfcLightDistributionData=exports.IfcLightDistributionCurveEnum=exports.IfcLibraryReference=exports.IfcLibraryInformation=exports.IfcLengthMeasure=exports.IfcLayerSetDirectionEnum=exports.IfcLanguageId=exports.IfcLampTypeEnum=exports.IfcLampType=exports.IfcLamp=exports.IfcLagTime=exports.IfcLaborResourceTypeEnum=exports.IfcLaborResourceType=exports.IfcLaborResource=exports.IfcLabel=exports.IfcLShapeProfileDef=exports.IfcKnotType=exports.IfcKinematicViscosityMeasure=exports.IfcJunctionBoxTypeEnum=exports.IfcJunctionBoxType=exports.IfcJunctionBox=exports.IfcIsothermalMoistureCapacityMeasure=exports.IfcIrregularTimeSeriesValue=exports.IfcIrregularTimeSeries=exports.IfcIonConcentrationMeasure=exports.IfcInventoryTypeEnum=exports.IfcInventory=exports.IfcIntersectionCurve=exports.IfcInternalOrExternalEnum=exports.IfcInterceptorTypeEnum=exports.IfcInterceptorType=exports.IfcInterceptor=exports.IfcIntegerCountRateMeasure=exports.IfcInteger=exports.IfcInductanceMeasure=exports.IfcIndexedTriangleTextureMap=exports.IfcIndexedTextureMap=exports.IfcIndexedPolygonalFaceWithVoids=exports.IfcIndexedPolygonalFace=exports.IfcIndexedPolyCurve=exports.IfcIndexedColourMap=exports.IfcImageTexture=exports.IfcIlluminanceMeasure=exports.IfcIdentifier=exports.IfcIShapeProfileDef=exports.IfcHumidifierTypeEnum=exports.IfcHumidifierType=exports.IfcHumidifier=exports.IfcHeatingValueMeasure=exports.IfcHeatFluxDensityMeasure=exports.IfcHeatExchangerTypeEnum=exports.IfcHeatExchangerType=exports.IfcHeatExchanger=exports.IfcHalfSpaceSolid=exports.IfcGroup=exports.IfcGridTypeEnum=exports.IfcGridPlacement=exports.IfcGridAxis=exports.IfcGrid=exports.IfcGloballyUniqueId=exports.IfcGlobalOrLocalEnum=exports.IfcGeometricSet=exports.IfcGeometricRepresentationSubContext=exports.IfcGeometricRepresentationItem=exports.IfcGeometricRepresentationContext=exports.IfcGeometricProjectionEnum=exports.IfcGeometricCurveSet=exports.IfcGeographicElementTypeEnum=exports.IfcGeographicElementType=exports.IfcGeographicElement=exports.IfcFurnitureTypeEnum=exports.IfcFurnitureType=exports.IfcFurniture=exports.IfcFurnishingElementType=exports.IfcFurnishingElement=exports.IfcFrequencyMeasure=exports.IfcForceMeasure=exports.IfcFootingTypeEnum=exports.IfcFootingType=exports.IfcFooting=exports.IfcFontWeight=exports.IfcFontVariant=exports.IfcFontStyle=exports.IfcFlowTreatmentDeviceType=exports.IfcFlowTreatmentDevice=exports.IfcFlowTerminalType=exports.IfcFlowTerminal=exports.IfcFlowStorageDeviceType=exports.IfcFlowStorageDevice=exports.IfcFlowSegmentType=exports.IfcFlowSegment=exports.IfcFlowMovingDeviceType=exports.IfcFlowMovingDevice=exports.IfcFlowMeterTypeEnum=exports.IfcFlowMeterType=exports.IfcFlowMeter=exports.IfcFlowInstrumentTypeEnum=exports.IfcFlowInstrumentType=exports.IfcFlowInstrument=exports.IfcFlowFittingType=exports.IfcFlowFitting=exports.IfcFlowDirectionEnum=exports.IfcFlowControllerType=exports.IfcFlowController=exports.IfcFixedReferenceSweptAreaSolid=exports.IfcFireSuppressionTerminalTypeEnum=exports.IfcFireSuppressionTerminalType=exports.IfcFireSuppressionTerminal=exports.IfcFilterTypeEnum=exports.IfcFilterType=exports.IfcFilter=exports.IfcFillAreaStyleTiles=exports.IfcFillAreaStyleHatching=exports.IfcFillAreaStyle=exports.IfcFeatureElementSubtraction=exports.IfcFeatureElementAddition=exports.IfcFeatureElement=exports.IfcFastenerTypeEnum=exports.IfcFastenerType=exports.IfcFastener=exports.IfcFanTypeEnum=exports.IfcFanType=exports.IfcFan=exports.IfcFailureConnectionCondition=exports.IfcFacilityPart=exports.IfcFacility=exports.IfcFacetedBrepWithVoids=exports.IfcFacetedBrep=exports.IfcFaceSurface=exports.IfcFaceOuterBound=exports.IfcFaceBound=exports.IfcFaceBasedSurfaceModel=exports.IfcFace=exports.IfcExtrudedAreaSolidTapered=exports.IfcExtrudedAreaSolid=exports.IfcExternallyDefinedTextFont=exports.IfcExternallyDefinedSurfaceStyle=exports.IfcExternallyDefinedHatchStyle=exports.IfcExternalSpatialStructureElement=exports.IfcExternalSpatialElementTypeEnum=exports.IfcExternalSpatialElement=exports.IfcExternalReferenceRelationship=exports.IfcExternalReference=exports.IfcExternalInformation=exports.IfcExtendedProperties=exports.IfcEventTypeEnum=exports.IfcEventType=exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.IfcTransformerTypeEnum=exports.IfcTransformerType=exports.IfcTransformer=exports.IfcTorqueMeasure=exports.IfcToroidalSurface=exports.IfcTopologyRepresentation=exports.IfcTopologicalRepresentationItem=exports.IfcTimeStamp=exports.IfcTimeSeriesValue=exports.IfcTimeSeriesDataTypeEnum=exports.IfcTimeSeries=exports.IfcTimePeriod=exports.IfcTimeMeasure=exports.IfcTime=exports.IfcThermodynamicTemperatureMeasure=exports.IfcThermalTransmittanceMeasure=exports.IfcThermalResistanceMeasure=exports.IfcThermalExpansionCoefficientMeasure=exports.IfcThermalConductivityMeasure=exports.IfcThermalAdmittanceMeasure=exports.IfcTextureVertexList=exports.IfcTextureVertex=exports.IfcTextureMap=exports.IfcTextureCoordinateGenerator=exports.IfcTextureCoordinate=exports.IfcTextTransformation=exports.IfcTextStyleTextModel=exports.IfcTextStyleForDefinedFont=exports.IfcTextStyleFontModel=exports.IfcTextStyle=exports.IfcTextPath=exports.IfcTextLiteralWithExtent=exports.IfcTextLiteral=exports.IfcTextFontName=exports.IfcTextDecoration=exports.IfcTextAlignment=exports.IfcText=exports.IfcTessellatedItem=exports.IfcTessellatedFaceSet=exports.IfcTendonTypeEnum=exports.IfcTendonType=exports.IfcTendonConduitTypeEnum=exports.IfcTendonConduitType=exports.IfcTendonConduit=exports.IfcTendonAnchorTypeEnum=exports.IfcTendonAnchorType=exports.IfcTendonAnchor=exports.IfcTendon=exports.IfcTemperatureRateOfChangeMeasure=exports.IfcTemperatureGradientMeasure=exports.IfcTelecomAddress=exports.IfcTaskTypeEnum=exports.IfcTaskType=exports.IfcTaskTimeRecurring=exports.IfcTaskTime=exports.IfcTaskDurationEnum=exports.IfcTask=exports.IfcTankTypeEnum=exports.IfcTankType=exports.IfcTank=exports.IfcTableRow=exports.IfcTableColumn=exports.IfcTable=exports.IfcTShapeProfileDef=exports.IfcSystemFurnitureElementTypeEnum=exports.IfcSystemFurnitureElementType=exports.IfcSystemFurnitureElement=exports.IfcSystem=exports.IfcSwitchingDeviceTypeEnum=exports.IfcSwitchingDeviceType=exports.IfcSwitchingDevice=exports.IfcSweptSurface=exports.IfcSweptDiskSolidPolygonal=exports.IfcSweptDiskSolid=exports.IfcSweptAreaSolid=exports.IfcSurfaceTexture=exports.IfcSurfaceStyleWithTextures=exports.IfcSurfaceStyleShading=exports.IfcSurfaceStyleRendering=exports.IfcSurfaceStyleRefraction=exports.IfcSurfaceStyleLighting=exports.IfcSurfaceStyle=exports.IfcSurfaceSide=exports.IfcSurfaceReinforcementArea=exports.IfcSurfaceOfRevolution=exports.IfcSurfaceOfLinearExtrusion=exports.IfcSurfaceFeatureTypeEnum=exports.IfcSurfaceFeature=exports.IfcSurfaceCurveSweptAreaSolid=exports.IfcSurfaceCurve=exports.IfcSurface=exports.IfcSubedge=exports.IfcSubContractResourceTypeEnum=exports.IfcSubContractResourceType=exports.IfcSubContractResource=exports.IfcStyledRepresentation=exports.IfcStyledItem=exports.IfcStyleModel=exports.IfcStructuralSurfaceReaction=exports.IfcStructuralSurfaceMemberVarying=exports.IfcStructuralSurfaceMemberTypeEnum=exports.IfcStructuralSurfaceMember=exports.IfcStructuralSurfaceConnection=exports.IfcStructuralSurfaceActivityTypeEnum=exports.IfcStructuralSurfaceAction=exports.IfcStructuralResultGroup=exports.IfcStructuralReaction=exports.IfcStructuralPointReaction=exports.IfcStructuralPointConnection=exports.IfcStructuralPointAction=exports.IfcStructuralPlanarAction=exports.IfcStructuralMember=exports.IfcStructuralLoadTemperature=exports.IfcStructuralLoadStatic=exports.IfcStructuralLoadSingleForceWarping=exports.IfcStructuralLoadSingleForce=exports.IfcStructuralLoadSingleDisplacementDistortion=exports.IfcStructuralLoadSingleDisplacement=exports.IfcStructuralLoadPlanarForce=exports.IfcStructuralLoadOrResult=exports.IfcStructuralLoadLinearForce=exports.IfcStructuralLoadGroup=exports.IfcStructuralLoadConfiguration=exports.IfcStructuralLoadCase=exports.IfcStructuralLoad=exports.IfcStructuralLinearAction=exports.IfcStructuralItem=exports.IfcStructuralCurveReaction=exports.IfcStructuralCurveMemberVarying=exports.IfcStructuralCurveMemberTypeEnum=exports.IfcStructuralCurveMember=exports.IfcStructuralCurveConnection=exports.IfcStructuralCurveActivityTypeEnum=exports.IfcStructuralCurveAction=exports.IfcStructuralConnectionCondition=exports.IfcStructuralConnection=exports.IfcStructuralAnalysisModel=exports.IfcStructuralActivity=exports.IfcStructuralAction=exports.IfcStateEnum=exports.IfcStairTypeEnum=exports.IfcStairType=exports.IfcStairFlightTypeEnum=exports.IfcStairFlightType=exports.IfcStairFlight=exports.IfcStair=exports.IfcStackTerminalTypeEnum=exports.IfcStackTerminalType=exports.IfcStackTerminal=exports.IfcSphericalSurface=exports.IfcSphere=exports.IfcSpecularRoughness=exports.IfcSpecularExponent=exports.IfcSpecificHeatCapacityMeasure=exports.IfcSpatialZoneTypeEnum=exports.IfcSpatialZoneType=exports.IfcSpatialZone=exports.IfcSpatialStructureElementType=exports.IfcSpatialStructureElement=exports.IfcSpatialElementType=exports.IfcSpatialElement=exports.IfcSpaceTypeEnum=exports.IfcSpaceType=exports.IfcSpaceHeaterTypeEnum=exports.IfcSpaceHeaterType=exports.IfcSpaceHeater=exports.IfcSpace=exports.IfcSoundPressureMeasure=exports.IfcSoundPressureLevelMeasure=exports.IfcSoundPowerMeasure=exports.IfcSoundPowerLevelMeasure=exports.IfcSolidModel=exports.IfcSolidAngleMeasure=exports.IfcSolarDeviceTypeEnum=exports.IfcSolarDeviceType=exports.IfcSolarDevice=exports.IfcSlippageConnectionCondition=exports.IfcSlabTypeEnum=exports.IfcSlabType=exports.IfcSlabStandardCase=exports.IfcSlabElementedCase=exports.IfcSlab=exports.IfcSite=exports.IfcSimplePropertyTemplateTypeEnum=exports.IfcSimplePropertyTemplate=exports.IfcSimpleProperty=exports.IfcShellBasedSurfaceModel=exports.IfcShearModulusMeasure=exports.IfcShapeRepresentation=exports.IfcShapeModel=exports.IfcShapeAspect=exports.IfcShadingDeviceTypeEnum=exports.IfcShadingDeviceType=exports.IfcShadingDevice=exports.IfcSequenceEnum=exports.IfcSensorTypeEnum=exports.IfcSensorType=exports.IfcSensor=exports.IfcSectionedSpine=exports.IfcSectionedSolidHorizontal=exports.IfcSectionedSolid=exports.IfcSectionalAreaIntegralMeasure=exports.IfcSectionTypeEnum=exports.IfcSectionReinforcementProperties=exports.IfcSectionProperties=exports.IfcSectionModulusMeasure=exports.IfcSeamCurve=exports.IfcSchedulingTime=exports.IfcSanitaryTerminalTypeEnum=exports.IfcSanitaryTerminalType=exports.IfcSanitaryTerminal=exports.IfcSIUnitName=exports.IfcSIUnit=exports.IfcSIPrefix=exports.IfcRoundedRectangleProfileDef=exports.IfcRotationalStiffnessMeasure=exports.IfcRotationalMassMeasure=exports.IfcRotationalFrequencyMeasure=exports.IfcRoot=exports.IfcRoofTypeEnum=exports.IfcRoofType=exports.IfcRoof=exports.IfcRoleEnum=exports.IfcRightCircularCylinder=exports.IfcRightCircularCone=exports.IfcRevolvedAreaSolidTapered=exports.IfcRevolvedAreaSolid=exports.IfcResourceTime=exports.IfcResourceLevelRelationship=exports.IfcResourceConstraintRelationship=exports.IfcResourceApprovalRelationship=exports.IfcResource=exports.IfcRepresentationMap=exports.IfcRepresentationItem=exports.IfcRepresentationContext=exports.IfcRepresentation=exports.IfcReparametrisedCompositeCurveSegment=exports.IfcRelationship=exports.IfcRelVoidsElement=exports.IfcRelSpaceBoundary2ndLevel=exports.IfcRelSpaceBoundary1stLevel=exports.IfcRelSpaceBoundary=exports.IfcRelServicesBuildings=exports.IfcRelSequence=exports.IfcRelReferencedInSpatialStructure=exports.IfcRelProjectsElement=exports.IfcRelPositions=exports.IfcRelNests=exports.IfcRelInterferesElements=exports.IfcRelFlowControlElements=exports.IfcRelFillsElement=exports.IfcRelDefinesByType=exports.IfcRelDefinesByTemplate=exports.IfcRelDefinesByProperties=exports.IfcRelDefinesByObject=exports.IfcRelDefines=exports.IfcRelDecomposes=exports.IfcRelDeclares=exports.IfcRelCoversSpaces=exports.IfcRelCoversBldgElements=exports.IfcRelContainedInSpatialStructure=exports.IfcRelConnectsWithRealizingElements=exports.IfcRelConnectsWithEccentricity=exports.IfcRelConnectsStructuralMember=exports.IfcRelConnectsStructuralActivity=exports.IfcRelConnectsPorts=exports.IfcRelConnectsPortToElement=exports.IfcRelConnectsPathElements=exports.IfcRelConnectsElements=exports.IfcRelConnects=exports.IfcRelAssociatesMaterial=exports.IfcRelAssociatesLibrary=exports.IfcRelAssociatesDocument=exports.IfcRelAssociatesConstraint=exports.IfcRelAssociatesClassification=exports.IfcRelAssociatesApproval=exports.IfcRelAssociates=exports.IfcRelAssignsToResource=exports.IfcRelAssignsToProduct=exports.IfcRelAssignsToProcess=exports.IfcRelAssignsToGroupByFactor=exports.IfcRelAssignsToGroup=exports.IfcRelAssignsToControl=exports.IfcRelAssignsToActor=exports.IfcRelAssigns=exports.IfcRelAggregates=exports.IfcReinforcingMeshTypeEnum=exports.IfcReinforcingMeshType=exports.IfcReinforcingMesh=exports.IfcReinforcingElementType=exports.IfcReinforcingElement=exports.IfcReinforcingBarTypeEnum=exports.IfcReinforcingBarType=exports.IfcReinforcingBarSurfaceEnum=exports.IfcReinforcingBarRoleEnum=exports.IfcReinforcingBar=exports.IfcReinforcementDefinitionProperties=exports.IfcReinforcementBarProperties=exports.IfcRegularTimeSeries=exports.IfcReflectanceMethodEnum=exports.IfcReferentTypeEnum=exports.IfcReferent=exports.IfcReference=exports.IfcRecurrenceTypeEnum=exports.IfcRecurrencePattern=exports.IfcRectangularTrimmedSurface=exports.IfcRectangularPyramid=exports.IfcRectangleProfileDef=exports.IfcRectangleHollowProfileDef=exports.IfcReal=exports.IfcRationalBSplineSurfaceWithKnots=exports.IfcRationalBSplineCurveWithKnots=exports.IfcRatioMeasure=exports.IfcRampTypeEnum=exports.IfcRampType=exports.IfcRampFlightTypeEnum=exports.IfcRampFlightType=exports.IfcRampFlight=exports.IfcRamp=exports.IfcRailingTypeEnum=exports.IfcRailingType=exports.IfcRailing=exports.IfcRadioActivityMeasure=exports.IfcQuantityWeight=exports.IfcQuantityVolume=exports.IfcQuantityTime=exports.IfcQuantitySet=exports.IfcQuantityLength=exports.IfcQuantityCount=exports.IfcQuantityArea=exports.IfcPumpTypeEnum=exports.IfcPumpType=exports.IfcPump=exports.IfcProxy=exports.IfcProtectiveDeviceTypeEnum=exports.IfcProtectiveDeviceType=exports.IfcProtectiveDeviceTrippingUnitTypeEnum=exports.IfcProtectiveDeviceTrippingUnitType=exports.IfcProtectiveDeviceTrippingUnit=exports.IfcProtectiveDevice=exports.IfcPropertyTemplateDefinition=exports.IfcPropertyTemplate=exports.IfcPropertyTableValue=exports.IfcPropertySingleValue=exports.IfcPropertySetTemplateTypeEnum=exports.IfcPropertySetTemplate=exports.IfcPropertySetDefinition=exports.IfcPropertySet=exports.IfcPropertyReferenceValue=exports.IfcPropertyListValue=exports.IfcPropertyEnumeration=exports.IfcPropertyEnumeratedValue=exports.IfcPropertyDependencyRelationship=exports.IfcPropertyDefinition=exports.IfcPropertyBoundedValue=exports.IfcPropertyAbstraction=exports.IfcProperty=exports.IfcProjectionElementTypeEnum=exports.IfcProjectionElement=exports.IfcProjectedOrTrueLengthEnum=exports.IfcProjectedCRS=exports.IfcProjectOrderTypeEnum=exports.IfcProjectOrder=exports.IfcProjectLibrary=exports.IfcProject=exports.IfcProfileTypeEnum=exports.IfcProfileProperties=exports.IfcProfileDef=exports.IfcProductRepresentation=exports.IfcProductDefinitionShape=exports.IfcProduct=exports.IfcProcess=exports.IfcProcedureTypeEnum=exports.IfcProcedureType=exports.IfcProcedure=exports.IfcPressureMeasure=exports.IfcPresentationStyleAssignment=exports.IfcPresentationStyle=exports.IfcPresentationLayerWithStyle=exports.IfcPresentationLayerAssignment=exports.IfcPresentationItem=exports.IfcPresentableText=exports.IfcPreferredSurfaceCurveRepresentation=exports.IfcPreDefinedTextFont=exports.IfcPreDefinedPropertySet=exports.IfcPreDefinedProperties=exports.IfcPreDefinedItem=exports.IfcPreDefinedCurveFont=exports.IfcPreDefinedColour=exports.IfcPowerMeasure=exports.IfcPostalAddress=exports.IfcPositiveRatioMeasure=exports.IfcPositivePlaneAngleMeasure=exports.IfcPositiveLengthMeasure=exports.IfcPositiveInteger=exports.IfcPositioningElement=exports.IfcPort=exports.IfcPolyline=exports.IfcPolygonalFaceSet=exports.IfcPolygonalBoundedHalfSpace=exports.IfcPolyLoop=exports.IfcPointOnSurface=exports.IfcPointOnCurve=exports.IfcPoint=exports.IfcPlateTypeEnum=exports.IfcPlateType=exports.IfcPlateStandardCase=exports.IfcPlate=exports.IfcPlaneAngleMeasure=exports.IfcPlane=exports.IfcPlanarForceMeasure=exports.IfcPlanarExtent=exports.IfcPlanarBox=exports.IfcPlacement=exports.IfcPixelTexture=exports.IfcPipeSegmentTypeEnum=exports.IfcPipeSegmentType=exports.IfcPipeSegment=exports.IfcPipeFittingTypeEnum=exports.IfcPipeFittingType=exports.IfcPipeFitting=exports.IfcPileTypeEnum=exports.IfcPileType=exports.IfcPileConstructionEnum=exports.IfcPile=exports.IfcPhysicalSimpleQuantity=exports.IfcPhysicalQuantity=exports.IfcPhysicalOrVirtualEnum=exports.IfcPhysicalComplexQuantity=exports.IfcPersonAndOrganization=exports.IfcPerson=exports.IfcPermitTypeEnum=exports.IfcPermit=exports.IfcPermeableCoveringProperties=exports.IfcPermeableCoveringOperationEnum=exports.IfcPerformanceHistoryTypeEnum=exports.IfcPerformanceHistory=exports.IfcPcurve=exports.IfcPath=exports.IfcParameterizedProfileDef=exports.IfcParameterValue=exports.IfcPHMeasure=exports.IfcOwnerHistory=exports.IfcOutletTypeEnum=exports.IfcOutletType=exports.IfcOutlet=exports.IfcOuterBoundaryCurve=exports.IfcOrientedEdge=exports.IfcOrientationExpression=exports.IfcOrganizationRelationship=exports.IfcOrganization=exports.IfcOpeningStandardCase=exports.IfcOpeningElementTypeEnum=exports.IfcOpeningElement=exports.IfcOpenShell=exports.IfcOffsetCurveByDistances=exports.IfcOffsetCurve3D=exports.IfcOffsetCurve2D=exports.IfcOffsetCurve=exports.IfcOccupantTypeEnum=exports.IfcOccupant=exports.IfcObjectiveEnum=exports.IfcObjective=exports.IfcObjectTypeEnum=exports.IfcObjectPlacement=exports.IfcObjectDefinition=exports.IfcObject=exports.IfcNumericMeasure=exports.IfcNullStyle=exports.IfcNormalisedRatioMeasure=exports.IfcNonNegativeLengthMeasure=exports.IfcNamedUnit=exports.IfcMotorConnectionTypeEnum=exports.IfcMotorConnectionType=exports.IfcMotorConnection=exports.IfcMonthInYearNumber=exports.IfcMonetaryUnit=exports.IfcMonetaryMeasure=exports.IfcMomentOfInertiaMeasure=exports.IfcMolecularWeightMeasure=exports.IfcMoistureDiffusivityMeasure=exports.IfcModulusOfSubgradeReactionMeasure=exports.IfcModulusOfRotationalSubgradeReactionMeasure=exports.IfcModulusOfLinearSubgradeReactionMeasure=exports.IfcModulusOfElasticityMeasure=exports.IfcMirroredProfileDef=exports.IfcMetric=exports.IfcMemberTypeEnum=exports.IfcMemberType=exports.IfcMemberStandardCase=exports.IfcMember=exports.IfcMedicalDeviceTypeEnum=exports.IfcMedicalDeviceType=exports.IfcMedicalDevice=exports.IfcMechanicalFastenerTypeEnum=exports.IfcMechanicalFastenerType=exports.IfcMechanicalFastener=exports.IfcMeasureWithUnit=exports.IfcMaterialUsageDefinition=exports.IfcMaterialRelationship=exports.IfcMaterialProperties=exports.IfcMaterialProfileWithOffsets=exports.IfcMaterialProfileSetUsageTapering=exports.IfcMaterialProfileSetUsage=exports.IfcMaterialProfileSet=exports.IfcMaterialProfile=exports.IfcMaterialList=exports.IfcMaterialLayerWithOffsets=exports.IfcMaterialLayerSetUsage=exports.IfcMaterialLayerSet=exports.IfcMaterialLayer=exports.IfcMaterialDefinitionRepresentation=exports.IfcMaterialDefinition=exports.IfcMaterialConstituentSet=exports.IfcMaterialConstituent=exports.IfcMaterialClassificationRelationship=exports.IfcMaterial=exports.IfcMassPerLengthMeasure=exports.IfcMassMeasure=exports.IfcMassFlowRateMeasure=exports.IfcMassDensityMeasure=exports.IfcMappedItem=exports.IfcMapConversion=exports.IfcManifoldSolidBrep=exports.IfcMagneticFluxMeasure=exports.IfcMagneticFluxDensityMeasure=exports.IfcLuminousIntensityMeasure=exports.IfcLuminousIntensityDistributionMeasure=exports.IfcLuminousFluxMeasure=exports.IfcLoop=exports.IfcLogicalOperatorEnum=exports.IfcLogical=exports.IfcLocalPlacement=exports.IfcLoadGroupTypeEnum=exports.IfcLinearVelocityMeasure=exports.IfcLinearStiffnessMeasure=exports.IfcLinearPositioningElement=exports.IfcLinearPlacement=exports.IfcLinearMomentMeasure=exports.IfcLinearForceMeasure=exports.IfcLineSegment2D=exports.IfcLine=exports.IfcLightSourceSpot=exports.IfcLightSourcePositional=exports.IfcLightSourceGoniometric=exports.IfcLightSourceDirectional=exports.IfcLightSourceAmbient=exports.IfcLightSource=exports.IfcLightIntensityDistribution=exports.IfcLightFixtureTypeEnum=exports.IfcLightFixtureType=exports.IfcLightFixture=exports.IfcLightEmissionSourceEnum=exports.IfcLightDistributionData=exports.IfcLightDistributionCurveEnum=exports.IfcLibraryReference=exports.IfcLibraryInformation=exports.IfcLengthMeasure=exports.IfcLayerSetDirectionEnum=exports.IfcLanguageId=exports.IfcLampTypeEnum=exports.IfcLampType=exports.IfcLamp=exports.IfcLagTime=exports.IfcLaborResourceTypeEnum=exports.IfcLaborResourceType=exports.IfcLaborResource=exports.IfcLabel=exports.IfcLShapeProfileDef=exports.IfcKnotType=exports.IfcKinematicViscosityMeasure=exports.IfcJunctionBoxTypeEnum=exports.IfcJunctionBoxType=exports.IfcJunctionBox=exports.IfcIsothermalMoistureCapacityMeasure=exports.IfcIrregularTimeSeriesValue=exports.IfcIrregularTimeSeries=exports.IfcIonConcentrationMeasure=exports.IfcInventoryTypeEnum=exports.IfcInventory=exports.IfcIntersectionCurve=exports.IfcInternalOrExternalEnum=exports.IfcInterceptorTypeEnum=exports.IfcInterceptorType=exports.IfcInterceptor=exports.IfcIntegerCountRateMeasure=exports.IfcInteger=exports.IfcInductanceMeasure=exports.IfcIndexedTriangleTextureMap=exports.IfcIndexedTextureMap=exports.IfcIndexedPolygonalFaceWithVoids=exports.IfcIndexedPolygonalFace=exports.IfcIndexedPolyCurve=exports.IfcIndexedColourMap=exports.IfcImageTexture=exports.IfcIlluminanceMeasure=exports.IfcIdentifier=exports.IfcIShapeProfileDef=exports.IfcHumidifierTypeEnum=exports.IfcHumidifierType=exports.IfcHumidifier=exports.IfcHeatingValueMeasure=exports.IfcHeatFluxDensityMeasure=exports.IfcHeatExchangerTypeEnum=exports.IfcHeatExchangerType=exports.IfcHeatExchanger=exports.IfcHalfSpaceSolid=exports.IfcGroup=exports.IfcGridTypeEnum=exports.IfcGridPlacement=exports.IfcGridAxis=exports.IfcGrid=exports.IfcGloballyUniqueId=exports.IfcGlobalOrLocalEnum=exports.IfcGeometricSet=exports.IfcGeometricRepresentationSubContext=exports.IfcGeometricRepresentationItem=exports.IfcGeometricRepresentationContext=exports.IfcGeometricProjectionEnum=exports.IfcGeometricCurveSet=exports.IfcGeographicElementTypeEnum=exports.IfcGeographicElementType=exports.IfcGeographicElement=exports.IfcFurnitureTypeEnum=exports.IfcFurnitureType=exports.IfcFurniture=exports.IfcFurnishingElementType=exports.IfcFurnishingElement=exports.IfcFrequencyMeasure=exports.IfcForceMeasure=exports.IfcFootingTypeEnum=exports.IfcFootingType=exports.IfcFooting=exports.IfcFontWeight=exports.IfcFontVariant=exports.IfcFontStyle=exports.IfcFlowTreatmentDeviceType=exports.IfcFlowTreatmentDevice=exports.IfcFlowTerminalType=exports.IfcFlowTerminal=exports.IfcFlowStorageDeviceType=exports.IfcFlowStorageDevice=exports.IfcFlowSegmentType=exports.IfcFlowSegment=exports.IfcFlowMovingDeviceType=exports.IfcFlowMovingDevice=exports.IfcFlowMeterTypeEnum=exports.IfcFlowMeterType=exports.IfcFlowMeter=exports.IfcFlowInstrumentTypeEnum=exports.IfcFlowInstrumentType=exports.IfcFlowInstrument=exports.IfcFlowFittingType=exports.IfcFlowFitting=exports.IfcFlowDirectionEnum=exports.IfcFlowControllerType=exports.IfcFlowController=exports.IfcFixedReferenceSweptAreaSolid=exports.IfcFireSuppressionTerminalTypeEnum=exports.IfcFireSuppressionTerminalType=exports.IfcFireSuppressionTerminal=exports.IfcFilterTypeEnum=exports.IfcFilterType=exports.IfcFilter=exports.IfcFillAreaStyleTiles=exports.IfcFillAreaStyleHatching=exports.IfcFillAreaStyle=exports.IfcFeatureElementSubtraction=exports.IfcFeatureElementAddition=exports.IfcFeatureElement=exports.IfcFastenerTypeEnum=exports.IfcFastenerType=exports.IfcFastener=exports.IfcFanTypeEnum=exports.IfcFanType=exports.IfcFan=exports.IfcFailureConnectionCondition=exports.IfcFacilityPart=exports.IfcFacility=exports.IfcFacetedBrepWithVoids=exports.IfcFacetedBrep=exports.IfcFaceSurface=exports.IfcFaceOuterBound=exports.IfcFaceBound=exports.IfcFaceBasedSurfaceModel=exports.IfcFace=exports.IfcExtrudedAreaSolidTapered=exports.IfcExtrudedAreaSolid=exports.IfcExternallyDefinedTextFont=exports.IfcExternallyDefinedSurfaceStyle=exports.IfcExternallyDefinedHatchStyle=exports.IfcExternalSpatialStructureElement=exports.IfcExternalSpatialElementTypeEnum=exports.IfcExternalSpatialElement=exports.IfcExternalReferenceRelationship=exports.IfcExternalReference=exports.IfcExternalInformation=exports.IfcExtendedProperties=exports.IfcEventTypeEnum=exports.IfcEventType=exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.UNKNOWN=exports.STRING=exports.SET_END=exports.SET_BEGIN=exports.REF=exports.REAL=exports.LINE_END=exports.LABEL=exports.IfcZone=exports.IfcZShapeProfileDef=exports.IfcWorkTime=exports.IfcWorkScheduleTypeEnum=exports.IfcWorkSchedule=exports.IfcWorkPlanTypeEnum=exports.IfcWorkPlan=exports.IfcWorkControl=exports.IfcWorkCalendarTypeEnum=exports.IfcWorkCalendar=exports.IfcWindowTypePartitioningEnum=exports.IfcWindowTypeEnum=exports.IfcWindowType=exports.IfcWindowStyleOperationEnum=exports.IfcWindowStyleConstructionEnum=exports.IfcWindowStyle=exports.IfcWindowStandardCase=exports.IfcWindowPanelProperties=exports.IfcWindowPanelPositionEnum=exports.IfcWindowPanelOperationEnum=exports.IfcWindowLiningProperties=exports.IfcWindow=exports.IfcWasteTerminalTypeEnum=exports.IfcWasteTerminalType=exports.IfcWasteTerminal=exports.IfcWarpingMomentMeasure=exports.IfcWarpingConstantMeasure=exports.IfcWallTypeEnum=exports.IfcWallType=exports.IfcWallStandardCase=exports.IfcWallElementedCase=exports.IfcWall=exports.IfcVolumetricFlowRateMeasure=exports.IfcVolumeMeasure=exports.IfcVoidingFeatureTypeEnum=exports.IfcVoidingFeature=exports.IfcVirtualGridIntersection=exports.IfcVirtualElement=exports.IfcVibrationIsolatorTypeEnum=exports.IfcVibrationIsolatorType=exports.IfcVibrationIsolator=exports.IfcVibrationDamperTypeEnum=exports.IfcVibrationDamperType=exports.IfcVibrationDamper=exports.IfcVertexPoint=exports.IfcVertexLoop=exports.IfcVertex=exports.IfcVector=exports.IfcVaporPermeabilityMeasure=exports.IfcValveTypeEnum=exports.IfcValveType=exports.IfcValve=exports.IfcUnitaryEquipmentTypeEnum=exports.IfcUnitaryEquipmentType=exports.IfcUnitaryEquipment=exports.IfcUnitaryControlElementTypeEnum=exports.IfcUnitaryControlElementType=exports.IfcUnitaryControlElement=exports.IfcUnitEnum=exports.IfcUnitAssignment=exports.IfcUShapeProfileDef=exports.IfcURIReference=exports.IfcTypeResource=exports.IfcTypeProduct=exports.IfcTypeProcess=exports.IfcTypeObject=exports.IfcTubeBundleTypeEnum=exports.IfcTubeBundleType=exports.IfcTubeBundle=exports.IfcTrimmingPreference=exports.IfcTrimmedCurve=exports.IfcTriangulatedIrregularNetwork=exports.IfcTriangulatedFaceSet=exports.IfcTrapeziumProfileDef=exports.IfcTransportElementTypeEnum=exports.IfcTransportElementType=exports.IfcTransportElement=exports.IfcTransitionCurveType=exports.IfcTransitionCurveSegment2D=exports.IfcTransitionCode=exports.IfcTransformerTypeEnum=exports.IfcTransformerType=exports.IfcTransformer=exports.IfcTorqueMeasure=exports.IfcToroidalSurface=exports.IfcTopologyRepresentation=exports.IfcTopologicalRepresentationItem=exports.IfcTimeStamp=exports.IfcTimeSeriesValue=exports.IfcTimeSeriesDataTypeEnum=exports.IfcTimeSeries=exports.IfcTimePeriod=exports.IfcTimeMeasure=exports.IfcTime=exports.IfcThermodynamicTemperatureMeasure=exports.IfcThermalTransmittanceMeasure=exports.IfcThermalResistanceMeasure=exports.IfcThermalExpansionCoefficientMeasure=exports.IfcThermalConductivityMeasure=exports.IfcThermalAdmittanceMeasure=exports.IfcTextureVertexList=exports.IfcTextureVertex=exports.IfcTextureMap=exports.IfcTextureCoordinateGenerator=exports.IfcTextureCoordinate=exports.IfcTextTransformation=exports.IfcTextStyleTextModel=exports.IfcTextStyleForDefinedFont=exports.IfcTextStyleFontModel=exports.IfcTextStyle=exports.IfcTextPath=exports.IfcTextLiteralWithExtent=exports.IfcTextLiteral=exports.IfcTextFontName=exports.IfcTextDecoration=exports.IfcTextAlignment=exports.IfcText=exports.IfcTessellatedItem=exports.IfcTessellatedFaceSet=exports.IfcTendonTypeEnum=exports.IfcTendonType=exports.IfcTendonConduitTypeEnum=exports.IfcTendonConduitType=exports.IfcTendonConduit=exports.IfcTendonAnchorTypeEnum=exports.IfcTendonAnchorType=exports.IfcTendonAnchor=exports.IfcTendon=exports.IfcTemperatureRateOfChangeMeasure=exports.IfcTemperatureGradientMeasure=exports.IfcTelecomAddress=exports.IfcTaskTypeEnum=exports.IfcTaskType=exports.IfcTaskTimeRecurring=exports.IfcTaskTime=exports.IfcTaskDurationEnum=exports.IfcTask=exports.IfcTankTypeEnum=exports.IfcTankType=exports.IfcTank=exports.IfcTableRow=exports.IfcTableColumn=exports.IfcTable=exports.IfcTShapeProfileDef=exports.IfcSystemFurnitureElementTypeEnum=exports.IfcSystemFurnitureElementType=exports.IfcSystemFurnitureElement=exports.IfcSystem=exports.IfcSwitchingDeviceTypeEnum=exports.IfcSwitchingDeviceType=exports.IfcSwitchingDevice=exports.IfcSweptSurface=exports.IfcSweptDiskSolidPolygonal=exports.IfcSweptDiskSolid=exports.IfcSweptAreaSolid=exports.IfcSurfaceTexture=exports.IfcSurfaceStyleWithTextures=exports.IfcSurfaceStyleShading=exports.IfcSurfaceStyleRendering=exports.IfcSurfaceStyleRefraction=exports.IfcSurfaceStyleLighting=exports.IfcSurfaceStyle=exports.IfcSurfaceSide=exports.IfcSurfaceReinforcementArea=exports.IfcSurfaceOfRevolution=exports.IfcSurfaceOfLinearExtrusion=exports.IfcSurfaceFeatureTypeEnum=exports.IfcSurfaceFeature=exports.IfcSurfaceCurveSweptAreaSolid=exports.IfcSurfaceCurve=exports.IfcSurface=exports.IfcSubedge=exports.IfcSubContractResourceTypeEnum=exports.IfcSubContractResourceType=exports.IfcSubContractResource=exports.IfcStyledRepresentation=exports.IfcStyledItem=exports.IfcStyleModel=exports.IfcStructuralSurfaceReaction=exports.IfcStructuralSurfaceMemberVarying=exports.IfcStructuralSurfaceMemberTypeEnum=exports.IfcStructuralSurfaceMember=exports.IfcStructuralSurfaceConnection=exports.IfcStructuralSurfaceActivityTypeEnum=exports.IfcStructuralSurfaceAction=exports.IfcStructuralResultGroup=exports.IfcStructuralReaction=exports.IfcStructuralPointReaction=exports.IfcStructuralPointConnection=exports.IfcStructuralPointAction=exports.IfcStructuralPlanarAction=exports.IfcStructuralMember=exports.IfcStructuralLoadTemperature=exports.IfcStructuralLoadStatic=exports.IfcStructuralLoadSingleForceWarping=exports.IfcStructuralLoadSingleForce=exports.IfcStructuralLoadSingleDisplacementDistortion=exports.IfcStructuralLoadSingleDisplacement=exports.IfcStructuralLoadPlanarForce=exports.IfcStructuralLoadOrResult=exports.IfcStructuralLoadLinearForce=exports.IfcStructuralLoadGroup=exports.IfcStructuralLoadConfiguration=exports.IfcStructuralLoadCase=exports.IfcStructuralLoad=exports.IfcStructuralLinearAction=exports.IfcStructuralItem=exports.IfcStructuralCurveReaction=exports.IfcStructuralCurveMemberVarying=exports.IfcStructuralCurveMemberTypeEnum=exports.IfcStructuralCurveMember=exports.IfcStructuralCurveConnection=exports.IfcStructuralCurveActivityTypeEnum=exports.IfcStructuralCurveAction=exports.IfcStructuralConnectionCondition=exports.IfcStructuralConnection=exports.IfcStructuralAnalysisModel=exports.IfcStructuralActivity=exports.IfcStructuralAction=exports.IfcStateEnum=exports.IfcStairTypeEnum=exports.IfcStairType=exports.IfcStairFlightTypeEnum=exports.IfcStairFlightType=exports.IfcStairFlight=exports.IfcStair=exports.IfcStackTerminalTypeEnum=exports.IfcStackTerminalType=exports.IfcStackTerminal=exports.IfcSphericalSurface=exports.IfcSphere=exports.IfcSpecularRoughness=exports.IfcSpecularExponent=exports.IfcSpecificHeatCapacityMeasure=exports.IfcSpatialZoneTypeEnum=exports.IfcSpatialZoneType=exports.IfcSpatialZone=exports.IfcSpatialStructureElementType=exports.IfcSpatialStructureElement=exports.IfcSpatialElementType=exports.IfcSpatialElement=exports.IfcSpaceTypeEnum=exports.IfcSpaceType=exports.IfcSpaceHeaterTypeEnum=exports.IfcSpaceHeaterType=exports.IfcSpaceHeater=exports.IfcSpace=exports.IfcSoundPressureMeasure=exports.IfcSoundPressureLevelMeasure=exports.IfcSoundPowerMeasure=exports.IfcSoundPowerLevelMeasure=exports.IfcSolidModel=exports.IfcSolidAngleMeasure=exports.IfcSolarDeviceTypeEnum=exports.IfcSolarDeviceType=exports.IfcSolarDevice=exports.IfcSlippageConnectionCondition=exports.IfcSlabTypeEnum=exports.IfcSlabType=exports.IfcSlabStandardCase=exports.IfcSlabElementedCase=exports.IfcSlab=exports.IfcSite=exports.IfcSimplePropertyTemplateTypeEnum=exports.IfcSimplePropertyTemplate=exports.IfcSimpleProperty=exports.IfcShellBasedSurfaceModel=exports.IfcShearModulusMeasure=exports.IfcShapeRepresentation=exports.IfcShapeModel=exports.IfcShapeAspect=exports.IfcShadingDeviceTypeEnum=exports.IfcShadingDeviceType=exports.IfcShadingDevice=exports.IfcSequenceEnum=exports.IfcSensorTypeEnum=exports.IfcSensorType=exports.IfcSensor=exports.IfcSectionedSpine=exports.IfcSectionedSolidHorizontal=exports.IfcSectionedSolid=exports.IfcSectionalAreaIntegralMeasure=exports.IfcSectionTypeEnum=exports.IfcSectionReinforcementProperties=exports.IfcSectionProperties=exports.IfcSectionModulusMeasure=exports.IfcSeamCurve=exports.IfcSchedulingTime=exports.IfcSanitaryTerminalTypeEnum=exports.IfcSanitaryTerminalType=exports.IfcSanitaryTerminal=exports.IfcSIUnitName=exports.IfcSIUnit=exports.IfcSIPrefix=exports.IfcRoundedRectangleProfileDef=exports.IfcRotationalStiffnessMeasure=exports.IfcRotationalMassMeasure=exports.IfcRotationalFrequencyMeasure=exports.IfcRoot=exports.IfcRoofTypeEnum=exports.IfcRoofType=exports.IfcRoof=exports.IfcRoleEnum=exports.IfcRightCircularCylinder=exports.IfcRightCircularCone=exports.IfcRevolvedAreaSolidTapered=exports.IfcRevolvedAreaSolid=exports.IfcResourceTime=exports.IfcResourceLevelRelationship=exports.IfcResourceConstraintRelationship=exports.IfcResourceApprovalRelationship=exports.IfcResource=exports.IfcRepresentationMap=exports.IfcRepresentationItem=exports.IfcRepresentationContext=exports.IfcRepresentation=exports.IfcReparametrisedCompositeCurveSegment=exports.IfcRelationship=exports.IfcRelVoidsElement=exports.IfcRelSpaceBoundary2ndLevel=exports.IfcRelSpaceBoundary1stLevel=exports.IfcRelSpaceBoundary=exports.IfcRelServicesBuildings=exports.IfcRelSequence=exports.IfcRelReferencedInSpatialStructure=exports.IfcRelProjectsElement=exports.IfcRelPositions=exports.IfcRelNests=exports.IfcRelInterferesElements=exports.IfcRelFlowControlElements=exports.IfcRelFillsElement=exports.IfcRelDefinesByType=exports.IfcRelDefinesByTemplate=exports.IfcRelDefinesByProperties=exports.IfcRelDefinesByObject=exports.IfcRelDefines=exports.IfcRelDecomposes=exports.IfcRelDeclares=exports.IfcRelCoversSpaces=exports.IfcRelCoversBldgElements=exports.IfcRelContainedInSpatialStructure=exports.IfcRelConnectsWithRealizingElements=exports.IfcRelConnectsWithEccentricity=exports.IfcRelConnectsStructuralMember=exports.IfcRelConnectsStructuralActivity=exports.IfcRelConnectsPorts=exports.IfcRelConnectsPortToElement=exports.IfcRelConnectsPathElements=exports.IfcRelConnectsElements=exports.IfcRelConnects=exports.IfcRelAssociatesMaterial=exports.IfcRelAssociatesLibrary=exports.IfcRelAssociatesDocument=exports.IfcRelAssociatesConstraint=exports.IfcRelAssociatesClassification=exports.IfcRelAssociatesApproval=exports.IfcRelAssociates=exports.IfcRelAssignsToResource=exports.IfcRelAssignsToProduct=exports.IfcRelAssignsToProcess=exports.IfcRelAssignsToGroupByFactor=exports.IfcRelAssignsToGroup=exports.IfcRelAssignsToControl=exports.IfcRelAssignsToActor=exports.IfcRelAssigns=exports.IfcRelAggregates=exports.IfcReinforcingMeshTypeEnum=exports.IfcReinforcingMeshType=exports.IfcReinforcingMesh=exports.IfcReinforcingElementType=exports.IfcReinforcingElement=exports.IfcReinforcingBarTypeEnum=exports.IfcReinforcingBarType=exports.IfcReinforcingBarSurfaceEnum=exports.IfcReinforcingBarRoleEnum=exports.IfcReinforcingBar=exports.IfcReinforcementDefinitionProperties=exports.IfcReinforcementBarProperties=exports.IfcRegularTimeSeries=exports.IfcReflectanceMethodEnum=exports.IfcReferentTypeEnum=exports.IfcReferent=exports.IfcReference=exports.IfcRecurrenceTypeEnum=exports.IfcRecurrencePattern=exports.IfcRectangularTrimmedSurface=exports.IfcRectangularPyramid=exports.IfcRectangleProfileDef=exports.IfcRectangleHollowProfileDef=exports.IfcReal=exports.IfcRationalBSplineSurfaceWithKnots=exports.IfcRationalBSplineCurveWithKnots=exports.IfcRatioMeasure=exports.IfcRampTypeEnum=exports.IfcRampType=exports.IfcRampFlightTypeEnum=exports.IfcRampFlightType=exports.IfcRampFlight=exports.IfcRamp=exports.IfcRailingTypeEnum=exports.IfcRailingType=exports.IfcRailing=exports.IfcRadioActivityMeasure=exports.IfcQuantityWeight=exports.IfcQuantityVolume=exports.IfcQuantityTime=exports.IfcQuantitySet=exports.IfcQuantityLength=exports.IfcQuantityCount=exports.IfcQuantityArea=exports.IfcPumpTypeEnum=exports.IfcPumpType=exports.IfcPump=exports.IfcProxy=exports.IfcProtectiveDeviceTypeEnum=exports.IfcProtectiveDeviceType=exports.IfcProtectiveDeviceTrippingUnitTypeEnum=exports.IfcProtectiveDeviceTrippingUnitType=exports.IfcProtectiveDeviceTrippingUnit=exports.IfcProtectiveDevice=exports.IfcPropertyTemplateDefinition=exports.IfcPropertyTemplate=exports.IfcPropertyTableValue=exports.IfcPropertySingleValue=exports.IfcPropertySetTemplateTypeEnum=exports.IfcPropertySetTemplate=exports.IfcPropertySetDefinition=exports.IfcPropertySet=exports.IfcPropertyReferenceValue=exports.IfcPropertyListValue=exports.IfcPropertyEnumeration=exports.IfcPropertyEnumeratedValue=exports.IfcPropertyDependencyRelationship=exports.IfcPropertyDefinition=exports.IfcPropertyBoundedValue=exports.IfcPropertyAbstraction=exports.IfcProperty=exports.IfcProjectionElementTypeEnum=exports.IfcProjectionElement=exports.IfcProjectedOrTrueLengthEnum=exports.IfcProjectedCRS=exports.IfcProjectOrderTypeEnum=exports.IfcProjectOrder=exports.IfcProjectLibrary=exports.IfcProject=exports.IfcProfileTypeEnum=exports.IfcProfileProperties=exports.IfcProfileDef=exports.IfcProductRepresentation=exports.IfcProductDefinitionShape=exports.IfcProduct=exports.IfcProcess=exports.IfcProcedureTypeEnum=exports.IfcProcedureType=exports.IfcProcedure=exports.IfcPressureMeasure=exports.IfcPresentationStyleAssignment=exports.IfcPresentationStyle=exports.IfcPresentationLayerWithStyle=exports.IfcPresentationLayerAssignment=exports.IfcPresentationItem=exports.IfcPresentableText=exports.IfcPreferredSurfaceCurveRepresentation=exports.IfcPreDefinedTextFont=exports.IfcPreDefinedPropertySet=exports.IfcPreDefinedProperties=exports.IfcPreDefinedItem=exports.IfcPreDefinedCurveFont=exports.IfcPreDefinedColour=exports.IfcPowerMeasure=exports.IfcPostalAddress=exports.IfcPositiveRatioMeasure=exports.IfcPositivePlaneAngleMeasure=exports.IfcPositiveLengthMeasure=exports.IfcPositiveInteger=exports.IfcPositioningElement=exports.IfcPort=exports.IfcPolyline=exports.IfcPolygonalFaceSet=exports.IfcPolygonalBoundedHalfSpace=exports.IfcPolyLoop=exports.IfcPointOnSurface=exports.IfcPointOnCurve=exports.IfcPoint=exports.IfcPlateTypeEnum=exports.IfcPlateType=exports.IfcPlateStandardCase=exports.IfcPlate=exports.IfcPlaneAngleMeasure=exports.IfcPlane=exports.IfcPlanarForceMeasure=exports.IfcPlanarExtent=exports.IfcPlanarBox=exports.IfcPlacement=exports.IfcPixelTexture=exports.IfcPipeSegmentTypeEnum=exports.IfcPipeSegmentType=exports.IfcPipeSegment=exports.IfcPipeFittingTypeEnum=exports.IfcPipeFittingType=exports.IfcPipeFitting=exports.IfcPileTypeEnum=exports.IfcPileType=exports.IfcPileConstructionEnum=exports.IfcPile=exports.IfcPhysicalSimpleQuantity=exports.IfcPhysicalQuantity=exports.IfcPhysicalOrVirtualEnum=exports.IfcPhysicalComplexQuantity=exports.IfcPersonAndOrganization=exports.IfcPerson=exports.IfcPermitTypeEnum=exports.IfcPermit=exports.IfcPermeableCoveringProperties=exports.IfcPermeableCoveringOperationEnum=exports.IfcPerformanceHistoryTypeEnum=exports.IfcPerformanceHistory=exports.IfcPcurve=exports.IfcPath=exports.IfcParameterizedProfileDef=exports.IfcParameterValue=exports.IfcPHMeasure=exports.IfcOwnerHistory=exports.IfcOutletTypeEnum=exports.IfcOutletType=exports.IfcOutlet=exports.IfcOuterBoundaryCurve=exports.IfcOrientedEdge=exports.IfcOrientationExpression=exports.IfcOrganizationRelationship=exports.IfcOrganization=exports.IfcOpeningStandardCase=exports.IfcOpeningElementTypeEnum=exports.IfcOpeningElement=exports.IfcOpenShell=exports.IfcOffsetCurveByDistances=exports.IfcOffsetCurve3D=exports.IfcOffsetCurve2D=exports.IfcOffsetCurve=exports.IfcOccupantTypeEnum=exports.IfcOccupant=exports.IfcObjectiveEnum=exports.IfcObjective=exports.IfcObjectTypeEnum=exports.IfcObjectPlacement=exports.IfcObjectDefinition=exports.IfcObject=exports.IfcNumericMeasure=exports.IfcNullStyle=exports.IfcNormalisedRatioMeasure=exports.IfcNonNegativeLengthMeasure=exports.IfcNamedUnit=exports.IfcMotorConnectionTypeEnum=exports.IfcMotorConnectionType=exports.IfcMotorConnection=exports.IfcMonthInYearNumber=exports.IfcMonetaryUnit=exports.IfcMonetaryMeasure=exports.IfcMomentOfInertiaMeasure=exports.IfcMolecularWeightMeasure=exports.IfcMoistureDiffusivityMeasure=exports.IfcModulusOfSubgradeReactionMeasure=exports.IfcModulusOfRotationalSubgradeReactionMeasure=exports.IfcModulusOfLinearSubgradeReactionMeasure=exports.IfcModulusOfElasticityMeasure=exports.IfcMirroredProfileDef=exports.IfcMetric=exports.IfcMemberTypeEnum=exports.IfcMemberType=exports.IfcMemberStandardCase=exports.IfcMember=exports.IfcMedicalDeviceTypeEnum=exports.IfcMedicalDeviceType=exports.IfcMedicalDevice=exports.IfcMechanicalFastenerTypeEnum=exports.IfcMechanicalFastenerType=exports.IfcMechanicalFastener=exports.IfcMeasureWithUnit=exports.IfcMaterialUsageDefinition=exports.IfcMaterialRelationship=exports.IfcMaterialProperties=exports.IfcMaterialProfileWithOffsets=exports.IfcMaterialProfileSetUsageTapering=exports.IfcMaterialProfileSetUsage=exports.IfcMaterialProfileSet=exports.IfcMaterialProfile=exports.IfcMaterialList=exports.IfcMaterialLayerWithOffsets=exports.IfcMaterialLayerSetUsage=exports.IfcMaterialLayerSet=exports.IfcMaterialLayer=exports.IfcMaterialDefinitionRepresentation=exports.IfcMaterialDefinition=exports.IfcMaterialConstituentSet=exports.IfcMaterialConstituent=exports.IfcMaterialClassificationRelationship=exports.IfcMaterial=exports.IfcMassPerLengthMeasure=exports.IfcMassMeasure=exports.IfcMassFlowRateMeasure=exports.IfcMassDensityMeasure=exports.IfcMappedItem=exports.IfcMapConversion=exports.IfcManifoldSolidBrep=exports.IfcMagneticFluxMeasure=exports.IfcMagneticFluxDensityMeasure=exports.IfcLuminousIntensityMeasure=exports.IfcLuminousIntensityDistributionMeasure=exports.IfcLuminousFluxMeasure=exports.IfcLoop=exports.IfcLogicalOperatorEnum=exports.IfcLogical=exports.IfcLocalPlacement=exports.IfcLoadGroupTypeEnum=exports.IfcLinearVelocityMeasure=exports.IfcLinearStiffnessMeasure=exports.IfcLinearPositioningElement=exports.IfcLinearPlacement=exports.IfcLinearMomentMeasure=exports.IfcLinearForceMeasure=exports.IfcLineSegment2D=exports.IfcLine=exports.IfcLightSourceSpot=exports.IfcLightSourcePositional=exports.IfcLightSourceGoniometric=exports.IfcLightSourceDirectional=exports.IfcLightSourceAmbient=exports.IfcLightSource=exports.IfcLightIntensityDistribution=exports.IfcLightFixtureTypeEnum=exports.IfcLightFixtureType=exports.IfcLightFixture=exports.IfcLightEmissionSourceEnum=exports.IfcLightDistributionData=exports.IfcLightDistributionCurveEnum=exports.IfcLibraryReference=exports.IfcLibraryInformation=exports.IfcLengthMeasure=exports.IfcLayerSetDirectionEnum=exports.IfcLanguageId=exports.IfcLampTypeEnum=exports.IfcLampType=exports.IfcLamp=exports.IfcLagTime=exports.IfcLaborResourceTypeEnum=exports.IfcLaborResourceType=exports.IfcLaborResource=exports.IfcLabel=exports.IfcLShapeProfileDef=exports.IfcKnotType=exports.IfcKinematicViscosityMeasure=exports.IfcJunctionBoxTypeEnum=exports.IfcJunctionBoxType=exports.IfcJunctionBox=exports.IfcIsothermalMoistureCapacityMeasure=exports.IfcIrregularTimeSeriesValue=exports.IfcIrregularTimeSeries=exports.IfcIonConcentrationMeasure=exports.IfcInventoryTypeEnum=exports.IfcInventory=exports.IfcIntersectionCurve=exports.IfcInternalOrExternalEnum=exports.IfcInterceptorTypeEnum=exports.IfcInterceptorType=exports.IfcInterceptor=exports.IfcIntegerCountRateMeasure=exports.IfcInteger=exports.IfcInductanceMeasure=exports.IfcIndexedTriangleTextureMap=exports.IfcIndexedTextureMap=exports.IfcIndexedPolygonalFaceWithVoids=exports.IfcIndexedPolygonalFace=exports.IfcIndexedPolyCurve=exports.IfcIndexedColourMap=exports.IfcImageTexture=exports.IfcIlluminanceMeasure=exports.IfcIdentifier=exports.IfcIShapeProfileDef=exports.IfcHumidifierTypeEnum=exports.IfcHumidifierType=exports.IfcHumidifier=exports.IfcHeatingValueMeasure=exports.IfcHeatFluxDensityMeasure=exports.IfcHeatExchangerTypeEnum=exports.IfcHeatExchangerType=exports.IfcHeatExchanger=exports.IfcHalfSpaceSolid=exports.IfcGroup=exports.IfcGridTypeEnum=exports.IfcGridPlacement=exports.IfcGridAxis=exports.IfcGrid=exports.IfcGloballyUniqueId=exports.IfcGlobalOrLocalEnum=exports.IfcGeometricSet=exports.IfcGeometricRepresentationSubContext=exports.IfcGeometricRepresentationItem=exports.IfcGeometricRepresentationContext=exports.IfcGeometricProjectionEnum=exports.IfcGeometricCurveSet=exports.IfcGeographicElementTypeEnum=exports.IfcGeographicElementType=exports.IfcGeographicElement=exports.IfcFurnitureTypeEnum=exports.IfcFurnitureType=exports.IfcFurniture=exports.IfcFurnishingElementType=exports.IfcFurnishingElement=exports.IfcFrequencyMeasure=exports.IfcForceMeasure=exports.IfcFootingTypeEnum=exports.IfcFootingType=exports.IfcFooting=exports.IfcFontWeight=exports.IfcFontVariant=exports.IfcFontStyle=exports.IfcFlowTreatmentDeviceType=exports.IfcFlowTreatmentDevice=exports.IfcFlowTerminalType=exports.IfcFlowTerminal=exports.IfcFlowStorageDeviceType=exports.IfcFlowStorageDevice=exports.IfcFlowSegmentType=exports.IfcFlowSegment=exports.IfcFlowMovingDeviceType=exports.IfcFlowMovingDevice=exports.IfcFlowMeterTypeEnum=exports.IfcFlowMeterType=exports.IfcFlowMeter=exports.IfcFlowInstrumentTypeEnum=exports.IfcFlowInstrumentType=exports.IfcFlowInstrument=exports.IfcFlowFittingType=exports.IfcFlowFitting=exports.IfcFlowDirectionEnum=exports.IfcFlowControllerType=exports.IfcFlowController=exports.IfcFixedReferenceSweptAreaSolid=exports.IfcFireSuppressionTerminalTypeEnum=exports.IfcFireSuppressionTerminalType=exports.IfcFireSuppressionTerminal=exports.IfcFilterTypeEnum=exports.IfcFilterType=exports.IfcFilter=exports.IfcFillAreaStyleTiles=exports.IfcFillAreaStyleHatching=exports.IfcFillAreaStyle=exports.IfcFeatureElementSubtraction=exports.IfcFeatureElementAddition=exports.IfcFeatureElement=exports.IfcFastenerTypeEnum=exports.IfcFastenerType=exports.IfcFastener=exports.IfcFanTypeEnum=exports.IfcFanType=exports.IfcFan=exports.IfcFailureConnectionCondition=exports.IfcFacilityPart=exports.IfcFacility=exports.IfcFacetedBrepWithVoids=exports.IfcFacetedBrep=exports.IfcFaceSurface=exports.IfcFaceOuterBound=exports.IfcFaceBound=exports.IfcFaceBasedSurfaceModel=exports.IfcFace=exports.IfcExtrudedAreaSolidTapered=exports.IfcExtrudedAreaSolid=exports.IfcExternallyDefinedTextFont=exports.IfcExternallyDefinedSurfaceStyle=exports.IfcExternallyDefinedHatchStyle=exports.IfcExternalSpatialStructureElement=exports.IfcExternalSpatialElementTypeEnum=exports.IfcExternalSpatialElement=exports.IfcExternalReferenceRelationship=exports.IfcExternalReference=exports.IfcExternalInformation=exports.IfcExtendedProperties=exports.IfcEventTypeEnum=exports.IfcEventType=exports.IfcEventTriggerTypeEnum=exports.IfcEventTime=exports.IfcEvent=exports.IfcEvaporatorTypeEnum=exports.IfcEvaporatorType=exports.IfcEvaporator=exports.IfcEvaporativeCoolerTypeEnum=exports.IfcEvaporativeCoolerType=exports.IfcEvaporativeCooler=exports.IfcEngineTypeEnum=exports.IfcEngineType=exports.IfcEngine=exports.IfcEnergyMeasure=exports.IfcEnergyConversionDeviceType=exports.IfcEnergyConversionDevice=exports.IfcEllipseProfileDef=exports.IfcEllipse=exports.IfcElements=exports.IfcElementarySurface=exports.IfcElementType=exports.IfcElementQuantity=exports.IfcElementCompositionEnum=exports.IfcElementComponentType=exports.IfcElementComponent=exports.IfcElementAssemblyTypeEnum=exports.IfcElementAssemblyType=exports.IfcElementAssembly=exports.IfcElement=exports.IfcElectricVoltageMeasure=exports.IfcElectricTimeControlTypeEnum=exports.IfcElectricTimeControlType=exports.IfcElectricTimeControl=exports.IfcElectricResistanceMeasure=exports.IfcElectricMotorTypeEnum=exports.IfcElectricMotorType=exports.IfcElectricMotor=exports.IfcElectricGeneratorTypeEnum=exports.IfcElectricGeneratorType=exports.IfcElectricGenerator=exports.IfcElectricFlowStorageDeviceTypeEnum=exports.IfcElectricFlowStorageDeviceType=exports.IfcElectricFlowStorageDevice=exports.IfcElectricDistributionBoardTypeEnum=exports.IfcElectricDistributionBoardType=exports.IfcElectricDistributionBoard=exports.IfcElectricCurrentMeasure=exports.IfcElectricConductanceMeasure=exports.IfcElectricChargeMeasure=exports.IfcElectricCapacitanceMeasure=exports.IfcElectricApplianceTypeEnum=exports.IfcElectricApplianceType=exports.IfcElectricAppliance=exports.IfcEdgeLoop=exports.IfcEdgeCurve=exports.IfcEdge=exports.IfcDynamicViscosityMeasure=exports.IfcDuration=exports.IfcDuctSilencerTypeEnum=exports.IfcDuctSilencerType=exports.IfcDuctSilencer=exports.IfcDuctSegmentTypeEnum=exports.IfcDuctSegmentType=exports.IfcDuctSegment=exports.IfcDuctFittingTypeEnum=exports.IfcDuctFittingType=exports.IfcDuctFitting=exports.IfcDraughtingPreDefinedCurveFont=exports.IfcDraughtingPreDefinedColour=exports.IfcDoseEquivalentMeasure=exports.IfcDoorTypeOperationEnum=exports.IfcDoorTypeEnum=exports.IfcDoorType=exports.IfcDoorStyleOperationEnum=exports.IfcDoorStyleConstructionEnum=exports.IfcDoorStyle=exports.IfcDoorStandardCase=exports.IfcDoorPanelProperties=exports.IfcDoorPanelPositionEnum=exports.IfcDoorPanelOperationEnum=exports.IfcDoorLiningProperties=exports.IfcDoor=exports.IfcDocumentStatusEnum=exports.IfcDocumentReference=exports.IfcDocumentInformationRelationship=exports.IfcDocumentInformation=exports.IfcDocumentConfidentialityEnum=exports.IfcDistributionSystemEnum=exports.IfcDistributionSystem=exports.IfcDistributionPortTypeEnum=exports.IfcDistributionPort=exports.IfcDistributionFlowElementType=exports.IfcDistributionFlowElement=exports.IfcDistributionElementType=exports.IfcDistributionElement=exports.IfcDistributionControlElementType=exports.IfcDistributionControlElement=exports.IfcDistributionCircuit=exports.IfcDistributionChamberElementTypeEnum=exports.IfcDistributionChamberElementType=exports.IfcDistributionChamberElement=exports.IfcDistanceExpression=exports.IfcDiscreteAccessoryTypeEnum=exports.IfcDiscreteAccessoryType=exports.IfcDiscreteAccessory=exports.IfcDirectionSenseEnum=exports.IfcDirection=exports.IfcDimensionalExponents=exports.IfcDimensionCount=exports.IfcDescriptiveMeasure=exports.IfcDerivedUnitEnum=exports.IfcDerivedUnitElement=exports.IfcDerivedUnit=exports.IfcDerivedProfileDef=exports.IfcDeepFoundationType=exports.IfcDeepFoundation=exports.IfcDayInWeekNumber=exports.IfcDayInMonthNumber=exports.IfcDateTime=exports.IfcDate=exports.IfcDataOriginEnum=exports.IfcDamperTypeEnum=exports.IfcDamperType=exports.IfcDamper=exports.IfcCylindricalSurface=exports.IfcCurveStyleFontPattern=exports.IfcCurveStyleFontAndScaling=exports.IfcCurveStyleFont=exports.IfcCurveStyle=exports.IfcCurveSegment2D=exports.IfcCurveInterpolationEnum=exports.IfcCurveBoundedSurface=exports.IfcCurveBoundedPlane=exports.IfcCurve=exports.IfcCurvatureMeasure=exports.IfcCurtainWallTypeEnum=exports.IfcCurtainWallType=exports.IfcCurtainWall=exports.IfcCurrencyRelationship=exports.IfcCsgSolid=exports.IfcCsgPrimitive3D=exports.IfcCrewResourceTypeEnum=exports.IfcCrewResourceType=exports.IfcCrewResource=exports.IfcCoveringTypeEnum=exports.IfcCoveringType=exports.IfcCovering=exports.IfcCountMeasure=exports.IfcCostValue=exports.IfcCostScheduleTypeEnum=exports.IfcCostSchedule=exports.IfcCostItemTypeEnum=exports.IfcCostItem=exports.IfcCoordinateReferenceSystem=exports.IfcCoordinateOperation=exports.IfcCoolingTowerTypeEnum=exports.IfcCoolingTowerType=exports.IfcCoolingTower=exports.IfcCooledBeamTypeEnum=exports.IfcCooledBeamType=exports.IfcCooledBeam=exports.IfcConversionBasedUnitWithOffset=exports.IfcConversionBasedUnit=exports.IfcControllerTypeEnum=exports.IfcControllerType=exports.IfcController=exports.IfcControl=exports.IfcContextDependentUnit=exports.IfcContextDependentMeasure=exports.IfcContext=exports.IfcConstructionResourceType=exports.IfcConstructionResource=exports.IfcConstructionProductResourceTypeEnum=exports.IfcConstructionProductResourceType=exports.IfcConstructionProductResource=exports.IfcConstructionMaterialResourceTypeEnum=exports.IfcConstructionMaterialResourceType=exports.IfcConstructionMaterialResource=exports.IfcConstructionEquipmentResourceTypeEnum=exports.IfcConstructionEquipmentResourceType=exports.IfcConstructionEquipmentResource=exports.IfcConstraintEnum=exports.IfcConstraint=exports.IfcConnectionVolumeGeometry=exports.IfcConnectionTypeEnum=exports.IfcConnectionSurfaceGeometry=exports.IfcConnectionPointGeometry=exports.IfcConnectionPointEccentricity=exports.IfcConnectionGeometry=exports.IfcConnectionCurveGeometry=exports.IfcConnectedFaceSet=exports.IfcConic=exports.IfcCondenserTypeEnum=exports.IfcCondenserType=exports.IfcCondenser=exports.IfcCompressorTypeEnum=exports.IfcCompressorType=exports.IfcCompressor=exports.IfcCompositeProfileDef=exports.IfcCompositeCurveSegment=exports.IfcCompositeCurveOnSurface=exports.IfcCompositeCurve=exports.IfcComplexPropertyTemplateTypeEnum=exports.IfcComplexPropertyTemplate=exports.IfcComplexProperty=exports.IfcCommunicationsApplianceTypeEnum=exports.IfcCommunicationsApplianceType=exports.IfcCommunicationsAppliance=exports.IfcColumnTypeEnum=exports.IfcColumnType=exports.IfcColumnStandardCase=exports.IfcColumn=exports.IfcColourSpecification=exports.IfcColourRgbList=exports.IfcColourRgb=exports.IfcCoilTypeEnum=exports.IfcCoilType=exports.IfcCoil=exports.IfcClosedShell=exports.IfcClassificationReference=exports.IfcClassification=exports.IfcCivilElementType=exports.IfcCivilElement=exports.IfcCircularArcSegment2D=exports.IfcCircleProfileDef=exports.IfcCircleHollowProfileDef=exports.IfcCircle=exports.IfcChimneyTypeEnum=exports.IfcChimneyType=exports.IfcChimney=exports.IfcChillerTypeEnum=exports.IfcChillerType=exports.IfcChiller=exports.IfcChangeActionEnum=exports.IfcCenterLineProfileDef=exports.IfcCartesianTransformationOperator3DnonUniform=exports.IfcCartesianTransformationOperator3D=exports.IfcCartesianTransformationOperator2DnonUniform=exports.IfcCartesianTransformationOperator2D=exports.IfcCartesianTransformationOperator=exports.IfcCartesianPointList3D=exports.IfcCartesianPointList2D=exports.IfcCartesianPointList=exports.IfcCartesianPoint=exports.IfcCardinalPointReference=exports.IfcCaissonFoundationTypeEnum=exports.IfcCaissonFoundationType=exports.IfcCaissonFoundation=exports.IfcCableSegmentTypeEnum=exports.IfcCableSegmentType=exports.IfcCableSegment=exports.IfcCableFittingTypeEnum=exports.IfcCableFittingType=exports.IfcCableFitting=exports.IfcCableCarrierSegmentTypeEnum=exports.IfcCableCarrierSegmentType=exports.IfcCableCarrierSegment=exports.IfcCableCarrierFittingTypeEnum=exports.IfcCableCarrierFittingType=exports.IfcCableCarrierFitting=exports.IfcCShapeProfileDef=exports.IfcBurnerTypeEnum=exports.IfcBurnerType=exports.IfcBurner=exports.IfcBuildingSystemTypeEnum=exports.IfcBuildingSystem=exports.IfcBuildingStorey=exports.IfcBuildingElementType=exports.IfcBuildingElementProxyTypeEnum=exports.IfcBuildingElementProxyType=exports.IfcBuildingElementProxy=exports.IfcBuildingElementPartTypeEnum=exports.IfcBuildingElementPartType=exports.IfcBuildingElementPart=exports.IfcBuildingElement=exports.IfcBuilding=exports.IfcBridgeTypeEnum=exports.IfcBridgePartTypeEnum=exports.IfcBridgePart=exports.IfcBridge=exports.IfcBoxedHalfSpace=exports.IfcBoxAlignment=exports.IfcBoundingBox=exports.IfcBoundedSurface=exports.IfcBoundedCurve=exports.IfcBoundaryNodeConditionWarping=exports.IfcBoundaryNodeCondition=exports.IfcBoundaryFaceCondition=exports.IfcBoundaryEdgeCondition=exports.IfcBoundaryCurve=exports.IfcBoundaryCondition=exports.IfcBooleanResult=exports.IfcBooleanOperator=exports.IfcBooleanClippingResult=exports.IfcBoolean=exports.IfcBoilerTypeEnum=exports.IfcBoilerType=exports.IfcBoiler=exports.IfcBlock=exports.IfcBlobTexture=exports.IfcBinary=exports.IfcBenchmarkEnum=exports.IfcBearingTypeEnum=exports.IfcBearingTypeDisplacementEnum=exports.IfcBearingType=exports.IfcBearing=exports.IfcBeamTypeEnum=exports.IfcBeamType=exports.IfcBeamStandardCase=exports.IfcBeam=exports.IfcBSplineSurfaceWithKnots=exports.IfcBSplineSurfaceForm=exports.IfcBSplineSurface=exports.IfcBSplineCurveWithKnots=exports.IfcBSplineCurveForm=exports.IfcBSplineCurve=exports.IfcAxis2Placement3D=exports.IfcAxis2Placement2D=exports.IfcAxis1Placement=exports.IfcAudioVisualApplianceTypeEnum=exports.IfcAudioVisualApplianceType=exports.IfcAudioVisualAppliance=exports.IfcAsymmetricIShapeProfileDef=exports.IfcAsset=exports.IfcAssemblyPlaceEnum=exports.IfcArithmeticOperatorEnum=exports.IfcAreaMeasure=exports.IfcAreaDensityMeasure=exports.IfcArbitraryProfileDefWithVoids=exports.IfcArbitraryOpenProfileDef=exports.IfcArbitraryClosedProfileDef=exports.IfcApprovalRelationship=exports.IfcApproval=exports.IfcAppliedValue=exports.IfcApplication=exports.IfcAnnotationFillArea=exports.IfcAnnotation=exports.IfcAngularVelocityMeasure=exports.IfcAnalysisTheoryTypeEnum=exports.IfcAnalysisModelTypeEnum=exports.IfcAmountOfSubstanceMeasure=exports.IfcAlignmentTypeEnum=exports.IfcAlignmentCurve=exports.IfcAlignment2DVerticalSegment=exports.IfcAlignment2DVertical=exports.IfcAlignment2DVerSegParabolicArc=exports.IfcAlignment2DVerSegLine=exports.IfcAlignment2DVerSegCircularArc=exports.IfcAlignment2DSegment=exports.IfcAlignment2DHorizontalSegment=exports.IfcAlignment2DHorizontal=exports.IfcAlignment=exports.IfcAlarmTypeEnum=exports.IfcAlarmType=exports.IfcAlarm=exports.IfcAirToAirHeatRecoveryTypeEnum=exports.IfcAirToAirHeatRecoveryType=exports.IfcAirToAirHeatRecovery=exports.IfcAirTerminalTypeEnum=exports.IfcAirTerminalType=exports.IfcAirTerminalBoxTypeEnum=exports.IfcAirTerminalBoxType=exports.IfcAirTerminalBox=exports.IfcAirTerminal=exports.IfcAdvancedFace=exports.IfcAdvancedBrepWithVoids=exports.IfcAdvancedBrep=exports.IfcAddressTypeEnum=exports.IfcAddress=exports.IfcActuatorTypeEnum=exports.IfcActuatorType=exports.IfcActuator=exports.IfcActorRole=exports.IfcActor=exports.IfcActionTypeEnum=exports.IfcActionSourceTypeEnum=exports.IfcActionRequestTypeEnum=exports.IfcActionRequest=exports.IfcAccelerationMeasure=exports.IfcAbsorbedDoseMeasure=exports.IfcAPI=exports.IFCZSHAPEPROFILEDEF=exports.IFCZONE=exports.IFCWORKTIME=exports.IFCWORKSCHEDULE=exports.IFCWORKPLAN=exports.IFCWORKCONTROL=exports.IFCWORKCALENDAR=exports.IFCWINDOWTYPE=exports.IFCWINDOWSTYLE=exports.IFCWINDOWSTANDARDCASE=exports.IFCWINDOWPANELPROPERTIES=exports.IFCWINDOWLININGPROPERTIES=exports.IFCWINDOW=exports.IFCWASTETERMINALTYPE=exports.IFCWASTETERMINAL=exports.IFCWALLTYPE=exports.IFCWALLSTANDARDCASE=exports.IFCWALLELEMENTEDCASE=exports.IFCWALL=exports.IFCVOIDINGFEATURE=exports.IFCVIRTUALGRIDINTERSECTION=exports.IFCVIRTUALELEMENT=exports.IFCVIBRATIONISOLATORTYPE=exports.IFCVIBRATIONISOLATOR=exports.IFCVIBRATIONDAMPERTYPE=exports.IFCVIBRATIONDAMPER=exports.IFCVERTEXPOINT=exports.IFCVERTEXLOOP=exports.IFCVERTEX=exports.IFCVECTOR=exports.IFCVALVETYPE=exports.IFCVALVE=exports.IFCUSHAPEPROFILEDEF=exports.IFCUNITASSIGNMENT=exports.IFCUNITARYEQUIPMENTTYPE=exports.IFCUNITARYEQUIPMENT=exports.IFCUNITARYCONTROLELEMENTTYPE=exports.IFCUNITARYCONTROLELEMENT=exports.IFCTYPERESOURCE=exports.IFCTYPEPRODUCT=exports.IFCTYPEPROCESS=exports.IFCTYPEOBJECT=exports.IFCTUBEBUNDLETYPE=exports.IFCTUBEBUNDLE=exports.IFCTSHAPEPROFILEDEF=exports.IFCTRIMMEDCURVE=exports.IFCTRIANGULATEDIRREGULARNETWORK=exports.IFCTRIANGULATEDFACESET=exports.IFCTRAPEZIUMPROFILEDEF=exports.IFCTRANSPORTELEMENTTYPE=exports.IFCTRANSPORTELEMENT=exports.IFCTRANSITIONCURVESEGMENT2D=exports.IFCTRANSFORMERTYPE=exports.IFCTRANSFORMER=exports.IFCTOROIDALSURFACE=exports.IFCTOPOLOGYREPRESENTATION=exports.IFCTOPOLOGICALREPRESENTATIONITEM=exports.IFCTIMESERIESVALUE=exports.IFCTIMESERIES=exports.IFCTIMEPERIOD=exports.IFCTEXTUREVERTEXLIST=exports.IFCTEXTUREVERTEX=exports.IFCTEXTUREMAP=exports.IFCTEXTURECOORDINATEGENERATOR=exports.IFCTEXTURECOORDINATE=exports.IFCTEXTSTYLETEXTMODEL=exports.IFCTEXTSTYLEFORDEFINEDFONT=exports.IFCTEXTSTYLEFONTMODEL=exports.IFCTEXTSTYLE=exports.IFCTEXTLITERALWITHEXTENT=exports.IFCTEXTLITERAL=exports.IFCTESSELLATEDITEM=exports.IFCTESSELLATEDFACESET=exports.IFCTENDONTYPE=exports.IFCTENDONCONDUITTYPE=exports.IFCTENDONCONDUIT=exports.IFCTENDONANCHORTYPE=exports.IFCTENDONANCHOR=exports.IFCTENDON=exports.IFCTELECOMADDRESS=exports.IFCTASKTYPE=exports.IFCTASKTIMERECURRING=exports.IFCTASKTIME=exports.IFCTASK=exports.IFCTANKTYPE=exports.IFCTANK=exports.IFCTABLEROW=exports.IFCTABLECOLUMN=exports.IFCTABLE=exports.IFCSYSTEMFURNITUREELEMENTTYPE=exports.IFCSYSTEMFURNITUREELEMENT=exports.IFCSYSTEM=exports.IFCSWITCHINGDEVICETYPE=exports.IFCSWITCHINGDEVICE=exports.IFCSWEPTSURFACE=exports.IFCSWEPTDISKSOLIDPOLYGONAL=exports.IFCSWEPTDISKSOLID=exports.IFCSWEPTAREASOLID=exports.IFCSURFACETEXTURE=exports.IFCSURFACESTYLEWITHTEXTURES=exports.IFCSURFACESTYLESHADING=exports.IFCSURFACESTYLERENDERING=exports.IFCSURFACESTYLEREFRACTION=exports.IFCSURFACESTYLELIGHTING=exports.IFCSURFACESTYLE=exports.IFCSURFACEREINFORCEMENTAREA=exports.IFCSURFACEOFREVOLUTION=exports.IFCSURFACEOFLINEAREXTRUSION=exports.IFCSURFACEFEATURE=exports.IFCSURFACECURVESWEPTAREASOLID=exports.IFCSURFACECURVE=exports.IFCSURFACE=exports.IFCSUBEDGE=exports.IFCSUBCONTRACTRESOURCETYPE=exports.IFCSUBCONTRACTRESOURCE=exports.IFCSTYLEMODEL=exports.IFCSTYLEDREPRESENTATION=exports.IFCSTYLEDITEM=exports.IFCSTRUCTURALSURFACEREACTION=exports.IFCSTRUCTURALSURFACEMEMBERVARYING=exports.IFCSTRUCTURALSURFACEMEMBER=exports.IFCSTRUCTURALSURFACECONNECTION=exports.IFCSTRUCTURALSURFACEACTION=exports.IFCSTRUCTURALRESULTGROUP=exports.IFCSTRUCTURALREACTION=exports.IFCSTRUCTURALPOINTREACTION=exports.IFCSTRUCTURALPOINTCONNECTION=exports.IFCSTRUCTURALPOINTACTION=exports.IFCSTRUCTURALPLANARACTION=exports.IFCSTRUCTURALMEMBER=exports.IFCSTRUCTURALLOADTEMPERATURE=exports.IFCSTRUCTURALLOADSTATIC=exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=exports.IFCSTRUCTURALLOADSINGLEFORCE=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=exports.IFCSTRUCTURALLOADPLANARFORCE=exports.IFCSTRUCTURALLOADORRESULT=exports.IFCSTRUCTURALLOADLINEARFORCE=exports.IFCSTRUCTURALLOADGROUP=exports.IFCSTRUCTURALLOADCONFIGURATION=exports.IFCSTRUCTURALLOADCASE=exports.IFCSTRUCTURALLOAD=exports.IFCSTRUCTURALLINEARACTION=exports.IFCSTRUCTURALITEM=exports.IFCSTRUCTURALCURVEREACTION=exports.IFCSTRUCTURALCURVEMEMBERVARYING=exports.IFCSTRUCTURALCURVEMEMBER=exports.IFCSTRUCTURALCURVECONNECTION=exports.IFCSTRUCTURALCURVEACTION=exports.IFCSTRUCTURALCONNECTIONCONDITION=exports.IFCSTRUCTURALCONNECTION=exports.IFCSTRUCTURALANALYSISMODEL=exports.IFCSTRUCTURALACTIVITY=exports.IFCSTRUCTURALACTION=exports.IFCSTAIRTYPE=exports.IFCSTAIRFLIGHTTYPE=exports.IFCSTAIRFLIGHT=exports.IFCSTAIR=exports.IFCSTACKTERMINALTYPE=exports.IFCSTACKTERMINAL=exports.IFCSPHERICALSURFACE=exports.IFCSPHERE=exports.IFCSPATIALZONETYPE=exports.IFCSPATIALZONE=exports.IFCSPATIALSTRUCTUREELEMENTTYPE=exports.IFCSPATIALSTRUCTUREELEMENT=exports.IFCSPATIALELEMENTTYPE=exports.IFCSPATIALELEMENT=exports.IFCSPACETYPE=exports.IFCSPACEHEATERTYPE=exports.IFCSPACEHEATER=exports.IFCSPACE=exports.IFCSOLIDMODEL=exports.IFCSOLARDEVICETYPE=exports.IFCSOLARDEVICE=exports.IFCSLIPPAGECONNECTIONCONDITION=exports.IFCSLABTYPE=exports.IFCSLABSTANDARDCASE=exports.IFCSLABELEMENTEDCASE=exports.IFCSLAB=exports.IFCSIUNIT=exports.IFCSITE=exports.IFCSIMPLEPROPERTYTEMPLATE=exports.IFCSIMPLEPROPERTY=exports.IFCSHELLBASEDSURFACEMODEL=exports.IFCSHAPEREPRESENTATION=exports.IFCSHAPEMODEL=exports.IFCSHAPEASPECT=exports.IFCSHADINGDEVICETYPE=exports.IFCSHADINGDEVICE=exports.IFCSENSORTYPE=exports.IFCSENSOR=exports.IFCSECTIONREINFORCEMENTPROPERTIES=exports.IFCSECTIONPROPERTIES=exports.IFCSECTIONEDSPINE=exports.IFCSECTIONEDSOLIDHORIZONTAL=exports.IFCSECTIONEDSOLID=exports.IFCSEAMCURVE=exports.IFCSCHEDULINGTIME=exports.IFCSANITARYTERMINALTYPE=exports.IFCSANITARYTERMINAL=exports.IFCROUNDEDRECTANGLEPROFILEDEF=exports.IFCROOT=exports.IFCROOFTYPE=exports.IFCROOF=exports.IFCRIGHTCIRCULARCYLINDER=exports.IFCRIGHTCIRCULARCONE=exports.IFCREVOLVEDAREASOLIDTAPERED=exports.IFCREVOLVEDAREASOLID=exports.IFCRESOURCETIME=exports.IFCRESOURCELEVELRELATIONSHIP=exports.IFCRESOURCECONSTRAINTRELATIONSHIP=exports.IFCRESOURCEAPPROVALRELATIONSHIP=exports.IFCRESOURCE=exports.IFCREPRESENTATIONMAP=exports.IFCREPRESENTATIONITEM=exports.IFCREPRESENTATIONCONTEXT=exports.IFCREPRESENTATION=exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=exports.IFCRELVOIDSELEMENT=exports.IFCRELSPACEBOUNDARY2NDLEVEL=exports.IFCRELSPACEBOUNDARY1STLEVEL=exports.IFCRELSPACEBOUNDARY=exports.IFCRELSERVICESBUILDINGS=exports.IFCRELSEQUENCE=exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=exports.IFCRELPROJECTSELEMENT=exports.IFCRELPOSITIONS=exports.IFCRELNESTS=exports.IFCRELINTERFERESELEMENTS=exports.IFCRELFLOWCONTROLELEMENTS=exports.IFCRELFILLSELEMENT=exports.IFCRELDEFINESBYTYPE=exports.IFCRELDEFINESBYTEMPLATE=exports.IFCRELDEFINESBYPROPERTIES=exports.IFCRELDEFINESBYOBJECT=exports.IFCRELDEFINES=exports.IFCRELDECOMPOSES=exports.IFCRELDECLARES=exports.IFCRELCOVERSSPACES=exports.IFCRELCOVERSBLDGELEMENTS=exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=exports.IFCRELCONNECTSWITHECCENTRICITY=exports.IFCRELCONNECTSSTRUCTURALMEMBER=exports.IFCRELCONNECTSSTRUCTURALACTIVITY=exports.IFCRELCONNECTSPORTTOELEMENT=exports.IFCRELCONNECTSPORTS=exports.IFCRELCONNECTSPATHELEMENTS=exports.IFCRELCONNECTSELEMENTS=exports.IFCRELCONNECTS=exports.IFCRELATIONSHIP=exports.IFCRELASSOCIATESMATERIAL=exports.IFCRELASSOCIATESLIBRARY=exports.IFCRELASSOCIATESDOCUMENT=exports.IFCRELASSOCIATESCONSTRAINT=exports.IFCRELASSOCIATESCLASSIFICATION=exports.IFCRELASSOCIATESAPPROVAL=exports.IFCRELASSOCIATES=exports.IFCRELASSIGNSTORESOURCE=exports.IFCRELASSIGNSTOPRODUCT=exports.IFCRELASSIGNSTOPROCESS=exports.IFCRELASSIGNSTOGROUPBYFACTOR=exports.IFCRELASSIGNSTOGROUP=exports.IFCRELASSIGNSTOCONTROL=exports.IFCRELASSIGNSTOACTOR=exports.IFCRELASSIGNS=exports.IFCRELAGGREGATES=exports.IFCREINFORCINGMESHTYPE=exports.IFCREINFORCINGMESH=exports.IFCREINFORCINGELEMENTTYPE=exports.IFCREINFORCINGELEMENT=exports.IFCREINFORCINGBARTYPE=exports.IFCREINFORCINGBAR=exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=exports.IFCREINFORCEMENTBARPROPERTIES=exports.IFCREGULARTIMESERIES=exports.IFCREFERENT=exports.IFCREFERENCE=exports.IFCRECURRENCEPATTERN=exports.IFCRECTANGULARTRIMMEDSURFACE=exports.IFCRECTANGULARPYRAMID=exports.IFCRECTANGLEPROFILEDEF=exports.IFCRECTANGLEHOLLOWPROFILEDEF=exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=exports.IFCRATIONALBSPLINECURVEWITHKNOTS=exports.IFCRAMPTYPE=exports.IFCRAMPFLIGHTTYPE=exports.IFCRAMPFLIGHT=exports.IFCRAMP=exports.IFCRAILINGTYPE=exports.IFCRAILING=exports.IFCQUANTITYWEIGHT=exports.IFCQUANTITYVOLUME=exports.IFCQUANTITYTIME=exports.IFCQUANTITYSET=exports.IFCQUANTITYLENGTH=exports.IFCQUANTITYCOUNT=exports.IFCQUANTITYAREA=exports.IFCPUMPTYPE=exports.IFCPUMP=exports.IFCPROXY=exports.IFCPROTECTIVEDEVICETYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=exports.IFCPROTECTIVEDEVICE=exports.IFCPROPERTYTEMPLATEDEFINITION=exports.IFCPROPERTYTEMPLATE=exports.IFCPROPERTYTABLEVALUE=exports.IFCPROPERTYSINGLEVALUE=exports.IFCPROPERTYSETTEMPLATE=exports.IFCPROPERTYSETDEFINITION=exports.IFCPROPERTYSET=exports.IFCPROPERTYREFERENCEVALUE=exports.IFCPROPERTYLISTVALUE=exports.IFCPROPERTYENUMERATION=exports.IFCPROPERTYENUMERATEDVALUE=exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=exports.IFCPROPERTYDEFINITION=exports.IFCPROPERTYBOUNDEDVALUE=exports.IFCPROPERTYABSTRACTION=exports.IFCPROPERTY=exports.IFCPROJECTORDER=exports.IFCPROJECTLIBRARY=exports.IFCPROJECTIONELEMENT=exports.IFCPROJECTEDCRS=exports.IFCPROJECT=exports.IFCPROFILEPROPERTIES=exports.IFCPROFILEDEF=exports.IFCPRODUCTREPRESENTATION=exports.IFCPRODUCTDEFINITIONSHAPE=exports.IFCPRODUCT=exports.IFCPROCESS=exports.IFCPROCEDURETYPE=exports.IFCPROCEDURE=exports.IFCPRESENTATIONSTYLEASSIGNMENT=exports.IFCPRESENTATIONSTYLE=exports.IFCPRESENTATIONLAYERWITHSTYLE=exports.IFCPRESENTATIONLAYERASSIGNMENT=exports.IFCPRESENTATIONITEM=exports.IFCPREDEFINEDTEXTFONT=exports.IFCPREDEFINEDPROPERTYSET=exports.IFCPREDEFINEDPROPERTIES=exports.IFCPREDEFINEDITEM=exports.IFCPREDEFINEDCURVEFONT=exports.IFCPREDEFINEDCOLOUR=exports.IFCPOSTALADDRESS=exports.IFCPOSITIONINGELEMENT=exports.IFCPORT=exports.IFCPOLYLOOP=exports.IFCPOLYLINE=exports.IFCPOLYGONALFACESET=exports.IFCPOLYGONALBOUNDEDHALFSPACE=exports.IFCPOINTONSURFACE=exports.IFCPOINTONCURVE=exports.IFCPOINT=exports.IFCPLATETYPE=exports.IFCPLATESTANDARDCASE=exports.IFCPLATE=exports.IFCPLANE=exports.IFCPLANAREXTENT=exports.IFCPLANARBOX=exports.IFCPLACEMENT=exports.IFCPIXELTEXTURE=exports.IFCPIPESEGMENTTYPE=exports.IFCPIPESEGMENT=exports.IFCPIPEFITTINGTYPE=exports.IFCPIPEFITTING=exports.IFCPILETYPE=exports.IFCPILE=exports.IFCPHYSICALSIMPLEQUANTITY=exports.IFCPHYSICALQUANTITY=exports.IFCPHYSICALCOMPLEXQUANTITY=exports.IFCPERSONANDORGANIZATION=exports.IFCPERSON=exports.IFCPERMIT=exports.IFCPERMEABLECOVERINGPROPERTIES=exports.IFCPERFORMANCEHISTORY=exports.IFCPCURVE=exports.IFCPATH=exports.IFCPARAMETERIZEDPROFILEDEF=exports.IFCOWNERHISTORY=exports.IFCOUTLETTYPE=exports.IFCOUTLET=exports.IFCOUTERBOUNDARYCURVE=exports.IFCORIENTEDEDGE=exports.IFCORIENTATIONEXPRESSION=exports.IFCORGANIZATIONRELATIONSHIP=exports.IFCORGANIZATION=exports.IFCOPENSHELL=exports.IFCOPENINGSTANDARDCASE=exports.IFCOPENINGELEMENT=exports.IFCOFFSETCURVEBYDISTANCES=exports.IFCOFFSETCURVE3D=exports.IFCOFFSETCURVE2D=exports.IFCOFFSETCURVE=exports.IFCOCCUPANT=exports.IFCOBJECTPLACEMENT=exports.IFCOBJECTIVE=exports.IFCOBJECTDEFINITION=exports.IFCOBJECT=exports.IFCNAMEDUNIT=exports.IFCMOTORCONNECTIONTYPE=exports.IFCMOTORCONNECTION=exports.IFCMONETARYUNIT=exports.IFCMIRROREDPROFILEDEF=exports.IFCMETRIC=exports.IFCMEMBERTYPE=exports.IFCMEMBERSTANDARDCASE=exports.IFCMEMBER=exports.IFCMEDICALDEVICETYPE=exports.IFCMEDICALDEVICE=exports.IFCMECHANICALFASTENERTYPE=exports.IFCMECHANICALFASTENER=exports.IFCMEASUREWITHUNIT=exports.IFCMATERIALUSAGEDEFINITION=exports.IFCMATERIALRELATIONSHIP=exports.IFCMATERIALPROPERTIES=exports.IFCMATERIALPROFILEWITHOFFSETS=exports.IFCMATERIALPROFILESETUSAGETAPERING=exports.IFCMATERIALPROFILESETUSAGE=exports.IFCMATERIALPROFILESET=exports.IFCMATERIALPROFILE=exports.IFCMATERIALLIST=exports.IFCMATERIALLAYERWITHOFFSETS=exports.IFCMATERIALLAYERSETUSAGE=exports.IFCMATERIALLAYERSET=exports.IFCMATERIALLAYER=exports.IFCMATERIALDEFINITIONREPRESENTATION=exports.IFCMATERIALDEFINITION=exports.IFCMATERIALCONSTITUENTSET=exports.IFCMATERIALCONSTITUENT=exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=exports.IFCMATERIAL=exports.IFCMAPPEDITEM=exports.IFCMAPCONVERSION=exports.IFCMANIFOLDSOLIDBREP=exports.IFCLSHAPEPROFILEDEF=exports.IFCLOOP=exports.IFCLOCALPLACEMENT=exports.IFCLINESEGMENT2D=exports.IFCLINEARPOSITIONINGELEMENT=exports.IFCLINEARPLACEMENT=exports.IFCLINE=exports.IFCLIGHTSOURCESPOT=exports.IFCLIGHTSOURCEPOSITIONAL=exports.IFCLIGHTSOURCEGONIOMETRIC=exports.IFCLIGHTSOURCEDIRECTIONAL=exports.IFCLIGHTSOURCEAMBIENT=exports.IFCLIGHTSOURCE=exports.IFCLIGHTINTENSITYDISTRIBUTION=exports.IFCLIGHTFIXTURETYPE=exports.IFCLIGHTFIXTURE=exports.IFCLIGHTDISTRIBUTIONDATA=exports.IFCLIBRARYREFERENCE=exports.IFCLIBRARYINFORMATION=exports.IFCLAMPTYPE=exports.IFCLAMP=exports.IFCLAGTIME=exports.IFCLABORRESOURCETYPE=exports.IFCLABORRESOURCE=exports.IFCJUNCTIONBOXTYPE=exports.IFCJUNCTIONBOX=exports.IFCISHAPEPROFILEDEF=exports.IFCIRREGULARTIMESERIESVALUE=exports.IFCIRREGULARTIMESERIES=exports.IFCINVENTORY=exports.IFCINTERSECTIONCURVE=exports.IFCINTERCEPTORTYPE=exports.IFCINTERCEPTOR=exports.IFCINDEXEDTRIANGLETEXTUREMAP=exports.IFCINDEXEDTEXTUREMAP=exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=exports.IFCINDEXEDPOLYGONALFACE=exports.IFCINDEXEDPOLYCURVE=exports.IFCINDEXEDCOLOURMAP=exports.IFCIMAGETEXTURE=exports.IFCHUMIDIFIERTYPE=exports.IFCHUMIDIFIER=exports.IFCHEATEXCHANGERTYPE=exports.IFCHEATEXCHANGER=exports.IFCHALFSPACESOLID=exports.IFCGROUP=exports.IFCGRIDPLACEMENT=exports.IFCGRIDAXIS=exports.IFCGRID=exports.IFCGEOMETRICSET=exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=exports.IFCGEOMETRICREPRESENTATIONITEM=exports.IFCGEOMETRICREPRESENTATIONCONTEXT=exports.IFCGEOMETRICCURVESET=exports.IFCGEOGRAPHICELEMENTTYPE=exports.IFCGEOGRAPHICELEMENT=exports.IFCFURNITURETYPE=exports.IFCFURNITURE=exports.IFCFURNISHINGELEMENTTYPE=exports.IFCFURNISHINGELEMENT=exports.IFCFOOTINGTYPE=exports.IFCFOOTING=exports.IFCFLOWTREATMENTDEVICETYPE=exports.IFCFLOWTREATMENTDEVICE=exports.IFCFLOWTERMINALTYPE=exports.IFCFLOWTERMINAL=exports.IFCFLOWSTORAGEDEVICETYPE=exports.IFCFLOWSTORAGEDEVICE=exports.IFCFLOWSEGMENTTYPE=exports.IFCFLOWSEGMENT=exports.IFCFLOWMOVINGDEVICETYPE=exports.IFCFLOWMOVINGDEVICE=exports.IFCFLOWMETERTYPE=exports.IFCFLOWMETER=exports.IFCFLOWINSTRUMENTTYPE=exports.IFCFLOWINSTRUMENT=exports.IFCFLOWFITTINGTYPE=exports.IFCFLOWFITTING=exports.IFCFLOWCONTROLLERTYPE=exports.IFCFLOWCONTROLLER=exports.IFCFIXEDREFERENCESWEPTAREASOLID=exports.IFCFIRESUPPRESSIONTERMINALTYPE=exports.IFCFIRESUPPRESSIONTERMINAL=exports.IFCFILTERTYPE=exports.IFCFILTER=exports.IFCFILLAREASTYLETILES=exports.IFCFILLAREASTYLEHATCHING=exports.IFCFILLAREASTYLE=exports.IFCFEATUREELEMENTSUBTRACTION=exports.IFCFEATUREELEMENTADDITION=exports.IFCFEATUREELEMENT=exports.IFCFASTENERTYPE=exports.IFCFASTENER=exports.IFCFANTYPE=exports.IFCFAN=exports.IFCFAILURECONNECTIONCONDITION=exports.IFCFACILITYPART=exports.IFCFACILITY=exports.IFCFACETEDBREPWITHVOIDS=exports.IFCFACETEDBREP=exports.IFCFACESURFACE=exports.IFCFACEOUTERBOUND=exports.IFCFACEBOUND=exports.IFCFACEBASEDSURFACEMODEL=exports.IFCFACE=exports.IFCEXTRUDEDAREASOLIDTAPERED=exports.IFCEXTRUDEDAREASOLID=exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=exports.IFCEXTERNALSPATIALELEMENT=exports.IFCEXTERNALREFERENCERELATIONSHIP=exports.IFCEXTERNALREFERENCE=exports.IFCEXTERNALLYDEFINEDTEXTFONT=exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=exports.IFCEXTERNALINFORMATION=exports.IFCEXTENDEDPROPERTIES=exports.IFCEVENTTYPE=exports.IFCEVENTTIME=exports.IFCEVENT=exports.IFCEVAPORATORTYPE=exports.IFCEVAPORATOR=exports.IFCEVAPORATIVECOOLERTYPE=exports.IFCEVAPORATIVECOOLER=exports.IFCENGINETYPE=exports.IFCENGINE=exports.IFCENERGYCONVERSIONDEVICETYPE=exports.IFCENERGYCONVERSIONDEVICE=exports.IFCELLIPSEPROFILEDEF=exports.IFCELLIPSE=exports.IFCELEMENTTYPE=exports.IFCELEMENTQUANTITY=exports.IFCELEMENTCOMPONENTTYPE=exports.IFCELEMENTCOMPONENT=exports.IFCELEMENTASSEMBLYTYPE=exports.IFCELEMENTASSEMBLY=exports.IFCELEMENTARYSURFACE=exports.IFCELEMENT=exports.IFCELECTRICTIMECONTROLTYPE=exports.IFCELECTRICTIMECONTROL=exports.IFCELECTRICMOTORTYPE=exports.IFCELECTRICMOTOR=exports.IFCELECTRICGENERATORTYPE=exports.IFCELECTRICGENERATOR=exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=exports.IFCELECTRICFLOWSTORAGEDEVICE=exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=exports.IFCELECTRICDISTRIBUTIONBOARD=exports.IFCELECTRICAPPLIANCETYPE=exports.IFCELECTRICAPPLIANCE=exports.IFCEDGELOOP=exports.IFCEDGECURVE=exports.IFCEDGE=exports.IFCDUCTSILENCERTYPE=exports.IFCDUCTSILENCER=exports.IFCDUCTSEGMENTTYPE=exports.IFCDUCTSEGMENT=exports.IFCDUCTFITTINGTYPE=exports.IFCDUCTFITTING=exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=exports.IFCDOORTYPE=exports.IFCDOORSTYLE=exports.IFCDOORSTANDARDCASE=exports.IFCDOORPANELPROPERTIES=exports.IFCDOORLININGPROPERTIES=exports.IFCDOOR=exports.IFCDOCUMENTREFERENCE=exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=exports.IFCDOCUMENTINFORMATION=exports.IFCDISTRIBUTIONSYSTEM=exports.IFCDISTRIBUTIONPORT=exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=exports.IFCDISTRIBUTIONFLOWELEMENT=exports.IFCDISTRIBUTIONELEMENTTYPE=exports.IFCDISTRIBUTIONELEMENT=exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=exports.IFCDISTRIBUTIONCONTROLELEMENT=exports.IFCDISTRIBUTIONCIRCUIT=exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=exports.IFCDISTRIBUTIONCHAMBERELEMENT=exports.IFCDISTANCEEXPRESSION=exports.IFCDISCRETEACCESSORYTYPE=exports.IFCDISCRETEACCESSORY=exports.IFCDIRECTION=exports.IFCDIMENSIONALEXPONENTS=exports.IFCDERIVEDUNITELEMENT=exports.IFCDERIVEDUNIT=exports.IFCDERIVEDPROFILEDEF=exports.IFCDEEPFOUNDATIONTYPE=exports.IFCDEEPFOUNDATION=exports.IFCDAMPERTYPE=exports.IFCDAMPER=exports.IFCCYLINDRICALSURFACE=exports.IFCCURVESTYLEFONTPATTERN=exports.IFCCURVESTYLEFONTANDSCALING=exports.IFCCURVESTYLEFONT=exports.IFCCURVESTYLE=exports.IFCCURVESEGMENT2D=exports.IFCCURVEBOUNDEDSURFACE=exports.IFCCURVEBOUNDEDPLANE=exports.IFCCURVE=exports.IFCCURTAINWALLTYPE=exports.IFCCURTAINWALL=exports.IFCCURRENCYRELATIONSHIP=exports.IFCCSHAPEPROFILEDEF=exports.IFCCSGSOLID=exports.IFCCSGPRIMITIVE3D=exports.IFCCREWRESOURCETYPE=exports.IFCCREWRESOURCE=exports.IFCCOVERINGTYPE=exports.IFCCOVERING=exports.IFCCOSTVALUE=exports.IFCCOSTSCHEDULE=exports.IFCCOSTITEM=exports.IFCCOORDINATEREFERENCESYSTEM=exports.IFCCOORDINATEOPERATION=exports.IFCCOOLINGTOWERTYPE=exports.IFCCOOLINGTOWER=exports.IFCCOOLEDBEAMTYPE=exports.IFCCOOLEDBEAM=exports.IFCCONVERSIONBASEDUNITWITHOFFSET=exports.IFCCONVERSIONBASEDUNIT=exports.IFCCONTROLLERTYPE=exports.IFCCONTROLLER=exports.IFCCONTROL=exports.IFCCONTEXTDEPENDENTUNIT=exports.IFCCONTEXT=exports.IFCCONSTRUCTIONRESOURCETYPE=exports.IFCCONSTRUCTIONRESOURCE=exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=exports.IFCCONSTRUCTIONPRODUCTRESOURCE=exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=exports.IFCCONSTRUCTIONMATERIALRESOURCE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=exports.IFCCONSTRAINT=exports.IFCCONNECTIONVOLUMEGEOMETRY=exports.IFCCONNECTIONSURFACEGEOMETRY=exports.IFCCONNECTIONPOINTGEOMETRY=exports.IFCCONNECTIONPOINTECCENTRICITY=exports.IFCCONNECTIONGEOMETRY=exports.IFCCONNECTIONCURVEGEOMETRY=exports.IFCCONNECTEDFACESET=exports.IFCCONIC=exports.IFCCONDENSERTYPE=exports.IFCCONDENSER=exports.IFCCOMPRESSORTYPE=exports.IFCCOMPRESSOR=exports.IFCCOMPOSITEPROFILEDEF=exports.IFCCOMPOSITECURVESEGMENT=exports.IFCCOMPOSITECURVEONSURFACE=exports.IFCCOMPOSITECURVE=exports.IFCCOMPLEXPROPERTYTEMPLATE=exports.IFCCOMPLEXPROPERTY=exports.IFCCOMMUNICATIONSAPPLIANCETYPE=exports.IFCCOMMUNICATIONSAPPLIANCE=exports.IFCCOLUMNTYPE=exports.IFCCOLUMNSTANDARDCASE=exports.IFCCOLUMN=exports.IFCCOLOURSPECIFICATION=exports.IFCCOLOURRGBLIST=exports.IFCCOLOURRGB=exports.IFCCOILTYPE=exports.IFCCOIL=exports.IFCCLOSEDSHELL=exports.IFCCLASSIFICATIONREFERENCE=exports.IFCCLASSIFICATION=exports.IFCCIVILELEMENTTYPE=exports.IFCCIVILELEMENT=exports.IFCCIRCULARARCSEGMENT2D=exports.IFCCIRCLEPROFILEDEF=exports.IFCCIRCLEHOLLOWPROFILEDEF=exports.IFCCIRCLE=exports.IFCCHIMNEYTYPE=exports.IFCCHIMNEY=exports.IFCCHILLERTYPE=exports.IFCCHILLER=exports.IFCCENTERLINEPROFILEDEF=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=exports.IFCCARTESIANTRANSFORMATIONOPERATOR=exports.IFCCARTESIANPOINTLIST3D=exports.IFCCARTESIANPOINTLIST2D=exports.IFCCARTESIANPOINTLIST=exports.IFCCARTESIANPOINT=exports.IFCCAISSONFOUNDATIONTYPE=exports.IFCCAISSONFOUNDATION=exports.IFCCABLESEGMENTTYPE=exports.IFCCABLESEGMENT=exports.IFCCABLEFITTINGTYPE=exports.IFCCABLEFITTING=exports.IFCCABLECARRIERSEGMENTTYPE=exports.IFCCABLECARRIERSEGMENT=exports.IFCCABLECARRIERFITTINGTYPE=exports.IFCCABLECARRIERFITTING=exports.IFCBURNERTYPE=exports.IFCBURNER=exports.IFCBUILDINGSYSTEM=exports.IFCBUILDINGSTOREY=exports.IFCBUILDINGELEMENTTYPE=exports.IFCBUILDINGELEMENTPROXYTYPE=exports.IFCBUILDINGELEMENTPROXY=exports.IFCBUILDINGELEMENTPARTTYPE=exports.IFCBUILDINGELEMENTPART=exports.IFCBUILDINGELEMENT=exports.IFCBUILDING=exports.IFCBSPLINESURFACEWITHKNOTS=exports.IFCBSPLINESURFACE=exports.IFCBSPLINECURVEWITHKNOTS=exports.IFCBSPLINECURVE=exports.IFCBRIDGEPART=exports.IFCBRIDGE=exports.IFCBOXEDHALFSPACE=exports.IFCBOUNDINGBOX=exports.IFCBOUNDEDSURFACE=exports.IFCBOUNDEDCURVE=exports.IFCBOUNDARYNODECONDITIONWARPING=exports.IFCBOUNDARYNODECONDITION=exports.IFCBOUNDARYFACECONDITION=exports.IFCBOUNDARYEDGECONDITION=exports.IFCBOUNDARYCURVE=exports.IFCBOUNDARYCONDITION=exports.IFCBOOLEANRESULT=exports.IFCBOOLEANCLIPPINGRESULT=exports.IFCBOILERTYPE=exports.IFCBOILER=exports.IFCBLOCK=exports.IFCBLOBTEXTURE=exports.IFCBEARINGTYPE=exports.IFCBEARING=exports.IFCBEAMTYPE=exports.IFCBEAMSTANDARDCASE=exports.IFCBEAM=exports.IFCAXIS2PLACEMENT3D=exports.IFCAXIS2PLACEMENT2D=exports.IFCAXIS1PLACEMENT=exports.IFCAUDIOVISUALAPPLIANCETYPE=exports.IFCAUDIOVISUALAPPLIANCE=exports.IFCASYMMETRICISHAPEPROFILEDEF=exports.IFCASSET=exports.IFCARBITRARYPROFILEDEFWITHVOIDS=exports.IFCARBITRARYOPENPROFILEDEF=exports.IFCARBITRARYCLOSEDPROFILEDEF=exports.IFCAPPROVALRELATIONSHIP=exports.IFCAPPROVAL=exports.IFCAPPLIEDVALUE=exports.IFCAPPLICATION=exports.IFCANNOTATIONFILLAREA=exports.IFCANNOTATION=exports.IFCALIGNMENTCURVE=exports.IFCALIGNMENT2DVERTICALSEGMENT=exports.IFCALIGNMENT2DVERTICAL=exports.IFCALIGNMENT2DVERSEGPARABOLICARC=exports.IFCALIGNMENT2DVERSEGLINE=exports.IFCALIGNMENT2DVERSEGCIRCULARARC=exports.IFCALIGNMENT2DSEGMENT=exports.IFCALIGNMENT2DHORIZONTALSEGMENT=exports.IFCALIGNMENT2DHORIZONTAL=exports.IFCALIGNMENT=exports.IFCALARMTYPE=exports.IFCALARM=exports.IFCAIRTOAIRHEATRECOVERYTYPE=exports.IFCAIRTOAIRHEATRECOVERY=exports.IFCAIRTERMINALTYPE=exports.IFCAIRTERMINALBOXTYPE=exports.IFCAIRTERMINALBOX=exports.IFCAIRTERMINAL=exports.IFCADVANCEDFACE=exports.IFCADVANCEDBREPWITHVOIDS=exports.IFCADVANCEDBREP=exports.IFCADDRESS=exports.IFCACTUATORTYPE=exports.IFCACTUATOR=exports.IFCACTORROLE=exports.IFCACTOR=exports.IFCACTIONREQUEST=exports.Handle=exports.FromRawLineData=exports.ENUM=exports.EMPTY=void 0;exports.Value=Value;exports.ms=ms;var __defProp=Object.defineProperty;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __spreadValues=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop]);}return a;};var __require=x=>{if(typeof require!=="undefined")return require(x);throw new Error('Dynamic require of "'+x+'" is not supported');};var __commonJS=(cb,mod)=>function __require2(){return mod||(0,cb[Object.keys(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports;};var __async=(__this,__arguments,generator)=>{return new Promise((resolve,reject)=>{var fulfilled=value=>{try{step(generator.next(value));}catch(e){reject(e);}};var rejected=value=>{try{step(generator.throw(value));}catch(e){reject(e);}};var step=x=>x.done?resolve(x.value):Promise.resolve(x.value).then(fulfilled,rejected);step((generator=generator.apply(__this,__arguments)).next());});};// (disabled):crypto
var require_crypto=__commonJS({"(disabled):crypto"(){}});// dist/web-ifc.js
var require_web_ifc=__commonJS({"dist/web-ifc.js"(exports,module){var WebIFCWasm2=function(){var _scriptDir=typeof document!=="undefined"&&document.currentScript?document.currentScript.src:void 0;if(typeof __filename!=="undefined")_scriptDir=_scriptDir||__filename;return function(WebIFCWasm3){WebIFCWasm3=WebIFCWasm3||{};var Module=typeof WebIFCWasm3!=="undefined"?WebIFCWasm3:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject;});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key];}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow;};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory);}return scriptDirectory+path;}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=__require("path").dirname(scriptDirectory)+"/";}else{scriptDirectory=__dirname+"/";}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=__require("fs");if(!nodePath)nodePath=__require("path");filename=nodePath["normalize"](filename);return nodeFS["readFileSync"](filename,binary?null:"utf8");};readBinary=function readBinary2(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret);}assert(ret.buffer);return ret;};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/");}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex;}});process["on"]("unhandledRejection",abort);quit_=function(status){process["exit"](status);};Module["inspect"]=function(){return"[Emscripten Module object]";};}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){read_=function shell_read(f){return read(f);};}readBinary=function readBinary2(f){var data;if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f));}data=read(f,"binary");assert(typeof data==="object");return data;};if(typeof scriptArgs!="undefined"){arguments_=scriptArgs;}else if(typeof arguments!="undefined"){arguments_=arguments;}if(typeof quit==="function"){quit_=function(status){quit(status);};}if(typeof print!=="undefined"){if(typeof console==="undefined")console={};console.log=print;console.warn=console.error=typeof printErr!=="undefined"?printErr:print;}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href;}else if(typeof document!=="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src;}if(_scriptDir){scriptDirectory=_scriptDir;}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.slice(0,scriptDirectory.lastIndexOf("/")+1);}else{scriptDirectory="";}{read_=function shell_read(url){var xhr=new XMLHttpRequest();xhr.open("GET",url,false);xhr.send(null);return xhr.responseText;};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary2(url){var xhr=new XMLHttpRequest();xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response);};}readAsync=function readAsync2(url,onload,onerror){var xhr=new XMLHttpRequest();xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return;}onerror();};xhr.onerror=onerror;xhr.send(null);};}setWindowTitle=function(title){document.title=title;};}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key];}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var STACK_ALIGN=16;function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;return Math.ceil(size/factor)*factor;}var tempRet0=0;var setTempRet0=function(value){tempRet0=value;};var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(typeof WebAssembly!=="object"){abort("no native wasm support detected");}var wasmMemory;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text);}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):void 0;function UTF8ArrayToString(heap,idx,maxBytesToRead){idx>>>=0;var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr>>>0]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx>>>0,endPtr>>>0));}else{var str="";while(idx<endPtr){var u0=heap[idx++>>>0];if(!(u0&128)){str+=String.fromCharCode(u0);continue;}var u1=heap[idx++>>>0]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue;}var u2=heap[idx++>>>0]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2;}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++>>>0]&63;}if(u0<65536){str+=String.fromCharCode(u0);}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}}}return str;}function UTF8ToString(ptr,maxBytesToRead){ptr>>>=0;return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):"";}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){outIdx>>>=0;if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023;}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++>>>0]=u;}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++>>>0]=192|u>>6;heap[outIdx++>>>0]=128|u&63;}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++>>>0]=224|u>>12;heap[outIdx++>>>0]=128|u>>6&63;heap[outIdx++>>>0]=128|u&63;}else{if(outIdx+3>=endIdx)break;heap[outIdx++>>>0]=240|u>>18;heap[outIdx++>>>0]=128|u>>12&63;heap[outIdx++>>>0]=128|u>>6&63;heap[outIdx++>>>0]=128|u&63;}}heap[outIdx>>>0]=0;return outIdx-startIdx;}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite);}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4;}return len;}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):void 0;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx>>>0])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr>>>0,endPtr>>>0));}else{var str="";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit);}return str;}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===void 0){maxBytesToWrite=2147483647;}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>>1]=codeUnit;outPtr+=2;}HEAP16[outPtr>>>1]=0;return outPtr-startPtr;}function lengthBytesUTF16(str){return str.length*2;}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}else{str+=String.fromCharCode(utf32);}}return str;}function stringToUTF32(str,outPtr,maxBytesToWrite){outPtr>>>=0;if(maxBytesToWrite===void 0){maxBytesToWrite=2147483647;}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023;}HEAP32[outPtr>>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break;}HEAP32[outPtr>>>2]=0;return outPtr-startPtr;}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4;}return len;}function writeArrayToMemory(array,buffer2){HEAP8.set(array,buffer2>>>0);}function writeAsciiToMemory(str,buffer2,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer2++>>>0]=str.charCodeAt(i);}if(!dontAddNull)HEAP8[buffer2>>>0]=0;}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple;}return x;}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf);}var INITIAL_MEMORY=Module["INITIAL_MEMORY"]||16777216;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"];}else{wasmMemory=new WebAssembly.Memory({"initial":INITIAL_MEMORY/65536,"maximum":4294967296/65536});}if(wasmMemory){buffer=wasmMemory.buffer;}INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift());}}callRuntimeCallbacks(__ATPRERUN__);}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__);}function preMain(){FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__);}function exitRuntime(){runtimeExited=true;}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift());}}callRuntimeCallbacks(__ATPOSTRUN__);}function addOnPreRun(cb){__ATPRERUN__.unshift(cb);}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb);}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id;}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null;}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback();}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what);}what+="";err(what);ABORT=true;EXITSTATUS=1;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e;}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0;}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix);}var fileURIPrefix="file://";function isFileURI(filename){return hasPrefix(filename,fileURIPrefix);}var wasmBinaryFile=WasmPath+"web-ifc.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile);}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary);}if(readBinary){return readBinary(wasmBinaryFile);}else{throw"both async and sync fetching of the wasm failed";}}catch(err2){abort(err2);}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'";}return response["arrayBuffer"]();}).catch(function(){return getBinary();});}return Promise.resolve().then(getBinary);}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module2){var exports3=instance.exports;Module["asm"]=exports3;wasmTable=Module["asm"]["X"];removeRunDependency("wasm-instantiate");}addRunDependency("wasm-instantiate");function receiveInstantiatedSource(output){receiveInstance(output["instance"]);}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info);}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason);});}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiatedSource);});});}else{return instantiateArrayBuffer(receiveInstantiatedSource);}}if(Module["instantiateWasm"]){try{var exports2=Module["instantiateWasm"](info,receiveInstance);return exports2;}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false;}}instantiateAsync().catch(readyPromiseReject);return{};}var tempDouble;var tempI64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue;}var func=callback.func;if(typeof func==="number"){if(callback.arg===void 0){wasmTable.get(func)();}else{wasmTable.get(func)(callback.arg);}}else{func(callback.arg===void 0?null:callback.arg);}}}function dynCallLegacy(sig,ptr,args){if(args&&args.length){return Module["dynCall_"+sig].apply(null,[ptr].concat(args));}return Module["dynCall_"+sig].call(null,ptr);}function dynCall(sig,ptr,args){if(sig.indexOf("j")!=-1){return dynCallLegacy(sig,ptr,args);}return wasmTable.get(ptr).apply(null,args);}function ___assert_fail(condition,filename,line,func){abort("Assertion failed: "+UTF8ToString(condition)+", at: "+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"]);}function setErrNo(value){HEAP32[___errno_location()>>>2]=value;return value;}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1);},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1);}else if(last===".."){parts.splice(i,1);up++;}else if(up){parts.splice(i,1);up--;}}if(allowAboveRoot){for(;up;up--){parts.unshift("..");}}return parts;},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.slice(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p;}),!isAbsolute).join("/");if(!path&&!isAbsolute){path=".";}if(path&&trailingSlash){path+="/";}return(isAbsolute?"/":"")+path;},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return".";}if(dir){dir=dir.slice(0,dir.length-1);}return root+dir;},basename:function(path){if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.slice(lastSlash+1);},extname:function(path){return PATH.splitPath(path)[3];},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"));},join2:function(l,r){return PATH.normalize(l+"/"+r);}};function getRandomDevice(){if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0];};}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=require_crypto();return function(){return crypto_module["randomBytes"](1)[0];};}catch(e){}}return function(){abort("randomDevice");};}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings");}else if(!path){return"";}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/";}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p;}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||".";},relative:function(from,to){from=PATH_FS.resolve(from).slice(1);to=PATH_FS.resolve(to).slice(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break;}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break;}if(start>end)return[];return arr.slice(start,end-start+1);}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break;}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..");}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/");}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops};FS.registerDevice(dev,TTY.stream_ops);},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43);}stream.tty=tty;stream.seekable=false;},close:function(stream){stream.tty.ops.flush(stream.tty);},flush:function(stream){stream.tty.ops.flush(stream.tty);},read:function(stream,buffer2,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60);}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty);}catch(e){throw new FS.ErrnoError(29);}if(result===void 0&&bytesRead===0){throw new FS.ErrnoError(6);}if(result===null||result===void 0)break;bytesRead++;buffer2[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead;},write:function(stream,buffer2,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60);}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer2[offset+i]);}}catch(e){throw new FS.ErrnoError(29);}if(length){stream.node.timestamp=Date.now();}return i;}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc?Buffer.alloc(BUFSIZE):new Buffer(BUFSIZE);var bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,BUFSIZE,null);}catch(e){if(e.toString().indexOf("EOF")!=-1)bytesRead=0;else throw e;}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8");}else{result=null;}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n";}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n";}}if(!result){return null;}tty.input=intArrayFromString(result,true);}return tty.input.shift();},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[];}else{if(val!=0)tty.output.push(val);}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[];}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[];}else{if(val!=0)tty.output.push(val);}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[];}}}};function mmapAlloc(size){var alignedSize=alignMemory(size,16384);var ptr=_malloc(alignedSize);while(size<alignedSize)HEAP8[ptr+size++>>>0]=0;return ptr;}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0);},createNode:function(parent,name2,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63);}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};}var node=FS.createNode(parent,name2,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={};}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null;}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream;}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream;}node.timestamp=Date.now();if(parent){parent.contents[name2]=node;}return node;},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr;}return node.contents;},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents);},expandFileStorage:function(node,newCapacity){newCapacity>>>=0;var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return;},resizeFileStorage:function(node,newSize){newSize>>>=0;if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return;}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)));}node.usedBytes=newSize;return;}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize;},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096;}else if(FS.isFile(node.mode)){attr.size=node.usedBytes;}else if(FS.isLink(node.mode)){attr.size=node.link.length;}else{attr.size=0;}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr;},setattr:function(node,attr){if(attr.mode!==void 0){node.mode=attr.mode;}if(attr.timestamp!==void 0){node.timestamp=attr.timestamp;}if(attr.size!==void 0){MEMFS.resizeFileStorage(node,attr.size);}},lookup:function(parent,name2){throw FS.genericErrors[44];},mknod:function(parent,name2,mode,dev){return MEMFS.createNode(parent,name2,mode,dev);},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55);}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir;},unlink:function(parent,name2){delete parent.contents[name2];},rmdir:function(parent,name2){var node=FS.lookupNode(parent,name2);for(var i in node.contents){throw new FS.ErrnoError(55);}delete parent.contents[name2];},readdir:function(node){var entries=[".",".."];for(var key2 in node.contents){if(!node.contents.hasOwnProperty(key2)){continue;}entries.push(key2);}return entries;},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node;},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28);}return node.link;}},stream_ops:{read:function(stream,buffer2,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer2.set(contents.subarray(position,position+size),offset);}else{for(var i=0;i<size;i++)buffer2[offset+i]=contents[position+i];}return size;},write:function(stream,buffer2,offset,length,position,canOwn){if(buffer2.buffer===HEAP8.buffer){canOwn=false;}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer2.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer2.subarray(offset,offset+length);node.usedBytes=length;return length;}else if(node.usedBytes===0&&position===0){node.contents=buffer2.slice(offset,offset+length);node.usedBytes=length;return length;}else if(position+length<=node.usedBytes){node.contents.set(buffer2.subarray(offset,offset+length),position);return length;}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer2.subarray){node.contents.set(buffer2.subarray(offset,offset+length),position);}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer2[offset+i];}}node.usedBytes=Math.max(node.usedBytes,position+length);return length;},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position;}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes;}}if(position<0){throw new FS.ErrnoError(28);}return position;},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length);},mmap:function(stream,address,length,position,prot,flags){assert(address===0);if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43);}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset;}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length);}else{contents=Array.prototype.slice.call(contents,position,position+length);}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48);}ptr>>>=0;HEAP8.set(contents,ptr>>>0);}return{ptr,allocated};},msync:function(stream,buffer2,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43);}if(mmapFlags&2){return 0;}var bytesWritten=MEMFS.stream_ops.write(stream,buffer2,0,length,offset,false);return 0;}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key2 in defaults){if(opts[key2]===void 0){opts[key2]=defaults[key2];}}if(opts.recurse_count>8){throw new FS.ErrnoError(32);}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return!!p;}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break;}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root;}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32);}}}}return{path:current_path,node:current};},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path;}path=path?node.name+"/"+path:node.name;node=node.parent;}},hashName:function(parentid,name2){var hash=0;for(var i=0;i<name2.length;i++){hash=(hash<<5)-hash+name2.charCodeAt(i)|0;}return(parentid+hash>>>0)%FS.nameTable.length;},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node;},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next;}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break;}current=current.name_next;}}},lookupNode:function(parent,name2){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent);}var hash=FS.hashName(parent.id,name2);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name2){return node;}}return FS.lookup(parent,name2);},createNode:function(parent,name2,mode,rdev){var node=new FS.FSNode(parent,name2,mode,rdev);FS.hashAddNode(node);return node;},destroyNode:function(node){FS.hashRemoveNode(node);},isRoot:function(node){return node===node.parent;},isMountpoint:function(node){return!!node.mounted;},isFile:function(mode){return(mode&61440)===32768;},isDir:function(mode){return(mode&61440)===16384;},isLink:function(mode){return(mode&61440)===40960;},isChrdev:function(mode){return(mode&61440)===8192;},isBlkdev:function(mode){return(mode&61440)===24576;},isFIFO:function(mode){return(mode&61440)===4096;},isSocket:function(mode){return(mode&49152)===49152;},flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str);}return flags;},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w";}return perms;},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0;}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 2;}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 2;}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 2;}return 0;},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0;},mayCreate:function(dir,name2){try{var node=FS.lookupNode(dir,name2);return 20;}catch(e){}return FS.nodePermissions(dir,"wx");},mayDelete:function(dir,name2,isdir){var node;try{node=FS.lookupNode(dir,name2);}catch(e){return e.errno;}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode;}if(isdir){if(!FS.isDir(node.mode)){return 54;}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10;}}else{if(FS.isDir(node.mode)){return 31;}}return 0;},mayOpen:function(node,flags){if(!node){return 44;}if(FS.isLink(node.mode)){return 32;}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31;}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags));},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd;}}throw new FS.ErrnoError(33);},getStream:function(fd){return FS.streams[fd];},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node;},set:function(val){this.node=val;}},isRead:{get:function(){return(this.flags&2097155)!==1;}},isWrite:{get:function(){return(this.flags&2097155)!==0;}},isAppend:{get:function(){return this.flags&1024;}}};}var newStream=new FS.FSStream();for(var p in stream){newStream[p]=stream[p];}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream;},closeStream:function(fd){FS.streams[fd]=null;},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream);}},llseek:function(){throw new FS.ErrnoError(70);}},major:function(dev){return dev>>8;},minor:function(dev){return dev&255;},makedev:function(ma,mi){return ma<<8|mi;},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops};},getDevice:function(dev){return FS.devices[dev];},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts);}return mounts;},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false;}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode);}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode);}return;}if(++completed>=mounts.length){doCallback(null);}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null);}mount.type.syncfs(mount,populate,done);});},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10);}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10);}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54);}}var mount={type,opts,mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot;}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount);}}return mountRoot;},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28);}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current);}current=next;}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1);},lookup:function(parent,name2){return parent.node_ops.lookup(parent,name2);},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name2=PATH.basename(path);if(!name2||name2==="."||name2===".."){throw new FS.ErrnoError(28);}var errCode=FS.mayCreate(parent,name2);if(errCode){throw new FS.ErrnoError(errCode);}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63);}return parent.node_ops.mknod(parent,name2,mode,dev);},create:function(path,mode){mode=mode!==void 0?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0);},mkdir:function(path,mode){mode=mode!==void 0?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0);},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode);}catch(e){if(e.errno!=20)throw e;}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438;}mode|=8192;return FS.mknod(path,mode,dev);},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44);}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44);}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode);}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63);}return parent.node_ops.symlink(parent,newname,oldpath);},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75);}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28);}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55);}var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(old_node===new_node){return;}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode);}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode);}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63);}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10);}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode);}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path);}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message);}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);}catch(e){throw e;}finally{FS.hashAddNode(old_node);}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path);}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message);}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name2=PATH.basename(path);var node=FS.lookupNode(parent,name2);var errCode=FS.mayDelete(parent,name2,true);if(errCode){throw new FS.ErrnoError(errCode);}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63);}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10);}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path);}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message);}parent.node_ops.rmdir(parent,name2);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path);}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message);}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54);}return node.node_ops.readdir(node);},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name2=PATH.basename(path);var node=FS.lookupNode(parent,name2);var errCode=FS.mayDelete(parent,name2,false);if(errCode){throw new FS.ErrnoError(errCode);}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63);}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10);}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path);}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message);}parent.node_ops.unlink(parent,name2);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path);}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message);}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44);}if(!link.node_ops.readlink){throw new FS.ErrnoError(28);}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link));},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44);}if(!node.node_ops.getattr){throw new FS.ErrnoError(63);}return node.node_ops.getattr(node);},lstat:function(path){return FS.stat(path,true);},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else{node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63);}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()});},lchmod:function(path,mode){FS.chmod(path,mode,true);},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8);}FS.chmod(stream.node,mode);},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else{node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63);}node.node_ops.setattr(node,{timestamp:Date.now()});},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true);},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8);}FS.chown(stream.node,uid,gid);},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28);}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;}else{node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63);}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31);}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28);}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode);}node.node_ops.setattr(node,{size:len,timestamp:Date.now()});},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8);}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28);}FS.truncate(stream.node,len);},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)});},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44);}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768;}else{mode=0;}var node;if(typeof path==="object"){node=path;}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node;}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20);}}else{node=FS.mknod(path,mode,0);created=true;}}if(!node){throw new FS.ErrnoError(44);}if(FS.isChrdev(node.mode)){flags&=~512;}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54);}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode);}}if(flags&512){FS.truncate(node,0);}flags&=~(128|512|131072);var stream=FS.createStream({node,path:FS.getPath(node),flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream);}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path);}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ;}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE;}FS.trackingDelegate["onOpenFile"](path,trackingFlags);}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message);}return stream;},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream);}}catch(e){throw e;}finally{FS.closeStream(stream.fd);}stream.fd=null;},isClosed:function(stream){return stream.fd===null;},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70);}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28);}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position;},read:function(stream,buffer2,offset,length,position){offset>>>=0;if(length<0||position<0){throw new FS.ErrnoError(28);}if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8);}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31);}if(!stream.stream_ops.read){throw new FS.ErrnoError(28);}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70);}var bytesRead=stream.stream_ops.read(stream,buffer2,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead;},write:function(stream,buffer2,offset,length,position,canOwn){offset>>>=0;if(length<0||position<0){throw new FS.ErrnoError(28);}if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8);}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31);}if(!stream.stream_ops.write){throw new FS.ErrnoError(28);}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2);}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70);}var bytesWritten=stream.stream_ops.write(stream,buffer2,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path);}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message);}return bytesWritten;},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8);}if(offset<0||length<=0){throw new FS.ErrnoError(28);}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8);}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43);}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138);}stream.stream_ops.allocate(stream,offset,length);},mmap:function(stream,address,length,position,prot,flags){address>>>=0;if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2);}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2);}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43);}return stream.stream_ops.mmap(stream,address,length,position,prot,flags);},msync:function(stream,buffer2,offset,length,mmapFlags){offset>>>=0;if(!stream||!stream.stream_ops.msync){return 0;}return stream.stream_ops.msync(stream,buffer2,offset,length,mmapFlags);},munmap:function(stream){return 0;},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59);}return stream.stream_ops.ioctl(stream,cmd,arg);},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"');}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0);}else if(opts.encoding==="binary"){ret=buf;}FS.close(stream);return ret;},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,void 0,opts.canOwn);}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,void 0,opts.canOwn);}else{throw new Error("Unsupported data type");}FS.close(stream);},cwd:function(){return FS.currentPath;},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44);}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54);}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode);}FS.currentPath=lookup.path;},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user");},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0;},write:function(stream,buffer2,offset,length,pos){return length;}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp");},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name2){var fd=+name2;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path;}}};ret.parent=ret;return ret;}};return node;}},{},"/proc/self/fd");},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"]);}else{FS.symlink("/dev/tty","/dev/stdin");}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"]);}else{FS.symlink("/dev/tty","/dev/stdout");}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"]);}else{FS.symlink("/dev/tty1","/dev/stderr");}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1);},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno2){this.errno=errno2;};this.setErrno(errno);this.message="FS error";};FS.ErrnoError.prototype=new Error();FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>";});},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS};},init:function(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams();},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue;}FS.close(stream);}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode;},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object;}else{return null;}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path;}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/";}catch(e){ret.error=e.errno;}return ret;},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current);}catch(e){}parent=current;}return current;},createFile:function(parent,name2,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name2);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode);},createDataFile:function(parent,name2,data,canRead,canWrite,canOwn){var path=name2?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name2):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr;}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode);}return node;},createDevice:function(parent,name2,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name2);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false;},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10);}},read:function(stream,buffer2,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input();}catch(e){throw new FS.ErrnoError(29);}if(result===void 0&&bytesRead===0){throw new FS.ErrnoError(6);}if(result===null||result===void 0)break;bytesRead++;buffer2[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead;},write:function(stream,buffer2,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer2[offset+i]);}catch(e){throw new FS.ErrnoError(29);}}if(length){stream.node.timestamp=Date.now();}return i;}});return FS.mkdev(path,mode,dev);},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length;}catch(e){throw new FS.ErrnoError(29);}}else{throw new Error("Cannot load without read() or XMLHttpRequest.");}},createLazyFile:function(parent,name2,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[];}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return void 0;}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset];};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter;};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest();xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr2=new XMLHttpRequest();xhr2.open("GET",url,false);if(datalength!==chunkSize)xhr2.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr2.responseType="arraybuffer";if(xhr2.overrideMimeType){xhr2.overrideMimeType("text/plain; charset=x-user-defined");}xhr2.send(null);if(!(xhr2.status>=200&&xhr2.status<300||xhr2.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr2.status);if(xhr2.response!==void 0){return new Uint8Array(xhr2.response||[]);}else{return intArrayFromString(xhr2.responseText||"",true);}};var lazyArray2=this;lazyArray2.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray2.chunks[chunkNum]==="undefined"){lazyArray2.chunks[chunkNum]=doXHR(start,end);}if(typeof lazyArray2.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray2.chunks[chunkNum];});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed");}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true;};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array();Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength();}return this._length;}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength();}return this._chunkSize;}}});var properties={isDevice:false,contents:lazyArray};}else{var properties={isDevice:false,url};}var node=FS.createFile(parent,name2,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents;}else if(properties.url){node.contents=null;node.url=properties.url;}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length;}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key2){var fn=node.stream_ops[key2];stream_ops[key2]=function forceLoadLazyFile(){FS.forceLoadFile(node);return fn.apply(null,arguments);};});stream_ops.read=function stream_ops_read(stream,buffer2,offset,length,position){FS.forceLoadFile(node);var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer2[offset+i]=contents[position+i];}}else{for(var i=0;i<size;i++){buffer2[offset+i]=contents.get(position+i);}}return size;};node.stream_ops=stream_ops;return node;},createPreloadedFile:function(parent,name2,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name2?PATH_FS.resolve(PATH.join2(parent,name2)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray2){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name2,byteArray2,canRead,canWrite,canOwn);}if(onload)onload();removeRunDependency(dep);}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep);});handled=true;}});if(!handled)finish(byteArray);}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray);},onerror);}else{processData(url);}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;},DB_NAME:function(){return"EM_FS_"+window.location.pathname;},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e);}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME);};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish();};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e);}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly");}catch(e){onerror(e);return;}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path);}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish();};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd();}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path;}path=PATH.join2(dir,path);}return path;},doStat:function(func,path,buf){try{var stat=func(path);}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54;}throw e;}HEAP32[buf>>>2]=stat.dev;HEAP32[buf+4>>>2]=0;HEAP32[buf+8>>>2]=stat.ino;HEAP32[buf+12>>>2]=stat.mode;HEAP32[buf+16>>>2]=stat.nlink;HEAP32[buf+20>>>2]=stat.uid;HEAP32[buf+24>>>2]=stat.gid;HEAP32[buf+28>>>2]=stat.rdev;HEAP32[buf+32>>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>>2]=tempI64[0],HEAP32[buf+44>>>2]=tempI64[1];HEAP32[buf+48>>>2]=4096;HEAP32[buf+52>>>2]=stat.blocks;HEAP32[buf+56>>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>>2]=0;HEAP32[buf+64>>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>>2]=0;HEAP32[buf+72>>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>>2]=tempI64[0],HEAP32[buf+84>>>2]=tempI64[1];return 0;},doMsync:function(addr,stream,len,flags,offset){var buffer2=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer2,offset,len,flags);},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.slice(0,path.length-1);FS.mkdir(path,mode,0);return 0;},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28;}FS.mknod(path,mode,dev);return 0;},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len>>>0];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len>>>0]=endChar;return len;},doAccess:function(path,amode){if(amode&~7){return-28;}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-44;}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2;}return 0;},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd;},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>>2];var len=HEAP32[iov+(i*8+4)>>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break;}return ret;},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>>2];var len=HEAP32[iov+(i*8+4)>>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;}return ret;},varargs:void 0,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>>2];return ret;},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret;},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream;},get64:function(low,high){return low;}};function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28;}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd;}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0;}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>>1]=2;return 0;}case 13:case 14:return 0;case 16:case 8:return-28;case 9:setErrNo(28);return-1;default:{return-28;}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno;}}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0;}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0;}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>>2]=0;return 0;}case 21520:{if(!stream.tty)return-59;return-28;}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp);}case 21523:{if(!stream.tty)return-59;return 0;}case 21524:{if(!stream.tty)return-59;return 0;}default:abort("bad ioctl syscall "+op);}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno;}}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path);var mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd;}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno;}}var tupleRegistrations={};function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr);}}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>>2]);}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name2){if(name2===void 0){return"_unknown";}name2=name2.replace(/[^a-zA-Z0-9_]/g,"$");var f=name2.charCodeAt(0);if(f>=char_0&&f<=char_9){return"_"+name2;}else{return name2;}}function createNamedFunction(name2,body){name2=makeLegalFunctionName(name2);return new Function("body","return function "+name2+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body);}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==void 0){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"");}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===void 0){return this.name;}else{return this.name+": "+this.message;}};return errorClass;}var InternalError=void 0;function throwInternalError(message){throw new InternalError(message);}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes;});function onComplete(typeConverters2){var myTypeConverters=getTypeConverters(typeConverters2);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count");}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i]);}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt];}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[];}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters);}});}});if(unregisteredTypes.length===0){onComplete(typeConverters);}}function __embind_finalize_value_array(rawTupleType){var reg=tupleRegistrations[rawTupleType];delete tupleRegistrations[rawTupleType];var elements=reg.elements;var elementsLength=elements.length;var elementTypes=elements.map(function(elt){return elt.getterReturnType;}).concat(elements.map(function(elt){return elt.setterArgumentType;}));var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;whenDependentTypesAreResolved([rawTupleType],elementTypes,function(elementTypes2){elements.forEach(function(elt,i){var getterReturnType=elementTypes2[i];var getter=elt.getter;var getterContext=elt.getterContext;var setterArgumentType=elementTypes2[i+elementsLength];var setter=elt.setter;var setterContext=elt.setterContext;elt.read=function(ptr){return getterReturnType["fromWireType"](getter(getterContext,ptr));};elt.write=function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,o));runDestructors(destructors);};});return[{name:reg.name,"fromWireType":function(ptr){var rv=new Array(elementsLength);for(var i=0;i<elementsLength;++i){rv[i]=elements[i].read(ptr);}rawDestructor(ptr);return rv;},"toWireType":function(destructors,o){if(elementsLength!==o.length){throw new TypeError("Incorrect number of tuple elements for "+reg.name+": expected="+elementsLength+", actual="+o.length);}var ptr=rawConstructor();for(var i=0;i<elementsLength;++i){elements[i].write(ptr,o[i]);}if(destructors!==null){destructors.push(rawDestructor,ptr);}return ptr;},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:rawDestructor}];});}var structRegistrations={};function __embind_finalize_value_object(structType){var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;var fieldRecords=reg.fields;var fieldTypes=fieldRecords.map(function(field){return field.getterReturnType;}).concat(fieldRecords.map(function(field){return field.setterArgumentType;}));whenDependentTypesAreResolved([structType],fieldTypes,function(fieldTypes2){var fields={};fieldRecords.forEach(function(field,i){var fieldName=field.fieldName;var getterReturnType=fieldTypes2[i];var getter=field.getter;var getterContext=field.getterContext;var setterArgumentType=fieldTypes2[i+fieldRecords.length];var setter=field.setter;var setterContext=field.setterContext;fields[fieldName]={read:function(ptr){return getterReturnType["fromWireType"](getter(getterContext,ptr));},write:function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,o));runDestructors(destructors);}};});return[{name:reg.name,"fromWireType":function(ptr){var rv={};for(var i in fields){rv[i]=fields[i].read(ptr);}rawDestructor(ptr);return rv;},"toWireType":function(destructors,o){for(var fieldName in fields){if(!(fieldName in o)){throw new TypeError('Missing field:  "'+fieldName+'"');}}var ptr=rawConstructor();for(fieldName in fields){fields[fieldName].write(ptr,o[fieldName]);}if(destructors!==null){destructors.push(rawDestructor,ptr);}return ptr;},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:rawDestructor}];});}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size);}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i);}embind_charCodes=codes;}var embind_charCodes=void 0;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c>>>0]){ret+=embind_charCodes[HEAPU8[c++>>>0]];}return ret;}var BindingError=void 0;function throwBindingError(message){throw new BindingError(message);}function registerType(rawType,registeredInstance,options){options=options||{};if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance");}var name2=registeredInstance.name;if(!rawType){throwBindingError('type "'+name2+'" must have a positive integer typeid pointer');}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return;}else{throwBindingError("Cannot register type '"+name2+"' twice");}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb();});}}function __embind_register_bool(rawType,name2,size,trueValue,falseValue){var shift=getShiftFromSize(size);name2=readLatin1String(name2);registerType(rawType,{name:name2,"fromWireType":function(wt){return!!wt;},"toWireType":function(destructors,o){return o?trueValue:falseValue;},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8;}else if(size===2){heap=HEAP16;}else if(size===4){heap=HEAP32;}else{throw new TypeError("Unknown boolean type size: "+name2);}return this["fromWireType"](heap[pointer>>>shift]);},destructorFunction:null});}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false;}if(!(other instanceof ClassHandle)){return false;}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass;}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass;}return leftClass===rightClass&&left===right;}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType};}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name;}throwBindingError(getInstanceTypeName(obj)+" instance already deleted");}var finalizationGroup=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr);}else{$$.ptrType.registeredClass.rawDestructor($$.ptr);}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=$$.count.value===0;if(toDelete){runDestructor($$);}}function attachFinalizer(handle){if(typeof FinalizationGroup==="undefined"){attachFinalizer=function(handle2){return handle2;};return handle;}finalizationGroup=new FinalizationGroup(function(iter){for(var result=iter.next();!result.done;result=iter.next()){var $$=result.value;if(!$$.ptr){console.warn("object already deleted: "+$$.ptr);}else{releaseClassHandle($$);}}});attachFinalizer=function(handle2){finalizationGroup.register(handle2,handle2.$$,handle2.$$);return handle2;};detachFinalizer=function(handle2){finalizationGroup.unregister(handle2.$$);};return attachFinalizer(handle);}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this;}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone;}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion");}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=void 0;this.$$.ptr=void 0;}}function ClassHandle_isDeleted(){return!this.$$.ptr;}var delayFunction=void 0;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]();}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion");}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes);}this.$$.deleteScheduled=true;return this;}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater;}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(proto[methodName].overloadTable===void 0){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!");}return proto[methodName].overloadTable[arguments.length].apply(this,arguments);};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc;}}function exposePublicSymbol(name2,value,numArguments){if(Module.hasOwnProperty(name2)){if(numArguments===void 0||Module[name2].overloadTable!==void 0&&Module[name2].overloadTable[numArguments]!==void 0){throwBindingError("Cannot register public name '"+name2+"' twice");}ensureOverloadTable(Module,name2,name2);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!");}Module[name2].overloadTable[numArguments]=value;}else{Module[name2]=value;if(numArguments!==void 0){Module[name2].numArguments=numArguments;}}}function RegisteredClass(name2,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name2;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[];}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name);}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass;}return ptr;}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}return 0;}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr;}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr);}return ptr;}else{return 0;}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(handle.$$.smartPtr===void 0){throwBindingError("Passing raw pointer to smart pointer is illegal");}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr;}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr;}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,__emval_register(function(){clonedHandle["delete"]();}));if(destructors!==null){destructors.push(this.rawDestructor,ptr);}}break;default:throwBindingError("Unsupporting sharing policy");}}return ptr;}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}return 0;}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr;}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr);}return ptr;}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr);}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]();}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr;}if(desiredClass.baseClass===void 0){return null;}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null;}return desiredClass.downcast(rv);}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length;}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k]);}}return rv;}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes);}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction;}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===void 0){throwBindingError("ptr should not be undefined");}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass;}return ptr;}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr];}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType");}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified");}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}));}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null;}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(registeredInstance!==void 0){if(registeredInstance.$$.count.value===0){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]();}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv;}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr});}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr});}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this);}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType;}else{toType=registeredPointerRecord.pointerType;}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this);}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr});}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp});}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType;}function RegisteredPointer(name2,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name2;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===void 0){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null;}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null;}}else{this["toWireType"]=genericPointerToWireType;}}function replacePublicSymbol(name2,value,numArguments){if(!Module.hasOwnProperty(name2)){throwInternalError("Replacing nonexistant public symbol");}if(Module[name2].overloadTable!==void 0&&numArguments!==void 0){Module[name2].overloadTable[numArguments]=value;}else{Module[name2]=value;Module[name2].argCount=numArguments;}}function getDynCaller(sig,ptr){assert(sig.indexOf("j")>=0,"getDynCaller should only be called with i64 sigs");var argCache=[];return function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++){argCache[i]=arguments[i];}return dynCall(sig,ptr,argCache);};}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.indexOf("j")!=-1){return getDynCaller(signature,rawFunction);}return wasmTable.get(rawFunction);}var fp=makeDynCaller();if(typeof fp!=="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction);}return fp;}var UnboundTypeError=void 0;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv;}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return;}if(registeredTypes[type]){return;}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return;}unboundTypes.push(type);seen[type]=true;}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]));}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name2,destructorSignature,rawDestructor){name2=readLatin1String(name2);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast);}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast);}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name2);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name2+" due to unbound types",[baseClassRawType]);});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype;}else{basePrototype=ClassHandle.prototype;}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name2);}if(registeredClass.constructor_body===void 0){throw new BindingError(name2+" has no accessible constructor");}var body=registeredClass.constructor_body[arguments.length];if(body===void 0){throw new BindingError("Tried to invoke ctor of "+name2+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!");}return body.apply(this,arguments);});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name2,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name2,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name2+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name2+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter];});}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i>>>0]);}return array;}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);var args=[rawConstructor];var destructors=[];whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(classType.registeredClass.constructor_body===void 0){classType.registeredClass.constructor_body=[];}if(classType.registeredClass.constructor_body[argCount-1]!==void 0){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes);};whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1));}destructors.length=0;args.length=argCount;for(var i=1;i<argCount;++i){args[i]=argTypes[i]["toWireType"](destructors,arguments[i-1]);}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0]["fromWireType"](ptr);};return[];});return[];});}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function");}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy();var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj;}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===void 0){needsDestructorStack=true;break;}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired";}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\nif (arguments.length !== "+(argCount-2)+") {\nthrowBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n";}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n";}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2]);}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired;}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n";}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction);}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\nreturn ret;\n";}else{}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction;}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName);}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes);}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(method===void 0||method.overloadTable===void 0&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler;}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler;}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(proto[methodName].overloadTable===void 0){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction;}else{proto[methodName].overloadTable[argCount-2]=memberFunction;}return[];});return[];});}var emval_free_list=[];var emval_handle_array=[{},{value:void 0},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&--emval_handle_array[handle].refcount===0){emval_handle_array[handle]=void 0;emval_free_list.push(handle);}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==void 0){++count;}}return count;}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==void 0){return emval_handle_array[i];}}return null;}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval;}function __emval_register(value){switch(value){case void 0:{return 1;}case null:{return 2;}case true:{return 3;}case false:{return 4;}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value};return handle;}}}function __embind_register_emval(rawType,name2){name2=readLatin1String(name2);registerType(rawType,{name:name2,"fromWireType":function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv;},"toWireType":function(destructors,value){return __emval_register(value);},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null});}function _embind_repr(v){if(v===null){return"null";}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString();}else{return""+v;}}function floatReadValueFromPointer(name2,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>>2]);};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>>3]);};default:throw new TypeError("Unknown float type: "+name2);}}function __embind_register_float(rawType,name2,size){var shift=getShiftFromSize(size);name2=readLatin1String(name2);registerType(rawType,{name:name2,"fromWireType":function(value){return value;},"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name);}return value;},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name2,shift),destructorFunction:null});}function __embind_register_function(name2,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name2=readLatin1String(name2);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name2,function(){throwUnboundTypeError("Cannot call "+name2+" due to unbound types",argTypes);},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes2){var invokerArgsArray=[argTypes2[0],null].concat(argTypes2.slice(1));replacePublicSymbol(name2,craftInvokerFunction(name2,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[];});}function integerReadValueFromPointer(name2,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer>>>0];}:function readU8FromPointer(pointer){return HEAPU8[pointer>>>0];};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>>1];}:function readU16FromPointer(pointer){return HEAPU16[pointer>>>1];};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>>2];}:function readU32FromPointer(pointer){return HEAPU32[pointer>>>2];};default:throw new TypeError("Unknown integer type: "+name2);}}function __embind_register_integer(primitiveType,name2,size,minRange,maxRange){name2=readLatin1String(name2);if(maxRange===-1){maxRange=4294967295;}var shift=getShiftFromSize(size);var fromWireType=function(value){return value;};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift;};}var isUnsignedType=name2.indexOf("unsigned")!=-1;registerType(primitiveType,{name:name2,"fromWireType":fromWireType,"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name);}if(value<minRange||value>maxRange){throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name2+'", which is outside the valid range ['+minRange+", "+maxRange+"]!");}return isUnsignedType?value>>>0:value|0;},"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name2,shift,minRange!==0),destructorFunction:null});}function __embind_register_memory_view(rawType,dataTypeIndex,name2){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle>>>0];var data=heap[handle+1>>>0];return new TA(buffer,data,size);}name2=readLatin1String(name2);registerType(rawType,{name:name2,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true});}function __embind_register_std_string(rawType,name2){name2=readLatin1String(name2);var stdStringIsUTF8=name2==="std::string";registerType(rawType,{name:name2,"fromWireType":function(value){var length=HEAPU32[value>>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr>>>0]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===void 0){str=stringSegment;}else{str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+1;}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i>>>0]);}str=a.join("");}_free(value);return str;},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value);}var getLength;var valueIsOfTypeString=typeof value==="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string");}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value);};}else{getLength=function(){return value.length;};}var length=getLength();var ptr=_malloc(4+length+1);ptr>>>=0;HEAPU32[ptr>>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1);}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits");}HEAPU8[ptr+4+i>>>0]=charCode;}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i>>>0]=value[i];}}}if(destructors!==null){destructors.push(_free,ptr);}return ptr;},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr);}});}function __embind_register_std_wstring(rawType,charSize,name2){name2=readLatin1String(name2);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=function(){return HEAPU16;};shift=1;}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=function(){return HEAPU32;};shift=2;}registerType(rawType,{name:name2,"fromWireType":function(value){var length=HEAPU32[value>>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===void 0){str=stringSegment;}else{str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+charSize;}}_free(value);return str;},"toWireType":function(destructors,value){if(!(typeof value==="string")){throwBindingError("Cannot pass non-string to C++ string type "+name2);}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);ptr>>>=0;HEAPU32[ptr>>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr);}return ptr;},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr);}});}function __embind_register_value_array(rawType,name2,constructorSignature,rawConstructor,destructorSignature,rawDestructor){tupleRegistrations[rawType]={name:readLatin1String(name2),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),elements:[]};}function __embind_register_value_array_element(rawTupleType,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){tupleRegistrations[rawTupleType].elements.push({getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext,setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext});}function __embind_register_value_object(rawType,name2,constructorSignature,rawConstructor,destructorSignature,rawDestructor){structRegistrations[rawType]={name:readLatin1String(name2),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]};}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext,setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext});}function __embind_register_void(rawType,name2){name2=readLatin1String(name2);registerType(rawType,{isVoid:true,name:name2,"argPackAdvance":0,"fromWireType":function(){return void 0;},"toWireType":function(destructors,o){return void 0;}});}function requireHandle(handle){if(!handle){throwBindingError("Cannot use deleted val. handle = "+handle);}return emval_handle_array[handle].value;}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(impl===void 0){throwBindingError(humanName+" has unknown type "+getTypeName(rawType));}return impl;}function __emval_as(handle,returnType,destructorsRef){handle=requireHandle(handle);returnType=requireRegisteredType(returnType,"emval::as");var destructors=[];var rd=__emval_register(destructors);HEAP32[destructorsRef>>>2]=rd;return returnType["toWireType"](destructors,handle);}function __emval_lookupTypes(argCount,argTypes){var a=new Array(argCount);for(var i=0;i<argCount;++i){a[i]=requireRegisteredType(HEAP32[(argTypes>>2)+i>>>0],"parameter "+i);}return a;}function __emval_call(handle,argCount,argTypes,argv){handle=requireHandle(handle);var types=__emval_lookupTypes(argCount,argTypes);var args=new Array(argCount);for(var i=0;i<argCount;++i){var type=types[i];args[i]=type["readValueFromPointer"](argv);argv+=type["argPackAdvance"];}var rv=handle.apply(void 0,args);return __emval_register(rv);}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];if(symbol===void 0){return readLatin1String(address);}else{return symbol;}}function emval_get_global(){if(typeof globalThis==="object"){return globalThis;}return function(){return Function;}()("return this")();}function __emval_get_global(name2){if(name2===0){return __emval_register(emval_get_global());}else{name2=getStringOrSymbol(name2);return __emval_register(emval_get_global()[name2]);}}function __emval_get_property(handle,key2){handle=requireHandle(handle);key2=requireHandle(key2);return __emval_register(handle[key2]);}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1;}}function __emval_instanceof(object,constructor){object=requireHandle(object);constructor=requireHandle(constructor);return object instanceof constructor;}function __emval_is_number(handle){handle=requireHandle(handle);return typeof handle==="number";}function __emval_new_array(){return __emval_register([]);}function __emval_new_cstring(v){return __emval_register(getStringOrSymbol(v));}function __emval_new_object(){return __emval_register({});}function __emval_run_destructors(handle){var destructors=emval_handle_array[handle].value;runDestructors(destructors);__emval_decref(handle);}function __emval_set_property(handle,key2,value){handle=requireHandle(handle);key2=requireHandle(key2);value=requireHandle(value);handle[key2]=value;}function __emval_take_value(type,argv){type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](argv);return __emval_register(v);}function _abort(){abort();}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function(){var t=process["hrtime"]();return t[0]*1e3+t[1]/1e6;};}else if(typeof dateNow!=="undefined"){_emscripten_get_now=dateNow;}else _emscripten_get_now=function(){return performance.now();};var _emscripten_get_now_is_monotonic=true;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now();}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now();}else{setErrNo(28);return-1;}HEAP32[tp>>>2]=now/1e3|0;HEAP32[tp+4>>>2]=now%1e3*1e3*1e3|0;return 0;}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest>>>0,src>>>0,src+num>>>0);}function _emscripten_get_heap_size(){return HEAPU8.length;}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1;}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var maxHeapSize=4294967296;if(requestedSize>maxHeapSize){return false;}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+0.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true;}}return false;}var ENV={};function getExecutableName(){return thisProgram||"./this.program";}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator==="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":lang,"_":getExecutableName()};for(var x in ENV){env[x]=ENV[x];}var strings=[];for(var x in env){strings.push(x+"="+env[x]);}getEnvStrings.strings=strings;}return getEnvStrings.strings;}function _environ_get(__environ,environ_buf){try{var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1;});return 0;}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _environ_sizes_get(penviron_count,penviron_buf_size){try{var strings=getEnvStrings();HEAP32[penviron_count>>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1;});HEAP32[penviron_buf_size>>>2]=bufSize;return 0;}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0;}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>>2]=num;return 0;}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61;}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>>2]=tempI64[0],HEAP32[newOffset+4>>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0;}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>>2]=num;return 0;}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno;}}function _setTempRet0($i){setTempRet0($i|0);}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0);}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum;}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1);}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1);}}else{newDate.setDate(newDate.getDate()+days);return newDate;}}return newDate;}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>>2];var date={tm_sec:HEAP32[tm>>>2],tm_min:HEAP32[tm+4>>>2],tm_hour:HEAP32[tm+8>>>2],tm_mday:HEAP32[tm+12>>>2],tm_mon:HEAP32[tm+16>>>2],tm_year:HEAP32[tm+20>>>2],tm_wday:HEAP32[tm+24>>>2],tm_yday:HEAP32[tm+28>>>2],tm_isdst:HEAP32[tm+32>>>2],tm_gmtoff:HEAP32[tm+36>>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str;}return str;}function leadingNulls(value,digits){return leadingSomething(value,digits,"0");}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0;}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate());}}return compare;}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30);}}function getWeekBasedYear(date2){var thisDate=__addDays(new Date(date2.tm_year+1900,0,1),date2.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1;}else{return thisDate.getFullYear();}}else{return thisDate.getFullYear()-1;}}var EXPANSION_RULES_2={"%a":function(date2){return WEEKDAYS[date2.tm_wday].substring(0,3);},"%A":function(date2){return WEEKDAYS[date2.tm_wday];},"%b":function(date2){return MONTHS[date2.tm_mon].substring(0,3);},"%B":function(date2){return MONTHS[date2.tm_mon];},"%C":function(date2){var year=date2.tm_year+1900;return leadingNulls(year/100|0,2);},"%d":function(date2){return leadingNulls(date2.tm_mday,2);},"%e":function(date2){return leadingSomething(date2.tm_mday,2," ");},"%g":function(date2){return getWeekBasedYear(date2).toString().substring(2);},"%G":function(date2){return getWeekBasedYear(date2);},"%H":function(date2){return leadingNulls(date2.tm_hour,2);},"%I":function(date2){var twelveHour=date2.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2);},"%j":function(date2){return leadingNulls(date2.tm_mday+__arraySum(__isLeapYear(date2.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date2.tm_mon-1),3);},"%m":function(date2){return leadingNulls(date2.tm_mon+1,2);},"%M":function(date2){return leadingNulls(date2.tm_min,2);},"%n":function(){return"\n";},"%p":function(date2){if(date2.tm_hour>=0&&date2.tm_hour<12){return"AM";}else{return"PM";}},"%S":function(date2){return leadingNulls(date2.tm_sec,2);},"%t":function(){return"	";},"%u":function(date2){return date2.tm_wday||7;},"%U":function(date2){var janFirst=new Date(date2.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date2.tm_year+1900,date2.tm_mon,date2.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2);}return compareByDay(firstSunday,janFirst)===0?"01":"00";},"%V":function(date2){var janFourthThisYear=new Date(date2.tm_year+1900,0,4);var janFourthNextYear=new Date(date2.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date2.tm_year+1900,0,1),date2.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53";}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01";}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date2.tm_year+1900){daysDifference=date2.tm_yday+32-firstWeekStartThisYear.getDate();}else{daysDifference=date2.tm_yday+1-firstWeekStartThisYear.getDate();}return leadingNulls(Math.ceil(daysDifference/7),2);},"%w":function(date2){return date2.tm_wday;},"%W":function(date2){var janFirst=new Date(date2.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date2.tm_year+1900,date2.tm_mon,date2.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2);}return compareByDay(firstMonday,janFirst)===0?"01":"00";},"%y":function(date2){return(date2.tm_year+1900).toString().substring(2);},"%Y":function(date2){return date2.tm_year+1900;},"%z":function(date2){var off=date2.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4);},"%Z":function(date2){return date2.tm_zone;},"%%":function(){return"%";}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date));}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0;}writeArrayToMemory(bytes,s);return bytes.length-1;}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm);}var FSNode=function(parent,name2,mode,rdev){if(!parent){parent=this;}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name2;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev;};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode;},set:function(val){val?this.mode|=readMode:this.mode&=~readMode;}},write:{get:function(){return(this.mode&writeMode)===writeMode;},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode;}},isFolder:{get:function(){return FS.isDir(this.mode);}},isDevice:{get:function(){return FS.isChrdev(this.mode);}}});FS.FSNode=FSNode;FS.staticInit();Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;InternalError=Module["InternalError"]=extendError(Error,"InternalError");embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array;}__ATINIT__.push({func:function(){___wasm_call_ctors();}});var asmLibraryArg={"x":___assert_fail,"A":___sys_fcntl64,"P":___sys_ioctl,"Q":___sys_open,"U":__embind_finalize_value_array,"s":__embind_finalize_value_object,"S":__embind_register_bool,"v":__embind_register_class,"u":__embind_register_class_constructor,"d":__embind_register_class_function,"R":__embind_register_emval,"C":__embind_register_float,"h":__embind_register_function,"m":__embind_register_integer,"k":__embind_register_memory_view,"D":__embind_register_std_string,"w":__embind_register_std_wstring,"V":__embind_register_value_array,"g":__embind_register_value_array_element,"t":__embind_register_value_object,"j":__embind_register_value_object_field,"T":__embind_register_void,"q":__emval_as,"W":__emval_call,"b":__emval_decref,"F":__emval_get_global,"n":__emval_get_property,"l":__emval_incref,"N":__emval_instanceof,"E":__emval_is_number,"y":__emval_new_array,"f":__emval_new_cstring,"r":__emval_new_object,"p":__emval_run_destructors,"i":__emval_set_property,"e":__emval_take_value,"c":_abort,"M":_clock_gettime,"I":_emscripten_memcpy_big,"o":_emscripten_resize_heap,"K":_environ_get,"L":_environ_sizes_get,"B":_fd_close,"O":_fd_read,"G":_fd_seek,"z":_fd_write,"a":wasmMemory,"H":_setTempRet0,"J":_strftime_l};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["Y"]).apply(null,arguments);};var _main=Module["_main"]=function(){return(_main=Module["_main"]=Module["asm"]["Z"]).apply(null,arguments);};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["_"]).apply(null,arguments);};var ___getTypeName=Module["___getTypeName"]=function(){return(___getTypeName=Module["___getTypeName"]=Module["asm"]["$"]).apply(null,arguments);};var ___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=function(){return(___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=Module["asm"]["aa"]).apply(null,arguments);};var ___errno_location=Module["___errno_location"]=function(){return(___errno_location=Module["___errno_location"]=Module["asm"]["ba"]).apply(null,arguments);};var _free=Module["_free"]=function(){return(_free=Module["_free"]=Module["asm"]["ca"]).apply(null,arguments);};var dynCall_jiji=Module["dynCall_jiji"]=function(){return(dynCall_jiji=Module["dynCall_jiji"]=Module["asm"]["da"]).apply(null,arguments);};var dynCall_viijii=Module["dynCall_viijii"]=function(){return(dynCall_viijii=Module["dynCall_viijii"]=Module["asm"]["ea"]).apply(null,arguments);};var dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=function(){return(dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=Module["asm"]["fa"]).apply(null,arguments);};var dynCall_iiiiij=Module["dynCall_iiiiij"]=function(){return(dynCall_iiiiij=Module["dynCall_iiiiij"]=Module["asm"]["ga"]).apply(null,arguments);};var dynCall_iiiiijj=Module["dynCall_iiiiijj"]=function(){return(dynCall_iiiiijj=Module["dynCall_iiiiijj"]=Module["asm"]["ha"]).apply(null,arguments);};Module["addRunDependency"]=addRunDependency;Module["removeRunDependency"]=removeRunDependency;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;Module["FS"]=FS;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status;}var calledMain=false;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller;};function callMain(args){var entryFunction=Module["_main"];var argc=0;var argv=0;try{var ret=entryFunction(argc,argv);exit(ret,true);}catch(e){if(e instanceof ExitStatus){return;}else if(e=="unwind"){noExitRuntime=true;return;}else{var toLog=e;if(e&&typeof e==="object"&&e.stack){toLog=[e,e.stack];}err("exception thrown: "+toLog);quit_(1,e);}}finally{calledMain=true;}}function run(args){args=args||arguments_;if(runDependencies>0){return;}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(shouldRunNow)callMain(args);postRun();}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("");},1);doRun();},1);}else{doRun();}}Module["run"]=run;function exit(status,implicit){if(implicit&&noExitRuntime&&status===0){return;}if(noExitRuntime){}else{EXITSTATUS=status;exitRuntime();if(Module["onExit"])Module["onExit"](status);ABORT=true;}quit_(status,new ExitStatus(status));}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()();}}var shouldRunNow=true;if(Module["noInitialRun"])shouldRunNow=false;noExitRuntime=true;run();return WebIFCWasm3.ready;};}();if(typeof exports==="object"&&typeof module==="object")module.exports=WebIFCWasm2;else if(typeof define==="function"&&define["amd"])define([],function(){return WebIFCWasm2;});else if(typeof exports==="object")exports["WebIFCWasm"]=WebIFCWasm2;}});// dist/ifc2x4.ts
var IFCACTIONREQUEST=3821786052;exports.IFCACTIONREQUEST=IFCACTIONREQUEST;var IFCACTOR=2296667514;exports.IFCACTOR=IFCACTOR;var IFCACTORROLE=3630933823;exports.IFCACTORROLE=IFCACTORROLE;var IFCACTUATOR=4288193352;exports.IFCACTUATOR=IFCACTUATOR;var IFCACTUATORTYPE=2874132201;exports.IFCACTUATORTYPE=IFCACTUATORTYPE;var IFCADDRESS=618182010;exports.IFCADDRESS=IFCADDRESS;var IFCADVANCEDBREP=1635779807;exports.IFCADVANCEDBREP=IFCADVANCEDBREP;var IFCADVANCEDBREPWITHVOIDS=2603310189;exports.IFCADVANCEDBREPWITHVOIDS=IFCADVANCEDBREPWITHVOIDS;var IFCADVANCEDFACE=3406155212;exports.IFCADVANCEDFACE=IFCADVANCEDFACE;var IFCAIRTERMINAL=1634111441;exports.IFCAIRTERMINAL=IFCAIRTERMINAL;var IFCAIRTERMINALBOX=177149247;exports.IFCAIRTERMINALBOX=IFCAIRTERMINALBOX;var IFCAIRTERMINALBOXTYPE=1411407467;exports.IFCAIRTERMINALBOXTYPE=IFCAIRTERMINALBOXTYPE;var IFCAIRTERMINALTYPE=3352864051;exports.IFCAIRTERMINALTYPE=IFCAIRTERMINALTYPE;var IFCAIRTOAIRHEATRECOVERY=2056796094;exports.IFCAIRTOAIRHEATRECOVERY=IFCAIRTOAIRHEATRECOVERY;var IFCAIRTOAIRHEATRECOVERYTYPE=1871374353;exports.IFCAIRTOAIRHEATRECOVERYTYPE=IFCAIRTOAIRHEATRECOVERYTYPE;var IFCALARM=3087945054;exports.IFCALARM=IFCALARM;var IFCALARMTYPE=3001207471;exports.IFCALARMTYPE=IFCALARMTYPE;var IFCALIGNMENT=325726236;exports.IFCALIGNMENT=IFCALIGNMENT;var IFCALIGNMENT2DHORIZONTAL=749761778;exports.IFCALIGNMENT2DHORIZONTAL=IFCALIGNMENT2DHORIZONTAL;var IFCALIGNMENT2DHORIZONTALSEGMENT=3199563722;exports.IFCALIGNMENT2DHORIZONTALSEGMENT=IFCALIGNMENT2DHORIZONTALSEGMENT;var IFCALIGNMENT2DSEGMENT=2483840362;exports.IFCALIGNMENT2DSEGMENT=IFCALIGNMENT2DSEGMENT;var IFCALIGNMENT2DVERSEGCIRCULARARC=3379348081;exports.IFCALIGNMENT2DVERSEGCIRCULARARC=IFCALIGNMENT2DVERSEGCIRCULARARC;var IFCALIGNMENT2DVERSEGLINE=3239324667;exports.IFCALIGNMENT2DVERSEGLINE=IFCALIGNMENT2DVERSEGLINE;var IFCALIGNMENT2DVERSEGPARABOLICARC=4263986512;exports.IFCALIGNMENT2DVERSEGPARABOLICARC=IFCALIGNMENT2DVERSEGPARABOLICARC;var IFCALIGNMENT2DVERTICAL=53199957;exports.IFCALIGNMENT2DVERTICAL=IFCALIGNMENT2DVERTICAL;var IFCALIGNMENT2DVERTICALSEGMENT=2029264950;exports.IFCALIGNMENT2DVERTICALSEGMENT=IFCALIGNMENT2DVERTICALSEGMENT;var IFCALIGNMENTCURVE=3512275521;exports.IFCALIGNMENTCURVE=IFCALIGNMENTCURVE;var IFCANNOTATION=1674181508;exports.IFCANNOTATION=IFCANNOTATION;var IFCANNOTATIONFILLAREA=669184980;exports.IFCANNOTATIONFILLAREA=IFCANNOTATIONFILLAREA;var IFCAPPLICATION=639542469;exports.IFCAPPLICATION=IFCAPPLICATION;var IFCAPPLIEDVALUE=411424972;exports.IFCAPPLIEDVALUE=IFCAPPLIEDVALUE;var IFCAPPROVAL=130549933;exports.IFCAPPROVAL=IFCAPPROVAL;var IFCAPPROVALRELATIONSHIP=3869604511;exports.IFCAPPROVALRELATIONSHIP=IFCAPPROVALRELATIONSHIP;var IFCARBITRARYCLOSEDPROFILEDEF=3798115385;exports.IFCARBITRARYCLOSEDPROFILEDEF=IFCARBITRARYCLOSEDPROFILEDEF;var IFCARBITRARYOPENPROFILEDEF=1310608509;exports.IFCARBITRARYOPENPROFILEDEF=IFCARBITRARYOPENPROFILEDEF;var IFCARBITRARYPROFILEDEFWITHVOIDS=2705031697;exports.IFCARBITRARYPROFILEDEFWITHVOIDS=IFCARBITRARYPROFILEDEFWITHVOIDS;var IFCASSET=3460190687;exports.IFCASSET=IFCASSET;var IFCASYMMETRICISHAPEPROFILEDEF=3207858831;exports.IFCASYMMETRICISHAPEPROFILEDEF=IFCASYMMETRICISHAPEPROFILEDEF;var IFCAUDIOVISUALAPPLIANCE=277319702;exports.IFCAUDIOVISUALAPPLIANCE=IFCAUDIOVISUALAPPLIANCE;var IFCAUDIOVISUALAPPLIANCETYPE=1532957894;exports.IFCAUDIOVISUALAPPLIANCETYPE=IFCAUDIOVISUALAPPLIANCETYPE;var IFCAXIS1PLACEMENT=4261334040;exports.IFCAXIS1PLACEMENT=IFCAXIS1PLACEMENT;var IFCAXIS2PLACEMENT2D=3125803723;exports.IFCAXIS2PLACEMENT2D=IFCAXIS2PLACEMENT2D;var IFCAXIS2PLACEMENT3D=2740243338;exports.IFCAXIS2PLACEMENT3D=IFCAXIS2PLACEMENT3D;var IFCBSPLINECURVE=1967976161;exports.IFCBSPLINECURVE=IFCBSPLINECURVE;var IFCBSPLINECURVEWITHKNOTS=2461110595;exports.IFCBSPLINECURVEWITHKNOTS=IFCBSPLINECURVEWITHKNOTS;var IFCBSPLINESURFACE=2887950389;exports.IFCBSPLINESURFACE=IFCBSPLINESURFACE;var IFCBSPLINESURFACEWITHKNOTS=167062518;exports.IFCBSPLINESURFACEWITHKNOTS=IFCBSPLINESURFACEWITHKNOTS;var IFCBEAM=753842376;exports.IFCBEAM=IFCBEAM;var IFCBEAMSTANDARDCASE=2906023776;exports.IFCBEAMSTANDARDCASE=IFCBEAMSTANDARDCASE;var IFCBEAMTYPE=819618141;exports.IFCBEAMTYPE=IFCBEAMTYPE;var IFCBEARING=4196446775;exports.IFCBEARING=IFCBEARING;var IFCBEARINGTYPE=3649138523;exports.IFCBEARINGTYPE=IFCBEARINGTYPE;var IFCBLOBTEXTURE=616511568;exports.IFCBLOBTEXTURE=IFCBLOBTEXTURE;var IFCBLOCK=1334484129;exports.IFCBLOCK=IFCBLOCK;var IFCBOILER=32344328;exports.IFCBOILER=IFCBOILER;var IFCBOILERTYPE=231477066;exports.IFCBOILERTYPE=IFCBOILERTYPE;var IFCBOOLEANCLIPPINGRESULT=3649129432;exports.IFCBOOLEANCLIPPINGRESULT=IFCBOOLEANCLIPPINGRESULT;var IFCBOOLEANRESULT=2736907675;exports.IFCBOOLEANRESULT=IFCBOOLEANRESULT;var IFCBOUNDARYCONDITION=4037036970;exports.IFCBOUNDARYCONDITION=IFCBOUNDARYCONDITION;var IFCBOUNDARYCURVE=1136057603;exports.IFCBOUNDARYCURVE=IFCBOUNDARYCURVE;var IFCBOUNDARYEDGECONDITION=1560379544;exports.IFCBOUNDARYEDGECONDITION=IFCBOUNDARYEDGECONDITION;var IFCBOUNDARYFACECONDITION=3367102660;exports.IFCBOUNDARYFACECONDITION=IFCBOUNDARYFACECONDITION;var IFCBOUNDARYNODECONDITION=1387855156;exports.IFCBOUNDARYNODECONDITION=IFCBOUNDARYNODECONDITION;var IFCBOUNDARYNODECONDITIONWARPING=2069777674;exports.IFCBOUNDARYNODECONDITIONWARPING=IFCBOUNDARYNODECONDITIONWARPING;var IFCBOUNDEDCURVE=1260505505;exports.IFCBOUNDEDCURVE=IFCBOUNDEDCURVE;var IFCBOUNDEDSURFACE=4182860854;exports.IFCBOUNDEDSURFACE=IFCBOUNDEDSURFACE;var IFCBOUNDINGBOX=2581212453;exports.IFCBOUNDINGBOX=IFCBOUNDINGBOX;var IFCBOXEDHALFSPACE=2713105998;exports.IFCBOXEDHALFSPACE=IFCBOXEDHALFSPACE;var IFCBRIDGE=644574406;exports.IFCBRIDGE=IFCBRIDGE;var IFCBRIDGEPART=963979645;exports.IFCBRIDGEPART=IFCBRIDGEPART;var IFCBUILDING=4031249490;exports.IFCBUILDING=IFCBUILDING;var IFCBUILDINGELEMENT=3299480353;exports.IFCBUILDINGELEMENT=IFCBUILDINGELEMENT;var IFCBUILDINGELEMENTPART=2979338954;exports.IFCBUILDINGELEMENTPART=IFCBUILDINGELEMENTPART;var IFCBUILDINGELEMENTPARTTYPE=39481116;exports.IFCBUILDINGELEMENTPARTTYPE=IFCBUILDINGELEMENTPARTTYPE;var IFCBUILDINGELEMENTPROXY=1095909175;exports.IFCBUILDINGELEMENTPROXY=IFCBUILDINGELEMENTPROXY;var IFCBUILDINGELEMENTPROXYTYPE=1909888760;exports.IFCBUILDINGELEMENTPROXYTYPE=IFCBUILDINGELEMENTPROXYTYPE;var IFCBUILDINGELEMENTTYPE=1950629157;exports.IFCBUILDINGELEMENTTYPE=IFCBUILDINGELEMENTTYPE;var IFCBUILDINGSTOREY=3124254112;exports.IFCBUILDINGSTOREY=IFCBUILDINGSTOREY;var IFCBUILDINGSYSTEM=1177604601;exports.IFCBUILDINGSYSTEM=IFCBUILDINGSYSTEM;var IFCBURNER=2938176219;exports.IFCBURNER=IFCBURNER;var IFCBURNERTYPE=2188180465;exports.IFCBURNERTYPE=IFCBURNERTYPE;var IFCCSHAPEPROFILEDEF=2898889636;exports.IFCCSHAPEPROFILEDEF=IFCCSHAPEPROFILEDEF;var IFCCABLECARRIERFITTING=635142910;exports.IFCCABLECARRIERFITTING=IFCCABLECARRIERFITTING;var IFCCABLECARRIERFITTINGTYPE=395041908;exports.IFCCABLECARRIERFITTINGTYPE=IFCCABLECARRIERFITTINGTYPE;var IFCCABLECARRIERSEGMENT=3758799889;exports.IFCCABLECARRIERSEGMENT=IFCCABLECARRIERSEGMENT;var IFCCABLECARRIERSEGMENTTYPE=3293546465;exports.IFCCABLECARRIERSEGMENTTYPE=IFCCABLECARRIERSEGMENTTYPE;var IFCCABLEFITTING=1051757585;exports.IFCCABLEFITTING=IFCCABLEFITTING;var IFCCABLEFITTINGTYPE=2674252688;exports.IFCCABLEFITTINGTYPE=IFCCABLEFITTINGTYPE;var IFCCABLESEGMENT=4217484030;exports.IFCCABLESEGMENT=IFCCABLESEGMENT;var IFCCABLESEGMENTTYPE=1285652485;exports.IFCCABLESEGMENTTYPE=IFCCABLESEGMENTTYPE;var IFCCAISSONFOUNDATION=3999819293;exports.IFCCAISSONFOUNDATION=IFCCAISSONFOUNDATION;var IFCCAISSONFOUNDATIONTYPE=3203706013;exports.IFCCAISSONFOUNDATIONTYPE=IFCCAISSONFOUNDATIONTYPE;var IFCCARTESIANPOINT=1123145078;exports.IFCCARTESIANPOINT=IFCCARTESIANPOINT;var IFCCARTESIANPOINTLIST=574549367;exports.IFCCARTESIANPOINTLIST=IFCCARTESIANPOINTLIST;var IFCCARTESIANPOINTLIST2D=1675464909;exports.IFCCARTESIANPOINTLIST2D=IFCCARTESIANPOINTLIST2D;var IFCCARTESIANPOINTLIST3D=2059837836;exports.IFCCARTESIANPOINTLIST3D=IFCCARTESIANPOINTLIST3D;var IFCCARTESIANTRANSFORMATIONOPERATOR=59481748;exports.IFCCARTESIANTRANSFORMATIONOPERATOR=IFCCARTESIANTRANSFORMATIONOPERATOR;var IFCCARTESIANTRANSFORMATIONOPERATOR2D=3749851601;exports.IFCCARTESIANTRANSFORMATIONOPERATOR2D=IFCCARTESIANTRANSFORMATIONOPERATOR2D;var IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=3486308946;exports.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM=IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM;var IFCCARTESIANTRANSFORMATIONOPERATOR3D=3331915920;exports.IFCCARTESIANTRANSFORMATIONOPERATOR3D=IFCCARTESIANTRANSFORMATIONOPERATOR3D;var IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=1416205885;exports.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM=IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM;var IFCCENTERLINEPROFILEDEF=3150382593;exports.IFCCENTERLINEPROFILEDEF=IFCCENTERLINEPROFILEDEF;var IFCCHILLER=3902619387;exports.IFCCHILLER=IFCCHILLER;var IFCCHILLERTYPE=2951183804;exports.IFCCHILLERTYPE=IFCCHILLERTYPE;var IFCCHIMNEY=3296154744;exports.IFCCHIMNEY=IFCCHIMNEY;var IFCCHIMNEYTYPE=2197970202;exports.IFCCHIMNEYTYPE=IFCCHIMNEYTYPE;var IFCCIRCLE=2611217952;exports.IFCCIRCLE=IFCCIRCLE;var IFCCIRCLEHOLLOWPROFILEDEF=2937912522;exports.IFCCIRCLEHOLLOWPROFILEDEF=IFCCIRCLEHOLLOWPROFILEDEF;var IFCCIRCLEPROFILEDEF=1383045692;exports.IFCCIRCLEPROFILEDEF=IFCCIRCLEPROFILEDEF;var IFCCIRCULARARCSEGMENT2D=1062206242;exports.IFCCIRCULARARCSEGMENT2D=IFCCIRCULARARCSEGMENT2D;var IFCCIVILELEMENT=1677625105;exports.IFCCIVILELEMENT=IFCCIVILELEMENT;var IFCCIVILELEMENTTYPE=3893394355;exports.IFCCIVILELEMENTTYPE=IFCCIVILELEMENTTYPE;var IFCCLASSIFICATION=747523909;exports.IFCCLASSIFICATION=IFCCLASSIFICATION;var IFCCLASSIFICATIONREFERENCE=647927063;exports.IFCCLASSIFICATIONREFERENCE=IFCCLASSIFICATIONREFERENCE;var IFCCLOSEDSHELL=2205249479;exports.IFCCLOSEDSHELL=IFCCLOSEDSHELL;var IFCCOIL=639361253;exports.IFCCOIL=IFCCOIL;var IFCCOILTYPE=2301859152;exports.IFCCOILTYPE=IFCCOILTYPE;var IFCCOLOURRGB=776857604;exports.IFCCOLOURRGB=IFCCOLOURRGB;var IFCCOLOURRGBLIST=3285139300;exports.IFCCOLOURRGBLIST=IFCCOLOURRGBLIST;var IFCCOLOURSPECIFICATION=3264961684;exports.IFCCOLOURSPECIFICATION=IFCCOLOURSPECIFICATION;var IFCCOLUMN=843113511;exports.IFCCOLUMN=IFCCOLUMN;var IFCCOLUMNSTANDARDCASE=905975707;exports.IFCCOLUMNSTANDARDCASE=IFCCOLUMNSTANDARDCASE;var IFCCOLUMNTYPE=300633059;exports.IFCCOLUMNTYPE=IFCCOLUMNTYPE;var IFCCOMMUNICATIONSAPPLIANCE=3221913625;exports.IFCCOMMUNICATIONSAPPLIANCE=IFCCOMMUNICATIONSAPPLIANCE;var IFCCOMMUNICATIONSAPPLIANCETYPE=400855858;exports.IFCCOMMUNICATIONSAPPLIANCETYPE=IFCCOMMUNICATIONSAPPLIANCETYPE;var IFCCOMPLEXPROPERTY=2542286263;exports.IFCCOMPLEXPROPERTY=IFCCOMPLEXPROPERTY;var IFCCOMPLEXPROPERTYTEMPLATE=3875453745;exports.IFCCOMPLEXPROPERTYTEMPLATE=IFCCOMPLEXPROPERTYTEMPLATE;var IFCCOMPOSITECURVE=3732776249;exports.IFCCOMPOSITECURVE=IFCCOMPOSITECURVE;var IFCCOMPOSITECURVEONSURFACE=15328376;exports.IFCCOMPOSITECURVEONSURFACE=IFCCOMPOSITECURVEONSURFACE;var IFCCOMPOSITECURVESEGMENT=2485617015;exports.IFCCOMPOSITECURVESEGMENT=IFCCOMPOSITECURVESEGMENT;var IFCCOMPOSITEPROFILEDEF=1485152156;exports.IFCCOMPOSITEPROFILEDEF=IFCCOMPOSITEPROFILEDEF;var IFCCOMPRESSOR=3571504051;exports.IFCCOMPRESSOR=IFCCOMPRESSOR;var IFCCOMPRESSORTYPE=3850581409;exports.IFCCOMPRESSORTYPE=IFCCOMPRESSORTYPE;var IFCCONDENSER=2272882330;exports.IFCCONDENSER=IFCCONDENSER;var IFCCONDENSERTYPE=2816379211;exports.IFCCONDENSERTYPE=IFCCONDENSERTYPE;var IFCCONIC=2510884976;exports.IFCCONIC=IFCCONIC;var IFCCONNECTEDFACESET=370225590;exports.IFCCONNECTEDFACESET=IFCCONNECTEDFACESET;var IFCCONNECTIONCURVEGEOMETRY=1981873012;exports.IFCCONNECTIONCURVEGEOMETRY=IFCCONNECTIONCURVEGEOMETRY;var IFCCONNECTIONGEOMETRY=2859738748;exports.IFCCONNECTIONGEOMETRY=IFCCONNECTIONGEOMETRY;var IFCCONNECTIONPOINTECCENTRICITY=45288368;exports.IFCCONNECTIONPOINTECCENTRICITY=IFCCONNECTIONPOINTECCENTRICITY;var IFCCONNECTIONPOINTGEOMETRY=2614616156;exports.IFCCONNECTIONPOINTGEOMETRY=IFCCONNECTIONPOINTGEOMETRY;var IFCCONNECTIONSURFACEGEOMETRY=2732653382;exports.IFCCONNECTIONSURFACEGEOMETRY=IFCCONNECTIONSURFACEGEOMETRY;var IFCCONNECTIONVOLUMEGEOMETRY=775493141;exports.IFCCONNECTIONVOLUMEGEOMETRY=IFCCONNECTIONVOLUMEGEOMETRY;var IFCCONSTRAINT=1959218052;exports.IFCCONSTRAINT=IFCCONSTRAINT;var IFCCONSTRUCTIONEQUIPMENTRESOURCE=3898045240;exports.IFCCONSTRUCTIONEQUIPMENTRESOURCE=IFCCONSTRUCTIONEQUIPMENTRESOURCE;var IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=2185764099;exports.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE=IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE;var IFCCONSTRUCTIONMATERIALRESOURCE=1060000209;exports.IFCCONSTRUCTIONMATERIALRESOURCE=IFCCONSTRUCTIONMATERIALRESOURCE;var IFCCONSTRUCTIONMATERIALRESOURCETYPE=4105962743;exports.IFCCONSTRUCTIONMATERIALRESOURCETYPE=IFCCONSTRUCTIONMATERIALRESOURCETYPE;var IFCCONSTRUCTIONPRODUCTRESOURCE=488727124;exports.IFCCONSTRUCTIONPRODUCTRESOURCE=IFCCONSTRUCTIONPRODUCTRESOURCE;var IFCCONSTRUCTIONPRODUCTRESOURCETYPE=1525564444;exports.IFCCONSTRUCTIONPRODUCTRESOURCETYPE=IFCCONSTRUCTIONPRODUCTRESOURCETYPE;var IFCCONSTRUCTIONRESOURCE=2559216714;exports.IFCCONSTRUCTIONRESOURCE=IFCCONSTRUCTIONRESOURCE;var IFCCONSTRUCTIONRESOURCETYPE=2574617495;exports.IFCCONSTRUCTIONRESOURCETYPE=IFCCONSTRUCTIONRESOURCETYPE;var IFCCONTEXT=3419103109;exports.IFCCONTEXT=IFCCONTEXT;var IFCCONTEXTDEPENDENTUNIT=3050246964;exports.IFCCONTEXTDEPENDENTUNIT=IFCCONTEXTDEPENDENTUNIT;var IFCCONTROL=3293443760;exports.IFCCONTROL=IFCCONTROL;var IFCCONTROLLER=25142252;exports.IFCCONTROLLER=IFCCONTROLLER;var IFCCONTROLLERTYPE=578613899;exports.IFCCONTROLLERTYPE=IFCCONTROLLERTYPE;var IFCCONVERSIONBASEDUNIT=2889183280;exports.IFCCONVERSIONBASEDUNIT=IFCCONVERSIONBASEDUNIT;var IFCCONVERSIONBASEDUNITWITHOFFSET=2713554722;exports.IFCCONVERSIONBASEDUNITWITHOFFSET=IFCCONVERSIONBASEDUNITWITHOFFSET;var IFCCOOLEDBEAM=4136498852;exports.IFCCOOLEDBEAM=IFCCOOLEDBEAM;var IFCCOOLEDBEAMTYPE=335055490;exports.IFCCOOLEDBEAMTYPE=IFCCOOLEDBEAMTYPE;var IFCCOOLINGTOWER=3640358203;exports.IFCCOOLINGTOWER=IFCCOOLINGTOWER;var IFCCOOLINGTOWERTYPE=2954562838;exports.IFCCOOLINGTOWERTYPE=IFCCOOLINGTOWERTYPE;var IFCCOORDINATEOPERATION=1785450214;exports.IFCCOORDINATEOPERATION=IFCCOORDINATEOPERATION;var IFCCOORDINATEREFERENCESYSTEM=1466758467;exports.IFCCOORDINATEREFERENCESYSTEM=IFCCOORDINATEREFERENCESYSTEM;var IFCCOSTITEM=3895139033;exports.IFCCOSTITEM=IFCCOSTITEM;var IFCCOSTSCHEDULE=1419761937;exports.IFCCOSTSCHEDULE=IFCCOSTSCHEDULE;var IFCCOSTVALUE=602808272;exports.IFCCOSTVALUE=IFCCOSTVALUE;var IFCCOVERING=1973544240;exports.IFCCOVERING=IFCCOVERING;var IFCCOVERINGTYPE=1916426348;exports.IFCCOVERINGTYPE=IFCCOVERINGTYPE;var IFCCREWRESOURCE=3295246426;exports.IFCCREWRESOURCE=IFCCREWRESOURCE;var IFCCREWRESOURCETYPE=1815067380;exports.IFCCREWRESOURCETYPE=IFCCREWRESOURCETYPE;var IFCCSGPRIMITIVE3D=2506170314;exports.IFCCSGPRIMITIVE3D=IFCCSGPRIMITIVE3D;var IFCCSGSOLID=2147822146;exports.IFCCSGSOLID=IFCCSGSOLID;var IFCCURRENCYRELATIONSHIP=539742890;exports.IFCCURRENCYRELATIONSHIP=IFCCURRENCYRELATIONSHIP;var IFCCURTAINWALL=3495092785;exports.IFCCURTAINWALL=IFCCURTAINWALL;var IFCCURTAINWALLTYPE=1457835157;exports.IFCCURTAINWALLTYPE=IFCCURTAINWALLTYPE;var IFCCURVE=2601014836;exports.IFCCURVE=IFCCURVE;var IFCCURVEBOUNDEDPLANE=2827736869;exports.IFCCURVEBOUNDEDPLANE=IFCCURVEBOUNDEDPLANE;var IFCCURVEBOUNDEDSURFACE=2629017746;exports.IFCCURVEBOUNDEDSURFACE=IFCCURVEBOUNDEDSURFACE;var IFCCURVESEGMENT2D=1186437898;exports.IFCCURVESEGMENT2D=IFCCURVESEGMENT2D;var IFCCURVESTYLE=3800577675;exports.IFCCURVESTYLE=IFCCURVESTYLE;var IFCCURVESTYLEFONT=1105321065;exports.IFCCURVESTYLEFONT=IFCCURVESTYLEFONT;var IFCCURVESTYLEFONTANDSCALING=2367409068;exports.IFCCURVESTYLEFONTANDSCALING=IFCCURVESTYLEFONTANDSCALING;var IFCCURVESTYLEFONTPATTERN=3510044353;exports.IFCCURVESTYLEFONTPATTERN=IFCCURVESTYLEFONTPATTERN;var IFCCYLINDRICALSURFACE=1213902940;exports.IFCCYLINDRICALSURFACE=IFCCYLINDRICALSURFACE;var IFCDAMPER=4074379575;exports.IFCDAMPER=IFCDAMPER;var IFCDAMPERTYPE=3961806047;exports.IFCDAMPERTYPE=IFCDAMPERTYPE;var IFCDEEPFOUNDATION=3426335179;exports.IFCDEEPFOUNDATION=IFCDEEPFOUNDATION;var IFCDEEPFOUNDATIONTYPE=1306400036;exports.IFCDEEPFOUNDATIONTYPE=IFCDEEPFOUNDATIONTYPE;var IFCDERIVEDPROFILEDEF=3632507154;exports.IFCDERIVEDPROFILEDEF=IFCDERIVEDPROFILEDEF;var IFCDERIVEDUNIT=1765591967;exports.IFCDERIVEDUNIT=IFCDERIVEDUNIT;var IFCDERIVEDUNITELEMENT=1045800335;exports.IFCDERIVEDUNITELEMENT=IFCDERIVEDUNITELEMENT;var IFCDIMENSIONALEXPONENTS=2949456006;exports.IFCDIMENSIONALEXPONENTS=IFCDIMENSIONALEXPONENTS;var IFCDIRECTION=32440307;exports.IFCDIRECTION=IFCDIRECTION;var IFCDISCRETEACCESSORY=1335981549;exports.IFCDISCRETEACCESSORY=IFCDISCRETEACCESSORY;var IFCDISCRETEACCESSORYTYPE=2635815018;exports.IFCDISCRETEACCESSORYTYPE=IFCDISCRETEACCESSORYTYPE;var IFCDISTANCEEXPRESSION=1945343521;exports.IFCDISTANCEEXPRESSION=IFCDISTANCEEXPRESSION;var IFCDISTRIBUTIONCHAMBERELEMENT=1052013943;exports.IFCDISTRIBUTIONCHAMBERELEMENT=IFCDISTRIBUTIONCHAMBERELEMENT;var IFCDISTRIBUTIONCHAMBERELEMENTTYPE=1599208980;exports.IFCDISTRIBUTIONCHAMBERELEMENTTYPE=IFCDISTRIBUTIONCHAMBERELEMENTTYPE;var IFCDISTRIBUTIONCIRCUIT=562808652;exports.IFCDISTRIBUTIONCIRCUIT=IFCDISTRIBUTIONCIRCUIT;var IFCDISTRIBUTIONCONTROLELEMENT=1062813311;exports.IFCDISTRIBUTIONCONTROLELEMENT=IFCDISTRIBUTIONCONTROLELEMENT;var IFCDISTRIBUTIONCONTROLELEMENTTYPE=2063403501;exports.IFCDISTRIBUTIONCONTROLELEMENTTYPE=IFCDISTRIBUTIONCONTROLELEMENTTYPE;var IFCDISTRIBUTIONELEMENT=1945004755;exports.IFCDISTRIBUTIONELEMENT=IFCDISTRIBUTIONELEMENT;var IFCDISTRIBUTIONELEMENTTYPE=3256556792;exports.IFCDISTRIBUTIONELEMENTTYPE=IFCDISTRIBUTIONELEMENTTYPE;var IFCDISTRIBUTIONFLOWELEMENT=3040386961;exports.IFCDISTRIBUTIONFLOWELEMENT=IFCDISTRIBUTIONFLOWELEMENT;var IFCDISTRIBUTIONFLOWELEMENTTYPE=3849074793;exports.IFCDISTRIBUTIONFLOWELEMENTTYPE=IFCDISTRIBUTIONFLOWELEMENTTYPE;var IFCDISTRIBUTIONPORT=3041715199;exports.IFCDISTRIBUTIONPORT=IFCDISTRIBUTIONPORT;var IFCDISTRIBUTIONSYSTEM=3205830791;exports.IFCDISTRIBUTIONSYSTEM=IFCDISTRIBUTIONSYSTEM;var IFCDOCUMENTINFORMATION=1154170062;exports.IFCDOCUMENTINFORMATION=IFCDOCUMENTINFORMATION;var IFCDOCUMENTINFORMATIONRELATIONSHIP=770865208;exports.IFCDOCUMENTINFORMATIONRELATIONSHIP=IFCDOCUMENTINFORMATIONRELATIONSHIP;var IFCDOCUMENTREFERENCE=3732053477;exports.IFCDOCUMENTREFERENCE=IFCDOCUMENTREFERENCE;var IFCDOOR=395920057;exports.IFCDOOR=IFCDOOR;var IFCDOORLININGPROPERTIES=2963535650;exports.IFCDOORLININGPROPERTIES=IFCDOORLININGPROPERTIES;var IFCDOORPANELPROPERTIES=1714330368;exports.IFCDOORPANELPROPERTIES=IFCDOORPANELPROPERTIES;var IFCDOORSTANDARDCASE=3242481149;exports.IFCDOORSTANDARDCASE=IFCDOORSTANDARDCASE;var IFCDOORSTYLE=526551008;exports.IFCDOORSTYLE=IFCDOORSTYLE;var IFCDOORTYPE=2323601079;exports.IFCDOORTYPE=IFCDOORTYPE;var IFCDRAUGHTINGPREDEFINEDCOLOUR=445594917;exports.IFCDRAUGHTINGPREDEFINEDCOLOUR=IFCDRAUGHTINGPREDEFINEDCOLOUR;var IFCDRAUGHTINGPREDEFINEDCURVEFONT=4006246654;exports.IFCDRAUGHTINGPREDEFINEDCURVEFONT=IFCDRAUGHTINGPREDEFINEDCURVEFONT;var IFCDUCTFITTING=342316401;exports.IFCDUCTFITTING=IFCDUCTFITTING;var IFCDUCTFITTINGTYPE=869906466;exports.IFCDUCTFITTINGTYPE=IFCDUCTFITTINGTYPE;var IFCDUCTSEGMENT=3518393246;exports.IFCDUCTSEGMENT=IFCDUCTSEGMENT;var IFCDUCTSEGMENTTYPE=3760055223;exports.IFCDUCTSEGMENTTYPE=IFCDUCTSEGMENTTYPE;var IFCDUCTSILENCER=1360408905;exports.IFCDUCTSILENCER=IFCDUCTSILENCER;var IFCDUCTSILENCERTYPE=2030761528;exports.IFCDUCTSILENCERTYPE=IFCDUCTSILENCERTYPE;var IFCEDGE=3900360178;exports.IFCEDGE=IFCEDGE;var IFCEDGECURVE=476780140;exports.IFCEDGECURVE=IFCEDGECURVE;var IFCEDGELOOP=1472233963;exports.IFCEDGELOOP=IFCEDGELOOP;var IFCELECTRICAPPLIANCE=1904799276;exports.IFCELECTRICAPPLIANCE=IFCELECTRICAPPLIANCE;var IFCELECTRICAPPLIANCETYPE=663422040;exports.IFCELECTRICAPPLIANCETYPE=IFCELECTRICAPPLIANCETYPE;var IFCELECTRICDISTRIBUTIONBOARD=862014818;exports.IFCELECTRICDISTRIBUTIONBOARD=IFCELECTRICDISTRIBUTIONBOARD;var IFCELECTRICDISTRIBUTIONBOARDTYPE=2417008758;exports.IFCELECTRICDISTRIBUTIONBOARDTYPE=IFCELECTRICDISTRIBUTIONBOARDTYPE;var IFCELECTRICFLOWSTORAGEDEVICE=3310460725;exports.IFCELECTRICFLOWSTORAGEDEVICE=IFCELECTRICFLOWSTORAGEDEVICE;var IFCELECTRICFLOWSTORAGEDEVICETYPE=3277789161;exports.IFCELECTRICFLOWSTORAGEDEVICETYPE=IFCELECTRICFLOWSTORAGEDEVICETYPE;var IFCELECTRICGENERATOR=264262732;exports.IFCELECTRICGENERATOR=IFCELECTRICGENERATOR;var IFCELECTRICGENERATORTYPE=1534661035;exports.IFCELECTRICGENERATORTYPE=IFCELECTRICGENERATORTYPE;var IFCELECTRICMOTOR=402227799;exports.IFCELECTRICMOTOR=IFCELECTRICMOTOR;var IFCELECTRICMOTORTYPE=1217240411;exports.IFCELECTRICMOTORTYPE=IFCELECTRICMOTORTYPE;var IFCELECTRICTIMECONTROL=1003880860;exports.IFCELECTRICTIMECONTROL=IFCELECTRICTIMECONTROL;var IFCELECTRICTIMECONTROLTYPE=712377611;exports.IFCELECTRICTIMECONTROLTYPE=IFCELECTRICTIMECONTROLTYPE;var IFCELEMENT=1758889154;exports.IFCELEMENT=IFCELEMENT;var IFCELEMENTASSEMBLY=4123344466;exports.IFCELEMENTASSEMBLY=IFCELEMENTASSEMBLY;var IFCELEMENTASSEMBLYTYPE=2397081782;exports.IFCELEMENTASSEMBLYTYPE=IFCELEMENTASSEMBLYTYPE;var IFCELEMENTCOMPONENT=1623761950;exports.IFCELEMENTCOMPONENT=IFCELEMENTCOMPONENT;var IFCELEMENTCOMPONENTTYPE=2590856083;exports.IFCELEMENTCOMPONENTTYPE=IFCELEMENTCOMPONENTTYPE;var IFCELEMENTQUANTITY=1883228015;exports.IFCELEMENTQUANTITY=IFCELEMENTQUANTITY;var IFCELEMENTTYPE=339256511;exports.IFCELEMENTTYPE=IFCELEMENTTYPE;var IFCELEMENTARYSURFACE=2777663545;exports.IFCELEMENTARYSURFACE=IFCELEMENTARYSURFACE;var IFCELLIPSE=1704287377;exports.IFCELLIPSE=IFCELLIPSE;var IFCELLIPSEPROFILEDEF=2835456948;exports.IFCELLIPSEPROFILEDEF=IFCELLIPSEPROFILEDEF;var IFCENERGYCONVERSIONDEVICE=1658829314;exports.IFCENERGYCONVERSIONDEVICE=IFCENERGYCONVERSIONDEVICE;var IFCENERGYCONVERSIONDEVICETYPE=2107101300;exports.IFCENERGYCONVERSIONDEVICETYPE=IFCENERGYCONVERSIONDEVICETYPE;var IFCENGINE=2814081492;exports.IFCENGINE=IFCENGINE;var IFCENGINETYPE=132023988;exports.IFCENGINETYPE=IFCENGINETYPE;var IFCEVAPORATIVECOOLER=3747195512;exports.IFCEVAPORATIVECOOLER=IFCEVAPORATIVECOOLER;var IFCEVAPORATIVECOOLERTYPE=3174744832;exports.IFCEVAPORATIVECOOLERTYPE=IFCEVAPORATIVECOOLERTYPE;var IFCEVAPORATOR=484807127;exports.IFCEVAPORATOR=IFCEVAPORATOR;var IFCEVAPORATORTYPE=3390157468;exports.IFCEVAPORATORTYPE=IFCEVAPORATORTYPE;var IFCEVENT=4148101412;exports.IFCEVENT=IFCEVENT;var IFCEVENTTIME=211053100;exports.IFCEVENTTIME=IFCEVENTTIME;var IFCEVENTTYPE=4024345920;exports.IFCEVENTTYPE=IFCEVENTTYPE;var IFCEXTENDEDPROPERTIES=297599258;exports.IFCEXTENDEDPROPERTIES=IFCEXTENDEDPROPERTIES;var IFCEXTERNALINFORMATION=4294318154;exports.IFCEXTERNALINFORMATION=IFCEXTERNALINFORMATION;var IFCEXTERNALREFERENCE=3200245327;exports.IFCEXTERNALREFERENCE=IFCEXTERNALREFERENCE;var IFCEXTERNALREFERENCERELATIONSHIP=1437805879;exports.IFCEXTERNALREFERENCERELATIONSHIP=IFCEXTERNALREFERENCERELATIONSHIP;var IFCEXTERNALSPATIALELEMENT=1209101575;exports.IFCEXTERNALSPATIALELEMENT=IFCEXTERNALSPATIALELEMENT;var IFCEXTERNALSPATIALSTRUCTUREELEMENT=2853485674;exports.IFCEXTERNALSPATIALSTRUCTUREELEMENT=IFCEXTERNALSPATIALSTRUCTUREELEMENT;var IFCEXTERNALLYDEFINEDHATCHSTYLE=2242383968;exports.IFCEXTERNALLYDEFINEDHATCHSTYLE=IFCEXTERNALLYDEFINEDHATCHSTYLE;var IFCEXTERNALLYDEFINEDSURFACESTYLE=1040185647;exports.IFCEXTERNALLYDEFINEDSURFACESTYLE=IFCEXTERNALLYDEFINEDSURFACESTYLE;var IFCEXTERNALLYDEFINEDTEXTFONT=3548104201;exports.IFCEXTERNALLYDEFINEDTEXTFONT=IFCEXTERNALLYDEFINEDTEXTFONT;var IFCEXTRUDEDAREASOLID=477187591;exports.IFCEXTRUDEDAREASOLID=IFCEXTRUDEDAREASOLID;var IFCEXTRUDEDAREASOLIDTAPERED=2804161546;exports.IFCEXTRUDEDAREASOLIDTAPERED=IFCEXTRUDEDAREASOLIDTAPERED;var IFCFACE=2556980723;exports.IFCFACE=IFCFACE;var IFCFACEBASEDSURFACEMODEL=2047409740;exports.IFCFACEBASEDSURFACEMODEL=IFCFACEBASEDSURFACEMODEL;var IFCFACEBOUND=1809719519;exports.IFCFACEBOUND=IFCFACEBOUND;var IFCFACEOUTERBOUND=803316827;exports.IFCFACEOUTERBOUND=IFCFACEOUTERBOUND;var IFCFACESURFACE=3008276851;exports.IFCFACESURFACE=IFCFACESURFACE;var IFCFACETEDBREP=807026263;exports.IFCFACETEDBREP=IFCFACETEDBREP;var IFCFACETEDBREPWITHVOIDS=3737207727;exports.IFCFACETEDBREPWITHVOIDS=IFCFACETEDBREPWITHVOIDS;var IFCFACILITY=24185140;exports.IFCFACILITY=IFCFACILITY;var IFCFACILITYPART=1310830890;exports.IFCFACILITYPART=IFCFACILITYPART;var IFCFAILURECONNECTIONCONDITION=4219587988;exports.IFCFAILURECONNECTIONCONDITION=IFCFAILURECONNECTIONCONDITION;var IFCFAN=3415622556;exports.IFCFAN=IFCFAN;var IFCFANTYPE=346874300;exports.IFCFANTYPE=IFCFANTYPE;var IFCFASTENER=647756555;exports.IFCFASTENER=IFCFASTENER;var IFCFASTENERTYPE=2489546625;exports.IFCFASTENERTYPE=IFCFASTENERTYPE;var IFCFEATUREELEMENT=2827207264;exports.IFCFEATUREELEMENT=IFCFEATUREELEMENT;var IFCFEATUREELEMENTADDITION=2143335405;exports.IFCFEATUREELEMENTADDITION=IFCFEATUREELEMENTADDITION;var IFCFEATUREELEMENTSUBTRACTION=1287392070;exports.IFCFEATUREELEMENTSUBTRACTION=IFCFEATUREELEMENTSUBTRACTION;var IFCFILLAREASTYLE=738692330;exports.IFCFILLAREASTYLE=IFCFILLAREASTYLE;var IFCFILLAREASTYLEHATCHING=374418227;exports.IFCFILLAREASTYLEHATCHING=IFCFILLAREASTYLEHATCHING;var IFCFILLAREASTYLETILES=315944413;exports.IFCFILLAREASTYLETILES=IFCFILLAREASTYLETILES;var IFCFILTER=819412036;exports.IFCFILTER=IFCFILTER;var IFCFILTERTYPE=1810631287;exports.IFCFILTERTYPE=IFCFILTERTYPE;var IFCFIRESUPPRESSIONTERMINAL=1426591983;exports.IFCFIRESUPPRESSIONTERMINAL=IFCFIRESUPPRESSIONTERMINAL;var IFCFIRESUPPRESSIONTERMINALTYPE=4222183408;exports.IFCFIRESUPPRESSIONTERMINALTYPE=IFCFIRESUPPRESSIONTERMINALTYPE;var IFCFIXEDREFERENCESWEPTAREASOLID=2652556860;exports.IFCFIXEDREFERENCESWEPTAREASOLID=IFCFIXEDREFERENCESWEPTAREASOLID;var IFCFLOWCONTROLLER=2058353004;exports.IFCFLOWCONTROLLER=IFCFLOWCONTROLLER;var IFCFLOWCONTROLLERTYPE=3907093117;exports.IFCFLOWCONTROLLERTYPE=IFCFLOWCONTROLLERTYPE;var IFCFLOWFITTING=4278956645;exports.IFCFLOWFITTING=IFCFLOWFITTING;var IFCFLOWFITTINGTYPE=3198132628;exports.IFCFLOWFITTINGTYPE=IFCFLOWFITTINGTYPE;var IFCFLOWINSTRUMENT=182646315;exports.IFCFLOWINSTRUMENT=IFCFLOWINSTRUMENT;var IFCFLOWINSTRUMENTTYPE=4037862832;exports.IFCFLOWINSTRUMENTTYPE=IFCFLOWINSTRUMENTTYPE;var IFCFLOWMETER=2188021234;exports.IFCFLOWMETER=IFCFLOWMETER;var IFCFLOWMETERTYPE=3815607619;exports.IFCFLOWMETERTYPE=IFCFLOWMETERTYPE;var IFCFLOWMOVINGDEVICE=3132237377;exports.IFCFLOWMOVINGDEVICE=IFCFLOWMOVINGDEVICE;var IFCFLOWMOVINGDEVICETYPE=1482959167;exports.IFCFLOWMOVINGDEVICETYPE=IFCFLOWMOVINGDEVICETYPE;var IFCFLOWSEGMENT=987401354;exports.IFCFLOWSEGMENT=IFCFLOWSEGMENT;var IFCFLOWSEGMENTTYPE=1834744321;exports.IFCFLOWSEGMENTTYPE=IFCFLOWSEGMENTTYPE;var IFCFLOWSTORAGEDEVICE=707683696;exports.IFCFLOWSTORAGEDEVICE=IFCFLOWSTORAGEDEVICE;var IFCFLOWSTORAGEDEVICETYPE=1339347760;exports.IFCFLOWSTORAGEDEVICETYPE=IFCFLOWSTORAGEDEVICETYPE;var IFCFLOWTERMINAL=2223149337;exports.IFCFLOWTERMINAL=IFCFLOWTERMINAL;var IFCFLOWTERMINALTYPE=2297155007;exports.IFCFLOWTERMINALTYPE=IFCFLOWTERMINALTYPE;var IFCFLOWTREATMENTDEVICE=3508470533;exports.IFCFLOWTREATMENTDEVICE=IFCFLOWTREATMENTDEVICE;var IFCFLOWTREATMENTDEVICETYPE=3009222698;exports.IFCFLOWTREATMENTDEVICETYPE=IFCFLOWTREATMENTDEVICETYPE;var IFCFOOTING=900683007;exports.IFCFOOTING=IFCFOOTING;var IFCFOOTINGTYPE=1893162501;exports.IFCFOOTINGTYPE=IFCFOOTINGTYPE;var IFCFURNISHINGELEMENT=263784265;exports.IFCFURNISHINGELEMENT=IFCFURNISHINGELEMENT;var IFCFURNISHINGELEMENTTYPE=4238390223;exports.IFCFURNISHINGELEMENTTYPE=IFCFURNISHINGELEMENTTYPE;var IFCFURNITURE=1509553395;exports.IFCFURNITURE=IFCFURNITURE;var IFCFURNITURETYPE=1268542332;exports.IFCFURNITURETYPE=IFCFURNITURETYPE;var IFCGEOGRAPHICELEMENT=3493046030;exports.IFCGEOGRAPHICELEMENT=IFCGEOGRAPHICELEMENT;var IFCGEOGRAPHICELEMENTTYPE=4095422895;exports.IFCGEOGRAPHICELEMENTTYPE=IFCGEOGRAPHICELEMENTTYPE;var IFCGEOMETRICCURVESET=987898635;exports.IFCGEOMETRICCURVESET=IFCGEOMETRICCURVESET;var IFCGEOMETRICREPRESENTATIONCONTEXT=3448662350;exports.IFCGEOMETRICREPRESENTATIONCONTEXT=IFCGEOMETRICREPRESENTATIONCONTEXT;var IFCGEOMETRICREPRESENTATIONITEM=2453401579;exports.IFCGEOMETRICREPRESENTATIONITEM=IFCGEOMETRICREPRESENTATIONITEM;var IFCGEOMETRICREPRESENTATIONSUBCONTEXT=4142052618;exports.IFCGEOMETRICREPRESENTATIONSUBCONTEXT=IFCGEOMETRICREPRESENTATIONSUBCONTEXT;var IFCGEOMETRICSET=3590301190;exports.IFCGEOMETRICSET=IFCGEOMETRICSET;var IFCGRID=3009204131;exports.IFCGRID=IFCGRID;var IFCGRIDAXIS=852622518;exports.IFCGRIDAXIS=IFCGRIDAXIS;var IFCGRIDPLACEMENT=178086475;exports.IFCGRIDPLACEMENT=IFCGRIDPLACEMENT;var IFCGROUP=2706460486;exports.IFCGROUP=IFCGROUP;var IFCHALFSPACESOLID=812098782;exports.IFCHALFSPACESOLID=IFCHALFSPACESOLID;var IFCHEATEXCHANGER=3319311131;exports.IFCHEATEXCHANGER=IFCHEATEXCHANGER;var IFCHEATEXCHANGERTYPE=1251058090;exports.IFCHEATEXCHANGERTYPE=IFCHEATEXCHANGERTYPE;var IFCHUMIDIFIER=2068733104;exports.IFCHUMIDIFIER=IFCHUMIDIFIER;var IFCHUMIDIFIERTYPE=1806887404;exports.IFCHUMIDIFIERTYPE=IFCHUMIDIFIERTYPE;var IFCISHAPEPROFILEDEF=1484403080;exports.IFCISHAPEPROFILEDEF=IFCISHAPEPROFILEDEF;var IFCIMAGETEXTURE=3905492369;exports.IFCIMAGETEXTURE=IFCIMAGETEXTURE;var IFCINDEXEDCOLOURMAP=3570813810;exports.IFCINDEXEDCOLOURMAP=IFCINDEXEDCOLOURMAP;var IFCINDEXEDPOLYCURVE=2571569899;exports.IFCINDEXEDPOLYCURVE=IFCINDEXEDPOLYCURVE;var IFCINDEXEDPOLYGONALFACE=178912537;exports.IFCINDEXEDPOLYGONALFACE=IFCINDEXEDPOLYGONALFACE;var IFCINDEXEDPOLYGONALFACEWITHVOIDS=2294589976;exports.IFCINDEXEDPOLYGONALFACEWITHVOIDS=IFCINDEXEDPOLYGONALFACEWITHVOIDS;var IFCINDEXEDTEXTUREMAP=1437953363;exports.IFCINDEXEDTEXTUREMAP=IFCINDEXEDTEXTUREMAP;var IFCINDEXEDTRIANGLETEXTUREMAP=2133299955;exports.IFCINDEXEDTRIANGLETEXTUREMAP=IFCINDEXEDTRIANGLETEXTUREMAP;var IFCINTERCEPTOR=4175244083;exports.IFCINTERCEPTOR=IFCINTERCEPTOR;var IFCINTERCEPTORTYPE=3946677679;exports.IFCINTERCEPTORTYPE=IFCINTERCEPTORTYPE;var IFCINTERSECTIONCURVE=3113134337;exports.IFCINTERSECTIONCURVE=IFCINTERSECTIONCURVE;var IFCINVENTORY=2391368822;exports.IFCINVENTORY=IFCINVENTORY;var IFCIRREGULARTIMESERIES=3741457305;exports.IFCIRREGULARTIMESERIES=IFCIRREGULARTIMESERIES;var IFCIRREGULARTIMESERIESVALUE=3020489413;exports.IFCIRREGULARTIMESERIESVALUE=IFCIRREGULARTIMESERIESVALUE;var IFCJUNCTIONBOX=2176052936;exports.IFCJUNCTIONBOX=IFCJUNCTIONBOX;var IFCJUNCTIONBOXTYPE=4288270099;exports.IFCJUNCTIONBOXTYPE=IFCJUNCTIONBOXTYPE;var IFCLSHAPEPROFILEDEF=572779678;exports.IFCLSHAPEPROFILEDEF=IFCLSHAPEPROFILEDEF;var IFCLABORRESOURCE=3827777499;exports.IFCLABORRESOURCE=IFCLABORRESOURCE;var IFCLABORRESOURCETYPE=428585644;exports.IFCLABORRESOURCETYPE=IFCLABORRESOURCETYPE;var IFCLAGTIME=1585845231;exports.IFCLAGTIME=IFCLAGTIME;var IFCLAMP=76236018;exports.IFCLAMP=IFCLAMP;var IFCLAMPTYPE=1051575348;exports.IFCLAMPTYPE=IFCLAMPTYPE;var IFCLIBRARYINFORMATION=2655187982;exports.IFCLIBRARYINFORMATION=IFCLIBRARYINFORMATION;var IFCLIBRARYREFERENCE=3452421091;exports.IFCLIBRARYREFERENCE=IFCLIBRARYREFERENCE;var IFCLIGHTDISTRIBUTIONDATA=4162380809;exports.IFCLIGHTDISTRIBUTIONDATA=IFCLIGHTDISTRIBUTIONDATA;var IFCLIGHTFIXTURE=629592764;exports.IFCLIGHTFIXTURE=IFCLIGHTFIXTURE;var IFCLIGHTFIXTURETYPE=1161773419;exports.IFCLIGHTFIXTURETYPE=IFCLIGHTFIXTURETYPE;var IFCLIGHTINTENSITYDISTRIBUTION=1566485204;exports.IFCLIGHTINTENSITYDISTRIBUTION=IFCLIGHTINTENSITYDISTRIBUTION;var IFCLIGHTSOURCE=1402838566;exports.IFCLIGHTSOURCE=IFCLIGHTSOURCE;var IFCLIGHTSOURCEAMBIENT=125510826;exports.IFCLIGHTSOURCEAMBIENT=IFCLIGHTSOURCEAMBIENT;var IFCLIGHTSOURCEDIRECTIONAL=2604431987;exports.IFCLIGHTSOURCEDIRECTIONAL=IFCLIGHTSOURCEDIRECTIONAL;var IFCLIGHTSOURCEGONIOMETRIC=4266656042;exports.IFCLIGHTSOURCEGONIOMETRIC=IFCLIGHTSOURCEGONIOMETRIC;var IFCLIGHTSOURCEPOSITIONAL=1520743889;exports.IFCLIGHTSOURCEPOSITIONAL=IFCLIGHTSOURCEPOSITIONAL;var IFCLIGHTSOURCESPOT=3422422726;exports.IFCLIGHTSOURCESPOT=IFCLIGHTSOURCESPOT;var IFCLINE=1281925730;exports.IFCLINE=IFCLINE;var IFCLINESEGMENT2D=3092502836;exports.IFCLINESEGMENT2D=IFCLINESEGMENT2D;var IFCLINEARPLACEMENT=388784114;exports.IFCLINEARPLACEMENT=IFCLINEARPLACEMENT;var IFCLINEARPOSITIONINGELEMENT=1154579445;exports.IFCLINEARPOSITIONINGELEMENT=IFCLINEARPOSITIONINGELEMENT;var IFCLOCALPLACEMENT=2624227202;exports.IFCLOCALPLACEMENT=IFCLOCALPLACEMENT;var IFCLOOP=1008929658;exports.IFCLOOP=IFCLOOP;var IFCMANIFOLDSOLIDBREP=1425443689;exports.IFCMANIFOLDSOLIDBREP=IFCMANIFOLDSOLIDBREP;var IFCMAPCONVERSION=3057273783;exports.IFCMAPCONVERSION=IFCMAPCONVERSION;var IFCMAPPEDITEM=2347385850;exports.IFCMAPPEDITEM=IFCMAPPEDITEM;var IFCMATERIAL=1838606355;exports.IFCMATERIAL=IFCMATERIAL;var IFCMATERIALCLASSIFICATIONRELATIONSHIP=1847130766;exports.IFCMATERIALCLASSIFICATIONRELATIONSHIP=IFCMATERIALCLASSIFICATIONRELATIONSHIP;var IFCMATERIALCONSTITUENT=3708119e3;exports.IFCMATERIALCONSTITUENT=IFCMATERIALCONSTITUENT;var IFCMATERIALCONSTITUENTSET=2852063980;exports.IFCMATERIALCONSTITUENTSET=IFCMATERIALCONSTITUENTSET;var IFCMATERIALDEFINITION=760658860;exports.IFCMATERIALDEFINITION=IFCMATERIALDEFINITION;var IFCMATERIALDEFINITIONREPRESENTATION=2022407955;exports.IFCMATERIALDEFINITIONREPRESENTATION=IFCMATERIALDEFINITIONREPRESENTATION;var IFCMATERIALLAYER=248100487;exports.IFCMATERIALLAYER=IFCMATERIALLAYER;var IFCMATERIALLAYERSET=3303938423;exports.IFCMATERIALLAYERSET=IFCMATERIALLAYERSET;var IFCMATERIALLAYERSETUSAGE=1303795690;exports.IFCMATERIALLAYERSETUSAGE=IFCMATERIALLAYERSETUSAGE;var IFCMATERIALLAYERWITHOFFSETS=1847252529;exports.IFCMATERIALLAYERWITHOFFSETS=IFCMATERIALLAYERWITHOFFSETS;var IFCMATERIALLIST=2199411900;exports.IFCMATERIALLIST=IFCMATERIALLIST;var IFCMATERIALPROFILE=2235152071;exports.IFCMATERIALPROFILE=IFCMATERIALPROFILE;var IFCMATERIALPROFILESET=164193824;exports.IFCMATERIALPROFILESET=IFCMATERIALPROFILESET;var IFCMATERIALPROFILESETUSAGE=3079605661;exports.IFCMATERIALPROFILESETUSAGE=IFCMATERIALPROFILESETUSAGE;var IFCMATERIALPROFILESETUSAGETAPERING=3404854881;exports.IFCMATERIALPROFILESETUSAGETAPERING=IFCMATERIALPROFILESETUSAGETAPERING;var IFCMATERIALPROFILEWITHOFFSETS=552965576;exports.IFCMATERIALPROFILEWITHOFFSETS=IFCMATERIALPROFILEWITHOFFSETS;var IFCMATERIALPROPERTIES=3265635763;exports.IFCMATERIALPROPERTIES=IFCMATERIALPROPERTIES;var IFCMATERIALRELATIONSHIP=853536259;exports.IFCMATERIALRELATIONSHIP=IFCMATERIALRELATIONSHIP;var IFCMATERIALUSAGEDEFINITION=1507914824;exports.IFCMATERIALUSAGEDEFINITION=IFCMATERIALUSAGEDEFINITION;var IFCMEASUREWITHUNIT=2597039031;exports.IFCMEASUREWITHUNIT=IFCMEASUREWITHUNIT;var IFCMECHANICALFASTENER=377706215;exports.IFCMECHANICALFASTENER=IFCMECHANICALFASTENER;var IFCMECHANICALFASTENERTYPE=2108223431;exports.IFCMECHANICALFASTENERTYPE=IFCMECHANICALFASTENERTYPE;var IFCMEDICALDEVICE=1437502449;exports.IFCMEDICALDEVICE=IFCMEDICALDEVICE;var IFCMEDICALDEVICETYPE=1114901282;exports.IFCMEDICALDEVICETYPE=IFCMEDICALDEVICETYPE;var IFCMEMBER=1073191201;exports.IFCMEMBER=IFCMEMBER;var IFCMEMBERSTANDARDCASE=1911478936;exports.IFCMEMBERSTANDARDCASE=IFCMEMBERSTANDARDCASE;var IFCMEMBERTYPE=3181161470;exports.IFCMEMBERTYPE=IFCMEMBERTYPE;var IFCMETRIC=3368373690;exports.IFCMETRIC=IFCMETRIC;var IFCMIRROREDPROFILEDEF=2998442950;exports.IFCMIRROREDPROFILEDEF=IFCMIRROREDPROFILEDEF;var IFCMONETARYUNIT=2706619895;exports.IFCMONETARYUNIT=IFCMONETARYUNIT;var IFCMOTORCONNECTION=2474470126;exports.IFCMOTORCONNECTION=IFCMOTORCONNECTION;var IFCMOTORCONNECTIONTYPE=977012517;exports.IFCMOTORCONNECTIONTYPE=IFCMOTORCONNECTIONTYPE;var IFCNAMEDUNIT=1918398963;exports.IFCNAMEDUNIT=IFCNAMEDUNIT;var IFCOBJECT=3888040117;exports.IFCOBJECT=IFCOBJECT;var IFCOBJECTDEFINITION=219451334;exports.IFCOBJECTDEFINITION=IFCOBJECTDEFINITION;var IFCOBJECTPLACEMENT=3701648758;exports.IFCOBJECTPLACEMENT=IFCOBJECTPLACEMENT;var IFCOBJECTIVE=2251480897;exports.IFCOBJECTIVE=IFCOBJECTIVE;var IFCOCCUPANT=4143007308;exports.IFCOCCUPANT=IFCOCCUPANT;var IFCOFFSETCURVE=590820931;exports.IFCOFFSETCURVE=IFCOFFSETCURVE;var IFCOFFSETCURVE2D=3388369263;exports.IFCOFFSETCURVE2D=IFCOFFSETCURVE2D;var IFCOFFSETCURVE3D=3505215534;exports.IFCOFFSETCURVE3D=IFCOFFSETCURVE3D;var IFCOFFSETCURVEBYDISTANCES=2485787929;exports.IFCOFFSETCURVEBYDISTANCES=IFCOFFSETCURVEBYDISTANCES;var IFCOPENSHELL=2665983363;exports.IFCOPENSHELL=IFCOPENSHELL;var IFCOPENINGELEMENT=3588315303;exports.IFCOPENINGELEMENT=IFCOPENINGELEMENT;var IFCOPENINGSTANDARDCASE=3079942009;exports.IFCOPENINGSTANDARDCASE=IFCOPENINGSTANDARDCASE;var IFCORGANIZATION=4251960020;exports.IFCORGANIZATION=IFCORGANIZATION;var IFCORGANIZATIONRELATIONSHIP=1411181986;exports.IFCORGANIZATIONRELATIONSHIP=IFCORGANIZATIONRELATIONSHIP;var IFCORIENTATIONEXPRESSION=643959842;exports.IFCORIENTATIONEXPRESSION=IFCORIENTATIONEXPRESSION;var IFCORIENTEDEDGE=1029017970;exports.IFCORIENTEDEDGE=IFCORIENTEDEDGE;var IFCOUTERBOUNDARYCURVE=144952367;exports.IFCOUTERBOUNDARYCURVE=IFCOUTERBOUNDARYCURVE;var IFCOUTLET=3694346114;exports.IFCOUTLET=IFCOUTLET;var IFCOUTLETTYPE=2837617999;exports.IFCOUTLETTYPE=IFCOUTLETTYPE;var IFCOWNERHISTORY=1207048766;exports.IFCOWNERHISTORY=IFCOWNERHISTORY;var IFCPARAMETERIZEDPROFILEDEF=2529465313;exports.IFCPARAMETERIZEDPROFILEDEF=IFCPARAMETERIZEDPROFILEDEF;var IFCPATH=2519244187;exports.IFCPATH=IFCPATH;var IFCPCURVE=1682466193;exports.IFCPCURVE=IFCPCURVE;var IFCPERFORMANCEHISTORY=2382730787;exports.IFCPERFORMANCEHISTORY=IFCPERFORMANCEHISTORY;var IFCPERMEABLECOVERINGPROPERTIES=3566463478;exports.IFCPERMEABLECOVERINGPROPERTIES=IFCPERMEABLECOVERINGPROPERTIES;var IFCPERMIT=3327091369;exports.IFCPERMIT=IFCPERMIT;var IFCPERSON=2077209135;exports.IFCPERSON=IFCPERSON;var IFCPERSONANDORGANIZATION=101040310;exports.IFCPERSONANDORGANIZATION=IFCPERSONANDORGANIZATION;var IFCPHYSICALCOMPLEXQUANTITY=3021840470;exports.IFCPHYSICALCOMPLEXQUANTITY=IFCPHYSICALCOMPLEXQUANTITY;var IFCPHYSICALQUANTITY=2483315170;exports.IFCPHYSICALQUANTITY=IFCPHYSICALQUANTITY;var IFCPHYSICALSIMPLEQUANTITY=2226359599;exports.IFCPHYSICALSIMPLEQUANTITY=IFCPHYSICALSIMPLEQUANTITY;var IFCPILE=1687234759;exports.IFCPILE=IFCPILE;var IFCPILETYPE=1158309216;exports.IFCPILETYPE=IFCPILETYPE;var IFCPIPEFITTING=310824031;exports.IFCPIPEFITTING=IFCPIPEFITTING;var IFCPIPEFITTINGTYPE=804291784;exports.IFCPIPEFITTINGTYPE=IFCPIPEFITTINGTYPE;var IFCPIPESEGMENT=3612865200;exports.IFCPIPESEGMENT=IFCPIPESEGMENT;var IFCPIPESEGMENTTYPE=4231323485;exports.IFCPIPESEGMENTTYPE=IFCPIPESEGMENTTYPE;var IFCPIXELTEXTURE=597895409;exports.IFCPIXELTEXTURE=IFCPIXELTEXTURE;var IFCPLACEMENT=2004835150;exports.IFCPLACEMENT=IFCPLACEMENT;var IFCPLANARBOX=603570806;exports.IFCPLANARBOX=IFCPLANARBOX;var IFCPLANAREXTENT=1663979128;exports.IFCPLANAREXTENT=IFCPLANAREXTENT;var IFCPLANE=220341763;exports.IFCPLANE=IFCPLANE;var IFCPLATE=3171933400;exports.IFCPLATE=IFCPLATE;var IFCPLATESTANDARDCASE=1156407060;exports.IFCPLATESTANDARDCASE=IFCPLATESTANDARDCASE;var IFCPLATETYPE=4017108033;exports.IFCPLATETYPE=IFCPLATETYPE;var IFCPOINT=2067069095;exports.IFCPOINT=IFCPOINT;var IFCPOINTONCURVE=4022376103;exports.IFCPOINTONCURVE=IFCPOINTONCURVE;var IFCPOINTONSURFACE=1423911732;exports.IFCPOINTONSURFACE=IFCPOINTONSURFACE;var IFCPOLYLOOP=2924175390;exports.IFCPOLYLOOP=IFCPOLYLOOP;var IFCPOLYGONALBOUNDEDHALFSPACE=2775532180;exports.IFCPOLYGONALBOUNDEDHALFSPACE=IFCPOLYGONALBOUNDEDHALFSPACE;var IFCPOLYGONALFACESET=2839578677;exports.IFCPOLYGONALFACESET=IFCPOLYGONALFACESET;var IFCPOLYLINE=3724593414;exports.IFCPOLYLINE=IFCPOLYLINE;var IFCPORT=3740093272;exports.IFCPORT=IFCPORT;var IFCPOSITIONINGELEMENT=1946335990;exports.IFCPOSITIONINGELEMENT=IFCPOSITIONINGELEMENT;var IFCPOSTALADDRESS=3355820592;exports.IFCPOSTALADDRESS=IFCPOSTALADDRESS;var IFCPREDEFINEDCOLOUR=759155922;exports.IFCPREDEFINEDCOLOUR=IFCPREDEFINEDCOLOUR;var IFCPREDEFINEDCURVEFONT=2559016684;exports.IFCPREDEFINEDCURVEFONT=IFCPREDEFINEDCURVEFONT;var IFCPREDEFINEDITEM=3727388367;exports.IFCPREDEFINEDITEM=IFCPREDEFINEDITEM;var IFCPREDEFINEDPROPERTIES=3778827333;exports.IFCPREDEFINEDPROPERTIES=IFCPREDEFINEDPROPERTIES;var IFCPREDEFINEDPROPERTYSET=3967405729;exports.IFCPREDEFINEDPROPERTYSET=IFCPREDEFINEDPROPERTYSET;var IFCPREDEFINEDTEXTFONT=1775413392;exports.IFCPREDEFINEDTEXTFONT=IFCPREDEFINEDTEXTFONT;var IFCPRESENTATIONITEM=677532197;exports.IFCPRESENTATIONITEM=IFCPRESENTATIONITEM;var IFCPRESENTATIONLAYERASSIGNMENT=2022622350;exports.IFCPRESENTATIONLAYERASSIGNMENT=IFCPRESENTATIONLAYERASSIGNMENT;var IFCPRESENTATIONLAYERWITHSTYLE=1304840413;exports.IFCPRESENTATIONLAYERWITHSTYLE=IFCPRESENTATIONLAYERWITHSTYLE;var IFCPRESENTATIONSTYLE=3119450353;exports.IFCPRESENTATIONSTYLE=IFCPRESENTATIONSTYLE;var IFCPRESENTATIONSTYLEASSIGNMENT=2417041796;exports.IFCPRESENTATIONSTYLEASSIGNMENT=IFCPRESENTATIONSTYLEASSIGNMENT;var IFCPROCEDURE=2744685151;exports.IFCPROCEDURE=IFCPROCEDURE;var IFCPROCEDURETYPE=569719735;exports.IFCPROCEDURETYPE=IFCPROCEDURETYPE;var IFCPROCESS=2945172077;exports.IFCPROCESS=IFCPROCESS;var IFCPRODUCT=4208778838;exports.IFCPRODUCT=IFCPRODUCT;var IFCPRODUCTDEFINITIONSHAPE=673634403;exports.IFCPRODUCTDEFINITIONSHAPE=IFCPRODUCTDEFINITIONSHAPE;var IFCPRODUCTREPRESENTATION=2095639259;exports.IFCPRODUCTREPRESENTATION=IFCPRODUCTREPRESENTATION;var IFCPROFILEDEF=3958567839;exports.IFCPROFILEDEF=IFCPROFILEDEF;var IFCPROFILEPROPERTIES=2802850158;exports.IFCPROFILEPROPERTIES=IFCPROFILEPROPERTIES;var IFCPROJECT=103090709;exports.IFCPROJECT=IFCPROJECT;var IFCPROJECTLIBRARY=653396225;exports.IFCPROJECTLIBRARY=IFCPROJECTLIBRARY;var IFCPROJECTORDER=2904328755;exports.IFCPROJECTORDER=IFCPROJECTORDER;var IFCPROJECTEDCRS=3843373140;exports.IFCPROJECTEDCRS=IFCPROJECTEDCRS;var IFCPROJECTIONELEMENT=3651124850;exports.IFCPROJECTIONELEMENT=IFCPROJECTIONELEMENT;var IFCPROPERTY=2598011224;exports.IFCPROPERTY=IFCPROPERTY;var IFCPROPERTYABSTRACTION=986844984;exports.IFCPROPERTYABSTRACTION=IFCPROPERTYABSTRACTION;var IFCPROPERTYBOUNDEDVALUE=871118103;exports.IFCPROPERTYBOUNDEDVALUE=IFCPROPERTYBOUNDEDVALUE;var IFCPROPERTYDEFINITION=1680319473;exports.IFCPROPERTYDEFINITION=IFCPROPERTYDEFINITION;var IFCPROPERTYDEPENDENCYRELATIONSHIP=148025276;exports.IFCPROPERTYDEPENDENCYRELATIONSHIP=IFCPROPERTYDEPENDENCYRELATIONSHIP;var IFCPROPERTYENUMERATEDVALUE=4166981789;exports.IFCPROPERTYENUMERATEDVALUE=IFCPROPERTYENUMERATEDVALUE;var IFCPROPERTYENUMERATION=3710013099;exports.IFCPROPERTYENUMERATION=IFCPROPERTYENUMERATION;var IFCPROPERTYLISTVALUE=2752243245;exports.IFCPROPERTYLISTVALUE=IFCPROPERTYLISTVALUE;var IFCPROPERTYREFERENCEVALUE=941946838;exports.IFCPROPERTYREFERENCEVALUE=IFCPROPERTYREFERENCEVALUE;var IFCPROPERTYSET=1451395588;exports.IFCPROPERTYSET=IFCPROPERTYSET;var IFCPROPERTYSETDEFINITION=3357820518;exports.IFCPROPERTYSETDEFINITION=IFCPROPERTYSETDEFINITION;var IFCPROPERTYSETTEMPLATE=492091185;exports.IFCPROPERTYSETTEMPLATE=IFCPROPERTYSETTEMPLATE;var IFCPROPERTYSINGLEVALUE=3650150729;exports.IFCPROPERTYSINGLEVALUE=IFCPROPERTYSINGLEVALUE;var IFCPROPERTYTABLEVALUE=110355661;exports.IFCPROPERTYTABLEVALUE=IFCPROPERTYTABLEVALUE;var IFCPROPERTYTEMPLATE=3521284610;exports.IFCPROPERTYTEMPLATE=IFCPROPERTYTEMPLATE;var IFCPROPERTYTEMPLATEDEFINITION=1482703590;exports.IFCPROPERTYTEMPLATEDEFINITION=IFCPROPERTYTEMPLATEDEFINITION;var IFCPROTECTIVEDEVICE=738039164;exports.IFCPROTECTIVEDEVICE=IFCPROTECTIVEDEVICE;var IFCPROTECTIVEDEVICETRIPPINGUNIT=2295281155;exports.IFCPROTECTIVEDEVICETRIPPINGUNIT=IFCPROTECTIVEDEVICETRIPPINGUNIT;var IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=655969474;exports.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE=IFCPROTECTIVEDEVICETRIPPINGUNITTYPE;var IFCPROTECTIVEDEVICETYPE=1842657554;exports.IFCPROTECTIVEDEVICETYPE=IFCPROTECTIVEDEVICETYPE;var IFCPROXY=3219374653;exports.IFCPROXY=IFCPROXY;var IFCPUMP=90941305;exports.IFCPUMP=IFCPUMP;var IFCPUMPTYPE=2250791053;exports.IFCPUMPTYPE=IFCPUMPTYPE;var IFCQUANTITYAREA=2044713172;exports.IFCQUANTITYAREA=IFCQUANTITYAREA;var IFCQUANTITYCOUNT=2093928680;exports.IFCQUANTITYCOUNT=IFCQUANTITYCOUNT;var IFCQUANTITYLENGTH=931644368;exports.IFCQUANTITYLENGTH=IFCQUANTITYLENGTH;var IFCQUANTITYSET=2090586900;exports.IFCQUANTITYSET=IFCQUANTITYSET;var IFCQUANTITYTIME=3252649465;exports.IFCQUANTITYTIME=IFCQUANTITYTIME;var IFCQUANTITYVOLUME=2405470396;exports.IFCQUANTITYVOLUME=IFCQUANTITYVOLUME;var IFCQUANTITYWEIGHT=825690147;exports.IFCQUANTITYWEIGHT=IFCQUANTITYWEIGHT;var IFCRAILING=2262370178;exports.IFCRAILING=IFCRAILING;var IFCRAILINGTYPE=2893384427;exports.IFCRAILINGTYPE=IFCRAILINGTYPE;var IFCRAMP=3024970846;exports.IFCRAMP=IFCRAMP;var IFCRAMPFLIGHT=3283111854;exports.IFCRAMPFLIGHT=IFCRAMPFLIGHT;var IFCRAMPFLIGHTTYPE=2324767716;exports.IFCRAMPFLIGHTTYPE=IFCRAMPFLIGHTTYPE;var IFCRAMPTYPE=1469900589;exports.IFCRAMPTYPE=IFCRAMPTYPE;var IFCRATIONALBSPLINECURVEWITHKNOTS=1232101972;exports.IFCRATIONALBSPLINECURVEWITHKNOTS=IFCRATIONALBSPLINECURVEWITHKNOTS;var IFCRATIONALBSPLINESURFACEWITHKNOTS=683857671;exports.IFCRATIONALBSPLINESURFACEWITHKNOTS=IFCRATIONALBSPLINESURFACEWITHKNOTS;var IFCRECTANGLEHOLLOWPROFILEDEF=2770003689;exports.IFCRECTANGLEHOLLOWPROFILEDEF=IFCRECTANGLEHOLLOWPROFILEDEF;var IFCRECTANGLEPROFILEDEF=3615266464;exports.IFCRECTANGLEPROFILEDEF=IFCRECTANGLEPROFILEDEF;var IFCRECTANGULARPYRAMID=2798486643;exports.IFCRECTANGULARPYRAMID=IFCRECTANGULARPYRAMID;var IFCRECTANGULARTRIMMEDSURFACE=3454111270;exports.IFCRECTANGULARTRIMMEDSURFACE=IFCRECTANGULARTRIMMEDSURFACE;var IFCRECURRENCEPATTERN=3915482550;exports.IFCRECURRENCEPATTERN=IFCRECURRENCEPATTERN;var IFCREFERENCE=2433181523;exports.IFCREFERENCE=IFCREFERENCE;var IFCREFERENT=4021432810;exports.IFCREFERENT=IFCREFERENT;var IFCREGULARTIMESERIES=3413951693;exports.IFCREGULARTIMESERIES=IFCREGULARTIMESERIES;var IFCREINFORCEMENTBARPROPERTIES=1580146022;exports.IFCREINFORCEMENTBARPROPERTIES=IFCREINFORCEMENTBARPROPERTIES;var IFCREINFORCEMENTDEFINITIONPROPERTIES=3765753017;exports.IFCREINFORCEMENTDEFINITIONPROPERTIES=IFCREINFORCEMENTDEFINITIONPROPERTIES;var IFCREINFORCINGBAR=979691226;exports.IFCREINFORCINGBAR=IFCREINFORCINGBAR;var IFCREINFORCINGBARTYPE=2572171363;exports.IFCREINFORCINGBARTYPE=IFCREINFORCINGBARTYPE;var IFCREINFORCINGELEMENT=3027567501;exports.IFCREINFORCINGELEMENT=IFCREINFORCINGELEMENT;var IFCREINFORCINGELEMENTTYPE=964333572;exports.IFCREINFORCINGELEMENTTYPE=IFCREINFORCINGELEMENTTYPE;var IFCREINFORCINGMESH=2320036040;exports.IFCREINFORCINGMESH=IFCREINFORCINGMESH;var IFCREINFORCINGMESHTYPE=2310774935;exports.IFCREINFORCINGMESHTYPE=IFCREINFORCINGMESHTYPE;var IFCRELAGGREGATES=160246688;exports.IFCRELAGGREGATES=IFCRELAGGREGATES;var IFCRELASSIGNS=3939117080;exports.IFCRELASSIGNS=IFCRELASSIGNS;var IFCRELASSIGNSTOACTOR=1683148259;exports.IFCRELASSIGNSTOACTOR=IFCRELASSIGNSTOACTOR;var IFCRELASSIGNSTOCONTROL=2495723537;exports.IFCRELASSIGNSTOCONTROL=IFCRELASSIGNSTOCONTROL;var IFCRELASSIGNSTOGROUP=1307041759;exports.IFCRELASSIGNSTOGROUP=IFCRELASSIGNSTOGROUP;var IFCRELASSIGNSTOGROUPBYFACTOR=1027710054;exports.IFCRELASSIGNSTOGROUPBYFACTOR=IFCRELASSIGNSTOGROUPBYFACTOR;var IFCRELASSIGNSTOPROCESS=4278684876;exports.IFCRELASSIGNSTOPROCESS=IFCRELASSIGNSTOPROCESS;var IFCRELASSIGNSTOPRODUCT=2857406711;exports.IFCRELASSIGNSTOPRODUCT=IFCRELASSIGNSTOPRODUCT;var IFCRELASSIGNSTORESOURCE=205026976;exports.IFCRELASSIGNSTORESOURCE=IFCRELASSIGNSTORESOURCE;var IFCRELASSOCIATES=1865459582;exports.IFCRELASSOCIATES=IFCRELASSOCIATES;var IFCRELASSOCIATESAPPROVAL=4095574036;exports.IFCRELASSOCIATESAPPROVAL=IFCRELASSOCIATESAPPROVAL;var IFCRELASSOCIATESCLASSIFICATION=919958153;exports.IFCRELASSOCIATESCLASSIFICATION=IFCRELASSOCIATESCLASSIFICATION;var IFCRELASSOCIATESCONSTRAINT=2728634034;exports.IFCRELASSOCIATESCONSTRAINT=IFCRELASSOCIATESCONSTRAINT;var IFCRELASSOCIATESDOCUMENT=982818633;exports.IFCRELASSOCIATESDOCUMENT=IFCRELASSOCIATESDOCUMENT;var IFCRELASSOCIATESLIBRARY=3840914261;exports.IFCRELASSOCIATESLIBRARY=IFCRELASSOCIATESLIBRARY;var IFCRELASSOCIATESMATERIAL=2655215786;exports.IFCRELASSOCIATESMATERIAL=IFCRELASSOCIATESMATERIAL;var IFCRELCONNECTS=826625072;exports.IFCRELCONNECTS=IFCRELCONNECTS;var IFCRELCONNECTSELEMENTS=1204542856;exports.IFCRELCONNECTSELEMENTS=IFCRELCONNECTSELEMENTS;var IFCRELCONNECTSPATHELEMENTS=3945020480;exports.IFCRELCONNECTSPATHELEMENTS=IFCRELCONNECTSPATHELEMENTS;var IFCRELCONNECTSPORTTOELEMENT=4201705270;exports.IFCRELCONNECTSPORTTOELEMENT=IFCRELCONNECTSPORTTOELEMENT;var IFCRELCONNECTSPORTS=3190031847;exports.IFCRELCONNECTSPORTS=IFCRELCONNECTSPORTS;var IFCRELCONNECTSSTRUCTURALACTIVITY=2127690289;exports.IFCRELCONNECTSSTRUCTURALACTIVITY=IFCRELCONNECTSSTRUCTURALACTIVITY;var IFCRELCONNECTSSTRUCTURALMEMBER=1638771189;exports.IFCRELCONNECTSSTRUCTURALMEMBER=IFCRELCONNECTSSTRUCTURALMEMBER;var IFCRELCONNECTSWITHECCENTRICITY=504942748;exports.IFCRELCONNECTSWITHECCENTRICITY=IFCRELCONNECTSWITHECCENTRICITY;var IFCRELCONNECTSWITHREALIZINGELEMENTS=3678494232;exports.IFCRELCONNECTSWITHREALIZINGELEMENTS=IFCRELCONNECTSWITHREALIZINGELEMENTS;var IFCRELCONTAINEDINSPATIALSTRUCTURE=3242617779;exports.IFCRELCONTAINEDINSPATIALSTRUCTURE=IFCRELCONTAINEDINSPATIALSTRUCTURE;var IFCRELCOVERSBLDGELEMENTS=886880790;exports.IFCRELCOVERSBLDGELEMENTS=IFCRELCOVERSBLDGELEMENTS;var IFCRELCOVERSSPACES=2802773753;exports.IFCRELCOVERSSPACES=IFCRELCOVERSSPACES;var IFCRELDECLARES=2565941209;exports.IFCRELDECLARES=IFCRELDECLARES;var IFCRELDECOMPOSES=2551354335;exports.IFCRELDECOMPOSES=IFCRELDECOMPOSES;var IFCRELDEFINES=693640335;exports.IFCRELDEFINES=IFCRELDEFINES;var IFCRELDEFINESBYOBJECT=1462361463;exports.IFCRELDEFINESBYOBJECT=IFCRELDEFINESBYOBJECT;var IFCRELDEFINESBYPROPERTIES=4186316022;exports.IFCRELDEFINESBYPROPERTIES=IFCRELDEFINESBYPROPERTIES;var IFCRELDEFINESBYTEMPLATE=307848117;exports.IFCRELDEFINESBYTEMPLATE=IFCRELDEFINESBYTEMPLATE;var IFCRELDEFINESBYTYPE=781010003;exports.IFCRELDEFINESBYTYPE=IFCRELDEFINESBYTYPE;var IFCRELFILLSELEMENT=3940055652;exports.IFCRELFILLSELEMENT=IFCRELFILLSELEMENT;var IFCRELFLOWCONTROLELEMENTS=279856033;exports.IFCRELFLOWCONTROLELEMENTS=IFCRELFLOWCONTROLELEMENTS;var IFCRELINTERFERESELEMENTS=427948657;exports.IFCRELINTERFERESELEMENTS=IFCRELINTERFERESELEMENTS;var IFCRELNESTS=3268803585;exports.IFCRELNESTS=IFCRELNESTS;var IFCRELPOSITIONS=1441486842;exports.IFCRELPOSITIONS=IFCRELPOSITIONS;var IFCRELPROJECTSELEMENT=750771296;exports.IFCRELPROJECTSELEMENT=IFCRELPROJECTSELEMENT;var IFCRELREFERENCEDINSPATIALSTRUCTURE=1245217292;exports.IFCRELREFERENCEDINSPATIALSTRUCTURE=IFCRELREFERENCEDINSPATIALSTRUCTURE;var IFCRELSEQUENCE=4122056220;exports.IFCRELSEQUENCE=IFCRELSEQUENCE;var IFCRELSERVICESBUILDINGS=366585022;exports.IFCRELSERVICESBUILDINGS=IFCRELSERVICESBUILDINGS;var IFCRELSPACEBOUNDARY=3451746338;exports.IFCRELSPACEBOUNDARY=IFCRELSPACEBOUNDARY;var IFCRELSPACEBOUNDARY1STLEVEL=3523091289;exports.IFCRELSPACEBOUNDARY1STLEVEL=IFCRELSPACEBOUNDARY1STLEVEL;var IFCRELSPACEBOUNDARY2NDLEVEL=1521410863;exports.IFCRELSPACEBOUNDARY2NDLEVEL=IFCRELSPACEBOUNDARY2NDLEVEL;var IFCRELVOIDSELEMENT=1401173127;exports.IFCRELVOIDSELEMENT=IFCRELVOIDSELEMENT;var IFCRELATIONSHIP=478536968;exports.IFCRELATIONSHIP=IFCRELATIONSHIP;var IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=816062949;exports.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT=IFCREPARAMETRISEDCOMPOSITECURVESEGMENT;var IFCREPRESENTATION=1076942058;exports.IFCREPRESENTATION=IFCREPRESENTATION;var IFCREPRESENTATIONCONTEXT=3377609919;exports.IFCREPRESENTATIONCONTEXT=IFCREPRESENTATIONCONTEXT;var IFCREPRESENTATIONITEM=3008791417;exports.IFCREPRESENTATIONITEM=IFCREPRESENTATIONITEM;var IFCREPRESENTATIONMAP=1660063152;exports.IFCREPRESENTATIONMAP=IFCREPRESENTATIONMAP;var IFCRESOURCE=2914609552;exports.IFCRESOURCE=IFCRESOURCE;var IFCRESOURCEAPPROVALRELATIONSHIP=2943643501;exports.IFCRESOURCEAPPROVALRELATIONSHIP=IFCRESOURCEAPPROVALRELATIONSHIP;var IFCRESOURCECONSTRAINTRELATIONSHIP=1608871552;exports.IFCRESOURCECONSTRAINTRELATIONSHIP=IFCRESOURCECONSTRAINTRELATIONSHIP;var IFCRESOURCELEVELRELATIONSHIP=2439245199;exports.IFCRESOURCELEVELRELATIONSHIP=IFCRESOURCELEVELRELATIONSHIP;var IFCRESOURCETIME=1042787934;exports.IFCRESOURCETIME=IFCRESOURCETIME;var IFCREVOLVEDAREASOLID=1856042241;exports.IFCREVOLVEDAREASOLID=IFCREVOLVEDAREASOLID;var IFCREVOLVEDAREASOLIDTAPERED=3243963512;exports.IFCREVOLVEDAREASOLIDTAPERED=IFCREVOLVEDAREASOLIDTAPERED;var IFCRIGHTCIRCULARCONE=4158566097;exports.IFCRIGHTCIRCULARCONE=IFCRIGHTCIRCULARCONE;var IFCRIGHTCIRCULARCYLINDER=3626867408;exports.IFCRIGHTCIRCULARCYLINDER=IFCRIGHTCIRCULARCYLINDER;var IFCROOF=2016517767;exports.IFCROOF=IFCROOF;var IFCROOFTYPE=2781568857;exports.IFCROOFTYPE=IFCROOFTYPE;var IFCROOT=2341007311;exports.IFCROOT=IFCROOT;var IFCROUNDEDRECTANGLEPROFILEDEF=2778083089;exports.IFCROUNDEDRECTANGLEPROFILEDEF=IFCROUNDEDRECTANGLEPROFILEDEF;var IFCSIUNIT=448429030;exports.IFCSIUNIT=IFCSIUNIT;var IFCSANITARYTERMINAL=3053780830;exports.IFCSANITARYTERMINAL=IFCSANITARYTERMINAL;var IFCSANITARYTERMINALTYPE=1768891740;exports.IFCSANITARYTERMINALTYPE=IFCSANITARYTERMINALTYPE;var IFCSCHEDULINGTIME=1054537805;exports.IFCSCHEDULINGTIME=IFCSCHEDULINGTIME;var IFCSEAMCURVE=2157484638;exports.IFCSEAMCURVE=IFCSEAMCURVE;var IFCSECTIONPROPERTIES=2042790032;exports.IFCSECTIONPROPERTIES=IFCSECTIONPROPERTIES;var IFCSECTIONREINFORCEMENTPROPERTIES=4165799628;exports.IFCSECTIONREINFORCEMENTPROPERTIES=IFCSECTIONREINFORCEMENTPROPERTIES;var IFCSECTIONEDSOLID=1862484736;exports.IFCSECTIONEDSOLID=IFCSECTIONEDSOLID;var IFCSECTIONEDSOLIDHORIZONTAL=1290935644;exports.IFCSECTIONEDSOLIDHORIZONTAL=IFCSECTIONEDSOLIDHORIZONTAL;var IFCSECTIONEDSPINE=1509187699;exports.IFCSECTIONEDSPINE=IFCSECTIONEDSPINE;var IFCSENSOR=4086658281;exports.IFCSENSOR=IFCSENSOR;var IFCSENSORTYPE=1783015770;exports.IFCSENSORTYPE=IFCSENSORTYPE;var IFCSHADINGDEVICE=1329646415;exports.IFCSHADINGDEVICE=IFCSHADINGDEVICE;var IFCSHADINGDEVICETYPE=4074543187;exports.IFCSHADINGDEVICETYPE=IFCSHADINGDEVICETYPE;var IFCSHAPEASPECT=867548509;exports.IFCSHAPEASPECT=IFCSHAPEASPECT;var IFCSHAPEMODEL=3982875396;exports.IFCSHAPEMODEL=IFCSHAPEMODEL;var IFCSHAPEREPRESENTATION=4240577450;exports.IFCSHAPEREPRESENTATION=IFCSHAPEREPRESENTATION;var IFCSHELLBASEDSURFACEMODEL=4124623270;exports.IFCSHELLBASEDSURFACEMODEL=IFCSHELLBASEDSURFACEMODEL;var IFCSIMPLEPROPERTY=3692461612;exports.IFCSIMPLEPROPERTY=IFCSIMPLEPROPERTY;var IFCSIMPLEPROPERTYTEMPLATE=3663146110;exports.IFCSIMPLEPROPERTYTEMPLATE=IFCSIMPLEPROPERTYTEMPLATE;var IFCSITE=4097777520;exports.IFCSITE=IFCSITE;var IFCSLAB=1529196076;exports.IFCSLAB=IFCSLAB;var IFCSLABELEMENTEDCASE=3127900445;exports.IFCSLABELEMENTEDCASE=IFCSLABELEMENTEDCASE;var IFCSLABSTANDARDCASE=3027962421;exports.IFCSLABSTANDARDCASE=IFCSLABSTANDARDCASE;var IFCSLABTYPE=2533589738;exports.IFCSLABTYPE=IFCSLABTYPE;var IFCSLIPPAGECONNECTIONCONDITION=2609359061;exports.IFCSLIPPAGECONNECTIONCONDITION=IFCSLIPPAGECONNECTIONCONDITION;var IFCSOLARDEVICE=3420628829;exports.IFCSOLARDEVICE=IFCSOLARDEVICE;var IFCSOLARDEVICETYPE=1072016465;exports.IFCSOLARDEVICETYPE=IFCSOLARDEVICETYPE;var IFCSOLIDMODEL=723233188;exports.IFCSOLIDMODEL=IFCSOLIDMODEL;var IFCSPACE=3856911033;exports.IFCSPACE=IFCSPACE;var IFCSPACEHEATER=1999602285;exports.IFCSPACEHEATER=IFCSPACEHEATER;var IFCSPACEHEATERTYPE=1305183839;exports.IFCSPACEHEATERTYPE=IFCSPACEHEATERTYPE;var IFCSPACETYPE=3812236995;exports.IFCSPACETYPE=IFCSPACETYPE;var IFCSPATIALELEMENT=1412071761;exports.IFCSPATIALELEMENT=IFCSPATIALELEMENT;var IFCSPATIALELEMENTTYPE=710998568;exports.IFCSPATIALELEMENTTYPE=IFCSPATIALELEMENTTYPE;var IFCSPATIALSTRUCTUREELEMENT=2706606064;exports.IFCSPATIALSTRUCTUREELEMENT=IFCSPATIALSTRUCTUREELEMENT;var IFCSPATIALSTRUCTUREELEMENTTYPE=3893378262;exports.IFCSPATIALSTRUCTUREELEMENTTYPE=IFCSPATIALSTRUCTUREELEMENTTYPE;var IFCSPATIALZONE=463610769;exports.IFCSPATIALZONE=IFCSPATIALZONE;var IFCSPATIALZONETYPE=2481509218;exports.IFCSPATIALZONETYPE=IFCSPATIALZONETYPE;var IFCSPHERE=451544542;exports.IFCSPHERE=IFCSPHERE;var IFCSPHERICALSURFACE=4015995234;exports.IFCSPHERICALSURFACE=IFCSPHERICALSURFACE;var IFCSTACKTERMINAL=1404847402;exports.IFCSTACKTERMINAL=IFCSTACKTERMINAL;var IFCSTACKTERMINALTYPE=3112655638;exports.IFCSTACKTERMINALTYPE=IFCSTACKTERMINALTYPE;var IFCSTAIR=331165859;exports.IFCSTAIR=IFCSTAIR;var IFCSTAIRFLIGHT=4252922144;exports.IFCSTAIRFLIGHT=IFCSTAIRFLIGHT;var IFCSTAIRFLIGHTTYPE=1039846685;exports.IFCSTAIRFLIGHTTYPE=IFCSTAIRFLIGHTTYPE;var IFCSTAIRTYPE=338393293;exports.IFCSTAIRTYPE=IFCSTAIRTYPE;var IFCSTRUCTURALACTION=682877961;exports.IFCSTRUCTURALACTION=IFCSTRUCTURALACTION;var IFCSTRUCTURALACTIVITY=3544373492;exports.IFCSTRUCTURALACTIVITY=IFCSTRUCTURALACTIVITY;var IFCSTRUCTURALANALYSISMODEL=2515109513;exports.IFCSTRUCTURALANALYSISMODEL=IFCSTRUCTURALANALYSISMODEL;var IFCSTRUCTURALCONNECTION=1179482911;exports.IFCSTRUCTURALCONNECTION=IFCSTRUCTURALCONNECTION;var IFCSTRUCTURALCONNECTIONCONDITION=2273995522;exports.IFCSTRUCTURALCONNECTIONCONDITION=IFCSTRUCTURALCONNECTIONCONDITION;var IFCSTRUCTURALCURVEACTION=1004757350;exports.IFCSTRUCTURALCURVEACTION=IFCSTRUCTURALCURVEACTION;var IFCSTRUCTURALCURVECONNECTION=4243806635;exports.IFCSTRUCTURALCURVECONNECTION=IFCSTRUCTURALCURVECONNECTION;var IFCSTRUCTURALCURVEMEMBER=214636428;exports.IFCSTRUCTURALCURVEMEMBER=IFCSTRUCTURALCURVEMEMBER;var IFCSTRUCTURALCURVEMEMBERVARYING=2445595289;exports.IFCSTRUCTURALCURVEMEMBERVARYING=IFCSTRUCTURALCURVEMEMBERVARYING;var IFCSTRUCTURALCURVEREACTION=2757150158;exports.IFCSTRUCTURALCURVEREACTION=IFCSTRUCTURALCURVEREACTION;var IFCSTRUCTURALITEM=3136571912;exports.IFCSTRUCTURALITEM=IFCSTRUCTURALITEM;var IFCSTRUCTURALLINEARACTION=1807405624;exports.IFCSTRUCTURALLINEARACTION=IFCSTRUCTURALLINEARACTION;var IFCSTRUCTURALLOAD=2162789131;exports.IFCSTRUCTURALLOAD=IFCSTRUCTURALLOAD;var IFCSTRUCTURALLOADCASE=385403989;exports.IFCSTRUCTURALLOADCASE=IFCSTRUCTURALLOADCASE;var IFCSTRUCTURALLOADCONFIGURATION=3478079324;exports.IFCSTRUCTURALLOADCONFIGURATION=IFCSTRUCTURALLOADCONFIGURATION;var IFCSTRUCTURALLOADGROUP=1252848954;exports.IFCSTRUCTURALLOADGROUP=IFCSTRUCTURALLOADGROUP;var IFCSTRUCTURALLOADLINEARFORCE=1595516126;exports.IFCSTRUCTURALLOADLINEARFORCE=IFCSTRUCTURALLOADLINEARFORCE;var IFCSTRUCTURALLOADORRESULT=609421318;exports.IFCSTRUCTURALLOADORRESULT=IFCSTRUCTURALLOADORRESULT;var IFCSTRUCTURALLOADPLANARFORCE=2668620305;exports.IFCSTRUCTURALLOADPLANARFORCE=IFCSTRUCTURALLOADPLANARFORCE;var IFCSTRUCTURALLOADSINGLEDISPLACEMENT=2473145415;exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENT=IFCSTRUCTURALLOADSINGLEDISPLACEMENT;var IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=1973038258;exports.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION=IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION;var IFCSTRUCTURALLOADSINGLEFORCE=1597423693;exports.IFCSTRUCTURALLOADSINGLEFORCE=IFCSTRUCTURALLOADSINGLEFORCE;var IFCSTRUCTURALLOADSINGLEFORCEWARPING=1190533807;exports.IFCSTRUCTURALLOADSINGLEFORCEWARPING=IFCSTRUCTURALLOADSINGLEFORCEWARPING;var IFCSTRUCTURALLOADSTATIC=2525727697;exports.IFCSTRUCTURALLOADSTATIC=IFCSTRUCTURALLOADSTATIC;var IFCSTRUCTURALLOADTEMPERATURE=3408363356;exports.IFCSTRUCTURALLOADTEMPERATURE=IFCSTRUCTURALLOADTEMPERATURE;var IFCSTRUCTURALMEMBER=530289379;exports.IFCSTRUCTURALMEMBER=IFCSTRUCTURALMEMBER;var IFCSTRUCTURALPLANARACTION=1621171031;exports.IFCSTRUCTURALPLANARACTION=IFCSTRUCTURALPLANARACTION;var IFCSTRUCTURALPOINTACTION=2082059205;exports.IFCSTRUCTURALPOINTACTION=IFCSTRUCTURALPOINTACTION;var IFCSTRUCTURALPOINTCONNECTION=734778138;exports.IFCSTRUCTURALPOINTCONNECTION=IFCSTRUCTURALPOINTCONNECTION;var IFCSTRUCTURALPOINTREACTION=1235345126;exports.IFCSTRUCTURALPOINTREACTION=IFCSTRUCTURALPOINTREACTION;var IFCSTRUCTURALREACTION=3689010777;exports.IFCSTRUCTURALREACTION=IFCSTRUCTURALREACTION;var IFCSTRUCTURALRESULTGROUP=2986769608;exports.IFCSTRUCTURALRESULTGROUP=IFCSTRUCTURALRESULTGROUP;var IFCSTRUCTURALSURFACEACTION=3657597509;exports.IFCSTRUCTURALSURFACEACTION=IFCSTRUCTURALSURFACEACTION;var IFCSTRUCTURALSURFACECONNECTION=1975003073;exports.IFCSTRUCTURALSURFACECONNECTION=IFCSTRUCTURALSURFACECONNECTION;var IFCSTRUCTURALSURFACEMEMBER=3979015343;exports.IFCSTRUCTURALSURFACEMEMBER=IFCSTRUCTURALSURFACEMEMBER;var IFCSTRUCTURALSURFACEMEMBERVARYING=2218152070;exports.IFCSTRUCTURALSURFACEMEMBERVARYING=IFCSTRUCTURALSURFACEMEMBERVARYING;var IFCSTRUCTURALSURFACEREACTION=603775116;exports.IFCSTRUCTURALSURFACEREACTION=IFCSTRUCTURALSURFACEREACTION;var IFCSTYLEMODEL=2830218821;exports.IFCSTYLEMODEL=IFCSTYLEMODEL;var IFCSTYLEDITEM=3958052878;exports.IFCSTYLEDITEM=IFCSTYLEDITEM;var IFCSTYLEDREPRESENTATION=3049322572;exports.IFCSTYLEDREPRESENTATION=IFCSTYLEDREPRESENTATION;var IFCSUBCONTRACTRESOURCE=148013059;exports.IFCSUBCONTRACTRESOURCE=IFCSUBCONTRACTRESOURCE;var IFCSUBCONTRACTRESOURCETYPE=4095615324;exports.IFCSUBCONTRACTRESOURCETYPE=IFCSUBCONTRACTRESOURCETYPE;var IFCSUBEDGE=2233826070;exports.IFCSUBEDGE=IFCSUBEDGE;var IFCSURFACE=2513912981;exports.IFCSURFACE=IFCSURFACE;var IFCSURFACECURVE=699246055;exports.IFCSURFACECURVE=IFCSURFACECURVE;var IFCSURFACECURVESWEPTAREASOLID=2028607225;exports.IFCSURFACECURVESWEPTAREASOLID=IFCSURFACECURVESWEPTAREASOLID;var IFCSURFACEFEATURE=3101698114;exports.IFCSURFACEFEATURE=IFCSURFACEFEATURE;var IFCSURFACEOFLINEAREXTRUSION=2809605785;exports.IFCSURFACEOFLINEAREXTRUSION=IFCSURFACEOFLINEAREXTRUSION;var IFCSURFACEOFREVOLUTION=4124788165;exports.IFCSURFACEOFREVOLUTION=IFCSURFACEOFREVOLUTION;var IFCSURFACEREINFORCEMENTAREA=2934153892;exports.IFCSURFACEREINFORCEMENTAREA=IFCSURFACEREINFORCEMENTAREA;var IFCSURFACESTYLE=1300840506;exports.IFCSURFACESTYLE=IFCSURFACESTYLE;var IFCSURFACESTYLELIGHTING=3303107099;exports.IFCSURFACESTYLELIGHTING=IFCSURFACESTYLELIGHTING;var IFCSURFACESTYLEREFRACTION=1607154358;exports.IFCSURFACESTYLEREFRACTION=IFCSURFACESTYLEREFRACTION;var IFCSURFACESTYLERENDERING=1878645084;exports.IFCSURFACESTYLERENDERING=IFCSURFACESTYLERENDERING;var IFCSURFACESTYLESHADING=846575682;exports.IFCSURFACESTYLESHADING=IFCSURFACESTYLESHADING;var IFCSURFACESTYLEWITHTEXTURES=1351298697;exports.IFCSURFACESTYLEWITHTEXTURES=IFCSURFACESTYLEWITHTEXTURES;var IFCSURFACETEXTURE=626085974;exports.IFCSURFACETEXTURE=IFCSURFACETEXTURE;var IFCSWEPTAREASOLID=2247615214;exports.IFCSWEPTAREASOLID=IFCSWEPTAREASOLID;var IFCSWEPTDISKSOLID=1260650574;exports.IFCSWEPTDISKSOLID=IFCSWEPTDISKSOLID;var IFCSWEPTDISKSOLIDPOLYGONAL=1096409881;exports.IFCSWEPTDISKSOLIDPOLYGONAL=IFCSWEPTDISKSOLIDPOLYGONAL;var IFCSWEPTSURFACE=230924584;exports.IFCSWEPTSURFACE=IFCSWEPTSURFACE;var IFCSWITCHINGDEVICE=1162798199;exports.IFCSWITCHINGDEVICE=IFCSWITCHINGDEVICE;var IFCSWITCHINGDEVICETYPE=2315554128;exports.IFCSWITCHINGDEVICETYPE=IFCSWITCHINGDEVICETYPE;var IFCSYSTEM=2254336722;exports.IFCSYSTEM=IFCSYSTEM;var IFCSYSTEMFURNITUREELEMENT=413509423;exports.IFCSYSTEMFURNITUREELEMENT=IFCSYSTEMFURNITUREELEMENT;var IFCSYSTEMFURNITUREELEMENTTYPE=1580310250;exports.IFCSYSTEMFURNITUREELEMENTTYPE=IFCSYSTEMFURNITUREELEMENTTYPE;var IFCTSHAPEPROFILEDEF=3071757647;exports.IFCTSHAPEPROFILEDEF=IFCTSHAPEPROFILEDEF;var IFCTABLE=985171141;exports.IFCTABLE=IFCTABLE;var IFCTABLECOLUMN=2043862942;exports.IFCTABLECOLUMN=IFCTABLECOLUMN;var IFCTABLEROW=531007025;exports.IFCTABLEROW=IFCTABLEROW;var IFCTANK=812556717;exports.IFCTANK=IFCTANK;var IFCTANKTYPE=5716631;exports.IFCTANKTYPE=IFCTANKTYPE;var IFCTASK=3473067441;exports.IFCTASK=IFCTASK;var IFCTASKTIME=1549132990;exports.IFCTASKTIME=IFCTASKTIME;var IFCTASKTIMERECURRING=2771591690;exports.IFCTASKTIMERECURRING=IFCTASKTIMERECURRING;var IFCTASKTYPE=3206491090;exports.IFCTASKTYPE=IFCTASKTYPE;var IFCTELECOMADDRESS=912023232;exports.IFCTELECOMADDRESS=IFCTELECOMADDRESS;var IFCTENDON=3824725483;exports.IFCTENDON=IFCTENDON;var IFCTENDONANCHOR=2347447852;exports.IFCTENDONANCHOR=IFCTENDONANCHOR;var IFCTENDONANCHORTYPE=3081323446;exports.IFCTENDONANCHORTYPE=IFCTENDONANCHORTYPE;var IFCTENDONCONDUIT=3663046924;exports.IFCTENDONCONDUIT=IFCTENDONCONDUIT;var IFCTENDONCONDUITTYPE=2281632017;exports.IFCTENDONCONDUITTYPE=IFCTENDONCONDUITTYPE;var IFCTENDONTYPE=2415094496;exports.IFCTENDONTYPE=IFCTENDONTYPE;var IFCTESSELLATEDFACESET=2387106220;exports.IFCTESSELLATEDFACESET=IFCTESSELLATEDFACESET;var IFCTESSELLATEDITEM=901063453;exports.IFCTESSELLATEDITEM=IFCTESSELLATEDITEM;var IFCTEXTLITERAL=4282788508;exports.IFCTEXTLITERAL=IFCTEXTLITERAL;var IFCTEXTLITERALWITHEXTENT=3124975700;exports.IFCTEXTLITERALWITHEXTENT=IFCTEXTLITERALWITHEXTENT;var IFCTEXTSTYLE=1447204868;exports.IFCTEXTSTYLE=IFCTEXTSTYLE;var IFCTEXTSTYLEFONTMODEL=1983826977;exports.IFCTEXTSTYLEFONTMODEL=IFCTEXTSTYLEFONTMODEL;var IFCTEXTSTYLEFORDEFINEDFONT=2636378356;exports.IFCTEXTSTYLEFORDEFINEDFONT=IFCTEXTSTYLEFORDEFINEDFONT;var IFCTEXTSTYLETEXTMODEL=1640371178;exports.IFCTEXTSTYLETEXTMODEL=IFCTEXTSTYLETEXTMODEL;var IFCTEXTURECOORDINATE=280115917;exports.IFCTEXTURECOORDINATE=IFCTEXTURECOORDINATE;var IFCTEXTURECOORDINATEGENERATOR=1742049831;exports.IFCTEXTURECOORDINATEGENERATOR=IFCTEXTURECOORDINATEGENERATOR;var IFCTEXTUREMAP=2552916305;exports.IFCTEXTUREMAP=IFCTEXTUREMAP;var IFCTEXTUREVERTEX=1210645708;exports.IFCTEXTUREVERTEX=IFCTEXTUREVERTEX;var IFCTEXTUREVERTEXLIST=3611470254;exports.IFCTEXTUREVERTEXLIST=IFCTEXTUREVERTEXLIST;var IFCTIMEPERIOD=1199560280;exports.IFCTIMEPERIOD=IFCTIMEPERIOD;var IFCTIMESERIES=3101149627;exports.IFCTIMESERIES=IFCTIMESERIES;var IFCTIMESERIESVALUE=581633288;exports.IFCTIMESERIESVALUE=IFCTIMESERIESVALUE;var IFCTOPOLOGICALREPRESENTATIONITEM=1377556343;exports.IFCTOPOLOGICALREPRESENTATIONITEM=IFCTOPOLOGICALREPRESENTATIONITEM;var IFCTOPOLOGYREPRESENTATION=1735638870;exports.IFCTOPOLOGYREPRESENTATION=IFCTOPOLOGYREPRESENTATION;var IFCTOROIDALSURFACE=1935646853;exports.IFCTOROIDALSURFACE=IFCTOROIDALSURFACE;var IFCTRANSFORMER=3825984169;exports.IFCTRANSFORMER=IFCTRANSFORMER;var IFCTRANSFORMERTYPE=1692211062;exports.IFCTRANSFORMERTYPE=IFCTRANSFORMERTYPE;var IFCTRANSITIONCURVESEGMENT2D=2595432518;exports.IFCTRANSITIONCURVESEGMENT2D=IFCTRANSITIONCURVESEGMENT2D;var IFCTRANSPORTELEMENT=1620046519;exports.IFCTRANSPORTELEMENT=IFCTRANSPORTELEMENT;var IFCTRANSPORTELEMENTTYPE=2097647324;exports.IFCTRANSPORTELEMENTTYPE=IFCTRANSPORTELEMENTTYPE;var IFCTRAPEZIUMPROFILEDEF=2715220739;exports.IFCTRAPEZIUMPROFILEDEF=IFCTRAPEZIUMPROFILEDEF;var IFCTRIANGULATEDFACESET=2916149573;exports.IFCTRIANGULATEDFACESET=IFCTRIANGULATEDFACESET;var IFCTRIANGULATEDIRREGULARNETWORK=1229763772;exports.IFCTRIANGULATEDIRREGULARNETWORK=IFCTRIANGULATEDIRREGULARNETWORK;var IFCTRIMMEDCURVE=3593883385;exports.IFCTRIMMEDCURVE=IFCTRIMMEDCURVE;var IFCTUBEBUNDLE=3026737570;exports.IFCTUBEBUNDLE=IFCTUBEBUNDLE;var IFCTUBEBUNDLETYPE=1600972822;exports.IFCTUBEBUNDLETYPE=IFCTUBEBUNDLETYPE;var IFCTYPEOBJECT=1628702193;exports.IFCTYPEOBJECT=IFCTYPEOBJECT;var IFCTYPEPROCESS=3736923433;exports.IFCTYPEPROCESS=IFCTYPEPROCESS;var IFCTYPEPRODUCT=2347495698;exports.IFCTYPEPRODUCT=IFCTYPEPRODUCT;var IFCTYPERESOURCE=3698973494;exports.IFCTYPERESOURCE=IFCTYPERESOURCE;var IFCUSHAPEPROFILEDEF=427810014;exports.IFCUSHAPEPROFILEDEF=IFCUSHAPEPROFILEDEF;var IFCUNITASSIGNMENT=180925521;exports.IFCUNITASSIGNMENT=IFCUNITASSIGNMENT;var IFCUNITARYCONTROLELEMENT=630975310;exports.IFCUNITARYCONTROLELEMENT=IFCUNITARYCONTROLELEMENT;var IFCUNITARYCONTROLELEMENTTYPE=3179687236;exports.IFCUNITARYCONTROLELEMENTTYPE=IFCUNITARYCONTROLELEMENTTYPE;var IFCUNITARYEQUIPMENT=4292641817;exports.IFCUNITARYEQUIPMENT=IFCUNITARYEQUIPMENT;var IFCUNITARYEQUIPMENTTYPE=1911125066;exports.IFCUNITARYEQUIPMENTTYPE=IFCUNITARYEQUIPMENTTYPE;var IFCVALVE=4207607924;exports.IFCVALVE=IFCVALVE;var IFCVALVETYPE=728799441;exports.IFCVALVETYPE=IFCVALVETYPE;var IFCVECTOR=1417489154;exports.IFCVECTOR=IFCVECTOR;var IFCVERTEX=2799835756;exports.IFCVERTEX=IFCVERTEX;var IFCVERTEXLOOP=2759199220;exports.IFCVERTEXLOOP=IFCVERTEXLOOP;var IFCVERTEXPOINT=1907098498;exports.IFCVERTEXPOINT=IFCVERTEXPOINT;var IFCVIBRATIONDAMPER=1530820697;exports.IFCVIBRATIONDAMPER=IFCVIBRATIONDAMPER;var IFCVIBRATIONDAMPERTYPE=3956297820;exports.IFCVIBRATIONDAMPERTYPE=IFCVIBRATIONDAMPERTYPE;var IFCVIBRATIONISOLATOR=2391383451;exports.IFCVIBRATIONISOLATOR=IFCVIBRATIONISOLATOR;var IFCVIBRATIONISOLATORTYPE=3313531582;exports.IFCVIBRATIONISOLATORTYPE=IFCVIBRATIONISOLATORTYPE;var IFCVIRTUALELEMENT=2769231204;exports.IFCVIRTUALELEMENT=IFCVIRTUALELEMENT;var IFCVIRTUALGRIDINTERSECTION=891718957;exports.IFCVIRTUALGRIDINTERSECTION=IFCVIRTUALGRIDINTERSECTION;var IFCVOIDINGFEATURE=926996030;exports.IFCVOIDINGFEATURE=IFCVOIDINGFEATURE;var IFCWALL=2391406946;exports.IFCWALL=IFCWALL;var IFCWALLELEMENTEDCASE=4156078855;exports.IFCWALLELEMENTEDCASE=IFCWALLELEMENTEDCASE;var IFCWALLSTANDARDCASE=3512223829;exports.IFCWALLSTANDARDCASE=IFCWALLSTANDARDCASE;var IFCWALLTYPE=1898987631;exports.IFCWALLTYPE=IFCWALLTYPE;var IFCWASTETERMINAL=4237592921;exports.IFCWASTETERMINAL=IFCWASTETERMINAL;var IFCWASTETERMINALTYPE=1133259667;exports.IFCWASTETERMINALTYPE=IFCWASTETERMINALTYPE;var IFCWINDOW=3304561284;exports.IFCWINDOW=IFCWINDOW;var IFCWINDOWLININGPROPERTIES=336235671;exports.IFCWINDOWLININGPROPERTIES=IFCWINDOWLININGPROPERTIES;var IFCWINDOWPANELPROPERTIES=512836454;exports.IFCWINDOWPANELPROPERTIES=IFCWINDOWPANELPROPERTIES;var IFCWINDOWSTANDARDCASE=486154966;exports.IFCWINDOWSTANDARDCASE=IFCWINDOWSTANDARDCASE;var IFCWINDOWSTYLE=1299126871;exports.IFCWINDOWSTYLE=IFCWINDOWSTYLE;var IFCWINDOWTYPE=4009809668;exports.IFCWINDOWTYPE=IFCWINDOWTYPE;var IFCWORKCALENDAR=4088093105;exports.IFCWORKCALENDAR=IFCWORKCALENDAR;var IFCWORKCONTROL=1028945134;exports.IFCWORKCONTROL=IFCWORKCONTROL;var IFCWORKPLAN=4218914973;exports.IFCWORKPLAN=IFCWORKPLAN;var IFCWORKSCHEDULE=3342526732;exports.IFCWORKSCHEDULE=IFCWORKSCHEDULE;var IFCWORKTIME=1236880293;exports.IFCWORKTIME=IFCWORKTIME;var IFCZSHAPEPROFILEDEF=2543172580;exports.IFCZSHAPEPROFILEDEF=IFCZSHAPEPROFILEDEF;var IFCZONE=1033361043;exports.IFCZONE=IFCZONE;var IfcElements=[4288193352,1634111441,177149247,2056796094,3087945054,277319702,753842376,2906023776,32344328,2979338954,1095909175,2938176219,635142910,3758799889,1051757585,4217484030,3902619387,3296154744,1677625105,639361253,843113511,905975707,3221913625,3571504051,2272882330,25142252,4136498852,3640358203,1973544240,3495092785,4074379575,1335981549,1052013943,1062813311,1945004755,3040386961,395920057,3242481149,342316401,3518393246,1360408905,1904799276,862014818,3310460725,264262732,402227799,1003880860,4123344466,1658829314,2814081492,3747195512,484807127,3415622556,647756555,819412036,1426591983,2058353004,4278956645,182646315,2188021234,3132237377,987401354,707683696,2223149337,3508470533,900683007,263784265,1509553395,3493046030,3319311131,2068733104,4175244083,2176052936,76236018,629592764,377706215,1437502449,1073191201,1911478936,2474470126,3588315303,3079942009,3694346114,1687234759,310824031,3612865200,3171933400,1156407060,3651124850,738039164,2295281155,90941305,2262370178,3024970846,3283111854,979691226,2320036040,2016517767,3053780830,4086658281,1329646415,1529196076,3127900445,3027962421,3420628829,1999602285,1404847402,331165859,4252922144,3101698114,1162798199,413509423,812556717,3824725483,2347447852,3825984169,1620046519,3026737570,630975310,4292641817,4207607924,2391383451,2769231204,926996030,2391406946,4156078855,3512223829,4237592921,3304561284,486154966];// dist/ifc2x4_helper.ts
exports.IfcElements=IfcElements;var FromRawLineData={};exports.FromRawLineData=FromRawLineData;FromRawLineData[IFCACTIONREQUEST]=d=>{return IfcActionRequest.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCACTOR]=d=>{return IfcActor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCACTORROLE]=d=>{return IfcActorRole.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCACTUATOR]=d=>{return IfcActuator.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCACTUATORTYPE]=d=>{return IfcActuatorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCADDRESS]=d=>{return IfcAddress.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCADVANCEDBREP]=d=>{return IfcAdvancedBrep.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCADVANCEDBREPWITHVOIDS]=d=>{return IfcAdvancedBrepWithVoids.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCADVANCEDFACE]=d=>{return IfcAdvancedFace.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAIRTERMINAL]=d=>{return IfcAirTerminal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAIRTERMINALBOX]=d=>{return IfcAirTerminalBox.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAIRTERMINALBOXTYPE]=d=>{return IfcAirTerminalBoxType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAIRTERMINALTYPE]=d=>{return IfcAirTerminalType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAIRTOAIRHEATRECOVERY]=d=>{return IfcAirToAirHeatRecovery.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAIRTOAIRHEATRECOVERYTYPE]=d=>{return IfcAirToAirHeatRecoveryType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALARM]=d=>{return IfcAlarm.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALARMTYPE]=d=>{return IfcAlarmType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT]=d=>{return IfcAlignment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT2DHORIZONTAL]=d=>{return IfcAlignment2DHorizontal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT2DHORIZONTALSEGMENT]=d=>{return IfcAlignment2DHorizontalSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT2DSEGMENT]=d=>{return IfcAlignment2DSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT2DVERSEGCIRCULARARC]=d=>{return IfcAlignment2DVerSegCircularArc.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT2DVERSEGLINE]=d=>{return IfcAlignment2DVerSegLine.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT2DVERSEGPARABOLICARC]=d=>{return IfcAlignment2DVerSegParabolicArc.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT2DVERTICAL]=d=>{return IfcAlignment2DVertical.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENT2DVERTICALSEGMENT]=d=>{return IfcAlignment2DVerticalSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCALIGNMENTCURVE]=d=>{return IfcAlignmentCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCANNOTATION]=d=>{return IfcAnnotation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCANNOTATIONFILLAREA]=d=>{return IfcAnnotationFillArea.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAPPLICATION]=d=>{return IfcApplication.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAPPLIEDVALUE]=d=>{return IfcAppliedValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAPPROVAL]=d=>{return IfcApproval.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAPPROVALRELATIONSHIP]=d=>{return IfcApprovalRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCARBITRARYCLOSEDPROFILEDEF]=d=>{return IfcArbitraryClosedProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCARBITRARYOPENPROFILEDEF]=d=>{return IfcArbitraryOpenProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCARBITRARYPROFILEDEFWITHVOIDS]=d=>{return IfcArbitraryProfileDefWithVoids.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCASSET]=d=>{return IfcAsset.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCASYMMETRICISHAPEPROFILEDEF]=d=>{return IfcAsymmetricIShapeProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAUDIOVISUALAPPLIANCE]=d=>{return IfcAudioVisualAppliance.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAUDIOVISUALAPPLIANCETYPE]=d=>{return IfcAudioVisualApplianceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAXIS1PLACEMENT]=d=>{return IfcAxis1Placement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAXIS2PLACEMENT2D]=d=>{return IfcAxis2Placement2D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCAXIS2PLACEMENT3D]=d=>{return IfcAxis2Placement3D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBSPLINECURVE]=d=>{return IfcBSplineCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBSPLINECURVEWITHKNOTS]=d=>{return IfcBSplineCurveWithKnots.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBSPLINESURFACE]=d=>{return IfcBSplineSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBSPLINESURFACEWITHKNOTS]=d=>{return IfcBSplineSurfaceWithKnots.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBEAM]=d=>{return IfcBeam.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBEAMSTANDARDCASE]=d=>{return IfcBeamStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBEAMTYPE]=d=>{return IfcBeamType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBEARING]=d=>{return IfcBearing.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBEARINGTYPE]=d=>{return IfcBearingType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBLOBTEXTURE]=d=>{return IfcBlobTexture.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBLOCK]=d=>{return IfcBlock.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOILER]=d=>{return IfcBoiler.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOILERTYPE]=d=>{return IfcBoilerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOOLEANCLIPPINGRESULT]=d=>{return IfcBooleanClippingResult.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOOLEANRESULT]=d=>{return IfcBooleanResult.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDARYCONDITION]=d=>{return IfcBoundaryCondition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDARYCURVE]=d=>{return IfcBoundaryCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDARYEDGECONDITION]=d=>{return IfcBoundaryEdgeCondition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDARYFACECONDITION]=d=>{return IfcBoundaryFaceCondition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDARYNODECONDITION]=d=>{return IfcBoundaryNodeCondition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDARYNODECONDITIONWARPING]=d=>{return IfcBoundaryNodeConditionWarping.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDEDCURVE]=d=>{return IfcBoundedCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDEDSURFACE]=d=>{return IfcBoundedSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOUNDINGBOX]=d=>{return IfcBoundingBox.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBOXEDHALFSPACE]=d=>{return IfcBoxedHalfSpace.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBRIDGE]=d=>{return IfcBridge.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBRIDGEPART]=d=>{return IfcBridgePart.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDING]=d=>{return IfcBuilding.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDINGELEMENT]=d=>{return IfcBuildingElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDINGELEMENTPART]=d=>{return IfcBuildingElementPart.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDINGELEMENTPARTTYPE]=d=>{return IfcBuildingElementPartType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDINGELEMENTPROXY]=d=>{return IfcBuildingElementProxy.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDINGELEMENTPROXYTYPE]=d=>{return IfcBuildingElementProxyType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDINGELEMENTTYPE]=d=>{return IfcBuildingElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDINGSTOREY]=d=>{return IfcBuildingStorey.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBUILDINGSYSTEM]=d=>{return IfcBuildingSystem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBURNER]=d=>{return IfcBurner.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCBURNERTYPE]=d=>{return IfcBurnerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCSHAPEPROFILEDEF]=d=>{return IfcCShapeProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCABLECARRIERFITTING]=d=>{return IfcCableCarrierFitting.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCABLECARRIERFITTINGTYPE]=d=>{return IfcCableCarrierFittingType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCABLECARRIERSEGMENT]=d=>{return IfcCableCarrierSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCABLECARRIERSEGMENTTYPE]=d=>{return IfcCableCarrierSegmentType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCABLEFITTING]=d=>{return IfcCableFitting.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCABLEFITTINGTYPE]=d=>{return IfcCableFittingType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCABLESEGMENT]=d=>{return IfcCableSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCABLESEGMENTTYPE]=d=>{return IfcCableSegmentType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCAISSONFOUNDATION]=d=>{return IfcCaissonFoundation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCAISSONFOUNDATIONTYPE]=d=>{return IfcCaissonFoundationType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANPOINT]=d=>{return IfcCartesianPoint.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANPOINTLIST]=d=>{return IfcCartesianPointList.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANPOINTLIST2D]=d=>{return IfcCartesianPointList2D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANPOINTLIST3D]=d=>{return IfcCartesianPointList3D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR]=d=>{return IfcCartesianTransformationOperator.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR2D]=d=>{return IfcCartesianTransformationOperator2D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM]=d=>{return IfcCartesianTransformationOperator2DnonUniform.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR3D]=d=>{return IfcCartesianTransformationOperator3D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM]=d=>{return IfcCartesianTransformationOperator3DnonUniform.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCENTERLINEPROFILEDEF]=d=>{return IfcCenterLineProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCHILLER]=d=>{return IfcChiller.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCHILLERTYPE]=d=>{return IfcChillerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCHIMNEY]=d=>{return IfcChimney.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCHIMNEYTYPE]=d=>{return IfcChimneyType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCIRCLE]=d=>{return IfcCircle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCIRCLEHOLLOWPROFILEDEF]=d=>{return IfcCircleHollowProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCIRCLEPROFILEDEF]=d=>{return IfcCircleProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCIRCULARARCSEGMENT2D]=d=>{return IfcCircularArcSegment2D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCIVILELEMENT]=d=>{return IfcCivilElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCIVILELEMENTTYPE]=d=>{return IfcCivilElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCLASSIFICATION]=d=>{return IfcClassification.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCLASSIFICATIONREFERENCE]=d=>{return IfcClassificationReference.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCLOSEDSHELL]=d=>{return IfcClosedShell.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOIL]=d=>{return IfcCoil.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOILTYPE]=d=>{return IfcCoilType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOLOURRGB]=d=>{return IfcColourRgb.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOLOURRGBLIST]=d=>{return IfcColourRgbList.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOLOURSPECIFICATION]=d=>{return IfcColourSpecification.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOLUMN]=d=>{return IfcColumn.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOLUMNSTANDARDCASE]=d=>{return IfcColumnStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOLUMNTYPE]=d=>{return IfcColumnType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMMUNICATIONSAPPLIANCE]=d=>{return IfcCommunicationsAppliance.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMMUNICATIONSAPPLIANCETYPE]=d=>{return IfcCommunicationsApplianceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMPLEXPROPERTY]=d=>{return IfcComplexProperty.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMPLEXPROPERTYTEMPLATE]=d=>{return IfcComplexPropertyTemplate.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMPOSITECURVE]=d=>{return IfcCompositeCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMPOSITECURVEONSURFACE]=d=>{return IfcCompositeCurveOnSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMPOSITECURVESEGMENT]=d=>{return IfcCompositeCurveSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMPOSITEPROFILEDEF]=d=>{return IfcCompositeProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMPRESSOR]=d=>{return IfcCompressor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOMPRESSORTYPE]=d=>{return IfcCompressorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONDENSER]=d=>{return IfcCondenser.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONDENSERTYPE]=d=>{return IfcCondenserType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONIC]=d=>{return IfcConic.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONNECTEDFACESET]=d=>{return IfcConnectedFaceSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONNECTIONCURVEGEOMETRY]=d=>{return IfcConnectionCurveGeometry.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONNECTIONGEOMETRY]=d=>{return IfcConnectionGeometry.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONNECTIONPOINTECCENTRICITY]=d=>{return IfcConnectionPointEccentricity.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONNECTIONPOINTGEOMETRY]=d=>{return IfcConnectionPointGeometry.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONNECTIONSURFACEGEOMETRY]=d=>{return IfcConnectionSurfaceGeometry.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONNECTIONVOLUMEGEOMETRY]=d=>{return IfcConnectionVolumeGeometry.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRAINT]=d=>{return IfcConstraint.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRUCTIONEQUIPMENTRESOURCE]=d=>{return IfcConstructionEquipmentResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE]=d=>{return IfcConstructionEquipmentResourceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRUCTIONMATERIALRESOURCE]=d=>{return IfcConstructionMaterialResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRUCTIONMATERIALRESOURCETYPE]=d=>{return IfcConstructionMaterialResourceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRUCTIONPRODUCTRESOURCE]=d=>{return IfcConstructionProductResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRUCTIONPRODUCTRESOURCETYPE]=d=>{return IfcConstructionProductResourceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRUCTIONRESOURCE]=d=>{return IfcConstructionResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONSTRUCTIONRESOURCETYPE]=d=>{return IfcConstructionResourceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONTEXT]=d=>{return IfcContext.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONTEXTDEPENDENTUNIT]=d=>{return IfcContextDependentUnit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONTROL]=d=>{return IfcControl.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONTROLLER]=d=>{return IfcController.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONTROLLERTYPE]=d=>{return IfcControllerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONVERSIONBASEDUNIT]=d=>{return IfcConversionBasedUnit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCONVERSIONBASEDUNITWITHOFFSET]=d=>{return IfcConversionBasedUnitWithOffset.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOOLEDBEAM]=d=>{return IfcCooledBeam.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOOLEDBEAMTYPE]=d=>{return IfcCooledBeamType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOOLINGTOWER]=d=>{return IfcCoolingTower.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOOLINGTOWERTYPE]=d=>{return IfcCoolingTowerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOORDINATEOPERATION]=d=>{return IfcCoordinateOperation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOORDINATEREFERENCESYSTEM]=d=>{return IfcCoordinateReferenceSystem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOSTITEM]=d=>{return IfcCostItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOSTSCHEDULE]=d=>{return IfcCostSchedule.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOSTVALUE]=d=>{return IfcCostValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOVERING]=d=>{return IfcCovering.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCOVERINGTYPE]=d=>{return IfcCoveringType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCREWRESOURCE]=d=>{return IfcCrewResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCREWRESOURCETYPE]=d=>{return IfcCrewResourceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCSGPRIMITIVE3D]=d=>{return IfcCsgPrimitive3D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCSGSOLID]=d=>{return IfcCsgSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURRENCYRELATIONSHIP]=d=>{return IfcCurrencyRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURTAINWALL]=d=>{return IfcCurtainWall.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURTAINWALLTYPE]=d=>{return IfcCurtainWallType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURVE]=d=>{return IfcCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURVEBOUNDEDPLANE]=d=>{return IfcCurveBoundedPlane.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURVEBOUNDEDSURFACE]=d=>{return IfcCurveBoundedSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURVESEGMENT2D]=d=>{return IfcCurveSegment2D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURVESTYLE]=d=>{return IfcCurveStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURVESTYLEFONT]=d=>{return IfcCurveStyleFont.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURVESTYLEFONTANDSCALING]=d=>{return IfcCurveStyleFontAndScaling.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCURVESTYLEFONTPATTERN]=d=>{return IfcCurveStyleFontPattern.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCCYLINDRICALSURFACE]=d=>{return IfcCylindricalSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDAMPER]=d=>{return IfcDamper.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDAMPERTYPE]=d=>{return IfcDamperType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDEEPFOUNDATION]=d=>{return IfcDeepFoundation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDEEPFOUNDATIONTYPE]=d=>{return IfcDeepFoundationType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDERIVEDPROFILEDEF]=d=>{return IfcDerivedProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDERIVEDUNIT]=d=>{return IfcDerivedUnit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDERIVEDUNITELEMENT]=d=>{return IfcDerivedUnitElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDIMENSIONALEXPONENTS]=d=>{return IfcDimensionalExponents.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDIRECTION]=d=>{return IfcDirection.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISCRETEACCESSORY]=d=>{return IfcDiscreteAccessory.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISCRETEACCESSORYTYPE]=d=>{return IfcDiscreteAccessoryType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTANCEEXPRESSION]=d=>{return IfcDistanceExpression.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONCHAMBERELEMENT]=d=>{return IfcDistributionChamberElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONCHAMBERELEMENTTYPE]=d=>{return IfcDistributionChamberElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONCIRCUIT]=d=>{return IfcDistributionCircuit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONCONTROLELEMENT]=d=>{return IfcDistributionControlElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONCONTROLELEMENTTYPE]=d=>{return IfcDistributionControlElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONELEMENT]=d=>{return IfcDistributionElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONELEMENTTYPE]=d=>{return IfcDistributionElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONFLOWELEMENT]=d=>{return IfcDistributionFlowElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONFLOWELEMENTTYPE]=d=>{return IfcDistributionFlowElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONPORT]=d=>{return IfcDistributionPort.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDISTRIBUTIONSYSTEM]=d=>{return IfcDistributionSystem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOCUMENTINFORMATION]=d=>{return IfcDocumentInformation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOCUMENTINFORMATIONRELATIONSHIP]=d=>{return IfcDocumentInformationRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOCUMENTREFERENCE]=d=>{return IfcDocumentReference.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOOR]=d=>{return IfcDoor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOORLININGPROPERTIES]=d=>{return IfcDoorLiningProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOORPANELPROPERTIES]=d=>{return IfcDoorPanelProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOORSTANDARDCASE]=d=>{return IfcDoorStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOORSTYLE]=d=>{return IfcDoorStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDOORTYPE]=d=>{return IfcDoorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDRAUGHTINGPREDEFINEDCOLOUR]=d=>{return IfcDraughtingPreDefinedColour.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDRAUGHTINGPREDEFINEDCURVEFONT]=d=>{return IfcDraughtingPreDefinedCurveFont.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDUCTFITTING]=d=>{return IfcDuctFitting.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDUCTFITTINGTYPE]=d=>{return IfcDuctFittingType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDUCTSEGMENT]=d=>{return IfcDuctSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDUCTSEGMENTTYPE]=d=>{return IfcDuctSegmentType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDUCTSILENCER]=d=>{return IfcDuctSilencer.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCDUCTSILENCERTYPE]=d=>{return IfcDuctSilencerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEDGE]=d=>{return IfcEdge.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEDGECURVE]=d=>{return IfcEdgeCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEDGELOOP]=d=>{return IfcEdgeLoop.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICAPPLIANCE]=d=>{return IfcElectricAppliance.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICAPPLIANCETYPE]=d=>{return IfcElectricApplianceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICDISTRIBUTIONBOARD]=d=>{return IfcElectricDistributionBoard.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICDISTRIBUTIONBOARDTYPE]=d=>{return IfcElectricDistributionBoardType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICFLOWSTORAGEDEVICE]=d=>{return IfcElectricFlowStorageDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICFLOWSTORAGEDEVICETYPE]=d=>{return IfcElectricFlowStorageDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICGENERATOR]=d=>{return IfcElectricGenerator.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICGENERATORTYPE]=d=>{return IfcElectricGeneratorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICMOTOR]=d=>{return IfcElectricMotor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICMOTORTYPE]=d=>{return IfcElectricMotorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICTIMECONTROL]=d=>{return IfcElectricTimeControl.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELECTRICTIMECONTROLTYPE]=d=>{return IfcElectricTimeControlType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELEMENT]=d=>{return IfcElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELEMENTASSEMBLY]=d=>{return IfcElementAssembly.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELEMENTASSEMBLYTYPE]=d=>{return IfcElementAssemblyType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELEMENTCOMPONENT]=d=>{return IfcElementComponent.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELEMENTCOMPONENTTYPE]=d=>{return IfcElementComponentType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELEMENTQUANTITY]=d=>{return IfcElementQuantity.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELEMENTTYPE]=d=>{return IfcElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELEMENTARYSURFACE]=d=>{return IfcElementarySurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELLIPSE]=d=>{return IfcEllipse.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCELLIPSEPROFILEDEF]=d=>{return IfcEllipseProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCENERGYCONVERSIONDEVICE]=d=>{return IfcEnergyConversionDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCENERGYCONVERSIONDEVICETYPE]=d=>{return IfcEnergyConversionDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCENGINE]=d=>{return IfcEngine.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCENGINETYPE]=d=>{return IfcEngineType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEVAPORATIVECOOLER]=d=>{return IfcEvaporativeCooler.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEVAPORATIVECOOLERTYPE]=d=>{return IfcEvaporativeCoolerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEVAPORATOR]=d=>{return IfcEvaporator.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEVAPORATORTYPE]=d=>{return IfcEvaporatorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEVENT]=d=>{return IfcEvent.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEVENTTIME]=d=>{return IfcEventTime.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEVENTTYPE]=d=>{return IfcEventType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTENDEDPROPERTIES]=d=>{return IfcExtendedProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTERNALINFORMATION]=d=>{return IfcExternalInformation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTERNALREFERENCE]=d=>{return IfcExternalReference.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTERNALREFERENCERELATIONSHIP]=d=>{return IfcExternalReferenceRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTERNALSPATIALELEMENT]=d=>{return IfcExternalSpatialElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTERNALSPATIALSTRUCTUREELEMENT]=d=>{return IfcExternalSpatialStructureElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTERNALLYDEFINEDHATCHSTYLE]=d=>{return IfcExternallyDefinedHatchStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTERNALLYDEFINEDSURFACESTYLE]=d=>{return IfcExternallyDefinedSurfaceStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTERNALLYDEFINEDTEXTFONT]=d=>{return IfcExternallyDefinedTextFont.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTRUDEDAREASOLID]=d=>{return IfcExtrudedAreaSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCEXTRUDEDAREASOLIDTAPERED]=d=>{return IfcExtrudedAreaSolidTapered.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACE]=d=>{return IfcFace.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACEBASEDSURFACEMODEL]=d=>{return IfcFaceBasedSurfaceModel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACEBOUND]=d=>{return IfcFaceBound.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACEOUTERBOUND]=d=>{return IfcFaceOuterBound.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACESURFACE]=d=>{return IfcFaceSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACETEDBREP]=d=>{return IfcFacetedBrep.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACETEDBREPWITHVOIDS]=d=>{return IfcFacetedBrepWithVoids.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACILITY]=d=>{return IfcFacility.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFACILITYPART]=d=>{return IfcFacilityPart.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFAILURECONNECTIONCONDITION]=d=>{return IfcFailureConnectionCondition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFAN]=d=>{return IfcFan.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFANTYPE]=d=>{return IfcFanType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFASTENER]=d=>{return IfcFastener.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFASTENERTYPE]=d=>{return IfcFastenerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFEATUREELEMENT]=d=>{return IfcFeatureElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFEATUREELEMENTADDITION]=d=>{return IfcFeatureElementAddition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFEATUREELEMENTSUBTRACTION]=d=>{return IfcFeatureElementSubtraction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFILLAREASTYLE]=d=>{return IfcFillAreaStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFILLAREASTYLEHATCHING]=d=>{return IfcFillAreaStyleHatching.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFILLAREASTYLETILES]=d=>{return IfcFillAreaStyleTiles.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFILTER]=d=>{return IfcFilter.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFILTERTYPE]=d=>{return IfcFilterType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFIRESUPPRESSIONTERMINAL]=d=>{return IfcFireSuppressionTerminal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFIRESUPPRESSIONTERMINALTYPE]=d=>{return IfcFireSuppressionTerminalType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFIXEDREFERENCESWEPTAREASOLID]=d=>{return IfcFixedReferenceSweptAreaSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWCONTROLLER]=d=>{return IfcFlowController.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWCONTROLLERTYPE]=d=>{return IfcFlowControllerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWFITTING]=d=>{return IfcFlowFitting.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWFITTINGTYPE]=d=>{return IfcFlowFittingType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWINSTRUMENT]=d=>{return IfcFlowInstrument.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWINSTRUMENTTYPE]=d=>{return IfcFlowInstrumentType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWMETER]=d=>{return IfcFlowMeter.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWMETERTYPE]=d=>{return IfcFlowMeterType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWMOVINGDEVICE]=d=>{return IfcFlowMovingDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWMOVINGDEVICETYPE]=d=>{return IfcFlowMovingDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWSEGMENT]=d=>{return IfcFlowSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWSEGMENTTYPE]=d=>{return IfcFlowSegmentType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWSTORAGEDEVICE]=d=>{return IfcFlowStorageDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWSTORAGEDEVICETYPE]=d=>{return IfcFlowStorageDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWTERMINAL]=d=>{return IfcFlowTerminal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWTERMINALTYPE]=d=>{return IfcFlowTerminalType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWTREATMENTDEVICE]=d=>{return IfcFlowTreatmentDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFLOWTREATMENTDEVICETYPE]=d=>{return IfcFlowTreatmentDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFOOTING]=d=>{return IfcFooting.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFOOTINGTYPE]=d=>{return IfcFootingType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFURNISHINGELEMENT]=d=>{return IfcFurnishingElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFURNISHINGELEMENTTYPE]=d=>{return IfcFurnishingElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFURNITURE]=d=>{return IfcFurniture.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCFURNITURETYPE]=d=>{return IfcFurnitureType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGEOGRAPHICELEMENT]=d=>{return IfcGeographicElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGEOGRAPHICELEMENTTYPE]=d=>{return IfcGeographicElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGEOMETRICCURVESET]=d=>{return IfcGeometricCurveSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGEOMETRICREPRESENTATIONCONTEXT]=d=>{return IfcGeometricRepresentationContext.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGEOMETRICREPRESENTATIONITEM]=d=>{return IfcGeometricRepresentationItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGEOMETRICREPRESENTATIONSUBCONTEXT]=d=>{return IfcGeometricRepresentationSubContext.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGEOMETRICSET]=d=>{return IfcGeometricSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGRID]=d=>{return IfcGrid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGRIDAXIS]=d=>{return IfcGridAxis.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGRIDPLACEMENT]=d=>{return IfcGridPlacement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCGROUP]=d=>{return IfcGroup.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCHALFSPACESOLID]=d=>{return IfcHalfSpaceSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCHEATEXCHANGER]=d=>{return IfcHeatExchanger.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCHEATEXCHANGERTYPE]=d=>{return IfcHeatExchangerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCHUMIDIFIER]=d=>{return IfcHumidifier.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCHUMIDIFIERTYPE]=d=>{return IfcHumidifierType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCISHAPEPROFILEDEF]=d=>{return IfcIShapeProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCIMAGETEXTURE]=d=>{return IfcImageTexture.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINDEXEDCOLOURMAP]=d=>{return IfcIndexedColourMap.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINDEXEDPOLYCURVE]=d=>{return IfcIndexedPolyCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINDEXEDPOLYGONALFACE]=d=>{return IfcIndexedPolygonalFace.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINDEXEDPOLYGONALFACEWITHVOIDS]=d=>{return IfcIndexedPolygonalFaceWithVoids.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINDEXEDTEXTUREMAP]=d=>{return IfcIndexedTextureMap.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINDEXEDTRIANGLETEXTUREMAP]=d=>{return IfcIndexedTriangleTextureMap.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINTERCEPTOR]=d=>{return IfcInterceptor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINTERCEPTORTYPE]=d=>{return IfcInterceptorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINTERSECTIONCURVE]=d=>{return IfcIntersectionCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCINVENTORY]=d=>{return IfcInventory.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCIRREGULARTIMESERIES]=d=>{return IfcIrregularTimeSeries.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCIRREGULARTIMESERIESVALUE]=d=>{return IfcIrregularTimeSeriesValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCJUNCTIONBOX]=d=>{return IfcJunctionBox.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCJUNCTIONBOXTYPE]=d=>{return IfcJunctionBoxType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLSHAPEPROFILEDEF]=d=>{return IfcLShapeProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLABORRESOURCE]=d=>{return IfcLaborResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLABORRESOURCETYPE]=d=>{return IfcLaborResourceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLAGTIME]=d=>{return IfcLagTime.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLAMP]=d=>{return IfcLamp.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLAMPTYPE]=d=>{return IfcLampType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIBRARYINFORMATION]=d=>{return IfcLibraryInformation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIBRARYREFERENCE]=d=>{return IfcLibraryReference.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTDISTRIBUTIONDATA]=d=>{return IfcLightDistributionData.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTFIXTURE]=d=>{return IfcLightFixture.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTFIXTURETYPE]=d=>{return IfcLightFixtureType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTINTENSITYDISTRIBUTION]=d=>{return IfcLightIntensityDistribution.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTSOURCE]=d=>{return IfcLightSource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTSOURCEAMBIENT]=d=>{return IfcLightSourceAmbient.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTSOURCEDIRECTIONAL]=d=>{return IfcLightSourceDirectional.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTSOURCEGONIOMETRIC]=d=>{return IfcLightSourceGoniometric.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTSOURCEPOSITIONAL]=d=>{return IfcLightSourcePositional.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLIGHTSOURCESPOT]=d=>{return IfcLightSourceSpot.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLINE]=d=>{return IfcLine.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLINESEGMENT2D]=d=>{return IfcLineSegment2D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLINEARPLACEMENT]=d=>{return IfcLinearPlacement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLINEARPOSITIONINGELEMENT]=d=>{return IfcLinearPositioningElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLOCALPLACEMENT]=d=>{return IfcLocalPlacement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCLOOP]=d=>{return IfcLoop.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMANIFOLDSOLIDBREP]=d=>{return IfcManifoldSolidBrep.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMAPCONVERSION]=d=>{return IfcMapConversion.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMAPPEDITEM]=d=>{return IfcMappedItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIAL]=d=>{return IfcMaterial.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALCLASSIFICATIONRELATIONSHIP]=d=>{return IfcMaterialClassificationRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALCONSTITUENT]=d=>{return IfcMaterialConstituent.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALCONSTITUENTSET]=d=>{return IfcMaterialConstituentSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALDEFINITION]=d=>{return IfcMaterialDefinition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALDEFINITIONREPRESENTATION]=d=>{return IfcMaterialDefinitionRepresentation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALLAYER]=d=>{return IfcMaterialLayer.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALLAYERSET]=d=>{return IfcMaterialLayerSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALLAYERSETUSAGE]=d=>{return IfcMaterialLayerSetUsage.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALLAYERWITHOFFSETS]=d=>{return IfcMaterialLayerWithOffsets.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALLIST]=d=>{return IfcMaterialList.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALPROFILE]=d=>{return IfcMaterialProfile.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALPROFILESET]=d=>{return IfcMaterialProfileSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALPROFILESETUSAGE]=d=>{return IfcMaterialProfileSetUsage.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALPROFILESETUSAGETAPERING]=d=>{return IfcMaterialProfileSetUsageTapering.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALPROFILEWITHOFFSETS]=d=>{return IfcMaterialProfileWithOffsets.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALPROPERTIES]=d=>{return IfcMaterialProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALRELATIONSHIP]=d=>{return IfcMaterialRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMATERIALUSAGEDEFINITION]=d=>{return IfcMaterialUsageDefinition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMEASUREWITHUNIT]=d=>{return IfcMeasureWithUnit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMECHANICALFASTENER]=d=>{return IfcMechanicalFastener.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMECHANICALFASTENERTYPE]=d=>{return IfcMechanicalFastenerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMEDICALDEVICE]=d=>{return IfcMedicalDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMEDICALDEVICETYPE]=d=>{return IfcMedicalDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMEMBER]=d=>{return IfcMember.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMEMBERSTANDARDCASE]=d=>{return IfcMemberStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMEMBERTYPE]=d=>{return IfcMemberType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMETRIC]=d=>{return IfcMetric.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMIRROREDPROFILEDEF]=d=>{return IfcMirroredProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMONETARYUNIT]=d=>{return IfcMonetaryUnit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMOTORCONNECTION]=d=>{return IfcMotorConnection.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCMOTORCONNECTIONTYPE]=d=>{return IfcMotorConnectionType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCNAMEDUNIT]=d=>{return IfcNamedUnit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOBJECT]=d=>{return IfcObject.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOBJECTDEFINITION]=d=>{return IfcObjectDefinition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOBJECTPLACEMENT]=d=>{return IfcObjectPlacement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOBJECTIVE]=d=>{return IfcObjective.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOCCUPANT]=d=>{return IfcOccupant.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOFFSETCURVE]=d=>{return IfcOffsetCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOFFSETCURVE2D]=d=>{return IfcOffsetCurve2D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOFFSETCURVE3D]=d=>{return IfcOffsetCurve3D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOFFSETCURVEBYDISTANCES]=d=>{return IfcOffsetCurveByDistances.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOPENSHELL]=d=>{return IfcOpenShell.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOPENINGELEMENT]=d=>{return IfcOpeningElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOPENINGSTANDARDCASE]=d=>{return IfcOpeningStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCORGANIZATION]=d=>{return IfcOrganization.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCORGANIZATIONRELATIONSHIP]=d=>{return IfcOrganizationRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCORIENTATIONEXPRESSION]=d=>{return IfcOrientationExpression.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCORIENTEDEDGE]=d=>{return IfcOrientedEdge.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOUTERBOUNDARYCURVE]=d=>{return IfcOuterBoundaryCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOUTLET]=d=>{return IfcOutlet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOUTLETTYPE]=d=>{return IfcOutletType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCOWNERHISTORY]=d=>{return IfcOwnerHistory.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPARAMETERIZEDPROFILEDEF]=d=>{return IfcParameterizedProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPATH]=d=>{return IfcPath.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPCURVE]=d=>{return IfcPcurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPERFORMANCEHISTORY]=d=>{return IfcPerformanceHistory.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPERMEABLECOVERINGPROPERTIES]=d=>{return IfcPermeableCoveringProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPERMIT]=d=>{return IfcPermit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPERSON]=d=>{return IfcPerson.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPERSONANDORGANIZATION]=d=>{return IfcPersonAndOrganization.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPHYSICALCOMPLEXQUANTITY]=d=>{return IfcPhysicalComplexQuantity.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPHYSICALQUANTITY]=d=>{return IfcPhysicalQuantity.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPHYSICALSIMPLEQUANTITY]=d=>{return IfcPhysicalSimpleQuantity.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPILE]=d=>{return IfcPile.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPILETYPE]=d=>{return IfcPileType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPIPEFITTING]=d=>{return IfcPipeFitting.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPIPEFITTINGTYPE]=d=>{return IfcPipeFittingType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPIPESEGMENT]=d=>{return IfcPipeSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPIPESEGMENTTYPE]=d=>{return IfcPipeSegmentType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPIXELTEXTURE]=d=>{return IfcPixelTexture.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPLACEMENT]=d=>{return IfcPlacement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPLANARBOX]=d=>{return IfcPlanarBox.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPLANAREXTENT]=d=>{return IfcPlanarExtent.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPLANE]=d=>{return IfcPlane.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPLATE]=d=>{return IfcPlate.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPLATESTANDARDCASE]=d=>{return IfcPlateStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPLATETYPE]=d=>{return IfcPlateType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOINT]=d=>{return IfcPoint.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOINTONCURVE]=d=>{return IfcPointOnCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOINTONSURFACE]=d=>{return IfcPointOnSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOLYLOOP]=d=>{return IfcPolyLoop.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOLYGONALBOUNDEDHALFSPACE]=d=>{return IfcPolygonalBoundedHalfSpace.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOLYGONALFACESET]=d=>{return IfcPolygonalFaceSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOLYLINE]=d=>{return IfcPolyline.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPORT]=d=>{return IfcPort.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOSITIONINGELEMENT]=d=>{return IfcPositioningElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPOSTALADDRESS]=d=>{return IfcPostalAddress.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPREDEFINEDCOLOUR]=d=>{return IfcPreDefinedColour.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPREDEFINEDCURVEFONT]=d=>{return IfcPreDefinedCurveFont.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPREDEFINEDITEM]=d=>{return IfcPreDefinedItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPREDEFINEDPROPERTIES]=d=>{return IfcPreDefinedProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPREDEFINEDPROPERTYSET]=d=>{return IfcPreDefinedPropertySet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPREDEFINEDTEXTFONT]=d=>{return IfcPreDefinedTextFont.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPRESENTATIONITEM]=d=>{return IfcPresentationItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPRESENTATIONLAYERASSIGNMENT]=d=>{return IfcPresentationLayerAssignment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPRESENTATIONLAYERWITHSTYLE]=d=>{return IfcPresentationLayerWithStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPRESENTATIONSTYLE]=d=>{return IfcPresentationStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPRESENTATIONSTYLEASSIGNMENT]=d=>{return IfcPresentationStyleAssignment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROCEDURE]=d=>{return IfcProcedure.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROCEDURETYPE]=d=>{return IfcProcedureType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROCESS]=d=>{return IfcProcess.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPRODUCT]=d=>{return IfcProduct.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPRODUCTDEFINITIONSHAPE]=d=>{return IfcProductDefinitionShape.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPRODUCTREPRESENTATION]=d=>{return IfcProductRepresentation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROFILEDEF]=d=>{return IfcProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROFILEPROPERTIES]=d=>{return IfcProfileProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROJECT]=d=>{return IfcProject.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROJECTLIBRARY]=d=>{return IfcProjectLibrary.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROJECTORDER]=d=>{return IfcProjectOrder.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROJECTEDCRS]=d=>{return IfcProjectedCRS.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROJECTIONELEMENT]=d=>{return IfcProjectionElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTY]=d=>{return IfcProperty.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYABSTRACTION]=d=>{return IfcPropertyAbstraction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYBOUNDEDVALUE]=d=>{return IfcPropertyBoundedValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYDEFINITION]=d=>{return IfcPropertyDefinition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYDEPENDENCYRELATIONSHIP]=d=>{return IfcPropertyDependencyRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYENUMERATEDVALUE]=d=>{return IfcPropertyEnumeratedValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYENUMERATION]=d=>{return IfcPropertyEnumeration.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYLISTVALUE]=d=>{return IfcPropertyListValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYREFERENCEVALUE]=d=>{return IfcPropertyReferenceValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYSET]=d=>{return IfcPropertySet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYSETDEFINITION]=d=>{return IfcPropertySetDefinition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYSETTEMPLATE]=d=>{return IfcPropertySetTemplate.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYSINGLEVALUE]=d=>{return IfcPropertySingleValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYTABLEVALUE]=d=>{return IfcPropertyTableValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYTEMPLATE]=d=>{return IfcPropertyTemplate.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROPERTYTEMPLATEDEFINITION]=d=>{return IfcPropertyTemplateDefinition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROTECTIVEDEVICE]=d=>{return IfcProtectiveDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROTECTIVEDEVICETRIPPINGUNIT]=d=>{return IfcProtectiveDeviceTrippingUnit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROTECTIVEDEVICETRIPPINGUNITTYPE]=d=>{return IfcProtectiveDeviceTrippingUnitType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROTECTIVEDEVICETYPE]=d=>{return IfcProtectiveDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPROXY]=d=>{return IfcProxy.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPUMP]=d=>{return IfcPump.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCPUMPTYPE]=d=>{return IfcPumpType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCQUANTITYAREA]=d=>{return IfcQuantityArea.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCQUANTITYCOUNT]=d=>{return IfcQuantityCount.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCQUANTITYLENGTH]=d=>{return IfcQuantityLength.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCQUANTITYSET]=d=>{return IfcQuantitySet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCQUANTITYTIME]=d=>{return IfcQuantityTime.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCQUANTITYVOLUME]=d=>{return IfcQuantityVolume.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCQUANTITYWEIGHT]=d=>{return IfcQuantityWeight.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRAILING]=d=>{return IfcRailing.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRAILINGTYPE]=d=>{return IfcRailingType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRAMP]=d=>{return IfcRamp.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRAMPFLIGHT]=d=>{return IfcRampFlight.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRAMPFLIGHTTYPE]=d=>{return IfcRampFlightType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRAMPTYPE]=d=>{return IfcRampType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRATIONALBSPLINECURVEWITHKNOTS]=d=>{return IfcRationalBSplineCurveWithKnots.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRATIONALBSPLINESURFACEWITHKNOTS]=d=>{return IfcRationalBSplineSurfaceWithKnots.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRECTANGLEHOLLOWPROFILEDEF]=d=>{return IfcRectangleHollowProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRECTANGLEPROFILEDEF]=d=>{return IfcRectangleProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRECTANGULARPYRAMID]=d=>{return IfcRectangularPyramid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRECTANGULARTRIMMEDSURFACE]=d=>{return IfcRectangularTrimmedSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRECURRENCEPATTERN]=d=>{return IfcRecurrencePattern.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREFERENCE]=d=>{return IfcReference.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREFERENT]=d=>{return IfcReferent.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREGULARTIMESERIES]=d=>{return IfcRegularTimeSeries.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREINFORCEMENTBARPROPERTIES]=d=>{return IfcReinforcementBarProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREINFORCEMENTDEFINITIONPROPERTIES]=d=>{return IfcReinforcementDefinitionProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREINFORCINGBAR]=d=>{return IfcReinforcingBar.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREINFORCINGBARTYPE]=d=>{return IfcReinforcingBarType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREINFORCINGELEMENT]=d=>{return IfcReinforcingElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREINFORCINGELEMENTTYPE]=d=>{return IfcReinforcingElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREINFORCINGMESH]=d=>{return IfcReinforcingMesh.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREINFORCINGMESHTYPE]=d=>{return IfcReinforcingMeshType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELAGGREGATES]=d=>{return IfcRelAggregates.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSIGNS]=d=>{return IfcRelAssigns.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSIGNSTOACTOR]=d=>{return IfcRelAssignsToActor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSIGNSTOCONTROL]=d=>{return IfcRelAssignsToControl.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSIGNSTOGROUP]=d=>{return IfcRelAssignsToGroup.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSIGNSTOGROUPBYFACTOR]=d=>{return IfcRelAssignsToGroupByFactor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSIGNSTOPROCESS]=d=>{return IfcRelAssignsToProcess.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSIGNSTOPRODUCT]=d=>{return IfcRelAssignsToProduct.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSIGNSTORESOURCE]=d=>{return IfcRelAssignsToResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSOCIATES]=d=>{return IfcRelAssociates.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSOCIATESAPPROVAL]=d=>{return IfcRelAssociatesApproval.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSOCIATESCLASSIFICATION]=d=>{return IfcRelAssociatesClassification.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSOCIATESCONSTRAINT]=d=>{return IfcRelAssociatesConstraint.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSOCIATESDOCUMENT]=d=>{return IfcRelAssociatesDocument.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSOCIATESLIBRARY]=d=>{return IfcRelAssociatesLibrary.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELASSOCIATESMATERIAL]=d=>{return IfcRelAssociatesMaterial.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTS]=d=>{return IfcRelConnects.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTSELEMENTS]=d=>{return IfcRelConnectsElements.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTSPATHELEMENTS]=d=>{return IfcRelConnectsPathElements.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTSPORTTOELEMENT]=d=>{return IfcRelConnectsPortToElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTSPORTS]=d=>{return IfcRelConnectsPorts.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTSSTRUCTURALACTIVITY]=d=>{return IfcRelConnectsStructuralActivity.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTSSTRUCTURALMEMBER]=d=>{return IfcRelConnectsStructuralMember.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTSWITHECCENTRICITY]=d=>{return IfcRelConnectsWithEccentricity.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONNECTSWITHREALIZINGELEMENTS]=d=>{return IfcRelConnectsWithRealizingElements.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCONTAINEDINSPATIALSTRUCTURE]=d=>{return IfcRelContainedInSpatialStructure.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCOVERSBLDGELEMENTS]=d=>{return IfcRelCoversBldgElements.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELCOVERSSPACES]=d=>{return IfcRelCoversSpaces.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELDECLARES]=d=>{return IfcRelDeclares.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELDECOMPOSES]=d=>{return IfcRelDecomposes.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELDEFINES]=d=>{return IfcRelDefines.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELDEFINESBYOBJECT]=d=>{return IfcRelDefinesByObject.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELDEFINESBYPROPERTIES]=d=>{return IfcRelDefinesByProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELDEFINESBYTEMPLATE]=d=>{return IfcRelDefinesByTemplate.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELDEFINESBYTYPE]=d=>{return IfcRelDefinesByType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELFILLSELEMENT]=d=>{return IfcRelFillsElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELFLOWCONTROLELEMENTS]=d=>{return IfcRelFlowControlElements.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELINTERFERESELEMENTS]=d=>{return IfcRelInterferesElements.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELNESTS]=d=>{return IfcRelNests.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELPOSITIONS]=d=>{return IfcRelPositions.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELPROJECTSELEMENT]=d=>{return IfcRelProjectsElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELREFERENCEDINSPATIALSTRUCTURE]=d=>{return IfcRelReferencedInSpatialStructure.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELSEQUENCE]=d=>{return IfcRelSequence.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELSERVICESBUILDINGS]=d=>{return IfcRelServicesBuildings.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELSPACEBOUNDARY]=d=>{return IfcRelSpaceBoundary.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELSPACEBOUNDARY1STLEVEL]=d=>{return IfcRelSpaceBoundary1stLevel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELSPACEBOUNDARY2NDLEVEL]=d=>{return IfcRelSpaceBoundary2ndLevel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELVOIDSELEMENT]=d=>{return IfcRelVoidsElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRELATIONSHIP]=d=>{return IfcRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREPARAMETRISEDCOMPOSITECURVESEGMENT]=d=>{return IfcReparametrisedCompositeCurveSegment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREPRESENTATION]=d=>{return IfcRepresentation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREPRESENTATIONCONTEXT]=d=>{return IfcRepresentationContext.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREPRESENTATIONITEM]=d=>{return IfcRepresentationItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREPRESENTATIONMAP]=d=>{return IfcRepresentationMap.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRESOURCE]=d=>{return IfcResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRESOURCEAPPROVALRELATIONSHIP]=d=>{return IfcResourceApprovalRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRESOURCECONSTRAINTRELATIONSHIP]=d=>{return IfcResourceConstraintRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRESOURCELEVELRELATIONSHIP]=d=>{return IfcResourceLevelRelationship.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRESOURCETIME]=d=>{return IfcResourceTime.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREVOLVEDAREASOLID]=d=>{return IfcRevolvedAreaSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCREVOLVEDAREASOLIDTAPERED]=d=>{return IfcRevolvedAreaSolidTapered.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRIGHTCIRCULARCONE]=d=>{return IfcRightCircularCone.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCRIGHTCIRCULARCYLINDER]=d=>{return IfcRightCircularCylinder.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCROOF]=d=>{return IfcRoof.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCROOFTYPE]=d=>{return IfcRoofType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCROOT]=d=>{return IfcRoot.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCROUNDEDRECTANGLEPROFILEDEF]=d=>{return IfcRoundedRectangleProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSIUNIT]=d=>{return IfcSIUnit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSANITARYTERMINAL]=d=>{return IfcSanitaryTerminal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSANITARYTERMINALTYPE]=d=>{return IfcSanitaryTerminalType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSCHEDULINGTIME]=d=>{return IfcSchedulingTime.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSEAMCURVE]=d=>{return IfcSeamCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSECTIONPROPERTIES]=d=>{return IfcSectionProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSECTIONREINFORCEMENTPROPERTIES]=d=>{return IfcSectionReinforcementProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSECTIONEDSOLID]=d=>{return IfcSectionedSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSECTIONEDSOLIDHORIZONTAL]=d=>{return IfcSectionedSolidHorizontal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSECTIONEDSPINE]=d=>{return IfcSectionedSpine.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSENSOR]=d=>{return IfcSensor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSENSORTYPE]=d=>{return IfcSensorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSHADINGDEVICE]=d=>{return IfcShadingDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSHADINGDEVICETYPE]=d=>{return IfcShadingDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSHAPEASPECT]=d=>{return IfcShapeAspect.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSHAPEMODEL]=d=>{return IfcShapeModel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSHAPEREPRESENTATION]=d=>{return IfcShapeRepresentation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSHELLBASEDSURFACEMODEL]=d=>{return IfcShellBasedSurfaceModel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSIMPLEPROPERTY]=d=>{return IfcSimpleProperty.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSIMPLEPROPERTYTEMPLATE]=d=>{return IfcSimplePropertyTemplate.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSITE]=d=>{return IfcSite.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSLAB]=d=>{return IfcSlab.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSLABELEMENTEDCASE]=d=>{return IfcSlabElementedCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSLABSTANDARDCASE]=d=>{return IfcSlabStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSLABTYPE]=d=>{return IfcSlabType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSLIPPAGECONNECTIONCONDITION]=d=>{return IfcSlippageConnectionCondition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSOLARDEVICE]=d=>{return IfcSolarDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSOLARDEVICETYPE]=d=>{return IfcSolarDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSOLIDMODEL]=d=>{return IfcSolidModel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPACE]=d=>{return IfcSpace.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPACEHEATER]=d=>{return IfcSpaceHeater.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPACEHEATERTYPE]=d=>{return IfcSpaceHeaterType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPACETYPE]=d=>{return IfcSpaceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPATIALELEMENT]=d=>{return IfcSpatialElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPATIALELEMENTTYPE]=d=>{return IfcSpatialElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPATIALSTRUCTUREELEMENT]=d=>{return IfcSpatialStructureElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPATIALSTRUCTUREELEMENTTYPE]=d=>{return IfcSpatialStructureElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPATIALZONE]=d=>{return IfcSpatialZone.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPATIALZONETYPE]=d=>{return IfcSpatialZoneType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPHERE]=d=>{return IfcSphere.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSPHERICALSURFACE]=d=>{return IfcSphericalSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTACKTERMINAL]=d=>{return IfcStackTerminal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTACKTERMINALTYPE]=d=>{return IfcStackTerminalType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTAIR]=d=>{return IfcStair.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTAIRFLIGHT]=d=>{return IfcStairFlight.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTAIRFLIGHTTYPE]=d=>{return IfcStairFlightType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTAIRTYPE]=d=>{return IfcStairType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALACTION]=d=>{return IfcStructuralAction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALACTIVITY]=d=>{return IfcStructuralActivity.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALANALYSISMODEL]=d=>{return IfcStructuralAnalysisModel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALCONNECTION]=d=>{return IfcStructuralConnection.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALCONNECTIONCONDITION]=d=>{return IfcStructuralConnectionCondition.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALCURVEACTION]=d=>{return IfcStructuralCurveAction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALCURVECONNECTION]=d=>{return IfcStructuralCurveConnection.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALCURVEMEMBER]=d=>{return IfcStructuralCurveMember.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALCURVEMEMBERVARYING]=d=>{return IfcStructuralCurveMemberVarying.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALCURVEREACTION]=d=>{return IfcStructuralCurveReaction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALITEM]=d=>{return IfcStructuralItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLINEARACTION]=d=>{return IfcStructuralLinearAction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOAD]=d=>{return IfcStructuralLoad.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADCASE]=d=>{return IfcStructuralLoadCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADCONFIGURATION]=d=>{return IfcStructuralLoadConfiguration.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADGROUP]=d=>{return IfcStructuralLoadGroup.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADLINEARFORCE]=d=>{return IfcStructuralLoadLinearForce.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADORRESULT]=d=>{return IfcStructuralLoadOrResult.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADPLANARFORCE]=d=>{return IfcStructuralLoadPlanarForce.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADSINGLEDISPLACEMENT]=d=>{return IfcStructuralLoadSingleDisplacement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION]=d=>{return IfcStructuralLoadSingleDisplacementDistortion.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADSINGLEFORCE]=d=>{return IfcStructuralLoadSingleForce.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADSINGLEFORCEWARPING]=d=>{return IfcStructuralLoadSingleForceWarping.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADSTATIC]=d=>{return IfcStructuralLoadStatic.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALLOADTEMPERATURE]=d=>{return IfcStructuralLoadTemperature.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALMEMBER]=d=>{return IfcStructuralMember.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALPLANARACTION]=d=>{return IfcStructuralPlanarAction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALPOINTACTION]=d=>{return IfcStructuralPointAction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALPOINTCONNECTION]=d=>{return IfcStructuralPointConnection.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALPOINTREACTION]=d=>{return IfcStructuralPointReaction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALREACTION]=d=>{return IfcStructuralReaction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALRESULTGROUP]=d=>{return IfcStructuralResultGroup.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALSURFACEACTION]=d=>{return IfcStructuralSurfaceAction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALSURFACECONNECTION]=d=>{return IfcStructuralSurfaceConnection.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALSURFACEMEMBER]=d=>{return IfcStructuralSurfaceMember.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALSURFACEMEMBERVARYING]=d=>{return IfcStructuralSurfaceMemberVarying.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTRUCTURALSURFACEREACTION]=d=>{return IfcStructuralSurfaceReaction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTYLEMODEL]=d=>{return IfcStyleModel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTYLEDITEM]=d=>{return IfcStyledItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSTYLEDREPRESENTATION]=d=>{return IfcStyledRepresentation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSUBCONTRACTRESOURCE]=d=>{return IfcSubContractResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSUBCONTRACTRESOURCETYPE]=d=>{return IfcSubContractResourceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSUBEDGE]=d=>{return IfcSubedge.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACE]=d=>{return IfcSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACECURVE]=d=>{return IfcSurfaceCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACECURVESWEPTAREASOLID]=d=>{return IfcSurfaceCurveSweptAreaSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACEFEATURE]=d=>{return IfcSurfaceFeature.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACEOFLINEAREXTRUSION]=d=>{return IfcSurfaceOfLinearExtrusion.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACEOFREVOLUTION]=d=>{return IfcSurfaceOfRevolution.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACEREINFORCEMENTAREA]=d=>{return IfcSurfaceReinforcementArea.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACESTYLE]=d=>{return IfcSurfaceStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACESTYLELIGHTING]=d=>{return IfcSurfaceStyleLighting.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACESTYLEREFRACTION]=d=>{return IfcSurfaceStyleRefraction.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACESTYLERENDERING]=d=>{return IfcSurfaceStyleRendering.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACESTYLESHADING]=d=>{return IfcSurfaceStyleShading.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACESTYLEWITHTEXTURES]=d=>{return IfcSurfaceStyleWithTextures.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSURFACETEXTURE]=d=>{return IfcSurfaceTexture.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSWEPTAREASOLID]=d=>{return IfcSweptAreaSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSWEPTDISKSOLID]=d=>{return IfcSweptDiskSolid.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSWEPTDISKSOLIDPOLYGONAL]=d=>{return IfcSweptDiskSolidPolygonal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSWEPTSURFACE]=d=>{return IfcSweptSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSWITCHINGDEVICE]=d=>{return IfcSwitchingDevice.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSWITCHINGDEVICETYPE]=d=>{return IfcSwitchingDeviceType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSYSTEM]=d=>{return IfcSystem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSYSTEMFURNITUREELEMENT]=d=>{return IfcSystemFurnitureElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCSYSTEMFURNITUREELEMENTTYPE]=d=>{return IfcSystemFurnitureElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTSHAPEPROFILEDEF]=d=>{return IfcTShapeProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTABLE]=d=>{return IfcTable.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTABLECOLUMN]=d=>{return IfcTableColumn.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTABLEROW]=d=>{return IfcTableRow.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTANK]=d=>{return IfcTank.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTANKTYPE]=d=>{return IfcTankType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTASK]=d=>{return IfcTask.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTASKTIME]=d=>{return IfcTaskTime.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTASKTIMERECURRING]=d=>{return IfcTaskTimeRecurring.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTASKTYPE]=d=>{return IfcTaskType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTELECOMADDRESS]=d=>{return IfcTelecomAddress.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTENDON]=d=>{return IfcTendon.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTENDONANCHOR]=d=>{return IfcTendonAnchor.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTENDONANCHORTYPE]=d=>{return IfcTendonAnchorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTENDONCONDUIT]=d=>{return IfcTendonConduit.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTENDONCONDUITTYPE]=d=>{return IfcTendonConduitType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTENDONTYPE]=d=>{return IfcTendonType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTESSELLATEDFACESET]=d=>{return IfcTessellatedFaceSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTESSELLATEDITEM]=d=>{return IfcTessellatedItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTLITERAL]=d=>{return IfcTextLiteral.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTLITERALWITHEXTENT]=d=>{return IfcTextLiteralWithExtent.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTSTYLE]=d=>{return IfcTextStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTSTYLEFONTMODEL]=d=>{return IfcTextStyleFontModel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTSTYLEFORDEFINEDFONT]=d=>{return IfcTextStyleForDefinedFont.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTSTYLETEXTMODEL]=d=>{return IfcTextStyleTextModel.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTURECOORDINATE]=d=>{return IfcTextureCoordinate.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTURECOORDINATEGENERATOR]=d=>{return IfcTextureCoordinateGenerator.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTUREMAP]=d=>{return IfcTextureMap.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTUREVERTEX]=d=>{return IfcTextureVertex.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTEXTUREVERTEXLIST]=d=>{return IfcTextureVertexList.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTIMEPERIOD]=d=>{return IfcTimePeriod.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTIMESERIES]=d=>{return IfcTimeSeries.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTIMESERIESVALUE]=d=>{return IfcTimeSeriesValue.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTOPOLOGICALREPRESENTATIONITEM]=d=>{return IfcTopologicalRepresentationItem.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTOPOLOGYREPRESENTATION]=d=>{return IfcTopologyRepresentation.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTOROIDALSURFACE]=d=>{return IfcToroidalSurface.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRANSFORMER]=d=>{return IfcTransformer.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRANSFORMERTYPE]=d=>{return IfcTransformerType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRANSITIONCURVESEGMENT2D]=d=>{return IfcTransitionCurveSegment2D.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRANSPORTELEMENT]=d=>{return IfcTransportElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRANSPORTELEMENTTYPE]=d=>{return IfcTransportElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRAPEZIUMPROFILEDEF]=d=>{return IfcTrapeziumProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRIANGULATEDFACESET]=d=>{return IfcTriangulatedFaceSet.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRIANGULATEDIRREGULARNETWORK]=d=>{return IfcTriangulatedIrregularNetwork.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTRIMMEDCURVE]=d=>{return IfcTrimmedCurve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTUBEBUNDLE]=d=>{return IfcTubeBundle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTUBEBUNDLETYPE]=d=>{return IfcTubeBundleType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTYPEOBJECT]=d=>{return IfcTypeObject.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTYPEPROCESS]=d=>{return IfcTypeProcess.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTYPEPRODUCT]=d=>{return IfcTypeProduct.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCTYPERESOURCE]=d=>{return IfcTypeResource.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCUSHAPEPROFILEDEF]=d=>{return IfcUShapeProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCUNITASSIGNMENT]=d=>{return IfcUnitAssignment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCUNITARYCONTROLELEMENT]=d=>{return IfcUnitaryControlElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCUNITARYCONTROLELEMENTTYPE]=d=>{return IfcUnitaryControlElementType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCUNITARYEQUIPMENT]=d=>{return IfcUnitaryEquipment.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCUNITARYEQUIPMENTTYPE]=d=>{return IfcUnitaryEquipmentType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVALVE]=d=>{return IfcValve.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVALVETYPE]=d=>{return IfcValveType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVECTOR]=d=>{return IfcVector.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVERTEX]=d=>{return IfcVertex.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVERTEXLOOP]=d=>{return IfcVertexLoop.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVERTEXPOINT]=d=>{return IfcVertexPoint.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVIBRATIONDAMPER]=d=>{return IfcVibrationDamper.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVIBRATIONDAMPERTYPE]=d=>{return IfcVibrationDamperType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVIBRATIONISOLATOR]=d=>{return IfcVibrationIsolator.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVIBRATIONISOLATORTYPE]=d=>{return IfcVibrationIsolatorType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVIRTUALELEMENT]=d=>{return IfcVirtualElement.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVIRTUALGRIDINTERSECTION]=d=>{return IfcVirtualGridIntersection.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCVOIDINGFEATURE]=d=>{return IfcVoidingFeature.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWALL]=d=>{return IfcWall.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWALLELEMENTEDCASE]=d=>{return IfcWallElementedCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWALLSTANDARDCASE]=d=>{return IfcWallStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWALLTYPE]=d=>{return IfcWallType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWASTETERMINAL]=d=>{return IfcWasteTerminal.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWASTETERMINALTYPE]=d=>{return IfcWasteTerminalType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWINDOW]=d=>{return IfcWindow.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWINDOWLININGPROPERTIES]=d=>{return IfcWindowLiningProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWINDOWPANELPROPERTIES]=d=>{return IfcWindowPanelProperties.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWINDOWSTANDARDCASE]=d=>{return IfcWindowStandardCase.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWINDOWSTYLE]=d=>{return IfcWindowStyle.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWINDOWTYPE]=d=>{return IfcWindowType.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWORKCALENDAR]=d=>{return IfcWorkCalendar.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWORKCONTROL]=d=>{return IfcWorkControl.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWORKPLAN]=d=>{return IfcWorkPlan.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWORKSCHEDULE]=d=>{return IfcWorkSchedule.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCWORKTIME]=d=>{return IfcWorkTime.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCZSHAPEPROFILEDEF]=d=>{return IfcZShapeProfileDef.FromTape(d.ID,d.type,d.arguments);};FromRawLineData[IFCZONE]=d=>{return IfcZone.FromTape(d.ID,d.type,d.arguments);};var Handle=class{constructor(id){this.value=id;}toTape(args){args.push({type:5,value:this.value});}};exports.Handle=Handle;function Value(type,value){return{t:type,v:value};}var IfcAbsorbedDoseMeasure=class{constructor(v){this.value=v;}};exports.IfcAbsorbedDoseMeasure=IfcAbsorbedDoseMeasure;var IfcAccelerationMeasure=class{constructor(v){this.value=v;}};exports.IfcAccelerationMeasure=IfcAccelerationMeasure;var IfcAmountOfSubstanceMeasure=class{constructor(v){this.value=v;}};exports.IfcAmountOfSubstanceMeasure=IfcAmountOfSubstanceMeasure;var IfcAngularVelocityMeasure=class{constructor(v){this.value=v;}};exports.IfcAngularVelocityMeasure=IfcAngularVelocityMeasure;var IfcAreaDensityMeasure=class{constructor(v){this.value=v;}};exports.IfcAreaDensityMeasure=IfcAreaDensityMeasure;var IfcAreaMeasure=class{constructor(v){this.value=v;}};exports.IfcAreaMeasure=IfcAreaMeasure;var IfcBinary=class{constructor(v){this.value=v;}};exports.IfcBinary=IfcBinary;var IfcBoolean=class{constructor(v){this.value=v;}};exports.IfcBoolean=IfcBoolean;var IfcBoxAlignment=class{constructor(v){this.value=v;}};exports.IfcBoxAlignment=IfcBoxAlignment;var IfcCardinalPointReference=class{constructor(v){this.value=v;}};exports.IfcCardinalPointReference=IfcCardinalPointReference;var IfcContextDependentMeasure=class{constructor(v){this.value=v;}};exports.IfcContextDependentMeasure=IfcContextDependentMeasure;var IfcCountMeasure=class{constructor(v){this.value=v;}};exports.IfcCountMeasure=IfcCountMeasure;var IfcCurvatureMeasure=class{constructor(v){this.value=v;}};exports.IfcCurvatureMeasure=IfcCurvatureMeasure;var IfcDate=class{constructor(v){this.value=v;}};exports.IfcDate=IfcDate;var IfcDateTime=class{constructor(v){this.value=v;}};exports.IfcDateTime=IfcDateTime;var IfcDayInMonthNumber=class{constructor(v){this.value=v;}};exports.IfcDayInMonthNumber=IfcDayInMonthNumber;var IfcDayInWeekNumber=class{constructor(v){this.value=v;}};exports.IfcDayInWeekNumber=IfcDayInWeekNumber;var IfcDescriptiveMeasure=class{constructor(v){this.value=v;}};exports.IfcDescriptiveMeasure=IfcDescriptiveMeasure;var IfcDimensionCount=class{constructor(v){this.value=v;}};exports.IfcDimensionCount=IfcDimensionCount;var IfcDoseEquivalentMeasure=class{constructor(v){this.value=v;}};exports.IfcDoseEquivalentMeasure=IfcDoseEquivalentMeasure;var IfcDuration=class{constructor(v){this.value=v;}};exports.IfcDuration=IfcDuration;var IfcDynamicViscosityMeasure=class{constructor(v){this.value=v;}};exports.IfcDynamicViscosityMeasure=IfcDynamicViscosityMeasure;var IfcElectricCapacitanceMeasure=class{constructor(v){this.value=v;}};exports.IfcElectricCapacitanceMeasure=IfcElectricCapacitanceMeasure;var IfcElectricChargeMeasure=class{constructor(v){this.value=v;}};exports.IfcElectricChargeMeasure=IfcElectricChargeMeasure;var IfcElectricConductanceMeasure=class{constructor(v){this.value=v;}};exports.IfcElectricConductanceMeasure=IfcElectricConductanceMeasure;var IfcElectricCurrentMeasure=class{constructor(v){this.value=v;}};exports.IfcElectricCurrentMeasure=IfcElectricCurrentMeasure;var IfcElectricResistanceMeasure=class{constructor(v){this.value=v;}};exports.IfcElectricResistanceMeasure=IfcElectricResistanceMeasure;var IfcElectricVoltageMeasure=class{constructor(v){this.value=v;}};exports.IfcElectricVoltageMeasure=IfcElectricVoltageMeasure;var IfcEnergyMeasure=class{constructor(v){this.value=v;}};exports.IfcEnergyMeasure=IfcEnergyMeasure;var IfcFontStyle=class{constructor(v){this.value=v;}};exports.IfcFontStyle=IfcFontStyle;var IfcFontVariant=class{constructor(v){this.value=v;}};exports.IfcFontVariant=IfcFontVariant;var IfcFontWeight=class{constructor(v){this.value=v;}};exports.IfcFontWeight=IfcFontWeight;var IfcForceMeasure=class{constructor(v){this.value=v;}};exports.IfcForceMeasure=IfcForceMeasure;var IfcFrequencyMeasure=class{constructor(v){this.value=v;}};exports.IfcFrequencyMeasure=IfcFrequencyMeasure;var IfcGloballyUniqueId=class{constructor(v){this.value=v;}};exports.IfcGloballyUniqueId=IfcGloballyUniqueId;var IfcHeatFluxDensityMeasure=class{constructor(v){this.value=v;}};exports.IfcHeatFluxDensityMeasure=IfcHeatFluxDensityMeasure;var IfcHeatingValueMeasure=class{constructor(v){this.value=v;}};exports.IfcHeatingValueMeasure=IfcHeatingValueMeasure;var IfcIdentifier=class{constructor(v){this.value=v;}};exports.IfcIdentifier=IfcIdentifier;var IfcIlluminanceMeasure=class{constructor(v){this.value=v;}};exports.IfcIlluminanceMeasure=IfcIlluminanceMeasure;var IfcInductanceMeasure=class{constructor(v){this.value=v;}};exports.IfcInductanceMeasure=IfcInductanceMeasure;var IfcInteger=class{constructor(v){this.value=v;}};exports.IfcInteger=IfcInteger;var IfcIntegerCountRateMeasure=class{constructor(v){this.value=v;}};exports.IfcIntegerCountRateMeasure=IfcIntegerCountRateMeasure;var IfcIonConcentrationMeasure=class{constructor(v){this.value=v;}};exports.IfcIonConcentrationMeasure=IfcIonConcentrationMeasure;var IfcIsothermalMoistureCapacityMeasure=class{constructor(v){this.value=v;}};exports.IfcIsothermalMoistureCapacityMeasure=IfcIsothermalMoistureCapacityMeasure;var IfcKinematicViscosityMeasure=class{constructor(v){this.value=v;}};exports.IfcKinematicViscosityMeasure=IfcKinematicViscosityMeasure;var IfcLabel=class{constructor(v){this.value=v;}};exports.IfcLabel=IfcLabel;var IfcLanguageId=class{constructor(v){this.value=v;}};exports.IfcLanguageId=IfcLanguageId;var IfcLengthMeasure=class{constructor(v){this.value=v;}};exports.IfcLengthMeasure=IfcLengthMeasure;var IfcLinearForceMeasure=class{constructor(v){this.value=v;}};exports.IfcLinearForceMeasure=IfcLinearForceMeasure;var IfcLinearMomentMeasure=class{constructor(v){this.value=v;}};exports.IfcLinearMomentMeasure=IfcLinearMomentMeasure;var IfcLinearStiffnessMeasure=class{constructor(v){this.value=v;}};exports.IfcLinearStiffnessMeasure=IfcLinearStiffnessMeasure;var IfcLinearVelocityMeasure=class{constructor(v){this.value=v;}};exports.IfcLinearVelocityMeasure=IfcLinearVelocityMeasure;var IfcLogical=class{constructor(v){this.value=v;}};exports.IfcLogical=IfcLogical;var IfcLuminousFluxMeasure=class{constructor(v){this.value=v;}};exports.IfcLuminousFluxMeasure=IfcLuminousFluxMeasure;var IfcLuminousIntensityDistributionMeasure=class{constructor(v){this.value=v;}};exports.IfcLuminousIntensityDistributionMeasure=IfcLuminousIntensityDistributionMeasure;var IfcLuminousIntensityMeasure=class{constructor(v){this.value=v;}};exports.IfcLuminousIntensityMeasure=IfcLuminousIntensityMeasure;var IfcMagneticFluxDensityMeasure=class{constructor(v){this.value=v;}};exports.IfcMagneticFluxDensityMeasure=IfcMagneticFluxDensityMeasure;var IfcMagneticFluxMeasure=class{constructor(v){this.value=v;}};exports.IfcMagneticFluxMeasure=IfcMagneticFluxMeasure;var IfcMassDensityMeasure=class{constructor(v){this.value=v;}};exports.IfcMassDensityMeasure=IfcMassDensityMeasure;var IfcMassFlowRateMeasure=class{constructor(v){this.value=v;}};exports.IfcMassFlowRateMeasure=IfcMassFlowRateMeasure;var IfcMassMeasure=class{constructor(v){this.value=v;}};exports.IfcMassMeasure=IfcMassMeasure;var IfcMassPerLengthMeasure=class{constructor(v){this.value=v;}};exports.IfcMassPerLengthMeasure=IfcMassPerLengthMeasure;var IfcModulusOfElasticityMeasure=class{constructor(v){this.value=v;}};exports.IfcModulusOfElasticityMeasure=IfcModulusOfElasticityMeasure;var IfcModulusOfLinearSubgradeReactionMeasure=class{constructor(v){this.value=v;}};exports.IfcModulusOfLinearSubgradeReactionMeasure=IfcModulusOfLinearSubgradeReactionMeasure;var IfcModulusOfRotationalSubgradeReactionMeasure=class{constructor(v){this.value=v;}};exports.IfcModulusOfRotationalSubgradeReactionMeasure=IfcModulusOfRotationalSubgradeReactionMeasure;var IfcModulusOfSubgradeReactionMeasure=class{constructor(v){this.value=v;}};exports.IfcModulusOfSubgradeReactionMeasure=IfcModulusOfSubgradeReactionMeasure;var IfcMoistureDiffusivityMeasure=class{constructor(v){this.value=v;}};exports.IfcMoistureDiffusivityMeasure=IfcMoistureDiffusivityMeasure;var IfcMolecularWeightMeasure=class{constructor(v){this.value=v;}};exports.IfcMolecularWeightMeasure=IfcMolecularWeightMeasure;var IfcMomentOfInertiaMeasure=class{constructor(v){this.value=v;}};exports.IfcMomentOfInertiaMeasure=IfcMomentOfInertiaMeasure;var IfcMonetaryMeasure=class{constructor(v){this.value=v;}};exports.IfcMonetaryMeasure=IfcMonetaryMeasure;var IfcMonthInYearNumber=class{constructor(v){this.value=v;}};exports.IfcMonthInYearNumber=IfcMonthInYearNumber;var IfcNonNegativeLengthMeasure=class{constructor(v){this.value=v;}};exports.IfcNonNegativeLengthMeasure=IfcNonNegativeLengthMeasure;var IfcNormalisedRatioMeasure=class{constructor(v){this.value=v;}};exports.IfcNormalisedRatioMeasure=IfcNormalisedRatioMeasure;var IfcNumericMeasure=class{constructor(v){this.value=v;}};exports.IfcNumericMeasure=IfcNumericMeasure;var IfcPHMeasure=class{constructor(v){this.value=v;}};exports.IfcPHMeasure=IfcPHMeasure;var IfcParameterValue=class{constructor(v){this.value=v;}};exports.IfcParameterValue=IfcParameterValue;var IfcPlanarForceMeasure=class{constructor(v){this.value=v;}};exports.IfcPlanarForceMeasure=IfcPlanarForceMeasure;var IfcPlaneAngleMeasure=class{constructor(v){this.value=v;}};exports.IfcPlaneAngleMeasure=IfcPlaneAngleMeasure;var IfcPositiveInteger=class{constructor(v){this.value=v;}};exports.IfcPositiveInteger=IfcPositiveInteger;var IfcPositiveLengthMeasure=class{constructor(v){this.value=v;}};exports.IfcPositiveLengthMeasure=IfcPositiveLengthMeasure;var IfcPositivePlaneAngleMeasure=class{constructor(v){this.value=v;}};exports.IfcPositivePlaneAngleMeasure=IfcPositivePlaneAngleMeasure;var IfcPositiveRatioMeasure=class{constructor(v){this.value=v;}};exports.IfcPositiveRatioMeasure=IfcPositiveRatioMeasure;var IfcPowerMeasure=class{constructor(v){this.value=v;}};exports.IfcPowerMeasure=IfcPowerMeasure;var IfcPresentableText=class{constructor(v){this.value=v;}};exports.IfcPresentableText=IfcPresentableText;var IfcPressureMeasure=class{constructor(v){this.value=v;}};exports.IfcPressureMeasure=IfcPressureMeasure;var IfcRadioActivityMeasure=class{constructor(v){this.value=v;}};exports.IfcRadioActivityMeasure=IfcRadioActivityMeasure;var IfcRatioMeasure=class{constructor(v){this.value=v;}};exports.IfcRatioMeasure=IfcRatioMeasure;var IfcReal=class{constructor(v){this.value=v;}};exports.IfcReal=IfcReal;var IfcRotationalFrequencyMeasure=class{constructor(v){this.value=v;}};exports.IfcRotationalFrequencyMeasure=IfcRotationalFrequencyMeasure;var IfcRotationalMassMeasure=class{constructor(v){this.value=v;}};exports.IfcRotationalMassMeasure=IfcRotationalMassMeasure;var IfcRotationalStiffnessMeasure=class{constructor(v){this.value=v;}};exports.IfcRotationalStiffnessMeasure=IfcRotationalStiffnessMeasure;var IfcSectionModulusMeasure=class{constructor(v){this.value=v;}};exports.IfcSectionModulusMeasure=IfcSectionModulusMeasure;var IfcSectionalAreaIntegralMeasure=class{constructor(v){this.value=v;}};exports.IfcSectionalAreaIntegralMeasure=IfcSectionalAreaIntegralMeasure;var IfcShearModulusMeasure=class{constructor(v){this.value=v;}};exports.IfcShearModulusMeasure=IfcShearModulusMeasure;var IfcSolidAngleMeasure=class{constructor(v){this.value=v;}};exports.IfcSolidAngleMeasure=IfcSolidAngleMeasure;var IfcSoundPowerLevelMeasure=class{constructor(v){this.value=v;}};exports.IfcSoundPowerLevelMeasure=IfcSoundPowerLevelMeasure;var IfcSoundPowerMeasure=class{constructor(v){this.value=v;}};exports.IfcSoundPowerMeasure=IfcSoundPowerMeasure;var IfcSoundPressureLevelMeasure=class{constructor(v){this.value=v;}};exports.IfcSoundPressureLevelMeasure=IfcSoundPressureLevelMeasure;var IfcSoundPressureMeasure=class{constructor(v){this.value=v;}};exports.IfcSoundPressureMeasure=IfcSoundPressureMeasure;var IfcSpecificHeatCapacityMeasure=class{constructor(v){this.value=v;}};exports.IfcSpecificHeatCapacityMeasure=IfcSpecificHeatCapacityMeasure;var IfcSpecularExponent=class{constructor(v){this.value=v;}};exports.IfcSpecularExponent=IfcSpecularExponent;var IfcSpecularRoughness=class{constructor(v){this.value=v;}};exports.IfcSpecularRoughness=IfcSpecularRoughness;var IfcTemperatureGradientMeasure=class{constructor(v){this.value=v;}};exports.IfcTemperatureGradientMeasure=IfcTemperatureGradientMeasure;var IfcTemperatureRateOfChangeMeasure=class{constructor(v){this.value=v;}};exports.IfcTemperatureRateOfChangeMeasure=IfcTemperatureRateOfChangeMeasure;var IfcText=class{constructor(v){this.value=v;}};exports.IfcText=IfcText;var IfcTextAlignment=class{constructor(v){this.value=v;}};exports.IfcTextAlignment=IfcTextAlignment;var IfcTextDecoration=class{constructor(v){this.value=v;}};exports.IfcTextDecoration=IfcTextDecoration;var IfcTextFontName=class{constructor(v){this.value=v;}};exports.IfcTextFontName=IfcTextFontName;var IfcTextTransformation=class{constructor(v){this.value=v;}};exports.IfcTextTransformation=IfcTextTransformation;var IfcThermalAdmittanceMeasure=class{constructor(v){this.value=v;}};exports.IfcThermalAdmittanceMeasure=IfcThermalAdmittanceMeasure;var IfcThermalConductivityMeasure=class{constructor(v){this.value=v;}};exports.IfcThermalConductivityMeasure=IfcThermalConductivityMeasure;var IfcThermalExpansionCoefficientMeasure=class{constructor(v){this.value=v;}};exports.IfcThermalExpansionCoefficientMeasure=IfcThermalExpansionCoefficientMeasure;var IfcThermalResistanceMeasure=class{constructor(v){this.value=v;}};exports.IfcThermalResistanceMeasure=IfcThermalResistanceMeasure;var IfcThermalTransmittanceMeasure=class{constructor(v){this.value=v;}};exports.IfcThermalTransmittanceMeasure=IfcThermalTransmittanceMeasure;var IfcThermodynamicTemperatureMeasure=class{constructor(v){this.value=v;}};exports.IfcThermodynamicTemperatureMeasure=IfcThermodynamicTemperatureMeasure;var IfcTime=class{constructor(v){this.value=v;}};exports.IfcTime=IfcTime;var IfcTimeMeasure=class{constructor(v){this.value=v;}};exports.IfcTimeMeasure=IfcTimeMeasure;var IfcTimeStamp=class{constructor(v){this.value=v;}};exports.IfcTimeStamp=IfcTimeStamp;var IfcTorqueMeasure=class{constructor(v){this.value=v;}};exports.IfcTorqueMeasure=IfcTorqueMeasure;var IfcURIReference=class{constructor(v){this.value=v;}};exports.IfcURIReference=IfcURIReference;var IfcVaporPermeabilityMeasure=class{constructor(v){this.value=v;}};exports.IfcVaporPermeabilityMeasure=IfcVaporPermeabilityMeasure;var IfcVolumeMeasure=class{constructor(v){this.value=v;}};exports.IfcVolumeMeasure=IfcVolumeMeasure;var IfcVolumetricFlowRateMeasure=class{constructor(v){this.value=v;}};exports.IfcVolumetricFlowRateMeasure=IfcVolumetricFlowRateMeasure;var IfcWarpingConstantMeasure=class{constructor(v){this.value=v;}};exports.IfcWarpingConstantMeasure=IfcWarpingConstantMeasure;var IfcWarpingMomentMeasure=class{constructor(v){this.value=v;}};exports.IfcWarpingMomentMeasure=IfcWarpingMomentMeasure;var IfcActionRequestTypeEnum=class{constructor(v){this.value=v;}};exports.IfcActionRequestTypeEnum=IfcActionRequestTypeEnum;IfcActionRequestTypeEnum.EMAIL="EMAIL";IfcActionRequestTypeEnum.FAX="FAX";IfcActionRequestTypeEnum.PHONE="PHONE";IfcActionRequestTypeEnum.POST="POST";IfcActionRequestTypeEnum.VERBAL="VERBAL";IfcActionRequestTypeEnum.USERDEFINED="USERDEFINED";IfcActionRequestTypeEnum.NOTDEFINED="NOTDEFINED";var IfcActionSourceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcActionSourceTypeEnum=IfcActionSourceTypeEnum;IfcActionSourceTypeEnum.DEAD_LOAD_G="DEAD_LOAD_G";IfcActionSourceTypeEnum.COMPLETION_G1="COMPLETION_G1";IfcActionSourceTypeEnum.LIVE_LOAD_Q="LIVE_LOAD_Q";IfcActionSourceTypeEnum.SNOW_S="SNOW_S";IfcActionSourceTypeEnum.WIND_W="WIND_W";IfcActionSourceTypeEnum.PRESTRESSING_P="PRESTRESSING_P";IfcActionSourceTypeEnum.SETTLEMENT_U="SETTLEMENT_U";IfcActionSourceTypeEnum.TEMPERATURE_T="TEMPERATURE_T";IfcActionSourceTypeEnum.EARTHQUAKE_E="EARTHQUAKE_E";IfcActionSourceTypeEnum.FIRE="FIRE";IfcActionSourceTypeEnum.IMPULSE="IMPULSE";IfcActionSourceTypeEnum.IMPACT="IMPACT";IfcActionSourceTypeEnum.TRANSPORT="TRANSPORT";IfcActionSourceTypeEnum.ERECTION="ERECTION";IfcActionSourceTypeEnum.PROPPING="PROPPING";IfcActionSourceTypeEnum.SYSTEM_IMPERFECTION="SYSTEM_IMPERFECTION";IfcActionSourceTypeEnum.SHRINKAGE="SHRINKAGE";IfcActionSourceTypeEnum.CREEP="CREEP";IfcActionSourceTypeEnum.LACK_OF_FIT="LACK_OF_FIT";IfcActionSourceTypeEnum.BUOYANCY="BUOYANCY";IfcActionSourceTypeEnum.ICE="ICE";IfcActionSourceTypeEnum.CURRENT="CURRENT";IfcActionSourceTypeEnum.WAVE="WAVE";IfcActionSourceTypeEnum.RAIN="RAIN";IfcActionSourceTypeEnum.BRAKES="BRAKES";IfcActionSourceTypeEnum.USERDEFINED="USERDEFINED";IfcActionSourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcActionTypeEnum=class{constructor(v){this.value=v;}};exports.IfcActionTypeEnum=IfcActionTypeEnum;IfcActionTypeEnum.PERMANENT_G="PERMANENT_G";IfcActionTypeEnum.VARIABLE_Q="VARIABLE_Q";IfcActionTypeEnum.EXTRAORDINARY_A="EXTRAORDINARY_A";IfcActionTypeEnum.USERDEFINED="USERDEFINED";IfcActionTypeEnum.NOTDEFINED="NOTDEFINED";var IfcActuatorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcActuatorTypeEnum=IfcActuatorTypeEnum;IfcActuatorTypeEnum.ELECTRICACTUATOR="ELECTRICACTUATOR";IfcActuatorTypeEnum.HANDOPERATEDACTUATOR="HANDOPERATEDACTUATOR";IfcActuatorTypeEnum.HYDRAULICACTUATOR="HYDRAULICACTUATOR";IfcActuatorTypeEnum.PNEUMATICACTUATOR="PNEUMATICACTUATOR";IfcActuatorTypeEnum.THERMOSTATICACTUATOR="THERMOSTATICACTUATOR";IfcActuatorTypeEnum.USERDEFINED="USERDEFINED";IfcActuatorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAddressTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAddressTypeEnum=IfcAddressTypeEnum;IfcAddressTypeEnum.OFFICE="OFFICE";IfcAddressTypeEnum.SITE="SITE";IfcAddressTypeEnum.HOME="HOME";IfcAddressTypeEnum.DISTRIBUTIONPOINT="DISTRIBUTIONPOINT";IfcAddressTypeEnum.USERDEFINED="USERDEFINED";var IfcAirTerminalBoxTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAirTerminalBoxTypeEnum=IfcAirTerminalBoxTypeEnum;IfcAirTerminalBoxTypeEnum.CONSTANTFLOW="CONSTANTFLOW";IfcAirTerminalBoxTypeEnum.VARIABLEFLOWPRESSUREDEPENDANT="VARIABLEFLOWPRESSUREDEPENDANT";IfcAirTerminalBoxTypeEnum.VARIABLEFLOWPRESSUREINDEPENDANT="VARIABLEFLOWPRESSUREINDEPENDANT";IfcAirTerminalBoxTypeEnum.USERDEFINED="USERDEFINED";IfcAirTerminalBoxTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAirTerminalTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAirTerminalTypeEnum=IfcAirTerminalTypeEnum;IfcAirTerminalTypeEnum.DIFFUSER="DIFFUSER";IfcAirTerminalTypeEnum.GRILLE="GRILLE";IfcAirTerminalTypeEnum.LOUVRE="LOUVRE";IfcAirTerminalTypeEnum.REGISTER="REGISTER";IfcAirTerminalTypeEnum.USERDEFINED="USERDEFINED";IfcAirTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAirToAirHeatRecoveryTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAirToAirHeatRecoveryTypeEnum=IfcAirToAirHeatRecoveryTypeEnum;IfcAirToAirHeatRecoveryTypeEnum.FIXEDPLATECOUNTERFLOWEXCHANGER="FIXEDPLATECOUNTERFLOWEXCHANGER";IfcAirToAirHeatRecoveryTypeEnum.FIXEDPLATECROSSFLOWEXCHANGER="FIXEDPLATECROSSFLOWEXCHANGER";IfcAirToAirHeatRecoveryTypeEnum.FIXEDPLATEPARALLELFLOWEXCHANGER="FIXEDPLATEPARALLELFLOWEXCHANGER";IfcAirToAirHeatRecoveryTypeEnum.ROTARYWHEEL="ROTARYWHEEL";IfcAirToAirHeatRecoveryTypeEnum.RUNAROUNDCOILLOOP="RUNAROUNDCOILLOOP";IfcAirToAirHeatRecoveryTypeEnum.HEATPIPE="HEATPIPE";IfcAirToAirHeatRecoveryTypeEnum.TWINTOWERENTHALPYRECOVERYLOOPS="TWINTOWERENTHALPYRECOVERYLOOPS";IfcAirToAirHeatRecoveryTypeEnum.THERMOSIPHONSEALEDTUBEHEATEXCHANGERS="THERMOSIPHONSEALEDTUBEHEATEXCHANGERS";IfcAirToAirHeatRecoveryTypeEnum.THERMOSIPHONCOILTYPEHEATEXCHANGERS="THERMOSIPHONCOILTYPEHEATEXCHANGERS";IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED="USERDEFINED";IfcAirToAirHeatRecoveryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAlarmTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAlarmTypeEnum=IfcAlarmTypeEnum;IfcAlarmTypeEnum.BELL="BELL";IfcAlarmTypeEnum.BREAKGLASSBUTTON="BREAKGLASSBUTTON";IfcAlarmTypeEnum.LIGHT="LIGHT";IfcAlarmTypeEnum.MANUALPULLBOX="MANUALPULLBOX";IfcAlarmTypeEnum.SIREN="SIREN";IfcAlarmTypeEnum.WHISTLE="WHISTLE";IfcAlarmTypeEnum.USERDEFINED="USERDEFINED";IfcAlarmTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAlignmentTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAlignmentTypeEnum=IfcAlignmentTypeEnum;IfcAlignmentTypeEnum.USERDEFINED="USERDEFINED";IfcAlignmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAnalysisModelTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAnalysisModelTypeEnum=IfcAnalysisModelTypeEnum;IfcAnalysisModelTypeEnum.IN_PLANE_LOADING_2D="IN_PLANE_LOADING_2D";IfcAnalysisModelTypeEnum.OUT_PLANE_LOADING_2D="OUT_PLANE_LOADING_2D";IfcAnalysisModelTypeEnum.LOADING_3D="LOADING_3D";IfcAnalysisModelTypeEnum.USERDEFINED="USERDEFINED";IfcAnalysisModelTypeEnum.NOTDEFINED="NOTDEFINED";var IfcAnalysisTheoryTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAnalysisTheoryTypeEnum=IfcAnalysisTheoryTypeEnum;IfcAnalysisTheoryTypeEnum.FIRST_ORDER_THEORY="FIRST_ORDER_THEORY";IfcAnalysisTheoryTypeEnum.SECOND_ORDER_THEORY="SECOND_ORDER_THEORY";IfcAnalysisTheoryTypeEnum.THIRD_ORDER_THEORY="THIRD_ORDER_THEORY";IfcAnalysisTheoryTypeEnum.FULL_NONLINEAR_THEORY="FULL_NONLINEAR_THEORY";IfcAnalysisTheoryTypeEnum.USERDEFINED="USERDEFINED";IfcAnalysisTheoryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcArithmeticOperatorEnum=class{constructor(v){this.value=v;}};exports.IfcArithmeticOperatorEnum=IfcArithmeticOperatorEnum;IfcArithmeticOperatorEnum.ADD="ADD";IfcArithmeticOperatorEnum.DIVIDE="DIVIDE";IfcArithmeticOperatorEnum.MULTIPLY="MULTIPLY";IfcArithmeticOperatorEnum.SUBTRACT="SUBTRACT";var IfcAssemblyPlaceEnum=class{constructor(v){this.value=v;}};exports.IfcAssemblyPlaceEnum=IfcAssemblyPlaceEnum;IfcAssemblyPlaceEnum.SITE="SITE";IfcAssemblyPlaceEnum.FACTORY="FACTORY";IfcAssemblyPlaceEnum.NOTDEFINED="NOTDEFINED";var IfcAudioVisualApplianceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcAudioVisualApplianceTypeEnum=IfcAudioVisualApplianceTypeEnum;IfcAudioVisualApplianceTypeEnum.AMPLIFIER="AMPLIFIER";IfcAudioVisualApplianceTypeEnum.CAMERA="CAMERA";IfcAudioVisualApplianceTypeEnum.DISPLAY="DISPLAY";IfcAudioVisualApplianceTypeEnum.MICROPHONE="MICROPHONE";IfcAudioVisualApplianceTypeEnum.PLAYER="PLAYER";IfcAudioVisualApplianceTypeEnum.PROJECTOR="PROJECTOR";IfcAudioVisualApplianceTypeEnum.RECEIVER="RECEIVER";IfcAudioVisualApplianceTypeEnum.SPEAKER="SPEAKER";IfcAudioVisualApplianceTypeEnum.SWITCHER="SWITCHER";IfcAudioVisualApplianceTypeEnum.TELEPHONE="TELEPHONE";IfcAudioVisualApplianceTypeEnum.TUNER="TUNER";IfcAudioVisualApplianceTypeEnum.USERDEFINED="USERDEFINED";IfcAudioVisualApplianceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBSplineCurveForm=class{constructor(v){this.value=v;}};exports.IfcBSplineCurveForm=IfcBSplineCurveForm;IfcBSplineCurveForm.POLYLINE_FORM="POLYLINE_FORM";IfcBSplineCurveForm.CIRCULAR_ARC="CIRCULAR_ARC";IfcBSplineCurveForm.ELLIPTIC_ARC="ELLIPTIC_ARC";IfcBSplineCurveForm.PARABOLIC_ARC="PARABOLIC_ARC";IfcBSplineCurveForm.HYPERBOLIC_ARC="HYPERBOLIC_ARC";IfcBSplineCurveForm.UNSPECIFIED="UNSPECIFIED";var IfcBSplineSurfaceForm=class{constructor(v){this.value=v;}};exports.IfcBSplineSurfaceForm=IfcBSplineSurfaceForm;IfcBSplineSurfaceForm.PLANE_SURF="PLANE_SURF";IfcBSplineSurfaceForm.CYLINDRICAL_SURF="CYLINDRICAL_SURF";IfcBSplineSurfaceForm.CONICAL_SURF="CONICAL_SURF";IfcBSplineSurfaceForm.SPHERICAL_SURF="SPHERICAL_SURF";IfcBSplineSurfaceForm.TOROIDAL_SURF="TOROIDAL_SURF";IfcBSplineSurfaceForm.SURF_OF_REVOLUTION="SURF_OF_REVOLUTION";IfcBSplineSurfaceForm.RULED_SURF="RULED_SURF";IfcBSplineSurfaceForm.GENERALISED_CONE="GENERALISED_CONE";IfcBSplineSurfaceForm.QUADRIC_SURF="QUADRIC_SURF";IfcBSplineSurfaceForm.SURF_OF_LINEAR_EXTRUSION="SURF_OF_LINEAR_EXTRUSION";IfcBSplineSurfaceForm.UNSPECIFIED="UNSPECIFIED";var IfcBeamTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBeamTypeEnum=IfcBeamTypeEnum;IfcBeamTypeEnum.BEAM="BEAM";IfcBeamTypeEnum.JOIST="JOIST";IfcBeamTypeEnum.HOLLOWCORE="HOLLOWCORE";IfcBeamTypeEnum.LINTEL="LINTEL";IfcBeamTypeEnum.SPANDREL="SPANDREL";IfcBeamTypeEnum.T_BEAM="T_BEAM";IfcBeamTypeEnum.GIRDER_SEGMENT="GIRDER_SEGMENT";IfcBeamTypeEnum.DIAPHRAGM="DIAPHRAGM";IfcBeamTypeEnum.PIERCAP="PIERCAP";IfcBeamTypeEnum.HATSTONE="HATSTONE";IfcBeamTypeEnum.CORNICE="CORNICE";IfcBeamTypeEnum.EDGEBEAM="EDGEBEAM";IfcBeamTypeEnum.USERDEFINED="USERDEFINED";IfcBeamTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBearingTypeDisplacementEnum=class{constructor(v){this.value=v;}};exports.IfcBearingTypeDisplacementEnum=IfcBearingTypeDisplacementEnum;IfcBearingTypeDisplacementEnum.FIXED_MOVEMENT="FIXED_MOVEMENT";IfcBearingTypeDisplacementEnum.GUIDED_LONGITUDINAL="GUIDED_LONGITUDINAL";IfcBearingTypeDisplacementEnum.GUIDED_TRANSVERSAL="GUIDED_TRANSVERSAL";IfcBearingTypeDisplacementEnum.FREE_MOVEMENT="FREE_MOVEMENT";IfcBearingTypeDisplacementEnum.NOTDEFINED="NOTDEFINED";var IfcBearingTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBearingTypeEnum=IfcBearingTypeEnum;IfcBearingTypeEnum.CYLINDRICAL="CYLINDRICAL";IfcBearingTypeEnum.SPHERICAL="SPHERICAL";IfcBearingTypeEnum.ELASTOMERIC="ELASTOMERIC";IfcBearingTypeEnum.POT="POT";IfcBearingTypeEnum.GUIDE="GUIDE";IfcBearingTypeEnum.ROCKER="ROCKER";IfcBearingTypeEnum.ROLLER="ROLLER";IfcBearingTypeEnum.DISK="DISK";IfcBearingTypeEnum.USERDEFINED="USERDEFINED";IfcBearingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBenchmarkEnum=class{constructor(v){this.value=v;}};exports.IfcBenchmarkEnum=IfcBenchmarkEnum;IfcBenchmarkEnum.GREATERTHAN="GREATERTHAN";IfcBenchmarkEnum.GREATERTHANOREQUALTO="GREATERTHANOREQUALTO";IfcBenchmarkEnum.LESSTHAN="LESSTHAN";IfcBenchmarkEnum.LESSTHANOREQUALTO="LESSTHANOREQUALTO";IfcBenchmarkEnum.EQUALTO="EQUALTO";IfcBenchmarkEnum.NOTEQUALTO="NOTEQUALTO";IfcBenchmarkEnum.INCLUDES="INCLUDES";IfcBenchmarkEnum.NOTINCLUDES="NOTINCLUDES";IfcBenchmarkEnum.INCLUDEDIN="INCLUDEDIN";IfcBenchmarkEnum.NOTINCLUDEDIN="NOTINCLUDEDIN";var IfcBoilerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBoilerTypeEnum=IfcBoilerTypeEnum;IfcBoilerTypeEnum.WATER="WATER";IfcBoilerTypeEnum.STEAM="STEAM";IfcBoilerTypeEnum.USERDEFINED="USERDEFINED";IfcBoilerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBooleanOperator=class{constructor(v){this.value=v;}};exports.IfcBooleanOperator=IfcBooleanOperator;IfcBooleanOperator.UNION="UNION";IfcBooleanOperator.INTERSECTION="INTERSECTION";IfcBooleanOperator.DIFFERENCE="DIFFERENCE";var IfcBridgePartTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBridgePartTypeEnum=IfcBridgePartTypeEnum;IfcBridgePartTypeEnum.ABUTMENT="ABUTMENT";IfcBridgePartTypeEnum.DECK="DECK";IfcBridgePartTypeEnum.DECK_SEGMENT="DECK_SEGMENT";IfcBridgePartTypeEnum.FOUNDATION="FOUNDATION";IfcBridgePartTypeEnum.PIER="PIER";IfcBridgePartTypeEnum.PIER_SEGMENT="PIER_SEGMENT";IfcBridgePartTypeEnum.PYLON="PYLON";IfcBridgePartTypeEnum.SUBSTRUCTURE="SUBSTRUCTURE";IfcBridgePartTypeEnum.SUPERSTRUCTURE="SUPERSTRUCTURE";IfcBridgePartTypeEnum.SURFACESTRUCTURE="SURFACESTRUCTURE";IfcBridgePartTypeEnum.USERDEFINED="USERDEFINED";IfcBridgePartTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBridgeTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBridgeTypeEnum=IfcBridgeTypeEnum;IfcBridgeTypeEnum.ARCHED="ARCHED";IfcBridgeTypeEnum.CABLE_STAYED="CABLE_STAYED";IfcBridgeTypeEnum.CANTILEVER="CANTILEVER";IfcBridgeTypeEnum.CULVERT="CULVERT";IfcBridgeTypeEnum.FRAMEWORK="FRAMEWORK";IfcBridgeTypeEnum.GIRDER="GIRDER";IfcBridgeTypeEnum.SUSPENSION="SUSPENSION";IfcBridgeTypeEnum.TRUSS="TRUSS";IfcBridgeTypeEnum.USERDEFINED="USERDEFINED";IfcBridgeTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBuildingElementPartTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBuildingElementPartTypeEnum=IfcBuildingElementPartTypeEnum;IfcBuildingElementPartTypeEnum.INSULATION="INSULATION";IfcBuildingElementPartTypeEnum.PRECASTPANEL="PRECASTPANEL";IfcBuildingElementPartTypeEnum.APRON="APRON";IfcBuildingElementPartTypeEnum.USERDEFINED="USERDEFINED";IfcBuildingElementPartTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBuildingElementProxyTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBuildingElementProxyTypeEnum=IfcBuildingElementProxyTypeEnum;IfcBuildingElementProxyTypeEnum.COMPLEX="COMPLEX";IfcBuildingElementProxyTypeEnum.ELEMENT="ELEMENT";IfcBuildingElementProxyTypeEnum.PARTIAL="PARTIAL";IfcBuildingElementProxyTypeEnum.PROVISIONFORVOID="PROVISIONFORVOID";IfcBuildingElementProxyTypeEnum.PROVISIONFORSPACE="PROVISIONFORSPACE";IfcBuildingElementProxyTypeEnum.USERDEFINED="USERDEFINED";IfcBuildingElementProxyTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBuildingSystemTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBuildingSystemTypeEnum=IfcBuildingSystemTypeEnum;IfcBuildingSystemTypeEnum.FENESTRATION="FENESTRATION";IfcBuildingSystemTypeEnum.FOUNDATION="FOUNDATION";IfcBuildingSystemTypeEnum.LOADBEARING="LOADBEARING";IfcBuildingSystemTypeEnum.OUTERSHELL="OUTERSHELL";IfcBuildingSystemTypeEnum.SHADING="SHADING";IfcBuildingSystemTypeEnum.TRANSPORT="TRANSPORT";IfcBuildingSystemTypeEnum.REINFORCING="REINFORCING";IfcBuildingSystemTypeEnum.PRESTRESSING="PRESTRESSING";IfcBuildingSystemTypeEnum.USERDEFINED="USERDEFINED";IfcBuildingSystemTypeEnum.NOTDEFINED="NOTDEFINED";var IfcBurnerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcBurnerTypeEnum=IfcBurnerTypeEnum;IfcBurnerTypeEnum.USERDEFINED="USERDEFINED";IfcBurnerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCableCarrierFittingTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCableCarrierFittingTypeEnum=IfcCableCarrierFittingTypeEnum;IfcCableCarrierFittingTypeEnum.BEND="BEND";IfcCableCarrierFittingTypeEnum.CROSS="CROSS";IfcCableCarrierFittingTypeEnum.REDUCER="REDUCER";IfcCableCarrierFittingTypeEnum.TEE="TEE";IfcCableCarrierFittingTypeEnum.USERDEFINED="USERDEFINED";IfcCableCarrierFittingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCableCarrierSegmentTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCableCarrierSegmentTypeEnum=IfcCableCarrierSegmentTypeEnum;IfcCableCarrierSegmentTypeEnum.CABLELADDERSEGMENT="CABLELADDERSEGMENT";IfcCableCarrierSegmentTypeEnum.CABLETRAYSEGMENT="CABLETRAYSEGMENT";IfcCableCarrierSegmentTypeEnum.CABLETRUNKINGSEGMENT="CABLETRUNKINGSEGMENT";IfcCableCarrierSegmentTypeEnum.CONDUITSEGMENT="CONDUITSEGMENT";IfcCableCarrierSegmentTypeEnum.USERDEFINED="USERDEFINED";IfcCableCarrierSegmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCableFittingTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCableFittingTypeEnum=IfcCableFittingTypeEnum;IfcCableFittingTypeEnum.CONNECTOR="CONNECTOR";IfcCableFittingTypeEnum.ENTRY="ENTRY";IfcCableFittingTypeEnum.EXIT="EXIT";IfcCableFittingTypeEnum.JUNCTION="JUNCTION";IfcCableFittingTypeEnum.TRANSITION="TRANSITION";IfcCableFittingTypeEnum.USERDEFINED="USERDEFINED";IfcCableFittingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCableSegmentTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCableSegmentTypeEnum=IfcCableSegmentTypeEnum;IfcCableSegmentTypeEnum.BUSBARSEGMENT="BUSBARSEGMENT";IfcCableSegmentTypeEnum.CABLESEGMENT="CABLESEGMENT";IfcCableSegmentTypeEnum.CONDUCTORSEGMENT="CONDUCTORSEGMENT";IfcCableSegmentTypeEnum.CORESEGMENT="CORESEGMENT";IfcCableSegmentTypeEnum.USERDEFINED="USERDEFINED";IfcCableSegmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCaissonFoundationTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCaissonFoundationTypeEnum=IfcCaissonFoundationTypeEnum;IfcCaissonFoundationTypeEnum.WELL="WELL";IfcCaissonFoundationTypeEnum.CAISSON="CAISSON";IfcCaissonFoundationTypeEnum.USERDEFINED="USERDEFINED";IfcCaissonFoundationTypeEnum.NOTDEFINED="NOTDEFINED";var IfcChangeActionEnum=class{constructor(v){this.value=v;}};exports.IfcChangeActionEnum=IfcChangeActionEnum;IfcChangeActionEnum.NOCHANGE="NOCHANGE";IfcChangeActionEnum.MODIFIED="MODIFIED";IfcChangeActionEnum.ADDED="ADDED";IfcChangeActionEnum.DELETED="DELETED";IfcChangeActionEnum.NOTDEFINED="NOTDEFINED";var IfcChillerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcChillerTypeEnum=IfcChillerTypeEnum;IfcChillerTypeEnum.AIRCOOLED="AIRCOOLED";IfcChillerTypeEnum.WATERCOOLED="WATERCOOLED";IfcChillerTypeEnum.HEATRECOVERY="HEATRECOVERY";IfcChillerTypeEnum.USERDEFINED="USERDEFINED";IfcChillerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcChimneyTypeEnum=class{constructor(v){this.value=v;}};exports.IfcChimneyTypeEnum=IfcChimneyTypeEnum;IfcChimneyTypeEnum.USERDEFINED="USERDEFINED";IfcChimneyTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCoilTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCoilTypeEnum=IfcCoilTypeEnum;IfcCoilTypeEnum.DXCOOLINGCOIL="DXCOOLINGCOIL";IfcCoilTypeEnum.ELECTRICHEATINGCOIL="ELECTRICHEATINGCOIL";IfcCoilTypeEnum.GASHEATINGCOIL="GASHEATINGCOIL";IfcCoilTypeEnum.HYDRONICCOIL="HYDRONICCOIL";IfcCoilTypeEnum.STEAMHEATINGCOIL="STEAMHEATINGCOIL";IfcCoilTypeEnum.WATERCOOLINGCOIL="WATERCOOLINGCOIL";IfcCoilTypeEnum.WATERHEATINGCOIL="WATERHEATINGCOIL";IfcCoilTypeEnum.USERDEFINED="USERDEFINED";IfcCoilTypeEnum.NOTDEFINED="NOTDEFINED";var IfcColumnTypeEnum=class{constructor(v){this.value=v;}};exports.IfcColumnTypeEnum=IfcColumnTypeEnum;IfcColumnTypeEnum.COLUMN="COLUMN";IfcColumnTypeEnum.PILASTER="PILASTER";IfcColumnTypeEnum.PIERSTEM="PIERSTEM";IfcColumnTypeEnum.PIERSTEM_SEGMENT="PIERSTEM_SEGMENT";IfcColumnTypeEnum.STANDCOLUMN="STANDCOLUMN";IfcColumnTypeEnum.USERDEFINED="USERDEFINED";IfcColumnTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCommunicationsApplianceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCommunicationsApplianceTypeEnum=IfcCommunicationsApplianceTypeEnum;IfcCommunicationsApplianceTypeEnum.ANTENNA="ANTENNA";IfcCommunicationsApplianceTypeEnum.COMPUTER="COMPUTER";IfcCommunicationsApplianceTypeEnum.FAX="FAX";IfcCommunicationsApplianceTypeEnum.GATEWAY="GATEWAY";IfcCommunicationsApplianceTypeEnum.MODEM="MODEM";IfcCommunicationsApplianceTypeEnum.NETWORKAPPLIANCE="NETWORKAPPLIANCE";IfcCommunicationsApplianceTypeEnum.NETWORKBRIDGE="NETWORKBRIDGE";IfcCommunicationsApplianceTypeEnum.NETWORKHUB="NETWORKHUB";IfcCommunicationsApplianceTypeEnum.PRINTER="PRINTER";IfcCommunicationsApplianceTypeEnum.REPEATER="REPEATER";IfcCommunicationsApplianceTypeEnum.ROUTER="ROUTER";IfcCommunicationsApplianceTypeEnum.SCANNER="SCANNER";IfcCommunicationsApplianceTypeEnum.USERDEFINED="USERDEFINED";IfcCommunicationsApplianceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcComplexPropertyTemplateTypeEnum=class{constructor(v){this.value=v;}};exports.IfcComplexPropertyTemplateTypeEnum=IfcComplexPropertyTemplateTypeEnum;IfcComplexPropertyTemplateTypeEnum.P_COMPLEX="P_COMPLEX";IfcComplexPropertyTemplateTypeEnum.Q_COMPLEX="Q_COMPLEX";var IfcCompressorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCompressorTypeEnum=IfcCompressorTypeEnum;IfcCompressorTypeEnum.DYNAMIC="DYNAMIC";IfcCompressorTypeEnum.RECIPROCATING="RECIPROCATING";IfcCompressorTypeEnum.ROTARY="ROTARY";IfcCompressorTypeEnum.SCROLL="SCROLL";IfcCompressorTypeEnum.TROCHOIDAL="TROCHOIDAL";IfcCompressorTypeEnum.SINGLESTAGE="SINGLESTAGE";IfcCompressorTypeEnum.BOOSTER="BOOSTER";IfcCompressorTypeEnum.OPENTYPE="OPENTYPE";IfcCompressorTypeEnum.HERMETIC="HERMETIC";IfcCompressorTypeEnum.SEMIHERMETIC="SEMIHERMETIC";IfcCompressorTypeEnum.WELDEDSHELLHERMETIC="WELDEDSHELLHERMETIC";IfcCompressorTypeEnum.ROLLINGPISTON="ROLLINGPISTON";IfcCompressorTypeEnum.ROTARYVANE="ROTARYVANE";IfcCompressorTypeEnum.SINGLESCREW="SINGLESCREW";IfcCompressorTypeEnum.TWINSCREW="TWINSCREW";IfcCompressorTypeEnum.USERDEFINED="USERDEFINED";IfcCompressorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCondenserTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCondenserTypeEnum=IfcCondenserTypeEnum;IfcCondenserTypeEnum.AIRCOOLED="AIRCOOLED";IfcCondenserTypeEnum.EVAPORATIVECOOLED="EVAPORATIVECOOLED";IfcCondenserTypeEnum.WATERCOOLED="WATERCOOLED";IfcCondenserTypeEnum.WATERCOOLEDBRAZEDPLATE="WATERCOOLEDBRAZEDPLATE";IfcCondenserTypeEnum.WATERCOOLEDSHELLCOIL="WATERCOOLEDSHELLCOIL";IfcCondenserTypeEnum.WATERCOOLEDSHELLTUBE="WATERCOOLEDSHELLTUBE";IfcCondenserTypeEnum.WATERCOOLEDTUBEINTUBE="WATERCOOLEDTUBEINTUBE";IfcCondenserTypeEnum.USERDEFINED="USERDEFINED";IfcCondenserTypeEnum.NOTDEFINED="NOTDEFINED";var IfcConnectionTypeEnum=class{constructor(v){this.value=v;}};exports.IfcConnectionTypeEnum=IfcConnectionTypeEnum;IfcConnectionTypeEnum.ATPATH="ATPATH";IfcConnectionTypeEnum.ATSTART="ATSTART";IfcConnectionTypeEnum.ATEND="ATEND";IfcConnectionTypeEnum.NOTDEFINED="NOTDEFINED";var IfcConstraintEnum=class{constructor(v){this.value=v;}};exports.IfcConstraintEnum=IfcConstraintEnum;IfcConstraintEnum.HARD="HARD";IfcConstraintEnum.SOFT="SOFT";IfcConstraintEnum.ADVISORY="ADVISORY";IfcConstraintEnum.USERDEFINED="USERDEFINED";IfcConstraintEnum.NOTDEFINED="NOTDEFINED";var IfcConstructionEquipmentResourceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcConstructionEquipmentResourceTypeEnum=IfcConstructionEquipmentResourceTypeEnum;IfcConstructionEquipmentResourceTypeEnum.DEMOLISHING="DEMOLISHING";IfcConstructionEquipmentResourceTypeEnum.EARTHMOVING="EARTHMOVING";IfcConstructionEquipmentResourceTypeEnum.ERECTING="ERECTING";IfcConstructionEquipmentResourceTypeEnum.HEATING="HEATING";IfcConstructionEquipmentResourceTypeEnum.LIGHTING="LIGHTING";IfcConstructionEquipmentResourceTypeEnum.PAVING="PAVING";IfcConstructionEquipmentResourceTypeEnum.PUMPING="PUMPING";IfcConstructionEquipmentResourceTypeEnum.TRANSPORTING="TRANSPORTING";IfcConstructionEquipmentResourceTypeEnum.USERDEFINED="USERDEFINED";IfcConstructionEquipmentResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcConstructionMaterialResourceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcConstructionMaterialResourceTypeEnum=IfcConstructionMaterialResourceTypeEnum;IfcConstructionMaterialResourceTypeEnum.AGGREGATES="AGGREGATES";IfcConstructionMaterialResourceTypeEnum.CONCRETE="CONCRETE";IfcConstructionMaterialResourceTypeEnum.DRYWALL="DRYWALL";IfcConstructionMaterialResourceTypeEnum.FUEL="FUEL";IfcConstructionMaterialResourceTypeEnum.GYPSUM="GYPSUM";IfcConstructionMaterialResourceTypeEnum.MASONRY="MASONRY";IfcConstructionMaterialResourceTypeEnum.METAL="METAL";IfcConstructionMaterialResourceTypeEnum.PLASTIC="PLASTIC";IfcConstructionMaterialResourceTypeEnum.WOOD="WOOD";IfcConstructionMaterialResourceTypeEnum.NOTDEFINED="NOTDEFINED";IfcConstructionMaterialResourceTypeEnum.USERDEFINED="USERDEFINED";var IfcConstructionProductResourceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcConstructionProductResourceTypeEnum=IfcConstructionProductResourceTypeEnum;IfcConstructionProductResourceTypeEnum.ASSEMBLY="ASSEMBLY";IfcConstructionProductResourceTypeEnum.FORMWORK="FORMWORK";IfcConstructionProductResourceTypeEnum.USERDEFINED="USERDEFINED";IfcConstructionProductResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcControllerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcControllerTypeEnum=IfcControllerTypeEnum;IfcControllerTypeEnum.FLOATING="FLOATING";IfcControllerTypeEnum.PROGRAMMABLE="PROGRAMMABLE";IfcControllerTypeEnum.PROPORTIONAL="PROPORTIONAL";IfcControllerTypeEnum.MULTIPOSITION="MULTIPOSITION";IfcControllerTypeEnum.TWOPOSITION="TWOPOSITION";IfcControllerTypeEnum.USERDEFINED="USERDEFINED";IfcControllerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCooledBeamTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCooledBeamTypeEnum=IfcCooledBeamTypeEnum;IfcCooledBeamTypeEnum.ACTIVE="ACTIVE";IfcCooledBeamTypeEnum.PASSIVE="PASSIVE";IfcCooledBeamTypeEnum.USERDEFINED="USERDEFINED";IfcCooledBeamTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCoolingTowerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCoolingTowerTypeEnum=IfcCoolingTowerTypeEnum;IfcCoolingTowerTypeEnum.NATURALDRAFT="NATURALDRAFT";IfcCoolingTowerTypeEnum.MECHANICALINDUCEDDRAFT="MECHANICALINDUCEDDRAFT";IfcCoolingTowerTypeEnum.MECHANICALFORCEDDRAFT="MECHANICALFORCEDDRAFT";IfcCoolingTowerTypeEnum.USERDEFINED="USERDEFINED";IfcCoolingTowerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCostItemTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCostItemTypeEnum=IfcCostItemTypeEnum;IfcCostItemTypeEnum.USERDEFINED="USERDEFINED";IfcCostItemTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCostScheduleTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCostScheduleTypeEnum=IfcCostScheduleTypeEnum;IfcCostScheduleTypeEnum.BUDGET="BUDGET";IfcCostScheduleTypeEnum.COSTPLAN="COSTPLAN";IfcCostScheduleTypeEnum.ESTIMATE="ESTIMATE";IfcCostScheduleTypeEnum.TENDER="TENDER";IfcCostScheduleTypeEnum.PRICEDBILLOFQUANTITIES="PRICEDBILLOFQUANTITIES";IfcCostScheduleTypeEnum.UNPRICEDBILLOFQUANTITIES="UNPRICEDBILLOFQUANTITIES";IfcCostScheduleTypeEnum.SCHEDULEOFRATES="SCHEDULEOFRATES";IfcCostScheduleTypeEnum.USERDEFINED="USERDEFINED";IfcCostScheduleTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCoveringTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCoveringTypeEnum=IfcCoveringTypeEnum;IfcCoveringTypeEnum.CEILING="CEILING";IfcCoveringTypeEnum.FLOORING="FLOORING";IfcCoveringTypeEnum.CLADDING="CLADDING";IfcCoveringTypeEnum.ROOFING="ROOFING";IfcCoveringTypeEnum.MOLDING="MOLDING";IfcCoveringTypeEnum.SKIRTINGBOARD="SKIRTINGBOARD";IfcCoveringTypeEnum.INSULATION="INSULATION";IfcCoveringTypeEnum.MEMBRANE="MEMBRANE";IfcCoveringTypeEnum.SLEEVING="SLEEVING";IfcCoveringTypeEnum.WRAPPING="WRAPPING";IfcCoveringTypeEnum.COPING="COPING";IfcCoveringTypeEnum.USERDEFINED="USERDEFINED";IfcCoveringTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCrewResourceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCrewResourceTypeEnum=IfcCrewResourceTypeEnum;IfcCrewResourceTypeEnum.OFFICE="OFFICE";IfcCrewResourceTypeEnum.SITE="SITE";IfcCrewResourceTypeEnum.USERDEFINED="USERDEFINED";IfcCrewResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCurtainWallTypeEnum=class{constructor(v){this.value=v;}};exports.IfcCurtainWallTypeEnum=IfcCurtainWallTypeEnum;IfcCurtainWallTypeEnum.USERDEFINED="USERDEFINED";IfcCurtainWallTypeEnum.NOTDEFINED="NOTDEFINED";var IfcCurveInterpolationEnum=class{constructor(v){this.value=v;}};exports.IfcCurveInterpolationEnum=IfcCurveInterpolationEnum;IfcCurveInterpolationEnum.LINEAR="LINEAR";IfcCurveInterpolationEnum.LOG_LINEAR="LOG_LINEAR";IfcCurveInterpolationEnum.LOG_LOG="LOG_LOG";IfcCurveInterpolationEnum.NOTDEFINED="NOTDEFINED";var IfcDamperTypeEnum=class{constructor(v){this.value=v;}};exports.IfcDamperTypeEnum=IfcDamperTypeEnum;IfcDamperTypeEnum.BACKDRAFTDAMPER="BACKDRAFTDAMPER";IfcDamperTypeEnum.BALANCINGDAMPER="BALANCINGDAMPER";IfcDamperTypeEnum.BLASTDAMPER="BLASTDAMPER";IfcDamperTypeEnum.CONTROLDAMPER="CONTROLDAMPER";IfcDamperTypeEnum.FIREDAMPER="FIREDAMPER";IfcDamperTypeEnum.FIRESMOKEDAMPER="FIRESMOKEDAMPER";IfcDamperTypeEnum.FUMEHOODEXHAUST="FUMEHOODEXHAUST";IfcDamperTypeEnum.GRAVITYDAMPER="GRAVITYDAMPER";IfcDamperTypeEnum.GRAVITYRELIEFDAMPER="GRAVITYRELIEFDAMPER";IfcDamperTypeEnum.RELIEFDAMPER="RELIEFDAMPER";IfcDamperTypeEnum.SMOKEDAMPER="SMOKEDAMPER";IfcDamperTypeEnum.USERDEFINED="USERDEFINED";IfcDamperTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDataOriginEnum=class{constructor(v){this.value=v;}};exports.IfcDataOriginEnum=IfcDataOriginEnum;IfcDataOriginEnum.MEASURED="MEASURED";IfcDataOriginEnum.PREDICTED="PREDICTED";IfcDataOriginEnum.SIMULATED="SIMULATED";IfcDataOriginEnum.USERDEFINED="USERDEFINED";IfcDataOriginEnum.NOTDEFINED="NOTDEFINED";var IfcDerivedUnitEnum=class{constructor(v){this.value=v;}};exports.IfcDerivedUnitEnum=IfcDerivedUnitEnum;IfcDerivedUnitEnum.ANGULARVELOCITYUNIT="ANGULARVELOCITYUNIT";IfcDerivedUnitEnum.AREADENSITYUNIT="AREADENSITYUNIT";IfcDerivedUnitEnum.COMPOUNDPLANEANGLEUNIT="COMPOUNDPLANEANGLEUNIT";IfcDerivedUnitEnum.DYNAMICVISCOSITYUNIT="DYNAMICVISCOSITYUNIT";IfcDerivedUnitEnum.HEATFLUXDENSITYUNIT="HEATFLUXDENSITYUNIT";IfcDerivedUnitEnum.INTEGERCOUNTRATEUNIT="INTEGERCOUNTRATEUNIT";IfcDerivedUnitEnum.ISOTHERMALMOISTURECAPACITYUNIT="ISOTHERMALMOISTURECAPACITYUNIT";IfcDerivedUnitEnum.KINEMATICVISCOSITYUNIT="KINEMATICVISCOSITYUNIT";IfcDerivedUnitEnum.LINEARVELOCITYUNIT="LINEARVELOCITYUNIT";IfcDerivedUnitEnum.MASSDENSITYUNIT="MASSDENSITYUNIT";IfcDerivedUnitEnum.MASSFLOWRATEUNIT="MASSFLOWRATEUNIT";IfcDerivedUnitEnum.MOISTUREDIFFUSIVITYUNIT="MOISTUREDIFFUSIVITYUNIT";IfcDerivedUnitEnum.MOLECULARWEIGHTUNIT="MOLECULARWEIGHTUNIT";IfcDerivedUnitEnum.SPECIFICHEATCAPACITYUNIT="SPECIFICHEATCAPACITYUNIT";IfcDerivedUnitEnum.THERMALADMITTANCEUNIT="THERMALADMITTANCEUNIT";IfcDerivedUnitEnum.THERMALCONDUCTANCEUNIT="THERMALCONDUCTANCEUNIT";IfcDerivedUnitEnum.THERMALRESISTANCEUNIT="THERMALRESISTANCEUNIT";IfcDerivedUnitEnum.THERMALTRANSMITTANCEUNIT="THERMALTRANSMITTANCEUNIT";IfcDerivedUnitEnum.VAPORPERMEABILITYUNIT="VAPORPERMEABILITYUNIT";IfcDerivedUnitEnum.VOLUMETRICFLOWRATEUNIT="VOLUMETRICFLOWRATEUNIT";IfcDerivedUnitEnum.ROTATIONALFREQUENCYUNIT="ROTATIONALFREQUENCYUNIT";IfcDerivedUnitEnum.TORQUEUNIT="TORQUEUNIT";IfcDerivedUnitEnum.MOMENTOFINERTIAUNIT="MOMENTOFINERTIAUNIT";IfcDerivedUnitEnum.LINEARMOMENTUNIT="LINEARMOMENTUNIT";IfcDerivedUnitEnum.LINEARFORCEUNIT="LINEARFORCEUNIT";IfcDerivedUnitEnum.PLANARFORCEUNIT="PLANARFORCEUNIT";IfcDerivedUnitEnum.MODULUSOFELASTICITYUNIT="MODULUSOFELASTICITYUNIT";IfcDerivedUnitEnum.SHEARMODULUSUNIT="SHEARMODULUSUNIT";IfcDerivedUnitEnum.LINEARSTIFFNESSUNIT="LINEARSTIFFNESSUNIT";IfcDerivedUnitEnum.ROTATIONALSTIFFNESSUNIT="ROTATIONALSTIFFNESSUNIT";IfcDerivedUnitEnum.MODULUSOFSUBGRADEREACTIONUNIT="MODULUSOFSUBGRADEREACTIONUNIT";IfcDerivedUnitEnum.ACCELERATIONUNIT="ACCELERATIONUNIT";IfcDerivedUnitEnum.CURVATUREUNIT="CURVATUREUNIT";IfcDerivedUnitEnum.HEATINGVALUEUNIT="HEATINGVALUEUNIT";IfcDerivedUnitEnum.IONCONCENTRATIONUNIT="IONCONCENTRATIONUNIT";IfcDerivedUnitEnum.LUMINOUSINTENSITYDISTRIBUTIONUNIT="LUMINOUSINTENSITYDISTRIBUTIONUNIT";IfcDerivedUnitEnum.MASSPERLENGTHUNIT="MASSPERLENGTHUNIT";IfcDerivedUnitEnum.MODULUSOFLINEARSUBGRADEREACTIONUNIT="MODULUSOFLINEARSUBGRADEREACTIONUNIT";IfcDerivedUnitEnum.MODULUSOFROTATIONALSUBGRADEREACTIONUNIT="MODULUSOFROTATIONALSUBGRADEREACTIONUNIT";IfcDerivedUnitEnum.PHUNIT="PHUNIT";IfcDerivedUnitEnum.ROTATIONALMASSUNIT="ROTATIONALMASSUNIT";IfcDerivedUnitEnum.SECTIONAREAINTEGRALUNIT="SECTIONAREAINTEGRALUNIT";IfcDerivedUnitEnum.SECTIONMODULUSUNIT="SECTIONMODULUSUNIT";IfcDerivedUnitEnum.SOUNDPOWERLEVELUNIT="SOUNDPOWERLEVELUNIT";IfcDerivedUnitEnum.SOUNDPOWERUNIT="SOUNDPOWERUNIT";IfcDerivedUnitEnum.SOUNDPRESSURELEVELUNIT="SOUNDPRESSURELEVELUNIT";IfcDerivedUnitEnum.SOUNDPRESSUREUNIT="SOUNDPRESSUREUNIT";IfcDerivedUnitEnum.TEMPERATUREGRADIENTUNIT="TEMPERATUREGRADIENTUNIT";IfcDerivedUnitEnum.TEMPERATURERATEOFCHANGEUNIT="TEMPERATURERATEOFCHANGEUNIT";IfcDerivedUnitEnum.THERMALEXPANSIONCOEFFICIENTUNIT="THERMALEXPANSIONCOEFFICIENTUNIT";IfcDerivedUnitEnum.WARPINGCONSTANTUNIT="WARPINGCONSTANTUNIT";IfcDerivedUnitEnum.WARPINGMOMENTUNIT="WARPINGMOMENTUNIT";IfcDerivedUnitEnum.USERDEFINED="USERDEFINED";var IfcDirectionSenseEnum=class{constructor(v){this.value=v;}};exports.IfcDirectionSenseEnum=IfcDirectionSenseEnum;IfcDirectionSenseEnum.POSITIVE="POSITIVE";IfcDirectionSenseEnum.NEGATIVE="NEGATIVE";var IfcDiscreteAccessoryTypeEnum=class{constructor(v){this.value=v;}};exports.IfcDiscreteAccessoryTypeEnum=IfcDiscreteAccessoryTypeEnum;IfcDiscreteAccessoryTypeEnum.ANCHORPLATE="ANCHORPLATE";IfcDiscreteAccessoryTypeEnum.BRACKET="BRACKET";IfcDiscreteAccessoryTypeEnum.SHOE="SHOE";IfcDiscreteAccessoryTypeEnum.EXPANSION_JOINT_DEVICE="EXPANSION_JOINT_DEVICE";IfcDiscreteAccessoryTypeEnum.USERDEFINED="USERDEFINED";IfcDiscreteAccessoryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDistributionChamberElementTypeEnum=class{constructor(v){this.value=v;}};exports.IfcDistributionChamberElementTypeEnum=IfcDistributionChamberElementTypeEnum;IfcDistributionChamberElementTypeEnum.FORMEDDUCT="FORMEDDUCT";IfcDistributionChamberElementTypeEnum.INSPECTIONCHAMBER="INSPECTIONCHAMBER";IfcDistributionChamberElementTypeEnum.INSPECTIONPIT="INSPECTIONPIT";IfcDistributionChamberElementTypeEnum.MANHOLE="MANHOLE";IfcDistributionChamberElementTypeEnum.METERCHAMBER="METERCHAMBER";IfcDistributionChamberElementTypeEnum.SUMP="SUMP";IfcDistributionChamberElementTypeEnum.TRENCH="TRENCH";IfcDistributionChamberElementTypeEnum.VALVECHAMBER="VALVECHAMBER";IfcDistributionChamberElementTypeEnum.USERDEFINED="USERDEFINED";IfcDistributionChamberElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDistributionPortTypeEnum=class{constructor(v){this.value=v;}};exports.IfcDistributionPortTypeEnum=IfcDistributionPortTypeEnum;IfcDistributionPortTypeEnum.CABLE="CABLE";IfcDistributionPortTypeEnum.CABLECARRIER="CABLECARRIER";IfcDistributionPortTypeEnum.DUCT="DUCT";IfcDistributionPortTypeEnum.PIPE="PIPE";IfcDistributionPortTypeEnum.USERDEFINED="USERDEFINED";IfcDistributionPortTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDistributionSystemEnum=class{constructor(v){this.value=v;}};exports.IfcDistributionSystemEnum=IfcDistributionSystemEnum;IfcDistributionSystemEnum.AIRCONDITIONING="AIRCONDITIONING";IfcDistributionSystemEnum.AUDIOVISUAL="AUDIOVISUAL";IfcDistributionSystemEnum.CHEMICAL="CHEMICAL";IfcDistributionSystemEnum.CHILLEDWATER="CHILLEDWATER";IfcDistributionSystemEnum.COMMUNICATION="COMMUNICATION";IfcDistributionSystemEnum.COMPRESSEDAIR="COMPRESSEDAIR";IfcDistributionSystemEnum.CONDENSERWATER="CONDENSERWATER";IfcDistributionSystemEnum.CONTROL="CONTROL";IfcDistributionSystemEnum.CONVEYING="CONVEYING";IfcDistributionSystemEnum.DATA="DATA";IfcDistributionSystemEnum.DISPOSAL="DISPOSAL";IfcDistributionSystemEnum.DOMESTICCOLDWATER="DOMESTICCOLDWATER";IfcDistributionSystemEnum.DOMESTICHOTWATER="DOMESTICHOTWATER";IfcDistributionSystemEnum.DRAINAGE="DRAINAGE";IfcDistributionSystemEnum.EARTHING="EARTHING";IfcDistributionSystemEnum.ELECTRICAL="ELECTRICAL";IfcDistributionSystemEnum.ELECTROACOUSTIC="ELECTROACOUSTIC";IfcDistributionSystemEnum.EXHAUST="EXHAUST";IfcDistributionSystemEnum.FIREPROTECTION="FIREPROTECTION";IfcDistributionSystemEnum.FUEL="FUEL";IfcDistributionSystemEnum.GAS="GAS";IfcDistributionSystemEnum.HAZARDOUS="HAZARDOUS";IfcDistributionSystemEnum.HEATING="HEATING";IfcDistributionSystemEnum.LIGHTING="LIGHTING";IfcDistributionSystemEnum.LIGHTNINGPROTECTION="LIGHTNINGPROTECTION";IfcDistributionSystemEnum.MUNICIPALSOLIDWASTE="MUNICIPALSOLIDWASTE";IfcDistributionSystemEnum.OIL="OIL";IfcDistributionSystemEnum.OPERATIONAL="OPERATIONAL";IfcDistributionSystemEnum.POWERGENERATION="POWERGENERATION";IfcDistributionSystemEnum.RAINWATER="RAINWATER";IfcDistributionSystemEnum.REFRIGERATION="REFRIGERATION";IfcDistributionSystemEnum.SECURITY="SECURITY";IfcDistributionSystemEnum.SEWAGE="SEWAGE";IfcDistributionSystemEnum.SIGNAL="SIGNAL";IfcDistributionSystemEnum.STORMWATER="STORMWATER";IfcDistributionSystemEnum.TELEPHONE="TELEPHONE";IfcDistributionSystemEnum.TV="TV";IfcDistributionSystemEnum.VACUUM="VACUUM";IfcDistributionSystemEnum.VENT="VENT";IfcDistributionSystemEnum.VENTILATION="VENTILATION";IfcDistributionSystemEnum.WASTEWATER="WASTEWATER";IfcDistributionSystemEnum.WATERSUPPLY="WATERSUPPLY";IfcDistributionSystemEnum.USERDEFINED="USERDEFINED";IfcDistributionSystemEnum.NOTDEFINED="NOTDEFINED";var IfcDocumentConfidentialityEnum=class{constructor(v){this.value=v;}};exports.IfcDocumentConfidentialityEnum=IfcDocumentConfidentialityEnum;IfcDocumentConfidentialityEnum.PUBLIC="PUBLIC";IfcDocumentConfidentialityEnum.RESTRICTED="RESTRICTED";IfcDocumentConfidentialityEnum.CONFIDENTIAL="CONFIDENTIAL";IfcDocumentConfidentialityEnum.PERSONAL="PERSONAL";IfcDocumentConfidentialityEnum.USERDEFINED="USERDEFINED";IfcDocumentConfidentialityEnum.NOTDEFINED="NOTDEFINED";var IfcDocumentStatusEnum=class{constructor(v){this.value=v;}};exports.IfcDocumentStatusEnum=IfcDocumentStatusEnum;IfcDocumentStatusEnum.DRAFT="DRAFT";IfcDocumentStatusEnum.FINALDRAFT="FINALDRAFT";IfcDocumentStatusEnum.FINAL="FINAL";IfcDocumentStatusEnum.REVISION="REVISION";IfcDocumentStatusEnum.NOTDEFINED="NOTDEFINED";var IfcDoorPanelOperationEnum=class{constructor(v){this.value=v;}};exports.IfcDoorPanelOperationEnum=IfcDoorPanelOperationEnum;IfcDoorPanelOperationEnum.SWINGING="SWINGING";IfcDoorPanelOperationEnum.DOUBLE_ACTING="DOUBLE_ACTING";IfcDoorPanelOperationEnum.SLIDING="SLIDING";IfcDoorPanelOperationEnum.FOLDING="FOLDING";IfcDoorPanelOperationEnum.REVOLVING="REVOLVING";IfcDoorPanelOperationEnum.ROLLINGUP="ROLLINGUP";IfcDoorPanelOperationEnum.FIXEDPANEL="FIXEDPANEL";IfcDoorPanelOperationEnum.USERDEFINED="USERDEFINED";IfcDoorPanelOperationEnum.NOTDEFINED="NOTDEFINED";var IfcDoorPanelPositionEnum=class{constructor(v){this.value=v;}};exports.IfcDoorPanelPositionEnum=IfcDoorPanelPositionEnum;IfcDoorPanelPositionEnum.LEFT="LEFT";IfcDoorPanelPositionEnum.MIDDLE="MIDDLE";IfcDoorPanelPositionEnum.RIGHT="RIGHT";IfcDoorPanelPositionEnum.NOTDEFINED="NOTDEFINED";var IfcDoorStyleConstructionEnum=class{constructor(v){this.value=v;}};exports.IfcDoorStyleConstructionEnum=IfcDoorStyleConstructionEnum;IfcDoorStyleConstructionEnum.ALUMINIUM="ALUMINIUM";IfcDoorStyleConstructionEnum.HIGH_GRADE_STEEL="HIGH_GRADE_STEEL";IfcDoorStyleConstructionEnum.STEEL="STEEL";IfcDoorStyleConstructionEnum.WOOD="WOOD";IfcDoorStyleConstructionEnum.ALUMINIUM_WOOD="ALUMINIUM_WOOD";IfcDoorStyleConstructionEnum.ALUMINIUM_PLASTIC="ALUMINIUM_PLASTIC";IfcDoorStyleConstructionEnum.PLASTIC="PLASTIC";IfcDoorStyleConstructionEnum.USERDEFINED="USERDEFINED";IfcDoorStyleConstructionEnum.NOTDEFINED="NOTDEFINED";var IfcDoorStyleOperationEnum=class{constructor(v){this.value=v;}};exports.IfcDoorStyleOperationEnum=IfcDoorStyleOperationEnum;IfcDoorStyleOperationEnum.SINGLE_SWING_LEFT="SINGLE_SWING_LEFT";IfcDoorStyleOperationEnum.SINGLE_SWING_RIGHT="SINGLE_SWING_RIGHT";IfcDoorStyleOperationEnum.DOUBLE_DOOR_SINGLE_SWING="DOUBLE_DOOR_SINGLE_SWING";IfcDoorStyleOperationEnum.DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT="DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";IfcDoorStyleOperationEnum.DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT="DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";IfcDoorStyleOperationEnum.DOUBLE_SWING_LEFT="DOUBLE_SWING_LEFT";IfcDoorStyleOperationEnum.DOUBLE_SWING_RIGHT="DOUBLE_SWING_RIGHT";IfcDoorStyleOperationEnum.DOUBLE_DOOR_DOUBLE_SWING="DOUBLE_DOOR_DOUBLE_SWING";IfcDoorStyleOperationEnum.SLIDING_TO_LEFT="SLIDING_TO_LEFT";IfcDoorStyleOperationEnum.SLIDING_TO_RIGHT="SLIDING_TO_RIGHT";IfcDoorStyleOperationEnum.DOUBLE_DOOR_SLIDING="DOUBLE_DOOR_SLIDING";IfcDoorStyleOperationEnum.FOLDING_TO_LEFT="FOLDING_TO_LEFT";IfcDoorStyleOperationEnum.FOLDING_TO_RIGHT="FOLDING_TO_RIGHT";IfcDoorStyleOperationEnum.DOUBLE_DOOR_FOLDING="DOUBLE_DOOR_FOLDING";IfcDoorStyleOperationEnum.REVOLVING="REVOLVING";IfcDoorStyleOperationEnum.ROLLINGUP="ROLLINGUP";IfcDoorStyleOperationEnum.USERDEFINED="USERDEFINED";IfcDoorStyleOperationEnum.NOTDEFINED="NOTDEFINED";var IfcDoorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcDoorTypeEnum=IfcDoorTypeEnum;IfcDoorTypeEnum.DOOR="DOOR";IfcDoorTypeEnum.GATE="GATE";IfcDoorTypeEnum.TRAPDOOR="TRAPDOOR";IfcDoorTypeEnum.USERDEFINED="USERDEFINED";IfcDoorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDoorTypeOperationEnum=class{constructor(v){this.value=v;}};exports.IfcDoorTypeOperationEnum=IfcDoorTypeOperationEnum;IfcDoorTypeOperationEnum.SINGLE_SWING_LEFT="SINGLE_SWING_LEFT";IfcDoorTypeOperationEnum.SINGLE_SWING_RIGHT="SINGLE_SWING_RIGHT";IfcDoorTypeOperationEnum.DOUBLE_DOOR_SINGLE_SWING="DOUBLE_DOOR_SINGLE_SWING";IfcDoorTypeOperationEnum.DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT="DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";IfcDoorTypeOperationEnum.DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT="DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";IfcDoorTypeOperationEnum.DOUBLE_SWING_LEFT="DOUBLE_SWING_LEFT";IfcDoorTypeOperationEnum.DOUBLE_SWING_RIGHT="DOUBLE_SWING_RIGHT";IfcDoorTypeOperationEnum.DOUBLE_DOOR_DOUBLE_SWING="DOUBLE_DOOR_DOUBLE_SWING";IfcDoorTypeOperationEnum.SLIDING_TO_LEFT="SLIDING_TO_LEFT";IfcDoorTypeOperationEnum.SLIDING_TO_RIGHT="SLIDING_TO_RIGHT";IfcDoorTypeOperationEnum.DOUBLE_DOOR_SLIDING="DOUBLE_DOOR_SLIDING";IfcDoorTypeOperationEnum.FOLDING_TO_LEFT="FOLDING_TO_LEFT";IfcDoorTypeOperationEnum.FOLDING_TO_RIGHT="FOLDING_TO_RIGHT";IfcDoorTypeOperationEnum.DOUBLE_DOOR_FOLDING="DOUBLE_DOOR_FOLDING";IfcDoorTypeOperationEnum.REVOLVING="REVOLVING";IfcDoorTypeOperationEnum.ROLLINGUP="ROLLINGUP";IfcDoorTypeOperationEnum.SWING_FIXED_LEFT="SWING_FIXED_LEFT";IfcDoorTypeOperationEnum.SWING_FIXED_RIGHT="SWING_FIXED_RIGHT";IfcDoorTypeOperationEnum.USERDEFINED="USERDEFINED";IfcDoorTypeOperationEnum.NOTDEFINED="NOTDEFINED";var IfcDuctFittingTypeEnum=class{constructor(v){this.value=v;}};exports.IfcDuctFittingTypeEnum=IfcDuctFittingTypeEnum;IfcDuctFittingTypeEnum.BEND="BEND";IfcDuctFittingTypeEnum.CONNECTOR="CONNECTOR";IfcDuctFittingTypeEnum.ENTRY="ENTRY";IfcDuctFittingTypeEnum.EXIT="EXIT";IfcDuctFittingTypeEnum.JUNCTION="JUNCTION";IfcDuctFittingTypeEnum.OBSTRUCTION="OBSTRUCTION";IfcDuctFittingTypeEnum.TRANSITION="TRANSITION";IfcDuctFittingTypeEnum.USERDEFINED="USERDEFINED";IfcDuctFittingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDuctSegmentTypeEnum=class{constructor(v){this.value=v;}};exports.IfcDuctSegmentTypeEnum=IfcDuctSegmentTypeEnum;IfcDuctSegmentTypeEnum.RIGIDSEGMENT="RIGIDSEGMENT";IfcDuctSegmentTypeEnum.FLEXIBLESEGMENT="FLEXIBLESEGMENT";IfcDuctSegmentTypeEnum.USERDEFINED="USERDEFINED";IfcDuctSegmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcDuctSilencerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcDuctSilencerTypeEnum=IfcDuctSilencerTypeEnum;IfcDuctSilencerTypeEnum.FLATOVAL="FLATOVAL";IfcDuctSilencerTypeEnum.RECTANGULAR="RECTANGULAR";IfcDuctSilencerTypeEnum.ROUND="ROUND";IfcDuctSilencerTypeEnum.USERDEFINED="USERDEFINED";IfcDuctSilencerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricApplianceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcElectricApplianceTypeEnum=IfcElectricApplianceTypeEnum;IfcElectricApplianceTypeEnum.DISHWASHER="DISHWASHER";IfcElectricApplianceTypeEnum.ELECTRICCOOKER="ELECTRICCOOKER";IfcElectricApplianceTypeEnum.FREESTANDINGELECTRICHEATER="FREESTANDINGELECTRICHEATER";IfcElectricApplianceTypeEnum.FREESTANDINGFAN="FREESTANDINGFAN";IfcElectricApplianceTypeEnum.FREESTANDINGWATERHEATER="FREESTANDINGWATERHEATER";IfcElectricApplianceTypeEnum.FREESTANDINGWATERCOOLER="FREESTANDINGWATERCOOLER";IfcElectricApplianceTypeEnum.FREEZER="FREEZER";IfcElectricApplianceTypeEnum.FRIDGE_FREEZER="FRIDGE_FREEZER";IfcElectricApplianceTypeEnum.HANDDRYER="HANDDRYER";IfcElectricApplianceTypeEnum.KITCHENMACHINE="KITCHENMACHINE";IfcElectricApplianceTypeEnum.MICROWAVE="MICROWAVE";IfcElectricApplianceTypeEnum.PHOTOCOPIER="PHOTOCOPIER";IfcElectricApplianceTypeEnum.REFRIGERATOR="REFRIGERATOR";IfcElectricApplianceTypeEnum.TUMBLEDRYER="TUMBLEDRYER";IfcElectricApplianceTypeEnum.VENDINGMACHINE="VENDINGMACHINE";IfcElectricApplianceTypeEnum.WASHINGMACHINE="WASHINGMACHINE";IfcElectricApplianceTypeEnum.USERDEFINED="USERDEFINED";IfcElectricApplianceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricDistributionBoardTypeEnum=class{constructor(v){this.value=v;}};exports.IfcElectricDistributionBoardTypeEnum=IfcElectricDistributionBoardTypeEnum;IfcElectricDistributionBoardTypeEnum.CONSUMERUNIT="CONSUMERUNIT";IfcElectricDistributionBoardTypeEnum.DISTRIBUTIONBOARD="DISTRIBUTIONBOARD";IfcElectricDistributionBoardTypeEnum.MOTORCONTROLCENTRE="MOTORCONTROLCENTRE";IfcElectricDistributionBoardTypeEnum.SWITCHBOARD="SWITCHBOARD";IfcElectricDistributionBoardTypeEnum.USERDEFINED="USERDEFINED";IfcElectricDistributionBoardTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricFlowStorageDeviceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcElectricFlowStorageDeviceTypeEnum=IfcElectricFlowStorageDeviceTypeEnum;IfcElectricFlowStorageDeviceTypeEnum.BATTERY="BATTERY";IfcElectricFlowStorageDeviceTypeEnum.CAPACITORBANK="CAPACITORBANK";IfcElectricFlowStorageDeviceTypeEnum.HARMONICFILTER="HARMONICFILTER";IfcElectricFlowStorageDeviceTypeEnum.INDUCTORBANK="INDUCTORBANK";IfcElectricFlowStorageDeviceTypeEnum.UPS="UPS";IfcElectricFlowStorageDeviceTypeEnum.USERDEFINED="USERDEFINED";IfcElectricFlowStorageDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricGeneratorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcElectricGeneratorTypeEnum=IfcElectricGeneratorTypeEnum;IfcElectricGeneratorTypeEnum.CHP="CHP";IfcElectricGeneratorTypeEnum.ENGINEGENERATOR="ENGINEGENERATOR";IfcElectricGeneratorTypeEnum.STANDALONE="STANDALONE";IfcElectricGeneratorTypeEnum.USERDEFINED="USERDEFINED";IfcElectricGeneratorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricMotorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcElectricMotorTypeEnum=IfcElectricMotorTypeEnum;IfcElectricMotorTypeEnum.DC="DC";IfcElectricMotorTypeEnum.INDUCTION="INDUCTION";IfcElectricMotorTypeEnum.POLYPHASE="POLYPHASE";IfcElectricMotorTypeEnum.RELUCTANCESYNCHRONOUS="RELUCTANCESYNCHRONOUS";IfcElectricMotorTypeEnum.SYNCHRONOUS="SYNCHRONOUS";IfcElectricMotorTypeEnum.USERDEFINED="USERDEFINED";IfcElectricMotorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElectricTimeControlTypeEnum=class{constructor(v){this.value=v;}};exports.IfcElectricTimeControlTypeEnum=IfcElectricTimeControlTypeEnum;IfcElectricTimeControlTypeEnum.TIMECLOCK="TIMECLOCK";IfcElectricTimeControlTypeEnum.TIMEDELAY="TIMEDELAY";IfcElectricTimeControlTypeEnum.RELAY="RELAY";IfcElectricTimeControlTypeEnum.USERDEFINED="USERDEFINED";IfcElectricTimeControlTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElementAssemblyTypeEnum=class{constructor(v){this.value=v;}};exports.IfcElementAssemblyTypeEnum=IfcElementAssemblyTypeEnum;IfcElementAssemblyTypeEnum.ACCESSORY_ASSEMBLY="ACCESSORY_ASSEMBLY";IfcElementAssemblyTypeEnum.ARCH="ARCH";IfcElementAssemblyTypeEnum.BEAM_GRID="BEAM_GRID";IfcElementAssemblyTypeEnum.BRACED_FRAME="BRACED_FRAME";IfcElementAssemblyTypeEnum.GIRDER="GIRDER";IfcElementAssemblyTypeEnum.REINFORCEMENT_UNIT="REINFORCEMENT_UNIT";IfcElementAssemblyTypeEnum.RIGID_FRAME="RIGID_FRAME";IfcElementAssemblyTypeEnum.SLAB_FIELD="SLAB_FIELD";IfcElementAssemblyTypeEnum.TRUSS="TRUSS";IfcElementAssemblyTypeEnum.ABUTMENT="ABUTMENT";IfcElementAssemblyTypeEnum.PIER="PIER";IfcElementAssemblyTypeEnum.PYLON="PYLON";IfcElementAssemblyTypeEnum.CROSS_BRACING="CROSS_BRACING";IfcElementAssemblyTypeEnum.DECK="DECK";IfcElementAssemblyTypeEnum.USERDEFINED="USERDEFINED";IfcElementAssemblyTypeEnum.NOTDEFINED="NOTDEFINED";var IfcElementCompositionEnum=class{constructor(v){this.value=v;}};exports.IfcElementCompositionEnum=IfcElementCompositionEnum;IfcElementCompositionEnum.COMPLEX="COMPLEX";IfcElementCompositionEnum.ELEMENT="ELEMENT";IfcElementCompositionEnum.PARTIAL="PARTIAL";var IfcEngineTypeEnum=class{constructor(v){this.value=v;}};exports.IfcEngineTypeEnum=IfcEngineTypeEnum;IfcEngineTypeEnum.EXTERNALCOMBUSTION="EXTERNALCOMBUSTION";IfcEngineTypeEnum.INTERNALCOMBUSTION="INTERNALCOMBUSTION";IfcEngineTypeEnum.USERDEFINED="USERDEFINED";IfcEngineTypeEnum.NOTDEFINED="NOTDEFINED";var IfcEvaporativeCoolerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcEvaporativeCoolerTypeEnum=IfcEvaporativeCoolerTypeEnum;IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER="DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER";IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER="DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER";IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER="DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER";IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER="DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER";IfcEvaporativeCoolerTypeEnum.DIRECTEVAPORATIVEAIRWASHER="DIRECTEVAPORATIVEAIRWASHER";IfcEvaporativeCoolerTypeEnum.INDIRECTEVAPORATIVEPACKAGEAIRCOOLER="INDIRECTEVAPORATIVEPACKAGEAIRCOOLER";IfcEvaporativeCoolerTypeEnum.INDIRECTEVAPORATIVEWETCOIL="INDIRECTEVAPORATIVEWETCOIL";IfcEvaporativeCoolerTypeEnum.INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER="INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER";IfcEvaporativeCoolerTypeEnum.INDIRECTDIRECTCOMBINATION="INDIRECTDIRECTCOMBINATION";IfcEvaporativeCoolerTypeEnum.USERDEFINED="USERDEFINED";IfcEvaporativeCoolerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcEvaporatorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcEvaporatorTypeEnum=IfcEvaporatorTypeEnum;IfcEvaporatorTypeEnum.DIRECTEXPANSION="DIRECTEXPANSION";IfcEvaporatorTypeEnum.DIRECTEXPANSIONSHELLANDTUBE="DIRECTEXPANSIONSHELLANDTUBE";IfcEvaporatorTypeEnum.DIRECTEXPANSIONTUBEINTUBE="DIRECTEXPANSIONTUBEINTUBE";IfcEvaporatorTypeEnum.DIRECTEXPANSIONBRAZEDPLATE="DIRECTEXPANSIONBRAZEDPLATE";IfcEvaporatorTypeEnum.FLOODEDSHELLANDTUBE="FLOODEDSHELLANDTUBE";IfcEvaporatorTypeEnum.SHELLANDCOIL="SHELLANDCOIL";IfcEvaporatorTypeEnum.USERDEFINED="USERDEFINED";IfcEvaporatorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcEventTriggerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcEventTriggerTypeEnum=IfcEventTriggerTypeEnum;IfcEventTriggerTypeEnum.EVENTRULE="EVENTRULE";IfcEventTriggerTypeEnum.EVENTMESSAGE="EVENTMESSAGE";IfcEventTriggerTypeEnum.EVENTTIME="EVENTTIME";IfcEventTriggerTypeEnum.EVENTCOMPLEX="EVENTCOMPLEX";IfcEventTriggerTypeEnum.USERDEFINED="USERDEFINED";IfcEventTriggerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcEventTypeEnum=class{constructor(v){this.value=v;}};exports.IfcEventTypeEnum=IfcEventTypeEnum;IfcEventTypeEnum.STARTEVENT="STARTEVENT";IfcEventTypeEnum.ENDEVENT="ENDEVENT";IfcEventTypeEnum.INTERMEDIATEEVENT="INTERMEDIATEEVENT";IfcEventTypeEnum.USERDEFINED="USERDEFINED";IfcEventTypeEnum.NOTDEFINED="NOTDEFINED";var IfcExternalSpatialElementTypeEnum=class{constructor(v){this.value=v;}};exports.IfcExternalSpatialElementTypeEnum=IfcExternalSpatialElementTypeEnum;IfcExternalSpatialElementTypeEnum.EXTERNAL="EXTERNAL";IfcExternalSpatialElementTypeEnum.EXTERNAL_EARTH="EXTERNAL_EARTH";IfcExternalSpatialElementTypeEnum.EXTERNAL_WATER="EXTERNAL_WATER";IfcExternalSpatialElementTypeEnum.EXTERNAL_FIRE="EXTERNAL_FIRE";IfcExternalSpatialElementTypeEnum.USERDEFINED="USERDEFINED";IfcExternalSpatialElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFanTypeEnum=class{constructor(v){this.value=v;}};exports.IfcFanTypeEnum=IfcFanTypeEnum;IfcFanTypeEnum.CENTRIFUGALFORWARDCURVED="CENTRIFUGALFORWARDCURVED";IfcFanTypeEnum.CENTRIFUGALRADIAL="CENTRIFUGALRADIAL";IfcFanTypeEnum.CENTRIFUGALBACKWARDINCLINEDCURVED="CENTRIFUGALBACKWARDINCLINEDCURVED";IfcFanTypeEnum.CENTRIFUGALAIRFOIL="CENTRIFUGALAIRFOIL";IfcFanTypeEnum.TUBEAXIAL="TUBEAXIAL";IfcFanTypeEnum.VANEAXIAL="VANEAXIAL";IfcFanTypeEnum.PROPELLORAXIAL="PROPELLORAXIAL";IfcFanTypeEnum.USERDEFINED="USERDEFINED";IfcFanTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFastenerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcFastenerTypeEnum=IfcFastenerTypeEnum;IfcFastenerTypeEnum.GLUE="GLUE";IfcFastenerTypeEnum.MORTAR="MORTAR";IfcFastenerTypeEnum.WELD="WELD";IfcFastenerTypeEnum.USERDEFINED="USERDEFINED";IfcFastenerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFilterTypeEnum=class{constructor(v){this.value=v;}};exports.IfcFilterTypeEnum=IfcFilterTypeEnum;IfcFilterTypeEnum.AIRPARTICLEFILTER="AIRPARTICLEFILTER";IfcFilterTypeEnum.COMPRESSEDAIRFILTER="COMPRESSEDAIRFILTER";IfcFilterTypeEnum.ODORFILTER="ODORFILTER";IfcFilterTypeEnum.OILFILTER="OILFILTER";IfcFilterTypeEnum.STRAINER="STRAINER";IfcFilterTypeEnum.WATERFILTER="WATERFILTER";IfcFilterTypeEnum.USERDEFINED="USERDEFINED";IfcFilterTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFireSuppressionTerminalTypeEnum=class{constructor(v){this.value=v;}};exports.IfcFireSuppressionTerminalTypeEnum=IfcFireSuppressionTerminalTypeEnum;IfcFireSuppressionTerminalTypeEnum.BREECHINGINLET="BREECHINGINLET";IfcFireSuppressionTerminalTypeEnum.FIREHYDRANT="FIREHYDRANT";IfcFireSuppressionTerminalTypeEnum.HOSEREEL="HOSEREEL";IfcFireSuppressionTerminalTypeEnum.SPRINKLER="SPRINKLER";IfcFireSuppressionTerminalTypeEnum.SPRINKLERDEFLECTOR="SPRINKLERDEFLECTOR";IfcFireSuppressionTerminalTypeEnum.USERDEFINED="USERDEFINED";IfcFireSuppressionTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFlowDirectionEnum=class{constructor(v){this.value=v;}};exports.IfcFlowDirectionEnum=IfcFlowDirectionEnum;IfcFlowDirectionEnum.SOURCE="SOURCE";IfcFlowDirectionEnum.SINK="SINK";IfcFlowDirectionEnum.SOURCEANDSINK="SOURCEANDSINK";IfcFlowDirectionEnum.NOTDEFINED="NOTDEFINED";var IfcFlowInstrumentTypeEnum=class{constructor(v){this.value=v;}};exports.IfcFlowInstrumentTypeEnum=IfcFlowInstrumentTypeEnum;IfcFlowInstrumentTypeEnum.PRESSUREGAUGE="PRESSUREGAUGE";IfcFlowInstrumentTypeEnum.THERMOMETER="THERMOMETER";IfcFlowInstrumentTypeEnum.AMMETER="AMMETER";IfcFlowInstrumentTypeEnum.FREQUENCYMETER="FREQUENCYMETER";IfcFlowInstrumentTypeEnum.POWERFACTORMETER="POWERFACTORMETER";IfcFlowInstrumentTypeEnum.PHASEANGLEMETER="PHASEANGLEMETER";IfcFlowInstrumentTypeEnum.VOLTMETER_PEAK="VOLTMETER_PEAK";IfcFlowInstrumentTypeEnum.VOLTMETER_RMS="VOLTMETER_RMS";IfcFlowInstrumentTypeEnum.USERDEFINED="USERDEFINED";IfcFlowInstrumentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFlowMeterTypeEnum=class{constructor(v){this.value=v;}};exports.IfcFlowMeterTypeEnum=IfcFlowMeterTypeEnum;IfcFlowMeterTypeEnum.ENERGYMETER="ENERGYMETER";IfcFlowMeterTypeEnum.GASMETER="GASMETER";IfcFlowMeterTypeEnum.OILMETER="OILMETER";IfcFlowMeterTypeEnum.WATERMETER="WATERMETER";IfcFlowMeterTypeEnum.USERDEFINED="USERDEFINED";IfcFlowMeterTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFootingTypeEnum=class{constructor(v){this.value=v;}};exports.IfcFootingTypeEnum=IfcFootingTypeEnum;IfcFootingTypeEnum.CAISSON_FOUNDATION="CAISSON_FOUNDATION";IfcFootingTypeEnum.FOOTING_BEAM="FOOTING_BEAM";IfcFootingTypeEnum.PAD_FOOTING="PAD_FOOTING";IfcFootingTypeEnum.PILE_CAP="PILE_CAP";IfcFootingTypeEnum.STRIP_FOOTING="STRIP_FOOTING";IfcFootingTypeEnum.USERDEFINED="USERDEFINED";IfcFootingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcFurnitureTypeEnum=class{constructor(v){this.value=v;}};exports.IfcFurnitureTypeEnum=IfcFurnitureTypeEnum;IfcFurnitureTypeEnum.CHAIR="CHAIR";IfcFurnitureTypeEnum.TABLE="TABLE";IfcFurnitureTypeEnum.DESK="DESK";IfcFurnitureTypeEnum.BED="BED";IfcFurnitureTypeEnum.FILECABINET="FILECABINET";IfcFurnitureTypeEnum.SHELF="SHELF";IfcFurnitureTypeEnum.SOFA="SOFA";IfcFurnitureTypeEnum.USERDEFINED="USERDEFINED";IfcFurnitureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcGeographicElementTypeEnum=class{constructor(v){this.value=v;}};exports.IfcGeographicElementTypeEnum=IfcGeographicElementTypeEnum;IfcGeographicElementTypeEnum.TERRAIN="TERRAIN";IfcGeographicElementTypeEnum.SOIL_BORING_POINT="SOIL_BORING_POINT";IfcGeographicElementTypeEnum.USERDEFINED="USERDEFINED";IfcGeographicElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcGeometricProjectionEnum=class{constructor(v){this.value=v;}};exports.IfcGeometricProjectionEnum=IfcGeometricProjectionEnum;IfcGeometricProjectionEnum.GRAPH_VIEW="GRAPH_VIEW";IfcGeometricProjectionEnum.SKETCH_VIEW="SKETCH_VIEW";IfcGeometricProjectionEnum.MODEL_VIEW="MODEL_VIEW";IfcGeometricProjectionEnum.PLAN_VIEW="PLAN_VIEW";IfcGeometricProjectionEnum.REFLECTED_PLAN_VIEW="REFLECTED_PLAN_VIEW";IfcGeometricProjectionEnum.SECTION_VIEW="SECTION_VIEW";IfcGeometricProjectionEnum.ELEVATION_VIEW="ELEVATION_VIEW";IfcGeometricProjectionEnum.USERDEFINED="USERDEFINED";IfcGeometricProjectionEnum.NOTDEFINED="NOTDEFINED";var IfcGlobalOrLocalEnum=class{constructor(v){this.value=v;}};exports.IfcGlobalOrLocalEnum=IfcGlobalOrLocalEnum;IfcGlobalOrLocalEnum.GLOBAL_COORDS="GLOBAL_COORDS";IfcGlobalOrLocalEnum.LOCAL_COORDS="LOCAL_COORDS";var IfcGridTypeEnum=class{constructor(v){this.value=v;}};exports.IfcGridTypeEnum=IfcGridTypeEnum;IfcGridTypeEnum.RECTANGULAR="RECTANGULAR";IfcGridTypeEnum.RADIAL="RADIAL";IfcGridTypeEnum.TRIANGULAR="TRIANGULAR";IfcGridTypeEnum.IRREGULAR="IRREGULAR";IfcGridTypeEnum.USERDEFINED="USERDEFINED";IfcGridTypeEnum.NOTDEFINED="NOTDEFINED";var IfcHeatExchangerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcHeatExchangerTypeEnum=IfcHeatExchangerTypeEnum;IfcHeatExchangerTypeEnum.PLATE="PLATE";IfcHeatExchangerTypeEnum.SHELLANDTUBE="SHELLANDTUBE";IfcHeatExchangerTypeEnum.USERDEFINED="USERDEFINED";IfcHeatExchangerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcHumidifierTypeEnum=class{constructor(v){this.value=v;}};exports.IfcHumidifierTypeEnum=IfcHumidifierTypeEnum;IfcHumidifierTypeEnum.STEAMINJECTION="STEAMINJECTION";IfcHumidifierTypeEnum.ADIABATICAIRWASHER="ADIABATICAIRWASHER";IfcHumidifierTypeEnum.ADIABATICPAN="ADIABATICPAN";IfcHumidifierTypeEnum.ADIABATICWETTEDELEMENT="ADIABATICWETTEDELEMENT";IfcHumidifierTypeEnum.ADIABATICATOMIZING="ADIABATICATOMIZING";IfcHumidifierTypeEnum.ADIABATICULTRASONIC="ADIABATICULTRASONIC";IfcHumidifierTypeEnum.ADIABATICRIGIDMEDIA="ADIABATICRIGIDMEDIA";IfcHumidifierTypeEnum.ADIABATICCOMPRESSEDAIRNOZZLE="ADIABATICCOMPRESSEDAIRNOZZLE";IfcHumidifierTypeEnum.ASSISTEDELECTRIC="ASSISTEDELECTRIC";IfcHumidifierTypeEnum.ASSISTEDNATURALGAS="ASSISTEDNATURALGAS";IfcHumidifierTypeEnum.ASSISTEDPROPANE="ASSISTEDPROPANE";IfcHumidifierTypeEnum.ASSISTEDBUTANE="ASSISTEDBUTANE";IfcHumidifierTypeEnum.ASSISTEDSTEAM="ASSISTEDSTEAM";IfcHumidifierTypeEnum.USERDEFINED="USERDEFINED";IfcHumidifierTypeEnum.NOTDEFINED="NOTDEFINED";var IfcInterceptorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcInterceptorTypeEnum=IfcInterceptorTypeEnum;IfcInterceptorTypeEnum.CYCLONIC="CYCLONIC";IfcInterceptorTypeEnum.GREASE="GREASE";IfcInterceptorTypeEnum.OIL="OIL";IfcInterceptorTypeEnum.PETROL="PETROL";IfcInterceptorTypeEnum.USERDEFINED="USERDEFINED";IfcInterceptorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcInternalOrExternalEnum=class{constructor(v){this.value=v;}};exports.IfcInternalOrExternalEnum=IfcInternalOrExternalEnum;IfcInternalOrExternalEnum.INTERNAL="INTERNAL";IfcInternalOrExternalEnum.EXTERNAL="EXTERNAL";IfcInternalOrExternalEnum.EXTERNAL_EARTH="EXTERNAL_EARTH";IfcInternalOrExternalEnum.EXTERNAL_WATER="EXTERNAL_WATER";IfcInternalOrExternalEnum.EXTERNAL_FIRE="EXTERNAL_FIRE";IfcInternalOrExternalEnum.NOTDEFINED="NOTDEFINED";var IfcInventoryTypeEnum=class{constructor(v){this.value=v;}};exports.IfcInventoryTypeEnum=IfcInventoryTypeEnum;IfcInventoryTypeEnum.ASSETINVENTORY="ASSETINVENTORY";IfcInventoryTypeEnum.SPACEINVENTORY="SPACEINVENTORY";IfcInventoryTypeEnum.FURNITUREINVENTORY="FURNITUREINVENTORY";IfcInventoryTypeEnum.USERDEFINED="USERDEFINED";IfcInventoryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcJunctionBoxTypeEnum=class{constructor(v){this.value=v;}};exports.IfcJunctionBoxTypeEnum=IfcJunctionBoxTypeEnum;IfcJunctionBoxTypeEnum.DATA="DATA";IfcJunctionBoxTypeEnum.POWER="POWER";IfcJunctionBoxTypeEnum.USERDEFINED="USERDEFINED";IfcJunctionBoxTypeEnum.NOTDEFINED="NOTDEFINED";var IfcKnotType=class{constructor(v){this.value=v;}};exports.IfcKnotType=IfcKnotType;IfcKnotType.UNIFORM_KNOTS="UNIFORM_KNOTS";IfcKnotType.QUASI_UNIFORM_KNOTS="QUASI_UNIFORM_KNOTS";IfcKnotType.PIECEWISE_BEZIER_KNOTS="PIECEWISE_BEZIER_KNOTS";IfcKnotType.UNSPECIFIED="UNSPECIFIED";var IfcLaborResourceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcLaborResourceTypeEnum=IfcLaborResourceTypeEnum;IfcLaborResourceTypeEnum.ADMINISTRATION="ADMINISTRATION";IfcLaborResourceTypeEnum.CARPENTRY="CARPENTRY";IfcLaborResourceTypeEnum.CLEANING="CLEANING";IfcLaborResourceTypeEnum.CONCRETE="CONCRETE";IfcLaborResourceTypeEnum.DRYWALL="DRYWALL";IfcLaborResourceTypeEnum.ELECTRIC="ELECTRIC";IfcLaborResourceTypeEnum.FINISHING="FINISHING";IfcLaborResourceTypeEnum.FLOORING="FLOORING";IfcLaborResourceTypeEnum.GENERAL="GENERAL";IfcLaborResourceTypeEnum.HVAC="HVAC";IfcLaborResourceTypeEnum.LANDSCAPING="LANDSCAPING";IfcLaborResourceTypeEnum.MASONRY="MASONRY";IfcLaborResourceTypeEnum.PAINTING="PAINTING";IfcLaborResourceTypeEnum.PAVING="PAVING";IfcLaborResourceTypeEnum.PLUMBING="PLUMBING";IfcLaborResourceTypeEnum.ROOFING="ROOFING";IfcLaborResourceTypeEnum.SITEGRADING="SITEGRADING";IfcLaborResourceTypeEnum.STEELWORK="STEELWORK";IfcLaborResourceTypeEnum.SURVEYING="SURVEYING";IfcLaborResourceTypeEnum.USERDEFINED="USERDEFINED";IfcLaborResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcLampTypeEnum=class{constructor(v){this.value=v;}};exports.IfcLampTypeEnum=IfcLampTypeEnum;IfcLampTypeEnum.COMPACTFLUORESCENT="COMPACTFLUORESCENT";IfcLampTypeEnum.FLUORESCENT="FLUORESCENT";IfcLampTypeEnum.HALOGEN="HALOGEN";IfcLampTypeEnum.HIGHPRESSUREMERCURY="HIGHPRESSUREMERCURY";IfcLampTypeEnum.HIGHPRESSURESODIUM="HIGHPRESSURESODIUM";IfcLampTypeEnum.LED="LED";IfcLampTypeEnum.METALHALIDE="METALHALIDE";IfcLampTypeEnum.OLED="OLED";IfcLampTypeEnum.TUNGSTENFILAMENT="TUNGSTENFILAMENT";IfcLampTypeEnum.USERDEFINED="USERDEFINED";IfcLampTypeEnum.NOTDEFINED="NOTDEFINED";var IfcLayerSetDirectionEnum=class{constructor(v){this.value=v;}};exports.IfcLayerSetDirectionEnum=IfcLayerSetDirectionEnum;IfcLayerSetDirectionEnum.AXIS1="AXIS1";IfcLayerSetDirectionEnum.AXIS2="AXIS2";IfcLayerSetDirectionEnum.AXIS3="AXIS3";var IfcLightDistributionCurveEnum=class{constructor(v){this.value=v;}};exports.IfcLightDistributionCurveEnum=IfcLightDistributionCurveEnum;IfcLightDistributionCurveEnum.TYPE_A="TYPE_A";IfcLightDistributionCurveEnum.TYPE_B="TYPE_B";IfcLightDistributionCurveEnum.TYPE_C="TYPE_C";IfcLightDistributionCurveEnum.NOTDEFINED="NOTDEFINED";var IfcLightEmissionSourceEnum=class{constructor(v){this.value=v;}};exports.IfcLightEmissionSourceEnum=IfcLightEmissionSourceEnum;IfcLightEmissionSourceEnum.COMPACTFLUORESCENT="COMPACTFLUORESCENT";IfcLightEmissionSourceEnum.FLUORESCENT="FLUORESCENT";IfcLightEmissionSourceEnum.HIGHPRESSUREMERCURY="HIGHPRESSUREMERCURY";IfcLightEmissionSourceEnum.HIGHPRESSURESODIUM="HIGHPRESSURESODIUM";IfcLightEmissionSourceEnum.LIGHTEMITTINGDIODE="LIGHTEMITTINGDIODE";IfcLightEmissionSourceEnum.LOWPRESSURESODIUM="LOWPRESSURESODIUM";IfcLightEmissionSourceEnum.LOWVOLTAGEHALOGEN="LOWVOLTAGEHALOGEN";IfcLightEmissionSourceEnum.MAINVOLTAGEHALOGEN="MAINVOLTAGEHALOGEN";IfcLightEmissionSourceEnum.METALHALIDE="METALHALIDE";IfcLightEmissionSourceEnum.TUNGSTENFILAMENT="TUNGSTENFILAMENT";IfcLightEmissionSourceEnum.NOTDEFINED="NOTDEFINED";var IfcLightFixtureTypeEnum=class{constructor(v){this.value=v;}};exports.IfcLightFixtureTypeEnum=IfcLightFixtureTypeEnum;IfcLightFixtureTypeEnum.POINTSOURCE="POINTSOURCE";IfcLightFixtureTypeEnum.DIRECTIONSOURCE="DIRECTIONSOURCE";IfcLightFixtureTypeEnum.SECURITYLIGHTING="SECURITYLIGHTING";IfcLightFixtureTypeEnum.USERDEFINED="USERDEFINED";IfcLightFixtureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcLoadGroupTypeEnum=class{constructor(v){this.value=v;}};exports.IfcLoadGroupTypeEnum=IfcLoadGroupTypeEnum;IfcLoadGroupTypeEnum.LOAD_GROUP="LOAD_GROUP";IfcLoadGroupTypeEnum.LOAD_CASE="LOAD_CASE";IfcLoadGroupTypeEnum.LOAD_COMBINATION="LOAD_COMBINATION";IfcLoadGroupTypeEnum.USERDEFINED="USERDEFINED";IfcLoadGroupTypeEnum.NOTDEFINED="NOTDEFINED";var IfcLogicalOperatorEnum=class{constructor(v){this.value=v;}};exports.IfcLogicalOperatorEnum=IfcLogicalOperatorEnum;IfcLogicalOperatorEnum.LOGICALAND="LOGICALAND";IfcLogicalOperatorEnum.LOGICALOR="LOGICALOR";IfcLogicalOperatorEnum.LOGICALXOR="LOGICALXOR";IfcLogicalOperatorEnum.LOGICALNOTAND="LOGICALNOTAND";IfcLogicalOperatorEnum.LOGICALNOTOR="LOGICALNOTOR";var IfcMechanicalFastenerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcMechanicalFastenerTypeEnum=IfcMechanicalFastenerTypeEnum;IfcMechanicalFastenerTypeEnum.ANCHORBOLT="ANCHORBOLT";IfcMechanicalFastenerTypeEnum.BOLT="BOLT";IfcMechanicalFastenerTypeEnum.DOWEL="DOWEL";IfcMechanicalFastenerTypeEnum.NAIL="NAIL";IfcMechanicalFastenerTypeEnum.NAILPLATE="NAILPLATE";IfcMechanicalFastenerTypeEnum.RIVET="RIVET";IfcMechanicalFastenerTypeEnum.SCREW="SCREW";IfcMechanicalFastenerTypeEnum.SHEARCONNECTOR="SHEARCONNECTOR";IfcMechanicalFastenerTypeEnum.STAPLE="STAPLE";IfcMechanicalFastenerTypeEnum.STUDSHEARCONNECTOR="STUDSHEARCONNECTOR";IfcMechanicalFastenerTypeEnum.COUPLER="COUPLER";IfcMechanicalFastenerTypeEnum.USERDEFINED="USERDEFINED";IfcMechanicalFastenerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcMedicalDeviceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcMedicalDeviceTypeEnum=IfcMedicalDeviceTypeEnum;IfcMedicalDeviceTypeEnum.AIRSTATION="AIRSTATION";IfcMedicalDeviceTypeEnum.FEEDAIRUNIT="FEEDAIRUNIT";IfcMedicalDeviceTypeEnum.OXYGENGENERATOR="OXYGENGENERATOR";IfcMedicalDeviceTypeEnum.OXYGENPLANT="OXYGENPLANT";IfcMedicalDeviceTypeEnum.VACUUMSTATION="VACUUMSTATION";IfcMedicalDeviceTypeEnum.USERDEFINED="USERDEFINED";IfcMedicalDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcMemberTypeEnum=class{constructor(v){this.value=v;}};exports.IfcMemberTypeEnum=IfcMemberTypeEnum;IfcMemberTypeEnum.BRACE="BRACE";IfcMemberTypeEnum.CHORD="CHORD";IfcMemberTypeEnum.COLLAR="COLLAR";IfcMemberTypeEnum.MEMBER="MEMBER";IfcMemberTypeEnum.MULLION="MULLION";IfcMemberTypeEnum.PLATE="PLATE";IfcMemberTypeEnum.POST="POST";IfcMemberTypeEnum.PURLIN="PURLIN";IfcMemberTypeEnum.RAFTER="RAFTER";IfcMemberTypeEnum.STRINGER="STRINGER";IfcMemberTypeEnum.STRUT="STRUT";IfcMemberTypeEnum.STUD="STUD";IfcMemberTypeEnum.STIFFENING_RIB="STIFFENING_RIB";IfcMemberTypeEnum.ARCH_SEGMENT="ARCH_SEGMENT";IfcMemberTypeEnum.SUSPENSION_CABLE="SUSPENSION_CABLE";IfcMemberTypeEnum.SUSPENDER="SUSPENDER";IfcMemberTypeEnum.STAY_CABLE="STAY_CABLE";IfcMemberTypeEnum.USERDEFINED="USERDEFINED";IfcMemberTypeEnum.NOTDEFINED="NOTDEFINED";var IfcMotorConnectionTypeEnum=class{constructor(v){this.value=v;}};exports.IfcMotorConnectionTypeEnum=IfcMotorConnectionTypeEnum;IfcMotorConnectionTypeEnum.BELTDRIVE="BELTDRIVE";IfcMotorConnectionTypeEnum.COUPLING="COUPLING";IfcMotorConnectionTypeEnum.DIRECTDRIVE="DIRECTDRIVE";IfcMotorConnectionTypeEnum.USERDEFINED="USERDEFINED";IfcMotorConnectionTypeEnum.NOTDEFINED="NOTDEFINED";var IfcNullStyle=class{constructor(v){this.value=v;}};exports.IfcNullStyle=IfcNullStyle;IfcNullStyle.NULL="NULL";var IfcObjectTypeEnum=class{constructor(v){this.value=v;}};exports.IfcObjectTypeEnum=IfcObjectTypeEnum;IfcObjectTypeEnum.PRODUCT="PRODUCT";IfcObjectTypeEnum.PROCESS="PROCESS";IfcObjectTypeEnum.CONTROL="CONTROL";IfcObjectTypeEnum.RESOURCE="RESOURCE";IfcObjectTypeEnum.ACTOR="ACTOR";IfcObjectTypeEnum.GROUP="GROUP";IfcObjectTypeEnum.PROJECT="PROJECT";IfcObjectTypeEnum.NOTDEFINED="NOTDEFINED";var IfcObjectiveEnum=class{constructor(v){this.value=v;}};exports.IfcObjectiveEnum=IfcObjectiveEnum;IfcObjectiveEnum.CODECOMPLIANCE="CODECOMPLIANCE";IfcObjectiveEnum.CODEWAIVER="CODEWAIVER";IfcObjectiveEnum.DESIGNINTENT="DESIGNINTENT";IfcObjectiveEnum.EXTERNAL="EXTERNAL";IfcObjectiveEnum.HEALTHANDSAFETY="HEALTHANDSAFETY";IfcObjectiveEnum.MERGECONFLICT="MERGECONFLICT";IfcObjectiveEnum.MODELVIEW="MODELVIEW";IfcObjectiveEnum.PARAMETER="PARAMETER";IfcObjectiveEnum.REQUIREMENT="REQUIREMENT";IfcObjectiveEnum.SPECIFICATION="SPECIFICATION";IfcObjectiveEnum.TRIGGERCONDITION="TRIGGERCONDITION";IfcObjectiveEnum.USERDEFINED="USERDEFINED";IfcObjectiveEnum.NOTDEFINED="NOTDEFINED";var IfcOccupantTypeEnum=class{constructor(v){this.value=v;}};exports.IfcOccupantTypeEnum=IfcOccupantTypeEnum;IfcOccupantTypeEnum.ASSIGNEE="ASSIGNEE";IfcOccupantTypeEnum.ASSIGNOR="ASSIGNOR";IfcOccupantTypeEnum.LESSEE="LESSEE";IfcOccupantTypeEnum.LESSOR="LESSOR";IfcOccupantTypeEnum.LETTINGAGENT="LETTINGAGENT";IfcOccupantTypeEnum.OWNER="OWNER";IfcOccupantTypeEnum.TENANT="TENANT";IfcOccupantTypeEnum.USERDEFINED="USERDEFINED";IfcOccupantTypeEnum.NOTDEFINED="NOTDEFINED";var IfcOpeningElementTypeEnum=class{constructor(v){this.value=v;}};exports.IfcOpeningElementTypeEnum=IfcOpeningElementTypeEnum;IfcOpeningElementTypeEnum.OPENING="OPENING";IfcOpeningElementTypeEnum.RECESS="RECESS";IfcOpeningElementTypeEnum.USERDEFINED="USERDEFINED";IfcOpeningElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcOutletTypeEnum=class{constructor(v){this.value=v;}};exports.IfcOutletTypeEnum=IfcOutletTypeEnum;IfcOutletTypeEnum.AUDIOVISUALOUTLET="AUDIOVISUALOUTLET";IfcOutletTypeEnum.COMMUNICATIONSOUTLET="COMMUNICATIONSOUTLET";IfcOutletTypeEnum.POWEROUTLET="POWEROUTLET";IfcOutletTypeEnum.DATAOUTLET="DATAOUTLET";IfcOutletTypeEnum.TELEPHONEOUTLET="TELEPHONEOUTLET";IfcOutletTypeEnum.USERDEFINED="USERDEFINED";IfcOutletTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPerformanceHistoryTypeEnum=class{constructor(v){this.value=v;}};exports.IfcPerformanceHistoryTypeEnum=IfcPerformanceHistoryTypeEnum;IfcPerformanceHistoryTypeEnum.USERDEFINED="USERDEFINED";IfcPerformanceHistoryTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPermeableCoveringOperationEnum=class{constructor(v){this.value=v;}};exports.IfcPermeableCoveringOperationEnum=IfcPermeableCoveringOperationEnum;IfcPermeableCoveringOperationEnum.GRILL="GRILL";IfcPermeableCoveringOperationEnum.LOUVER="LOUVER";IfcPermeableCoveringOperationEnum.SCREEN="SCREEN";IfcPermeableCoveringOperationEnum.USERDEFINED="USERDEFINED";IfcPermeableCoveringOperationEnum.NOTDEFINED="NOTDEFINED";var IfcPermitTypeEnum=class{constructor(v){this.value=v;}};exports.IfcPermitTypeEnum=IfcPermitTypeEnum;IfcPermitTypeEnum.ACCESS="ACCESS";IfcPermitTypeEnum.BUILDING="BUILDING";IfcPermitTypeEnum.WORK="WORK";IfcPermitTypeEnum.USERDEFINED="USERDEFINED";IfcPermitTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPhysicalOrVirtualEnum=class{constructor(v){this.value=v;}};exports.IfcPhysicalOrVirtualEnum=IfcPhysicalOrVirtualEnum;IfcPhysicalOrVirtualEnum.PHYSICAL="PHYSICAL";IfcPhysicalOrVirtualEnum.VIRTUAL="VIRTUAL";IfcPhysicalOrVirtualEnum.NOTDEFINED="NOTDEFINED";var IfcPileConstructionEnum=class{constructor(v){this.value=v;}};exports.IfcPileConstructionEnum=IfcPileConstructionEnum;IfcPileConstructionEnum.CAST_IN_PLACE="CAST_IN_PLACE";IfcPileConstructionEnum.COMPOSITE="COMPOSITE";IfcPileConstructionEnum.PRECAST_CONCRETE="PRECAST_CONCRETE";IfcPileConstructionEnum.PREFAB_STEEL="PREFAB_STEEL";IfcPileConstructionEnum.USERDEFINED="USERDEFINED";IfcPileConstructionEnum.NOTDEFINED="NOTDEFINED";var IfcPileTypeEnum=class{constructor(v){this.value=v;}};exports.IfcPileTypeEnum=IfcPileTypeEnum;IfcPileTypeEnum.BORED="BORED";IfcPileTypeEnum.DRIVEN="DRIVEN";IfcPileTypeEnum.JETGROUTING="JETGROUTING";IfcPileTypeEnum.COHESION="COHESION";IfcPileTypeEnum.FRICTION="FRICTION";IfcPileTypeEnum.SUPPORT="SUPPORT";IfcPileTypeEnum.USERDEFINED="USERDEFINED";IfcPileTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPipeFittingTypeEnum=class{constructor(v){this.value=v;}};exports.IfcPipeFittingTypeEnum=IfcPipeFittingTypeEnum;IfcPipeFittingTypeEnum.BEND="BEND";IfcPipeFittingTypeEnum.CONNECTOR="CONNECTOR";IfcPipeFittingTypeEnum.ENTRY="ENTRY";IfcPipeFittingTypeEnum.EXIT="EXIT";IfcPipeFittingTypeEnum.JUNCTION="JUNCTION";IfcPipeFittingTypeEnum.OBSTRUCTION="OBSTRUCTION";IfcPipeFittingTypeEnum.TRANSITION="TRANSITION";IfcPipeFittingTypeEnum.USERDEFINED="USERDEFINED";IfcPipeFittingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPipeSegmentTypeEnum=class{constructor(v){this.value=v;}};exports.IfcPipeSegmentTypeEnum=IfcPipeSegmentTypeEnum;IfcPipeSegmentTypeEnum.CULVERT="CULVERT";IfcPipeSegmentTypeEnum.FLEXIBLESEGMENT="FLEXIBLESEGMENT";IfcPipeSegmentTypeEnum.RIGIDSEGMENT="RIGIDSEGMENT";IfcPipeSegmentTypeEnum.GUTTER="GUTTER";IfcPipeSegmentTypeEnum.SPOOL="SPOOL";IfcPipeSegmentTypeEnum.USERDEFINED="USERDEFINED";IfcPipeSegmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPlateTypeEnum=class{constructor(v){this.value=v;}};exports.IfcPlateTypeEnum=IfcPlateTypeEnum;IfcPlateTypeEnum.CURTAIN_PANEL="CURTAIN_PANEL";IfcPlateTypeEnum.SHEET="SHEET";IfcPlateTypeEnum.FLANGE_PLATE="FLANGE_PLATE";IfcPlateTypeEnum.WEB_PLATE="WEB_PLATE";IfcPlateTypeEnum.STIFFENER_PLATE="STIFFENER_PLATE";IfcPlateTypeEnum.GUSSET_PLATE="GUSSET_PLATE";IfcPlateTypeEnum.COVER_PLATE="COVER_PLATE";IfcPlateTypeEnum.SPLICE_PLATE="SPLICE_PLATE";IfcPlateTypeEnum.BASE_PLATE="BASE_PLATE";IfcPlateTypeEnum.USERDEFINED="USERDEFINED";IfcPlateTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPreferredSurfaceCurveRepresentation=class{constructor(v){this.value=v;}};exports.IfcPreferredSurfaceCurveRepresentation=IfcPreferredSurfaceCurveRepresentation;IfcPreferredSurfaceCurveRepresentation.CURVE3D="CURVE3D";IfcPreferredSurfaceCurveRepresentation.PCURVE_S1="PCURVE_S1";IfcPreferredSurfaceCurveRepresentation.PCURVE_S2="PCURVE_S2";var IfcProcedureTypeEnum=class{constructor(v){this.value=v;}};exports.IfcProcedureTypeEnum=IfcProcedureTypeEnum;IfcProcedureTypeEnum.ADVICE_CAUTION="ADVICE_CAUTION";IfcProcedureTypeEnum.ADVICE_NOTE="ADVICE_NOTE";IfcProcedureTypeEnum.ADVICE_WARNING="ADVICE_WARNING";IfcProcedureTypeEnum.CALIBRATION="CALIBRATION";IfcProcedureTypeEnum.DIAGNOSTIC="DIAGNOSTIC";IfcProcedureTypeEnum.SHUTDOWN="SHUTDOWN";IfcProcedureTypeEnum.STARTUP="STARTUP";IfcProcedureTypeEnum.USERDEFINED="USERDEFINED";IfcProcedureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcProfileTypeEnum=class{constructor(v){this.value=v;}};exports.IfcProfileTypeEnum=IfcProfileTypeEnum;IfcProfileTypeEnum.CURVE="CURVE";IfcProfileTypeEnum.AREA="AREA";var IfcProjectOrderTypeEnum=class{constructor(v){this.value=v;}};exports.IfcProjectOrderTypeEnum=IfcProjectOrderTypeEnum;IfcProjectOrderTypeEnum.CHANGEORDER="CHANGEORDER";IfcProjectOrderTypeEnum.MAINTENANCEWORKORDER="MAINTENANCEWORKORDER";IfcProjectOrderTypeEnum.MOVEORDER="MOVEORDER";IfcProjectOrderTypeEnum.PURCHASEORDER="PURCHASEORDER";IfcProjectOrderTypeEnum.WORKORDER="WORKORDER";IfcProjectOrderTypeEnum.USERDEFINED="USERDEFINED";IfcProjectOrderTypeEnum.NOTDEFINED="NOTDEFINED";var IfcProjectedOrTrueLengthEnum=class{constructor(v){this.value=v;}};exports.IfcProjectedOrTrueLengthEnum=IfcProjectedOrTrueLengthEnum;IfcProjectedOrTrueLengthEnum.PROJECTED_LENGTH="PROJECTED_LENGTH";IfcProjectedOrTrueLengthEnum.TRUE_LENGTH="TRUE_LENGTH";var IfcProjectionElementTypeEnum=class{constructor(v){this.value=v;}};exports.IfcProjectionElementTypeEnum=IfcProjectionElementTypeEnum;IfcProjectionElementTypeEnum.BLISTER="BLISTER";IfcProjectionElementTypeEnum.DEVIATOR="DEVIATOR";IfcProjectionElementTypeEnum.USERDEFINED="USERDEFINED";IfcProjectionElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPropertySetTemplateTypeEnum=class{constructor(v){this.value=v;}};exports.IfcPropertySetTemplateTypeEnum=IfcPropertySetTemplateTypeEnum;IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENONLY="PSET_TYPEDRIVENONLY";IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENOVERRIDE="PSET_TYPEDRIVENOVERRIDE";IfcPropertySetTemplateTypeEnum.PSET_OCCURRENCEDRIVEN="PSET_OCCURRENCEDRIVEN";IfcPropertySetTemplateTypeEnum.PSET_PERFORMANCEDRIVEN="PSET_PERFORMANCEDRIVEN";IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENONLY="QTO_TYPEDRIVENONLY";IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENOVERRIDE="QTO_TYPEDRIVENOVERRIDE";IfcPropertySetTemplateTypeEnum.QTO_OCCURRENCEDRIVEN="QTO_OCCURRENCEDRIVEN";IfcPropertySetTemplateTypeEnum.NOTDEFINED="NOTDEFINED";var IfcProtectiveDeviceTrippingUnitTypeEnum=class{constructor(v){this.value=v;}};exports.IfcProtectiveDeviceTrippingUnitTypeEnum=IfcProtectiveDeviceTrippingUnitTypeEnum;IfcProtectiveDeviceTrippingUnitTypeEnum.ELECTRONIC="ELECTRONIC";IfcProtectiveDeviceTrippingUnitTypeEnum.ELECTROMAGNETIC="ELECTROMAGNETIC";IfcProtectiveDeviceTrippingUnitTypeEnum.RESIDUALCURRENT="RESIDUALCURRENT";IfcProtectiveDeviceTrippingUnitTypeEnum.THERMAL="THERMAL";IfcProtectiveDeviceTrippingUnitTypeEnum.USERDEFINED="USERDEFINED";IfcProtectiveDeviceTrippingUnitTypeEnum.NOTDEFINED="NOTDEFINED";var IfcProtectiveDeviceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcProtectiveDeviceTypeEnum=IfcProtectiveDeviceTypeEnum;IfcProtectiveDeviceTypeEnum.CIRCUITBREAKER="CIRCUITBREAKER";IfcProtectiveDeviceTypeEnum.EARTHLEAKAGECIRCUITBREAKER="EARTHLEAKAGECIRCUITBREAKER";IfcProtectiveDeviceTypeEnum.EARTHINGSWITCH="EARTHINGSWITCH";IfcProtectiveDeviceTypeEnum.FUSEDISCONNECTOR="FUSEDISCONNECTOR";IfcProtectiveDeviceTypeEnum.RESIDUALCURRENTCIRCUITBREAKER="RESIDUALCURRENTCIRCUITBREAKER";IfcProtectiveDeviceTypeEnum.RESIDUALCURRENTSWITCH="RESIDUALCURRENTSWITCH";IfcProtectiveDeviceTypeEnum.VARISTOR="VARISTOR";IfcProtectiveDeviceTypeEnum.USERDEFINED="USERDEFINED";IfcProtectiveDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcPumpTypeEnum=class{constructor(v){this.value=v;}};exports.IfcPumpTypeEnum=IfcPumpTypeEnum;IfcPumpTypeEnum.CIRCULATOR="CIRCULATOR";IfcPumpTypeEnum.ENDSUCTION="ENDSUCTION";IfcPumpTypeEnum.SPLITCASE="SPLITCASE";IfcPumpTypeEnum.SUBMERSIBLEPUMP="SUBMERSIBLEPUMP";IfcPumpTypeEnum.SUMPPUMP="SUMPPUMP";IfcPumpTypeEnum.VERTICALINLINE="VERTICALINLINE";IfcPumpTypeEnum.VERTICALTURBINE="VERTICALTURBINE";IfcPumpTypeEnum.USERDEFINED="USERDEFINED";IfcPumpTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRailingTypeEnum=class{constructor(v){this.value=v;}};exports.IfcRailingTypeEnum=IfcRailingTypeEnum;IfcRailingTypeEnum.HANDRAIL="HANDRAIL";IfcRailingTypeEnum.GUARDRAIL="GUARDRAIL";IfcRailingTypeEnum.BALUSTRADE="BALUSTRADE";IfcRailingTypeEnum.USERDEFINED="USERDEFINED";IfcRailingTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRampFlightTypeEnum=class{constructor(v){this.value=v;}};exports.IfcRampFlightTypeEnum=IfcRampFlightTypeEnum;IfcRampFlightTypeEnum.STRAIGHT="STRAIGHT";IfcRampFlightTypeEnum.SPIRAL="SPIRAL";IfcRampFlightTypeEnum.USERDEFINED="USERDEFINED";IfcRampFlightTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRampTypeEnum=class{constructor(v){this.value=v;}};exports.IfcRampTypeEnum=IfcRampTypeEnum;IfcRampTypeEnum.STRAIGHT_RUN_RAMP="STRAIGHT_RUN_RAMP";IfcRampTypeEnum.TWO_STRAIGHT_RUN_RAMP="TWO_STRAIGHT_RUN_RAMP";IfcRampTypeEnum.QUARTER_TURN_RAMP="QUARTER_TURN_RAMP";IfcRampTypeEnum.TWO_QUARTER_TURN_RAMP="TWO_QUARTER_TURN_RAMP";IfcRampTypeEnum.HALF_TURN_RAMP="HALF_TURN_RAMP";IfcRampTypeEnum.SPIRAL_RAMP="SPIRAL_RAMP";IfcRampTypeEnum.USERDEFINED="USERDEFINED";IfcRampTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRecurrenceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcRecurrenceTypeEnum=IfcRecurrenceTypeEnum;IfcRecurrenceTypeEnum.DAILY="DAILY";IfcRecurrenceTypeEnum.WEEKLY="WEEKLY";IfcRecurrenceTypeEnum.MONTHLY_BY_DAY_OF_MONTH="MONTHLY_BY_DAY_OF_MONTH";IfcRecurrenceTypeEnum.MONTHLY_BY_POSITION="MONTHLY_BY_POSITION";IfcRecurrenceTypeEnum.BY_DAY_COUNT="BY_DAY_COUNT";IfcRecurrenceTypeEnum.BY_WEEKDAY_COUNT="BY_WEEKDAY_COUNT";IfcRecurrenceTypeEnum.YEARLY_BY_DAY_OF_MONTH="YEARLY_BY_DAY_OF_MONTH";IfcRecurrenceTypeEnum.YEARLY_BY_POSITION="YEARLY_BY_POSITION";var IfcReferentTypeEnum=class{constructor(v){this.value=v;}};exports.IfcReferentTypeEnum=IfcReferentTypeEnum;IfcReferentTypeEnum.KILOPOINT="KILOPOINT";IfcReferentTypeEnum.MILEPOINT="MILEPOINT";IfcReferentTypeEnum.STATION="STATION";IfcReferentTypeEnum.USERDEFINED="USERDEFINED";IfcReferentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcReflectanceMethodEnum=class{constructor(v){this.value=v;}};exports.IfcReflectanceMethodEnum=IfcReflectanceMethodEnum;IfcReflectanceMethodEnum.BLINN="BLINN";IfcReflectanceMethodEnum.FLAT="FLAT";IfcReflectanceMethodEnum.GLASS="GLASS";IfcReflectanceMethodEnum.MATT="MATT";IfcReflectanceMethodEnum.METAL="METAL";IfcReflectanceMethodEnum.MIRROR="MIRROR";IfcReflectanceMethodEnum.PHONG="PHONG";IfcReflectanceMethodEnum.PLASTIC="PLASTIC";IfcReflectanceMethodEnum.STRAUSS="STRAUSS";IfcReflectanceMethodEnum.NOTDEFINED="NOTDEFINED";var IfcReinforcingBarRoleEnum=class{constructor(v){this.value=v;}};exports.IfcReinforcingBarRoleEnum=IfcReinforcingBarRoleEnum;IfcReinforcingBarRoleEnum.MAIN="MAIN";IfcReinforcingBarRoleEnum.SHEAR="SHEAR";IfcReinforcingBarRoleEnum.LIGATURE="LIGATURE";IfcReinforcingBarRoleEnum.STUD="STUD";IfcReinforcingBarRoleEnum.PUNCHING="PUNCHING";IfcReinforcingBarRoleEnum.EDGE="EDGE";IfcReinforcingBarRoleEnum.RING="RING";IfcReinforcingBarRoleEnum.ANCHORING="ANCHORING";IfcReinforcingBarRoleEnum.USERDEFINED="USERDEFINED";IfcReinforcingBarRoleEnum.NOTDEFINED="NOTDEFINED";var IfcReinforcingBarSurfaceEnum=class{constructor(v){this.value=v;}};exports.IfcReinforcingBarSurfaceEnum=IfcReinforcingBarSurfaceEnum;IfcReinforcingBarSurfaceEnum.PLAIN="PLAIN";IfcReinforcingBarSurfaceEnum.TEXTURED="TEXTURED";var IfcReinforcingBarTypeEnum=class{constructor(v){this.value=v;}};exports.IfcReinforcingBarTypeEnum=IfcReinforcingBarTypeEnum;IfcReinforcingBarTypeEnum.ANCHORING="ANCHORING";IfcReinforcingBarTypeEnum.EDGE="EDGE";IfcReinforcingBarTypeEnum.LIGATURE="LIGATURE";IfcReinforcingBarTypeEnum.MAIN="MAIN";IfcReinforcingBarTypeEnum.PUNCHING="PUNCHING";IfcReinforcingBarTypeEnum.RING="RING";IfcReinforcingBarTypeEnum.SHEAR="SHEAR";IfcReinforcingBarTypeEnum.STUD="STUD";IfcReinforcingBarTypeEnum.SPACEBAR="SPACEBAR";IfcReinforcingBarTypeEnum.USERDEFINED="USERDEFINED";IfcReinforcingBarTypeEnum.NOTDEFINED="NOTDEFINED";var IfcReinforcingMeshTypeEnum=class{constructor(v){this.value=v;}};exports.IfcReinforcingMeshTypeEnum=IfcReinforcingMeshTypeEnum;IfcReinforcingMeshTypeEnum.USERDEFINED="USERDEFINED";IfcReinforcingMeshTypeEnum.NOTDEFINED="NOTDEFINED";var IfcRoleEnum=class{constructor(v){this.value=v;}};exports.IfcRoleEnum=IfcRoleEnum;IfcRoleEnum.SUPPLIER="SUPPLIER";IfcRoleEnum.MANUFACTURER="MANUFACTURER";IfcRoleEnum.CONTRACTOR="CONTRACTOR";IfcRoleEnum.SUBCONTRACTOR="SUBCONTRACTOR";IfcRoleEnum.ARCHITECT="ARCHITECT";IfcRoleEnum.STRUCTURALENGINEER="STRUCTURALENGINEER";IfcRoleEnum.COSTENGINEER="COSTENGINEER";IfcRoleEnum.CLIENT="CLIENT";IfcRoleEnum.BUILDINGOWNER="BUILDINGOWNER";IfcRoleEnum.BUILDINGOPERATOR="BUILDINGOPERATOR";IfcRoleEnum.MECHANICALENGINEER="MECHANICALENGINEER";IfcRoleEnum.ELECTRICALENGINEER="ELECTRICALENGINEER";IfcRoleEnum.PROJECTMANAGER="PROJECTMANAGER";IfcRoleEnum.FACILITIESMANAGER="FACILITIESMANAGER";IfcRoleEnum.CIVILENGINEER="CIVILENGINEER";IfcRoleEnum.COMMISSIONINGENGINEER="COMMISSIONINGENGINEER";IfcRoleEnum.ENGINEER="ENGINEER";IfcRoleEnum.OWNER="OWNER";IfcRoleEnum.CONSULTANT="CONSULTANT";IfcRoleEnum.CONSTRUCTIONMANAGER="CONSTRUCTIONMANAGER";IfcRoleEnum.FIELDCONSTRUCTIONMANAGER="FIELDCONSTRUCTIONMANAGER";IfcRoleEnum.RESELLER="RESELLER";IfcRoleEnum.USERDEFINED="USERDEFINED";var IfcRoofTypeEnum=class{constructor(v){this.value=v;}};exports.IfcRoofTypeEnum=IfcRoofTypeEnum;IfcRoofTypeEnum.FLAT_ROOF="FLAT_ROOF";IfcRoofTypeEnum.SHED_ROOF="SHED_ROOF";IfcRoofTypeEnum.GABLE_ROOF="GABLE_ROOF";IfcRoofTypeEnum.HIP_ROOF="HIP_ROOF";IfcRoofTypeEnum.HIPPED_GABLE_ROOF="HIPPED_GABLE_ROOF";IfcRoofTypeEnum.GAMBREL_ROOF="GAMBREL_ROOF";IfcRoofTypeEnum.MANSARD_ROOF="MANSARD_ROOF";IfcRoofTypeEnum.BARREL_ROOF="BARREL_ROOF";IfcRoofTypeEnum.RAINBOW_ROOF="RAINBOW_ROOF";IfcRoofTypeEnum.BUTTERFLY_ROOF="BUTTERFLY_ROOF";IfcRoofTypeEnum.PAVILION_ROOF="PAVILION_ROOF";IfcRoofTypeEnum.DOME_ROOF="DOME_ROOF";IfcRoofTypeEnum.FREEFORM="FREEFORM";IfcRoofTypeEnum.USERDEFINED="USERDEFINED";IfcRoofTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSIPrefix=class{constructor(v){this.value=v;}};exports.IfcSIPrefix=IfcSIPrefix;IfcSIPrefix.EXA="EXA";IfcSIPrefix.PETA="PETA";IfcSIPrefix.TERA="TERA";IfcSIPrefix.GIGA="GIGA";IfcSIPrefix.MEGA="MEGA";IfcSIPrefix.KILO="KILO";IfcSIPrefix.HECTO="HECTO";IfcSIPrefix.DECA="DECA";IfcSIPrefix.DECI="DECI";IfcSIPrefix.CENTI="CENTI";IfcSIPrefix.MILLI="MILLI";IfcSIPrefix.MICRO="MICRO";IfcSIPrefix.NANO="NANO";IfcSIPrefix.PICO="PICO";IfcSIPrefix.FEMTO="FEMTO";IfcSIPrefix.ATTO="ATTO";var IfcSIUnitName=class{constructor(v){this.value=v;}};exports.IfcSIUnitName=IfcSIUnitName;IfcSIUnitName.AMPERE="AMPERE";IfcSIUnitName.BECQUEREL="BECQUEREL";IfcSIUnitName.CANDELA="CANDELA";IfcSIUnitName.COULOMB="COULOMB";IfcSIUnitName.CUBIC_METRE="CUBIC_METRE";IfcSIUnitName.DEGREE_CELSIUS="DEGREE_CELSIUS";IfcSIUnitName.FARAD="FARAD";IfcSIUnitName.GRAM="GRAM";IfcSIUnitName.GRAY="GRAY";IfcSIUnitName.HENRY="HENRY";IfcSIUnitName.HERTZ="HERTZ";IfcSIUnitName.JOULE="JOULE";IfcSIUnitName.KELVIN="KELVIN";IfcSIUnitName.LUMEN="LUMEN";IfcSIUnitName.LUX="LUX";IfcSIUnitName.METRE="METRE";IfcSIUnitName.MOLE="MOLE";IfcSIUnitName.NEWTON="NEWTON";IfcSIUnitName.OHM="OHM";IfcSIUnitName.PASCAL="PASCAL";IfcSIUnitName.RADIAN="RADIAN";IfcSIUnitName.SECOND="SECOND";IfcSIUnitName.SIEMENS="SIEMENS";IfcSIUnitName.SIEVERT="SIEVERT";IfcSIUnitName.SQUARE_METRE="SQUARE_METRE";IfcSIUnitName.STERADIAN="STERADIAN";IfcSIUnitName.TESLA="TESLA";IfcSIUnitName.VOLT="VOLT";IfcSIUnitName.WATT="WATT";IfcSIUnitName.WEBER="WEBER";var IfcSanitaryTerminalTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSanitaryTerminalTypeEnum=IfcSanitaryTerminalTypeEnum;IfcSanitaryTerminalTypeEnum.BATH="BATH";IfcSanitaryTerminalTypeEnum.BIDET="BIDET";IfcSanitaryTerminalTypeEnum.CISTERN="CISTERN";IfcSanitaryTerminalTypeEnum.SHOWER="SHOWER";IfcSanitaryTerminalTypeEnum.SINK="SINK";IfcSanitaryTerminalTypeEnum.SANITARYFOUNTAIN="SANITARYFOUNTAIN";IfcSanitaryTerminalTypeEnum.TOILETPAN="TOILETPAN";IfcSanitaryTerminalTypeEnum.URINAL="URINAL";IfcSanitaryTerminalTypeEnum.WASHHANDBASIN="WASHHANDBASIN";IfcSanitaryTerminalTypeEnum.WCSEAT="WCSEAT";IfcSanitaryTerminalTypeEnum.USERDEFINED="USERDEFINED";IfcSanitaryTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSectionTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSectionTypeEnum=IfcSectionTypeEnum;IfcSectionTypeEnum.UNIFORM="UNIFORM";IfcSectionTypeEnum.TAPERED="TAPERED";var IfcSensorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSensorTypeEnum=IfcSensorTypeEnum;IfcSensorTypeEnum.COSENSOR="COSENSOR";IfcSensorTypeEnum.CO2SENSOR="CO2SENSOR";IfcSensorTypeEnum.CONDUCTANCESENSOR="CONDUCTANCESENSOR";IfcSensorTypeEnum.CONTACTSENSOR="CONTACTSENSOR";IfcSensorTypeEnum.FIRESENSOR="FIRESENSOR";IfcSensorTypeEnum.FLOWSENSOR="FLOWSENSOR";IfcSensorTypeEnum.FROSTSENSOR="FROSTSENSOR";IfcSensorTypeEnum.GASSENSOR="GASSENSOR";IfcSensorTypeEnum.HEATSENSOR="HEATSENSOR";IfcSensorTypeEnum.HUMIDITYSENSOR="HUMIDITYSENSOR";IfcSensorTypeEnum.IDENTIFIERSENSOR="IDENTIFIERSENSOR";IfcSensorTypeEnum.IONCONCENTRATIONSENSOR="IONCONCENTRATIONSENSOR";IfcSensorTypeEnum.LEVELSENSOR="LEVELSENSOR";IfcSensorTypeEnum.LIGHTSENSOR="LIGHTSENSOR";IfcSensorTypeEnum.MOISTURESENSOR="MOISTURESENSOR";IfcSensorTypeEnum.MOVEMENTSENSOR="MOVEMENTSENSOR";IfcSensorTypeEnum.PHSENSOR="PHSENSOR";IfcSensorTypeEnum.PRESSURESENSOR="PRESSURESENSOR";IfcSensorTypeEnum.RADIATIONSENSOR="RADIATIONSENSOR";IfcSensorTypeEnum.RADIOACTIVITYSENSOR="RADIOACTIVITYSENSOR";IfcSensorTypeEnum.SMOKESENSOR="SMOKESENSOR";IfcSensorTypeEnum.SOUNDSENSOR="SOUNDSENSOR";IfcSensorTypeEnum.TEMPERATURESENSOR="TEMPERATURESENSOR";IfcSensorTypeEnum.WINDSENSOR="WINDSENSOR";IfcSensorTypeEnum.USERDEFINED="USERDEFINED";IfcSensorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSequenceEnum=class{constructor(v){this.value=v;}};exports.IfcSequenceEnum=IfcSequenceEnum;IfcSequenceEnum.START_START="START_START";IfcSequenceEnum.START_FINISH="START_FINISH";IfcSequenceEnum.FINISH_START="FINISH_START";IfcSequenceEnum.FINISH_FINISH="FINISH_FINISH";IfcSequenceEnum.USERDEFINED="USERDEFINED";IfcSequenceEnum.NOTDEFINED="NOTDEFINED";var IfcShadingDeviceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcShadingDeviceTypeEnum=IfcShadingDeviceTypeEnum;IfcShadingDeviceTypeEnum.JALOUSIE="JALOUSIE";IfcShadingDeviceTypeEnum.SHUTTER="SHUTTER";IfcShadingDeviceTypeEnum.AWNING="AWNING";IfcShadingDeviceTypeEnum.USERDEFINED="USERDEFINED";IfcShadingDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSimplePropertyTemplateTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSimplePropertyTemplateTypeEnum=IfcSimplePropertyTemplateTypeEnum;IfcSimplePropertyTemplateTypeEnum.P_SINGLEVALUE="P_SINGLEVALUE";IfcSimplePropertyTemplateTypeEnum.P_ENUMERATEDVALUE="P_ENUMERATEDVALUE";IfcSimplePropertyTemplateTypeEnum.P_BOUNDEDVALUE="P_BOUNDEDVALUE";IfcSimplePropertyTemplateTypeEnum.P_LISTVALUE="P_LISTVALUE";IfcSimplePropertyTemplateTypeEnum.P_TABLEVALUE="P_TABLEVALUE";IfcSimplePropertyTemplateTypeEnum.P_REFERENCEVALUE="P_REFERENCEVALUE";IfcSimplePropertyTemplateTypeEnum.Q_LENGTH="Q_LENGTH";IfcSimplePropertyTemplateTypeEnum.Q_AREA="Q_AREA";IfcSimplePropertyTemplateTypeEnum.Q_VOLUME="Q_VOLUME";IfcSimplePropertyTemplateTypeEnum.Q_COUNT="Q_COUNT";IfcSimplePropertyTemplateTypeEnum.Q_WEIGHT="Q_WEIGHT";IfcSimplePropertyTemplateTypeEnum.Q_TIME="Q_TIME";var IfcSlabTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSlabTypeEnum=IfcSlabTypeEnum;IfcSlabTypeEnum.FLOOR="FLOOR";IfcSlabTypeEnum.ROOF="ROOF";IfcSlabTypeEnum.LANDING="LANDING";IfcSlabTypeEnum.BASESLAB="BASESLAB";IfcSlabTypeEnum.APPROACH_SLAB="APPROACH_SLAB";IfcSlabTypeEnum.PAVING="PAVING";IfcSlabTypeEnum.WEARING="WEARING";IfcSlabTypeEnum.SIDEWALK="SIDEWALK";IfcSlabTypeEnum.USERDEFINED="USERDEFINED";IfcSlabTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSolarDeviceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSolarDeviceTypeEnum=IfcSolarDeviceTypeEnum;IfcSolarDeviceTypeEnum.SOLARCOLLECTOR="SOLARCOLLECTOR";IfcSolarDeviceTypeEnum.SOLARPANEL="SOLARPANEL";IfcSolarDeviceTypeEnum.USERDEFINED="USERDEFINED";IfcSolarDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSpaceHeaterTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSpaceHeaterTypeEnum=IfcSpaceHeaterTypeEnum;IfcSpaceHeaterTypeEnum.CONVECTOR="CONVECTOR";IfcSpaceHeaterTypeEnum.RADIATOR="RADIATOR";IfcSpaceHeaterTypeEnum.USERDEFINED="USERDEFINED";IfcSpaceHeaterTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSpaceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSpaceTypeEnum=IfcSpaceTypeEnum;IfcSpaceTypeEnum.SPACE="SPACE";IfcSpaceTypeEnum.PARKING="PARKING";IfcSpaceTypeEnum.GFA="GFA";IfcSpaceTypeEnum.INTERNAL="INTERNAL";IfcSpaceTypeEnum.EXTERNAL="EXTERNAL";IfcSpaceTypeEnum.USERDEFINED="USERDEFINED";IfcSpaceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSpatialZoneTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSpatialZoneTypeEnum=IfcSpatialZoneTypeEnum;IfcSpatialZoneTypeEnum.CONSTRUCTION="CONSTRUCTION";IfcSpatialZoneTypeEnum.FIRESAFETY="FIRESAFETY";IfcSpatialZoneTypeEnum.LIGHTING="LIGHTING";IfcSpatialZoneTypeEnum.OCCUPANCY="OCCUPANCY";IfcSpatialZoneTypeEnum.SECURITY="SECURITY";IfcSpatialZoneTypeEnum.THERMAL="THERMAL";IfcSpatialZoneTypeEnum.TRANSPORT="TRANSPORT";IfcSpatialZoneTypeEnum.VENTILATION="VENTILATION";IfcSpatialZoneTypeEnum.USERDEFINED="USERDEFINED";IfcSpatialZoneTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStackTerminalTypeEnum=class{constructor(v){this.value=v;}};exports.IfcStackTerminalTypeEnum=IfcStackTerminalTypeEnum;IfcStackTerminalTypeEnum.BIRDCAGE="BIRDCAGE";IfcStackTerminalTypeEnum.COWL="COWL";IfcStackTerminalTypeEnum.RAINWATERHOPPER="RAINWATERHOPPER";IfcStackTerminalTypeEnum.USERDEFINED="USERDEFINED";IfcStackTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStairFlightTypeEnum=class{constructor(v){this.value=v;}};exports.IfcStairFlightTypeEnum=IfcStairFlightTypeEnum;IfcStairFlightTypeEnum.STRAIGHT="STRAIGHT";IfcStairFlightTypeEnum.WINDER="WINDER";IfcStairFlightTypeEnum.SPIRAL="SPIRAL";IfcStairFlightTypeEnum.CURVED="CURVED";IfcStairFlightTypeEnum.FREEFORM="FREEFORM";IfcStairFlightTypeEnum.USERDEFINED="USERDEFINED";IfcStairFlightTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStairTypeEnum=class{constructor(v){this.value=v;}};exports.IfcStairTypeEnum=IfcStairTypeEnum;IfcStairTypeEnum.STRAIGHT_RUN_STAIR="STRAIGHT_RUN_STAIR";IfcStairTypeEnum.TWO_STRAIGHT_RUN_STAIR="TWO_STRAIGHT_RUN_STAIR";IfcStairTypeEnum.QUARTER_WINDING_STAIR="QUARTER_WINDING_STAIR";IfcStairTypeEnum.QUARTER_TURN_STAIR="QUARTER_TURN_STAIR";IfcStairTypeEnum.HALF_WINDING_STAIR="HALF_WINDING_STAIR";IfcStairTypeEnum.HALF_TURN_STAIR="HALF_TURN_STAIR";IfcStairTypeEnum.TWO_QUARTER_WINDING_STAIR="TWO_QUARTER_WINDING_STAIR";IfcStairTypeEnum.TWO_QUARTER_TURN_STAIR="TWO_QUARTER_TURN_STAIR";IfcStairTypeEnum.THREE_QUARTER_WINDING_STAIR="THREE_QUARTER_WINDING_STAIR";IfcStairTypeEnum.THREE_QUARTER_TURN_STAIR="THREE_QUARTER_TURN_STAIR";IfcStairTypeEnum.SPIRAL_STAIR="SPIRAL_STAIR";IfcStairTypeEnum.DOUBLE_RETURN_STAIR="DOUBLE_RETURN_STAIR";IfcStairTypeEnum.CURVED_RUN_STAIR="CURVED_RUN_STAIR";IfcStairTypeEnum.TWO_CURVED_RUN_STAIR="TWO_CURVED_RUN_STAIR";IfcStairTypeEnum.USERDEFINED="USERDEFINED";IfcStairTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStateEnum=class{constructor(v){this.value=v;}};exports.IfcStateEnum=IfcStateEnum;IfcStateEnum.READWRITE="READWRITE";IfcStateEnum.READONLY="READONLY";IfcStateEnum.LOCKED="LOCKED";IfcStateEnum.READWRITELOCKED="READWRITELOCKED";IfcStateEnum.READONLYLOCKED="READONLYLOCKED";var IfcStructuralCurveActivityTypeEnum=class{constructor(v){this.value=v;}};exports.IfcStructuralCurveActivityTypeEnum=IfcStructuralCurveActivityTypeEnum;IfcStructuralCurveActivityTypeEnum.CONST="CONST";IfcStructuralCurveActivityTypeEnum.LINEAR="LINEAR";IfcStructuralCurveActivityTypeEnum.POLYGONAL="POLYGONAL";IfcStructuralCurveActivityTypeEnum.EQUIDISTANT="EQUIDISTANT";IfcStructuralCurveActivityTypeEnum.SINUS="SINUS";IfcStructuralCurveActivityTypeEnum.PARABOLA="PARABOLA";IfcStructuralCurveActivityTypeEnum.DISCRETE="DISCRETE";IfcStructuralCurveActivityTypeEnum.USERDEFINED="USERDEFINED";IfcStructuralCurveActivityTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStructuralCurveMemberTypeEnum=class{constructor(v){this.value=v;}};exports.IfcStructuralCurveMemberTypeEnum=IfcStructuralCurveMemberTypeEnum;IfcStructuralCurveMemberTypeEnum.RIGID_JOINED_MEMBER="RIGID_JOINED_MEMBER";IfcStructuralCurveMemberTypeEnum.PIN_JOINED_MEMBER="PIN_JOINED_MEMBER";IfcStructuralCurveMemberTypeEnum.CABLE="CABLE";IfcStructuralCurveMemberTypeEnum.TENSION_MEMBER="TENSION_MEMBER";IfcStructuralCurveMemberTypeEnum.COMPRESSION_MEMBER="COMPRESSION_MEMBER";IfcStructuralCurveMemberTypeEnum.USERDEFINED="USERDEFINED";IfcStructuralCurveMemberTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStructuralSurfaceActivityTypeEnum=class{constructor(v){this.value=v;}};exports.IfcStructuralSurfaceActivityTypeEnum=IfcStructuralSurfaceActivityTypeEnum;IfcStructuralSurfaceActivityTypeEnum.CONST="CONST";IfcStructuralSurfaceActivityTypeEnum.BILINEAR="BILINEAR";IfcStructuralSurfaceActivityTypeEnum.DISCRETE="DISCRETE";IfcStructuralSurfaceActivityTypeEnum.ISOCONTOUR="ISOCONTOUR";IfcStructuralSurfaceActivityTypeEnum.USERDEFINED="USERDEFINED";IfcStructuralSurfaceActivityTypeEnum.NOTDEFINED="NOTDEFINED";var IfcStructuralSurfaceMemberTypeEnum=class{constructor(v){this.value=v;}};exports.IfcStructuralSurfaceMemberTypeEnum=IfcStructuralSurfaceMemberTypeEnum;IfcStructuralSurfaceMemberTypeEnum.BENDING_ELEMENT="BENDING_ELEMENT";IfcStructuralSurfaceMemberTypeEnum.MEMBRANE_ELEMENT="MEMBRANE_ELEMENT";IfcStructuralSurfaceMemberTypeEnum.SHELL="SHELL";IfcStructuralSurfaceMemberTypeEnum.USERDEFINED="USERDEFINED";IfcStructuralSurfaceMemberTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSubContractResourceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSubContractResourceTypeEnum=IfcSubContractResourceTypeEnum;IfcSubContractResourceTypeEnum.PURCHASE="PURCHASE";IfcSubContractResourceTypeEnum.WORK="WORK";IfcSubContractResourceTypeEnum.USERDEFINED="USERDEFINED";IfcSubContractResourceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSurfaceFeatureTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSurfaceFeatureTypeEnum=IfcSurfaceFeatureTypeEnum;IfcSurfaceFeatureTypeEnum.MARK="MARK";IfcSurfaceFeatureTypeEnum.TAG="TAG";IfcSurfaceFeatureTypeEnum.TREATMENT="TREATMENT";IfcSurfaceFeatureTypeEnum.DEFECT="DEFECT";IfcSurfaceFeatureTypeEnum.USERDEFINED="USERDEFINED";IfcSurfaceFeatureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSurfaceSide=class{constructor(v){this.value=v;}};exports.IfcSurfaceSide=IfcSurfaceSide;IfcSurfaceSide.POSITIVE="POSITIVE";IfcSurfaceSide.NEGATIVE="NEGATIVE";IfcSurfaceSide.BOTH="BOTH";var IfcSwitchingDeviceTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSwitchingDeviceTypeEnum=IfcSwitchingDeviceTypeEnum;IfcSwitchingDeviceTypeEnum.CONTACTOR="CONTACTOR";IfcSwitchingDeviceTypeEnum.DIMMERSWITCH="DIMMERSWITCH";IfcSwitchingDeviceTypeEnum.EMERGENCYSTOP="EMERGENCYSTOP";IfcSwitchingDeviceTypeEnum.KEYPAD="KEYPAD";IfcSwitchingDeviceTypeEnum.MOMENTARYSWITCH="MOMENTARYSWITCH";IfcSwitchingDeviceTypeEnum.SELECTORSWITCH="SELECTORSWITCH";IfcSwitchingDeviceTypeEnum.STARTER="STARTER";IfcSwitchingDeviceTypeEnum.SWITCHDISCONNECTOR="SWITCHDISCONNECTOR";IfcSwitchingDeviceTypeEnum.TOGGLESWITCH="TOGGLESWITCH";IfcSwitchingDeviceTypeEnum.USERDEFINED="USERDEFINED";IfcSwitchingDeviceTypeEnum.NOTDEFINED="NOTDEFINED";var IfcSystemFurnitureElementTypeEnum=class{constructor(v){this.value=v;}};exports.IfcSystemFurnitureElementTypeEnum=IfcSystemFurnitureElementTypeEnum;IfcSystemFurnitureElementTypeEnum.PANEL="PANEL";IfcSystemFurnitureElementTypeEnum.WORKSURFACE="WORKSURFACE";IfcSystemFurnitureElementTypeEnum.USERDEFINED="USERDEFINED";IfcSystemFurnitureElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTankTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTankTypeEnum=IfcTankTypeEnum;IfcTankTypeEnum.BASIN="BASIN";IfcTankTypeEnum.BREAKPRESSURE="BREAKPRESSURE";IfcTankTypeEnum.EXPANSION="EXPANSION";IfcTankTypeEnum.FEEDANDEXPANSION="FEEDANDEXPANSION";IfcTankTypeEnum.PRESSUREVESSEL="PRESSUREVESSEL";IfcTankTypeEnum.STORAGE="STORAGE";IfcTankTypeEnum.VESSEL="VESSEL";IfcTankTypeEnum.USERDEFINED="USERDEFINED";IfcTankTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTaskDurationEnum=class{constructor(v){this.value=v;}};exports.IfcTaskDurationEnum=IfcTaskDurationEnum;IfcTaskDurationEnum.ELAPSEDTIME="ELAPSEDTIME";IfcTaskDurationEnum.WORKTIME="WORKTIME";IfcTaskDurationEnum.NOTDEFINED="NOTDEFINED";var IfcTaskTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTaskTypeEnum=IfcTaskTypeEnum;IfcTaskTypeEnum.ATTENDANCE="ATTENDANCE";IfcTaskTypeEnum.CONSTRUCTION="CONSTRUCTION";IfcTaskTypeEnum.DEMOLITION="DEMOLITION";IfcTaskTypeEnum.DISMANTLE="DISMANTLE";IfcTaskTypeEnum.DISPOSAL="DISPOSAL";IfcTaskTypeEnum.INSTALLATION="INSTALLATION";IfcTaskTypeEnum.LOGISTIC="LOGISTIC";IfcTaskTypeEnum.MAINTENANCE="MAINTENANCE";IfcTaskTypeEnum.MOVE="MOVE";IfcTaskTypeEnum.OPERATION="OPERATION";IfcTaskTypeEnum.REMOVAL="REMOVAL";IfcTaskTypeEnum.RENOVATION="RENOVATION";IfcTaskTypeEnum.USERDEFINED="USERDEFINED";IfcTaskTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTendonAnchorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTendonAnchorTypeEnum=IfcTendonAnchorTypeEnum;IfcTendonAnchorTypeEnum.COUPLER="COUPLER";IfcTendonAnchorTypeEnum.FIXED_END="FIXED_END";IfcTendonAnchorTypeEnum.TENSIONING_END="TENSIONING_END";IfcTendonAnchorTypeEnum.USERDEFINED="USERDEFINED";IfcTendonAnchorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTendonConduitTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTendonConduitTypeEnum=IfcTendonConduitTypeEnum;IfcTendonConduitTypeEnum.DUCT="DUCT";IfcTendonConduitTypeEnum.COUPLER="COUPLER";IfcTendonConduitTypeEnum.GROUTING_DUCT="GROUTING_DUCT";IfcTendonConduitTypeEnum.TRUMPET="TRUMPET";IfcTendonConduitTypeEnum.DIABOLO="DIABOLO";IfcTendonConduitTypeEnum.USERDEFINED="USERDEFINED";IfcTendonConduitTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTendonTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTendonTypeEnum=IfcTendonTypeEnum;IfcTendonTypeEnum.BAR="BAR";IfcTendonTypeEnum.COATED="COATED";IfcTendonTypeEnum.STRAND="STRAND";IfcTendonTypeEnum.WIRE="WIRE";IfcTendonTypeEnum.USERDEFINED="USERDEFINED";IfcTendonTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTextPath=class{constructor(v){this.value=v;}};exports.IfcTextPath=IfcTextPath;IfcTextPath.LEFT="LEFT";IfcTextPath.RIGHT="RIGHT";IfcTextPath.UP="UP";IfcTextPath.DOWN="DOWN";var IfcTimeSeriesDataTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTimeSeriesDataTypeEnum=IfcTimeSeriesDataTypeEnum;IfcTimeSeriesDataTypeEnum.CONTINUOUS="CONTINUOUS";IfcTimeSeriesDataTypeEnum.DISCRETE="DISCRETE";IfcTimeSeriesDataTypeEnum.DISCRETEBINARY="DISCRETEBINARY";IfcTimeSeriesDataTypeEnum.PIECEWISEBINARY="PIECEWISEBINARY";IfcTimeSeriesDataTypeEnum.PIECEWISECONSTANT="PIECEWISECONSTANT";IfcTimeSeriesDataTypeEnum.PIECEWISECONTINUOUS="PIECEWISECONTINUOUS";IfcTimeSeriesDataTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTransformerTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTransformerTypeEnum=IfcTransformerTypeEnum;IfcTransformerTypeEnum.CURRENT="CURRENT";IfcTransformerTypeEnum.FREQUENCY="FREQUENCY";IfcTransformerTypeEnum.INVERTER="INVERTER";IfcTransformerTypeEnum.RECTIFIER="RECTIFIER";IfcTransformerTypeEnum.VOLTAGE="VOLTAGE";IfcTransformerTypeEnum.USERDEFINED="USERDEFINED";IfcTransformerTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTransitionCode=class{constructor(v){this.value=v;}};exports.IfcTransitionCode=IfcTransitionCode;IfcTransitionCode.DISCONTINUOUS="DISCONTINUOUS";IfcTransitionCode.CONTINUOUS="CONTINUOUS";IfcTransitionCode.CONTSAMEGRADIENT="CONTSAMEGRADIENT";IfcTransitionCode.CONTSAMEGRADIENTSAMECURVATURE="CONTSAMEGRADIENTSAMECURVATURE";var IfcTransitionCurveType=class{constructor(v){this.value=v;}};exports.IfcTransitionCurveType=IfcTransitionCurveType;IfcTransitionCurveType.BIQUADRATICPARABOLA="BIQUADRATICPARABOLA";IfcTransitionCurveType.BLOSSCURVE="BLOSSCURVE";IfcTransitionCurveType.CLOTHOIDCURVE="CLOTHOIDCURVE";IfcTransitionCurveType.COSINECURVE="COSINECURVE";IfcTransitionCurveType.CUBICPARABOLA="CUBICPARABOLA";IfcTransitionCurveType.SINECURVE="SINECURVE";var IfcTransportElementTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTransportElementTypeEnum=IfcTransportElementTypeEnum;IfcTransportElementTypeEnum.ELEVATOR="ELEVATOR";IfcTransportElementTypeEnum.ESCALATOR="ESCALATOR";IfcTransportElementTypeEnum.MOVINGWALKWAY="MOVINGWALKWAY";IfcTransportElementTypeEnum.CRANEWAY="CRANEWAY";IfcTransportElementTypeEnum.LIFTINGGEAR="LIFTINGGEAR";IfcTransportElementTypeEnum.USERDEFINED="USERDEFINED";IfcTransportElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcTrimmingPreference=class{constructor(v){this.value=v;}};exports.IfcTrimmingPreference=IfcTrimmingPreference;IfcTrimmingPreference.CARTESIAN="CARTESIAN";IfcTrimmingPreference.PARAMETER="PARAMETER";IfcTrimmingPreference.UNSPECIFIED="UNSPECIFIED";var IfcTubeBundleTypeEnum=class{constructor(v){this.value=v;}};exports.IfcTubeBundleTypeEnum=IfcTubeBundleTypeEnum;IfcTubeBundleTypeEnum.FINNED="FINNED";IfcTubeBundleTypeEnum.USERDEFINED="USERDEFINED";IfcTubeBundleTypeEnum.NOTDEFINED="NOTDEFINED";var IfcUnitEnum=class{constructor(v){this.value=v;}};exports.IfcUnitEnum=IfcUnitEnum;IfcUnitEnum.ABSORBEDDOSEUNIT="ABSORBEDDOSEUNIT";IfcUnitEnum.AMOUNTOFSUBSTANCEUNIT="AMOUNTOFSUBSTANCEUNIT";IfcUnitEnum.AREAUNIT="AREAUNIT";IfcUnitEnum.DOSEEQUIVALENTUNIT="DOSEEQUIVALENTUNIT";IfcUnitEnum.ELECTRICCAPACITANCEUNIT="ELECTRICCAPACITANCEUNIT";IfcUnitEnum.ELECTRICCHARGEUNIT="ELECTRICCHARGEUNIT";IfcUnitEnum.ELECTRICCONDUCTANCEUNIT="ELECTRICCONDUCTANCEUNIT";IfcUnitEnum.ELECTRICCURRENTUNIT="ELECTRICCURRENTUNIT";IfcUnitEnum.ELECTRICRESISTANCEUNIT="ELECTRICRESISTANCEUNIT";IfcUnitEnum.ELECTRICVOLTAGEUNIT="ELECTRICVOLTAGEUNIT";IfcUnitEnum.ENERGYUNIT="ENERGYUNIT";IfcUnitEnum.FORCEUNIT="FORCEUNIT";IfcUnitEnum.FREQUENCYUNIT="FREQUENCYUNIT";IfcUnitEnum.ILLUMINANCEUNIT="ILLUMINANCEUNIT";IfcUnitEnum.INDUCTANCEUNIT="INDUCTANCEUNIT";IfcUnitEnum.LENGTHUNIT="LENGTHUNIT";IfcUnitEnum.LUMINOUSFLUXUNIT="LUMINOUSFLUXUNIT";IfcUnitEnum.LUMINOUSINTENSITYUNIT="LUMINOUSINTENSITYUNIT";IfcUnitEnum.MAGNETICFLUXDENSITYUNIT="MAGNETICFLUXDENSITYUNIT";IfcUnitEnum.MAGNETICFLUXUNIT="MAGNETICFLUXUNIT";IfcUnitEnum.MASSUNIT="MASSUNIT";IfcUnitEnum.PLANEANGLEUNIT="PLANEANGLEUNIT";IfcUnitEnum.POWERUNIT="POWERUNIT";IfcUnitEnum.PRESSUREUNIT="PRESSUREUNIT";IfcUnitEnum.RADIOACTIVITYUNIT="RADIOACTIVITYUNIT";IfcUnitEnum.SOLIDANGLEUNIT="SOLIDANGLEUNIT";IfcUnitEnum.THERMODYNAMICTEMPERATUREUNIT="THERMODYNAMICTEMPERATUREUNIT";IfcUnitEnum.TIMEUNIT="TIMEUNIT";IfcUnitEnum.VOLUMEUNIT="VOLUMEUNIT";IfcUnitEnum.USERDEFINED="USERDEFINED";var IfcUnitaryControlElementTypeEnum=class{constructor(v){this.value=v;}};exports.IfcUnitaryControlElementTypeEnum=IfcUnitaryControlElementTypeEnum;IfcUnitaryControlElementTypeEnum.ALARMPANEL="ALARMPANEL";IfcUnitaryControlElementTypeEnum.CONTROLPANEL="CONTROLPANEL";IfcUnitaryControlElementTypeEnum.GASDETECTIONPANEL="GASDETECTIONPANEL";IfcUnitaryControlElementTypeEnum.INDICATORPANEL="INDICATORPANEL";IfcUnitaryControlElementTypeEnum.MIMICPANEL="MIMICPANEL";IfcUnitaryControlElementTypeEnum.HUMIDISTAT="HUMIDISTAT";IfcUnitaryControlElementTypeEnum.THERMOSTAT="THERMOSTAT";IfcUnitaryControlElementTypeEnum.WEATHERSTATION="WEATHERSTATION";IfcUnitaryControlElementTypeEnum.USERDEFINED="USERDEFINED";IfcUnitaryControlElementTypeEnum.NOTDEFINED="NOTDEFINED";var IfcUnitaryEquipmentTypeEnum=class{constructor(v){this.value=v;}};exports.IfcUnitaryEquipmentTypeEnum=IfcUnitaryEquipmentTypeEnum;IfcUnitaryEquipmentTypeEnum.AIRHANDLER="AIRHANDLER";IfcUnitaryEquipmentTypeEnum.AIRCONDITIONINGUNIT="AIRCONDITIONINGUNIT";IfcUnitaryEquipmentTypeEnum.DEHUMIDIFIER="DEHUMIDIFIER";IfcUnitaryEquipmentTypeEnum.SPLITSYSTEM="SPLITSYSTEM";IfcUnitaryEquipmentTypeEnum.ROOFTOPUNIT="ROOFTOPUNIT";IfcUnitaryEquipmentTypeEnum.USERDEFINED="USERDEFINED";IfcUnitaryEquipmentTypeEnum.NOTDEFINED="NOTDEFINED";var IfcValveTypeEnum=class{constructor(v){this.value=v;}};exports.IfcValveTypeEnum=IfcValveTypeEnum;IfcValveTypeEnum.AIRRELEASE="AIRRELEASE";IfcValveTypeEnum.ANTIVACUUM="ANTIVACUUM";IfcValveTypeEnum.CHANGEOVER="CHANGEOVER";IfcValveTypeEnum.CHECK="CHECK";IfcValveTypeEnum.COMMISSIONING="COMMISSIONING";IfcValveTypeEnum.DIVERTING="DIVERTING";IfcValveTypeEnum.DRAWOFFCOCK="DRAWOFFCOCK";IfcValveTypeEnum.DOUBLECHECK="DOUBLECHECK";IfcValveTypeEnum.DOUBLEREGULATING="DOUBLEREGULATING";IfcValveTypeEnum.FAUCET="FAUCET";IfcValveTypeEnum.FLUSHING="FLUSHING";IfcValveTypeEnum.GASCOCK="GASCOCK";IfcValveTypeEnum.GASTAP="GASTAP";IfcValveTypeEnum.ISOLATING="ISOLATING";IfcValveTypeEnum.MIXING="MIXING";IfcValveTypeEnum.PRESSUREREDUCING="PRESSUREREDUCING";IfcValveTypeEnum.PRESSURERELIEF="PRESSURERELIEF";IfcValveTypeEnum.REGULATING="REGULATING";IfcValveTypeEnum.SAFETYCUTOFF="SAFETYCUTOFF";IfcValveTypeEnum.STEAMTRAP="STEAMTRAP";IfcValveTypeEnum.STOPCOCK="STOPCOCK";IfcValveTypeEnum.USERDEFINED="USERDEFINED";IfcValveTypeEnum.NOTDEFINED="NOTDEFINED";var IfcVibrationDamperTypeEnum=class{constructor(v){this.value=v;}};exports.IfcVibrationDamperTypeEnum=IfcVibrationDamperTypeEnum;IfcVibrationDamperTypeEnum.BENDING_YIELD="BENDING_YIELD";IfcVibrationDamperTypeEnum.SHEAR_YIELD="SHEAR_YIELD";IfcVibrationDamperTypeEnum.AXIAL_YIELD="AXIAL_YIELD";IfcVibrationDamperTypeEnum.FRICTION="FRICTION";IfcVibrationDamperTypeEnum.VISCOUS="VISCOUS";IfcVibrationDamperTypeEnum.RUBBER="RUBBER";IfcVibrationDamperTypeEnum.USERDEFINED="USERDEFINED";IfcVibrationDamperTypeEnum.NOTDEFINED="NOTDEFINED";var IfcVibrationIsolatorTypeEnum=class{constructor(v){this.value=v;}};exports.IfcVibrationIsolatorTypeEnum=IfcVibrationIsolatorTypeEnum;IfcVibrationIsolatorTypeEnum.COMPRESSION="COMPRESSION";IfcVibrationIsolatorTypeEnum.SPRING="SPRING";IfcVibrationIsolatorTypeEnum.BASE="BASE";IfcVibrationIsolatorTypeEnum.USERDEFINED="USERDEFINED";IfcVibrationIsolatorTypeEnum.NOTDEFINED="NOTDEFINED";var IfcVoidingFeatureTypeEnum=class{constructor(v){this.value=v;}};exports.IfcVoidingFeatureTypeEnum=IfcVoidingFeatureTypeEnum;IfcVoidingFeatureTypeEnum.CUTOUT="CUTOUT";IfcVoidingFeatureTypeEnum.NOTCH="NOTCH";IfcVoidingFeatureTypeEnum.HOLE="HOLE";IfcVoidingFeatureTypeEnum.MITER="MITER";IfcVoidingFeatureTypeEnum.CHAMFER="CHAMFER";IfcVoidingFeatureTypeEnum.EDGE="EDGE";IfcVoidingFeatureTypeEnum.USERDEFINED="USERDEFINED";IfcVoidingFeatureTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWallTypeEnum=class{constructor(v){this.value=v;}};exports.IfcWallTypeEnum=IfcWallTypeEnum;IfcWallTypeEnum.MOVABLE="MOVABLE";IfcWallTypeEnum.PARAPET="PARAPET";IfcWallTypeEnum.PARTITIONING="PARTITIONING";IfcWallTypeEnum.PLUMBINGWALL="PLUMBINGWALL";IfcWallTypeEnum.SHEAR="SHEAR";IfcWallTypeEnum.SOLIDWALL="SOLIDWALL";IfcWallTypeEnum.STANDARD="STANDARD";IfcWallTypeEnum.POLYGONAL="POLYGONAL";IfcWallTypeEnum.ELEMENTEDWALL="ELEMENTEDWALL";IfcWallTypeEnum.RETAININGWALL="RETAININGWALL";IfcWallTypeEnum.USERDEFINED="USERDEFINED";IfcWallTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWasteTerminalTypeEnum=class{constructor(v){this.value=v;}};exports.IfcWasteTerminalTypeEnum=IfcWasteTerminalTypeEnum;IfcWasteTerminalTypeEnum.FLOORTRAP="FLOORTRAP";IfcWasteTerminalTypeEnum.FLOORWASTE="FLOORWASTE";IfcWasteTerminalTypeEnum.GULLYSUMP="GULLYSUMP";IfcWasteTerminalTypeEnum.GULLYTRAP="GULLYTRAP";IfcWasteTerminalTypeEnum.ROOFDRAIN="ROOFDRAIN";IfcWasteTerminalTypeEnum.WASTEDISPOSALUNIT="WASTEDISPOSALUNIT";IfcWasteTerminalTypeEnum.WASTETRAP="WASTETRAP";IfcWasteTerminalTypeEnum.USERDEFINED="USERDEFINED";IfcWasteTerminalTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWindowPanelOperationEnum=class{constructor(v){this.value=v;}};exports.IfcWindowPanelOperationEnum=IfcWindowPanelOperationEnum;IfcWindowPanelOperationEnum.SIDEHUNGRIGHTHAND="SIDEHUNGRIGHTHAND";IfcWindowPanelOperationEnum.SIDEHUNGLEFTHAND="SIDEHUNGLEFTHAND";IfcWindowPanelOperationEnum.TILTANDTURNRIGHTHAND="TILTANDTURNRIGHTHAND";IfcWindowPanelOperationEnum.TILTANDTURNLEFTHAND="TILTANDTURNLEFTHAND";IfcWindowPanelOperationEnum.TOPHUNG="TOPHUNG";IfcWindowPanelOperationEnum.BOTTOMHUNG="BOTTOMHUNG";IfcWindowPanelOperationEnum.PIVOTHORIZONTAL="PIVOTHORIZONTAL";IfcWindowPanelOperationEnum.PIVOTVERTICAL="PIVOTVERTICAL";IfcWindowPanelOperationEnum.SLIDINGHORIZONTAL="SLIDINGHORIZONTAL";IfcWindowPanelOperationEnum.SLIDINGVERTICAL="SLIDINGVERTICAL";IfcWindowPanelOperationEnum.REMOVABLECASEMENT="REMOVABLECASEMENT";IfcWindowPanelOperationEnum.FIXEDCASEMENT="FIXEDCASEMENT";IfcWindowPanelOperationEnum.OTHEROPERATION="OTHEROPERATION";IfcWindowPanelOperationEnum.NOTDEFINED="NOTDEFINED";var IfcWindowPanelPositionEnum=class{constructor(v){this.value=v;}};exports.IfcWindowPanelPositionEnum=IfcWindowPanelPositionEnum;IfcWindowPanelPositionEnum.LEFT="LEFT";IfcWindowPanelPositionEnum.MIDDLE="MIDDLE";IfcWindowPanelPositionEnum.RIGHT="RIGHT";IfcWindowPanelPositionEnum.BOTTOM="BOTTOM";IfcWindowPanelPositionEnum.TOP="TOP";IfcWindowPanelPositionEnum.NOTDEFINED="NOTDEFINED";var IfcWindowStyleConstructionEnum=class{constructor(v){this.value=v;}};exports.IfcWindowStyleConstructionEnum=IfcWindowStyleConstructionEnum;IfcWindowStyleConstructionEnum.ALUMINIUM="ALUMINIUM";IfcWindowStyleConstructionEnum.HIGH_GRADE_STEEL="HIGH_GRADE_STEEL";IfcWindowStyleConstructionEnum.STEEL="STEEL";IfcWindowStyleConstructionEnum.WOOD="WOOD";IfcWindowStyleConstructionEnum.ALUMINIUM_WOOD="ALUMINIUM_WOOD";IfcWindowStyleConstructionEnum.PLASTIC="PLASTIC";IfcWindowStyleConstructionEnum.OTHER_CONSTRUCTION="OTHER_CONSTRUCTION";IfcWindowStyleConstructionEnum.NOTDEFINED="NOTDEFINED";var IfcWindowStyleOperationEnum=class{constructor(v){this.value=v;}};exports.IfcWindowStyleOperationEnum=IfcWindowStyleOperationEnum;IfcWindowStyleOperationEnum.SINGLE_PANEL="SINGLE_PANEL";IfcWindowStyleOperationEnum.DOUBLE_PANEL_VERTICAL="DOUBLE_PANEL_VERTICAL";IfcWindowStyleOperationEnum.DOUBLE_PANEL_HORIZONTAL="DOUBLE_PANEL_HORIZONTAL";IfcWindowStyleOperationEnum.TRIPLE_PANEL_VERTICAL="TRIPLE_PANEL_VERTICAL";IfcWindowStyleOperationEnum.TRIPLE_PANEL_BOTTOM="TRIPLE_PANEL_BOTTOM";IfcWindowStyleOperationEnum.TRIPLE_PANEL_TOP="TRIPLE_PANEL_TOP";IfcWindowStyleOperationEnum.TRIPLE_PANEL_LEFT="TRIPLE_PANEL_LEFT";IfcWindowStyleOperationEnum.TRIPLE_PANEL_RIGHT="TRIPLE_PANEL_RIGHT";IfcWindowStyleOperationEnum.TRIPLE_PANEL_HORIZONTAL="TRIPLE_PANEL_HORIZONTAL";IfcWindowStyleOperationEnum.USERDEFINED="USERDEFINED";IfcWindowStyleOperationEnum.NOTDEFINED="NOTDEFINED";var IfcWindowTypeEnum=class{constructor(v){this.value=v;}};exports.IfcWindowTypeEnum=IfcWindowTypeEnum;IfcWindowTypeEnum.WINDOW="WINDOW";IfcWindowTypeEnum.SKYLIGHT="SKYLIGHT";IfcWindowTypeEnum.LIGHTDOME="LIGHTDOME";IfcWindowTypeEnum.USERDEFINED="USERDEFINED";IfcWindowTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWindowTypePartitioningEnum=class{constructor(v){this.value=v;}};exports.IfcWindowTypePartitioningEnum=IfcWindowTypePartitioningEnum;IfcWindowTypePartitioningEnum.SINGLE_PANEL="SINGLE_PANEL";IfcWindowTypePartitioningEnum.DOUBLE_PANEL_VERTICAL="DOUBLE_PANEL_VERTICAL";IfcWindowTypePartitioningEnum.DOUBLE_PANEL_HORIZONTAL="DOUBLE_PANEL_HORIZONTAL";IfcWindowTypePartitioningEnum.TRIPLE_PANEL_VERTICAL="TRIPLE_PANEL_VERTICAL";IfcWindowTypePartitioningEnum.TRIPLE_PANEL_BOTTOM="TRIPLE_PANEL_BOTTOM";IfcWindowTypePartitioningEnum.TRIPLE_PANEL_TOP="TRIPLE_PANEL_TOP";IfcWindowTypePartitioningEnum.TRIPLE_PANEL_LEFT="TRIPLE_PANEL_LEFT";IfcWindowTypePartitioningEnum.TRIPLE_PANEL_RIGHT="TRIPLE_PANEL_RIGHT";IfcWindowTypePartitioningEnum.TRIPLE_PANEL_HORIZONTAL="TRIPLE_PANEL_HORIZONTAL";IfcWindowTypePartitioningEnum.USERDEFINED="USERDEFINED";IfcWindowTypePartitioningEnum.NOTDEFINED="NOTDEFINED";var IfcWorkCalendarTypeEnum=class{constructor(v){this.value=v;}};exports.IfcWorkCalendarTypeEnum=IfcWorkCalendarTypeEnum;IfcWorkCalendarTypeEnum.FIRSTSHIFT="FIRSTSHIFT";IfcWorkCalendarTypeEnum.SECONDSHIFT="SECONDSHIFT";IfcWorkCalendarTypeEnum.THIRDSHIFT="THIRDSHIFT";IfcWorkCalendarTypeEnum.USERDEFINED="USERDEFINED";IfcWorkCalendarTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWorkPlanTypeEnum=class{constructor(v){this.value=v;}};exports.IfcWorkPlanTypeEnum=IfcWorkPlanTypeEnum;IfcWorkPlanTypeEnum.ACTUAL="ACTUAL";IfcWorkPlanTypeEnum.BASELINE="BASELINE";IfcWorkPlanTypeEnum.PLANNED="PLANNED";IfcWorkPlanTypeEnum.USERDEFINED="USERDEFINED";IfcWorkPlanTypeEnum.NOTDEFINED="NOTDEFINED";var IfcWorkScheduleTypeEnum=class{constructor(v){this.value=v;}};exports.IfcWorkScheduleTypeEnum=IfcWorkScheduleTypeEnum;IfcWorkScheduleTypeEnum.ACTUAL="ACTUAL";IfcWorkScheduleTypeEnum.BASELINE="BASELINE";IfcWorkScheduleTypeEnum.PLANNED="PLANNED";IfcWorkScheduleTypeEnum.USERDEFINED="USERDEFINED";IfcWorkScheduleTypeEnum.NOTDEFINED="NOTDEFINED";var IfcActionRequest=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.PredefinedType=PredefinedType;this.Status=Status;this.LongDescription=LongDescription;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let PredefinedType=tape[ptr++];let Status=tape[ptr++];let LongDescription=tape[ptr++];return new IfcActionRequest(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.PredefinedType);;args.push(this.Status);;args.push(this.LongDescription);;return args;}};exports.IfcActionRequest=IfcActionRequest;var IfcActor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheActor){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.TheActor=TheActor;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let TheActor=tape[ptr++];return new IfcActor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheActor);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.TheActor);;return args;}};exports.IfcActor=IfcActor;var IfcActorRole=class{constructor(expressID,type,Role,UserDefinedRole,Description){this.expressID=expressID;this.type=type;this.Role=Role;this.UserDefinedRole=UserDefinedRole;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let Role=tape[ptr++];let UserDefinedRole=tape[ptr++];let Description=tape[ptr++];return new IfcActorRole(expressID,type,Role,UserDefinedRole,Description);}ToTape(){let args=[];args.push(this.Role);;args.push(this.UserDefinedRole);;args.push(this.Description);;return args;}};exports.IfcActorRole=IfcActorRole;var IfcActuator=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcActuator(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcActuator=IfcActuator;var IfcActuatorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcActuatorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcActuatorType=IfcActuatorType;var IfcAddress=class{constructor(expressID,type,Purpose,Description,UserDefinedPurpose){this.expressID=expressID;this.type=type;this.Purpose=Purpose;this.Description=Description;this.UserDefinedPurpose=UserDefinedPurpose;}static FromTape(expressID,type,tape){let ptr=0;let Purpose=tape[ptr++];let Description=tape[ptr++];let UserDefinedPurpose=tape[ptr++];return new IfcAddress(expressID,type,Purpose,Description,UserDefinedPurpose);}ToTape(){let args=[];args.push(this.Purpose);;args.push(this.Description);;args.push(this.UserDefinedPurpose);;return args;}};exports.IfcAddress=IfcAddress;var IfcAdvancedBrep=class{constructor(expressID,type,Outer){this.expressID=expressID;this.type=type;this.Outer=Outer;}static FromTape(expressID,type,tape){let ptr=0;let Outer=tape[ptr++];return new IfcAdvancedBrep(expressID,type,Outer);}ToTape(){let args=[];args.push(this.Outer);;return args;}};exports.IfcAdvancedBrep=IfcAdvancedBrep;var IfcAdvancedBrepWithVoids=class{constructor(expressID,type,Outer,Voids){this.expressID=expressID;this.type=type;this.Outer=Outer;this.Voids=Voids;}static FromTape(expressID,type,tape){let ptr=0;let Outer=tape[ptr++];let Voids=tape[ptr++];return new IfcAdvancedBrepWithVoids(expressID,type,Outer,Voids);}ToTape(){let args=[];args.push(this.Outer);;args.push(this.Voids);;return args;}};exports.IfcAdvancedBrepWithVoids=IfcAdvancedBrepWithVoids;var IfcAdvancedFace=class{constructor(expressID,type,Bounds,FaceSurface,SameSense){this.expressID=expressID;this.type=type;this.Bounds=Bounds;this.FaceSurface=FaceSurface;this.SameSense=SameSense;}static FromTape(expressID,type,tape){let ptr=0;let Bounds=tape[ptr++];let FaceSurface=tape[ptr++];let SameSense=tape[ptr++];return new IfcAdvancedFace(expressID,type,Bounds,FaceSurface,SameSense);}ToTape(){let args=[];args.push(this.Bounds);;args.push(this.FaceSurface);;args.push(this.SameSense);;return args;}};exports.IfcAdvancedFace=IfcAdvancedFace;var IfcAirTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAirTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcAirTerminal=IfcAirTerminal;var IfcAirTerminalBox=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAirTerminalBox(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcAirTerminalBox=IfcAirTerminalBox;var IfcAirTerminalBoxType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAirTerminalBoxType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcAirTerminalBoxType=IfcAirTerminalBoxType;var IfcAirTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAirTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcAirTerminalType=IfcAirTerminalType;var IfcAirToAirHeatRecovery=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAirToAirHeatRecovery(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcAirToAirHeatRecovery=IfcAirToAirHeatRecovery;var IfcAirToAirHeatRecoveryType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAirToAirHeatRecoveryType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcAirToAirHeatRecoveryType=IfcAirToAirHeatRecoveryType;var IfcAlarm=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAlarm(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcAlarm=IfcAlarm;var IfcAlarmType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAlarmType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcAlarmType=IfcAlarmType;var IfcAlignment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Axis,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Axis=Axis;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Axis=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAlignment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Axis,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Axis);;args.push(this.PredefinedType);;return args;}};exports.IfcAlignment=IfcAlignment;var IfcAlignment2DHorizontal=class{constructor(expressID,type,StartDistAlong,Segments){this.expressID=expressID;this.type=type;this.StartDistAlong=StartDistAlong;this.Segments=Segments;}static FromTape(expressID,type,tape){let ptr=0;let StartDistAlong=tape[ptr++];let Segments=tape[ptr++];return new IfcAlignment2DHorizontal(expressID,type,StartDistAlong,Segments);}ToTape(){let args=[];args.push(this.StartDistAlong);;args.push(this.Segments);;return args;}};exports.IfcAlignment2DHorizontal=IfcAlignment2DHorizontal;var IfcAlignment2DHorizontalSegment=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,CurveGeometry){this.expressID=expressID;this.type=type;this.TangentialContinuity=TangentialContinuity;this.StartTag=StartTag;this.EndTag=EndTag;this.CurveGeometry=CurveGeometry;}static FromTape(expressID,type,tape){let ptr=0;let TangentialContinuity=tape[ptr++];let StartTag=tape[ptr++];let EndTag=tape[ptr++];let CurveGeometry=tape[ptr++];return new IfcAlignment2DHorizontalSegment(expressID,type,TangentialContinuity,StartTag,EndTag,CurveGeometry);}ToTape(){let args=[];args.push(this.TangentialContinuity);;args.push(this.StartTag);;args.push(this.EndTag);;args.push(this.CurveGeometry);;return args;}};exports.IfcAlignment2DHorizontalSegment=IfcAlignment2DHorizontalSegment;var IfcAlignment2DSegment=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag){this.expressID=expressID;this.type=type;this.TangentialContinuity=TangentialContinuity;this.StartTag=StartTag;this.EndTag=EndTag;}static FromTape(expressID,type,tape){let ptr=0;let TangentialContinuity=tape[ptr++];let StartTag=tape[ptr++];let EndTag=tape[ptr++];return new IfcAlignment2DSegment(expressID,type,TangentialContinuity,StartTag,EndTag);}ToTape(){let args=[];args.push(this.TangentialContinuity);;args.push(this.StartTag);;args.push(this.EndTag);;return args;}};exports.IfcAlignment2DSegment=IfcAlignment2DSegment;var IfcAlignment2DVerSegCircularArc=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient,Radius,IsConvex){this.expressID=expressID;this.type=type;this.TangentialContinuity=TangentialContinuity;this.StartTag=StartTag;this.EndTag=EndTag;this.StartDistAlong=StartDistAlong;this.HorizontalLength=HorizontalLength;this.StartHeight=StartHeight;this.StartGradient=StartGradient;this.Radius=Radius;this.IsConvex=IsConvex;}static FromTape(expressID,type,tape){let ptr=0;let TangentialContinuity=tape[ptr++];let StartTag=tape[ptr++];let EndTag=tape[ptr++];let StartDistAlong=tape[ptr++];let HorizontalLength=tape[ptr++];let StartHeight=tape[ptr++];let StartGradient=tape[ptr++];let Radius=tape[ptr++];let IsConvex=tape[ptr++];return new IfcAlignment2DVerSegCircularArc(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient,Radius,IsConvex);}ToTape(){let args=[];args.push(this.TangentialContinuity);;args.push(this.StartTag);;args.push(this.EndTag);;args.push(this.StartDistAlong);;args.push(this.HorizontalLength);;args.push(this.StartHeight);;args.push(this.StartGradient);;args.push(this.Radius);;args.push(this.IsConvex);;return args;}};exports.IfcAlignment2DVerSegCircularArc=IfcAlignment2DVerSegCircularArc;var IfcAlignment2DVerSegLine=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient){this.expressID=expressID;this.type=type;this.TangentialContinuity=TangentialContinuity;this.StartTag=StartTag;this.EndTag=EndTag;this.StartDistAlong=StartDistAlong;this.HorizontalLength=HorizontalLength;this.StartHeight=StartHeight;this.StartGradient=StartGradient;}static FromTape(expressID,type,tape){let ptr=0;let TangentialContinuity=tape[ptr++];let StartTag=tape[ptr++];let EndTag=tape[ptr++];let StartDistAlong=tape[ptr++];let HorizontalLength=tape[ptr++];let StartHeight=tape[ptr++];let StartGradient=tape[ptr++];return new IfcAlignment2DVerSegLine(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient);}ToTape(){let args=[];args.push(this.TangentialContinuity);;args.push(this.StartTag);;args.push(this.EndTag);;args.push(this.StartDistAlong);;args.push(this.HorizontalLength);;args.push(this.StartHeight);;args.push(this.StartGradient);;return args;}};exports.IfcAlignment2DVerSegLine=IfcAlignment2DVerSegLine;var IfcAlignment2DVerSegParabolicArc=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient,ParabolaConstant,IsConvex){this.expressID=expressID;this.type=type;this.TangentialContinuity=TangentialContinuity;this.StartTag=StartTag;this.EndTag=EndTag;this.StartDistAlong=StartDistAlong;this.HorizontalLength=HorizontalLength;this.StartHeight=StartHeight;this.StartGradient=StartGradient;this.ParabolaConstant=ParabolaConstant;this.IsConvex=IsConvex;}static FromTape(expressID,type,tape){let ptr=0;let TangentialContinuity=tape[ptr++];let StartTag=tape[ptr++];let EndTag=tape[ptr++];let StartDistAlong=tape[ptr++];let HorizontalLength=tape[ptr++];let StartHeight=tape[ptr++];let StartGradient=tape[ptr++];let ParabolaConstant=tape[ptr++];let IsConvex=tape[ptr++];return new IfcAlignment2DVerSegParabolicArc(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient,ParabolaConstant,IsConvex);}ToTape(){let args=[];args.push(this.TangentialContinuity);;args.push(this.StartTag);;args.push(this.EndTag);;args.push(this.StartDistAlong);;args.push(this.HorizontalLength);;args.push(this.StartHeight);;args.push(this.StartGradient);;args.push(this.ParabolaConstant);;args.push(this.IsConvex);;return args;}};exports.IfcAlignment2DVerSegParabolicArc=IfcAlignment2DVerSegParabolicArc;var IfcAlignment2DVertical=class{constructor(expressID,type,Segments){this.expressID=expressID;this.type=type;this.Segments=Segments;}static FromTape(expressID,type,tape){let ptr=0;let Segments=tape[ptr++];return new IfcAlignment2DVertical(expressID,type,Segments);}ToTape(){let args=[];args.push(this.Segments);;return args;}};exports.IfcAlignment2DVertical=IfcAlignment2DVertical;var IfcAlignment2DVerticalSegment=class{constructor(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient){this.expressID=expressID;this.type=type;this.TangentialContinuity=TangentialContinuity;this.StartTag=StartTag;this.EndTag=EndTag;this.StartDistAlong=StartDistAlong;this.HorizontalLength=HorizontalLength;this.StartHeight=StartHeight;this.StartGradient=StartGradient;}static FromTape(expressID,type,tape){let ptr=0;let TangentialContinuity=tape[ptr++];let StartTag=tape[ptr++];let EndTag=tape[ptr++];let StartDistAlong=tape[ptr++];let HorizontalLength=tape[ptr++];let StartHeight=tape[ptr++];let StartGradient=tape[ptr++];return new IfcAlignment2DVerticalSegment(expressID,type,TangentialContinuity,StartTag,EndTag,StartDistAlong,HorizontalLength,StartHeight,StartGradient);}ToTape(){let args=[];args.push(this.TangentialContinuity);;args.push(this.StartTag);;args.push(this.EndTag);;args.push(this.StartDistAlong);;args.push(this.HorizontalLength);;args.push(this.StartHeight);;args.push(this.StartGradient);;return args;}};exports.IfcAlignment2DVerticalSegment=IfcAlignment2DVerticalSegment;var IfcAlignmentCurve=class{constructor(expressID,type,Horizontal,Vertical,Tag){this.expressID=expressID;this.type=type;this.Horizontal=Horizontal;this.Vertical=Vertical;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let Horizontal=tape[ptr++];let Vertical=tape[ptr++];let Tag=tape[ptr++];return new IfcAlignmentCurve(expressID,type,Horizontal,Vertical,Tag);}ToTape(){let args=[];args.push(this.Horizontal);;args.push(this.Vertical);;args.push(this.Tag);;return args;}};exports.IfcAlignmentCurve=IfcAlignmentCurve;var IfcAnnotation=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];return new IfcAnnotation(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;return args;}};exports.IfcAnnotation=IfcAnnotation;var IfcAnnotationFillArea=class{constructor(expressID,type,OuterBoundary,InnerBoundaries){this.expressID=expressID;this.type=type;this.OuterBoundary=OuterBoundary;this.InnerBoundaries=InnerBoundaries;}static FromTape(expressID,type,tape){let ptr=0;let OuterBoundary=tape[ptr++];let InnerBoundaries=tape[ptr++];return new IfcAnnotationFillArea(expressID,type,OuterBoundary,InnerBoundaries);}ToTape(){let args=[];args.push(this.OuterBoundary);;args.push(this.InnerBoundaries);;return args;}};exports.IfcAnnotationFillArea=IfcAnnotationFillArea;var IfcApplication=class{constructor(expressID,type,ApplicationDeveloper,Version,ApplicationFullName,ApplicationIdentifier){this.expressID=expressID;this.type=type;this.ApplicationDeveloper=ApplicationDeveloper;this.Version=Version;this.ApplicationFullName=ApplicationFullName;this.ApplicationIdentifier=ApplicationIdentifier;}static FromTape(expressID,type,tape){let ptr=0;let ApplicationDeveloper=tape[ptr++];let Version=tape[ptr++];let ApplicationFullName=tape[ptr++];let ApplicationIdentifier=tape[ptr++];return new IfcApplication(expressID,type,ApplicationDeveloper,Version,ApplicationFullName,ApplicationIdentifier);}ToTape(){let args=[];args.push(this.ApplicationDeveloper);;args.push(this.Version);;args.push(this.ApplicationFullName);;args.push(this.ApplicationIdentifier);;return args;}};exports.IfcApplication=IfcApplication;var IfcAppliedValue=class{constructor(expressID,type,Name,Description,AppliedValue,UnitBasis,ApplicableDate,FixedUntilDate,Category,Condition,ArithmeticOperator,Components){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.AppliedValue=AppliedValue;this.UnitBasis=UnitBasis;this.ApplicableDate=ApplicableDate;this.FixedUntilDate=FixedUntilDate;this.Category=Category;this.Condition=Condition;this.ArithmeticOperator=ArithmeticOperator;this.Components=Components;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let AppliedValue=tape[ptr++];let UnitBasis=tape[ptr++];let ApplicableDate=tape[ptr++];let FixedUntilDate=tape[ptr++];let Category=tape[ptr++];let Condition=tape[ptr++];let ArithmeticOperator=tape[ptr++];let Components=tape[ptr++];return new IfcAppliedValue(expressID,type,Name,Description,AppliedValue,UnitBasis,ApplicableDate,FixedUntilDate,Category,Condition,ArithmeticOperator,Components);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.AppliedValue);;args.push(this.UnitBasis);;args.push(this.ApplicableDate);;args.push(this.FixedUntilDate);;args.push(this.Category);;args.push(this.Condition);;args.push(this.ArithmeticOperator);;args.push(this.Components);;return args;}};exports.IfcAppliedValue=IfcAppliedValue;var IfcApproval=class{constructor(expressID,type,Identifier,Name,Description,TimeOfApproval,Status,Level,Qualifier,RequestingApproval,GivingApproval){this.expressID=expressID;this.type=type;this.Identifier=Identifier;this.Name=Name;this.Description=Description;this.TimeOfApproval=TimeOfApproval;this.Status=Status;this.Level=Level;this.Qualifier=Qualifier;this.RequestingApproval=RequestingApproval;this.GivingApproval=GivingApproval;}static FromTape(expressID,type,tape){let ptr=0;let Identifier=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let TimeOfApproval=tape[ptr++];let Status=tape[ptr++];let Level=tape[ptr++];let Qualifier=tape[ptr++];let RequestingApproval=tape[ptr++];let GivingApproval=tape[ptr++];return new IfcApproval(expressID,type,Identifier,Name,Description,TimeOfApproval,Status,Level,Qualifier,RequestingApproval,GivingApproval);}ToTape(){let args=[];args.push(this.Identifier);;args.push(this.Name);;args.push(this.Description);;args.push(this.TimeOfApproval);;args.push(this.Status);;args.push(this.Level);;args.push(this.Qualifier);;args.push(this.RequestingApproval);;args.push(this.GivingApproval);;return args;}};exports.IfcApproval=IfcApproval;var IfcApprovalRelationship=class{constructor(expressID,type,Name,Description,RelatingApproval,RelatedApprovals){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.RelatingApproval=RelatingApproval;this.RelatedApprovals=RelatedApprovals;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let RelatingApproval=tape[ptr++];let RelatedApprovals=tape[ptr++];return new IfcApprovalRelationship(expressID,type,Name,Description,RelatingApproval,RelatedApprovals);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingApproval);;args.push(this.RelatedApprovals);;return args;}};exports.IfcApprovalRelationship=IfcApprovalRelationship;var IfcArbitraryClosedProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,OuterCurve){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.OuterCurve=OuterCurve;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let OuterCurve=tape[ptr++];return new IfcArbitraryClosedProfileDef(expressID,type,ProfileType,ProfileName,OuterCurve);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.OuterCurve);;return args;}};exports.IfcArbitraryClosedProfileDef=IfcArbitraryClosedProfileDef;var IfcArbitraryOpenProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Curve){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Curve=Curve;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Curve=tape[ptr++];return new IfcArbitraryOpenProfileDef(expressID,type,ProfileType,ProfileName,Curve);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Curve);;return args;}};exports.IfcArbitraryOpenProfileDef=IfcArbitraryOpenProfileDef;var IfcArbitraryProfileDefWithVoids=class{constructor(expressID,type,ProfileType,ProfileName,OuterCurve,InnerCurves){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.OuterCurve=OuterCurve;this.InnerCurves=InnerCurves;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let OuterCurve=tape[ptr++];let InnerCurves=tape[ptr++];return new IfcArbitraryProfileDefWithVoids(expressID,type,ProfileType,ProfileName,OuterCurve,InnerCurves);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.OuterCurve);;args.push(this.InnerCurves);;return args;}};exports.IfcArbitraryProfileDefWithVoids=IfcArbitraryProfileDefWithVoids;var IfcAsset=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,OriginalValue,CurrentValue,TotalReplacementCost,Owner,User,ResponsiblePerson,IncorporationDate,DepreciatedValue){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.OriginalValue=OriginalValue;this.CurrentValue=CurrentValue;this.TotalReplacementCost=TotalReplacementCost;this.Owner=Owner;this.User=User;this.ResponsiblePerson=ResponsiblePerson;this.IncorporationDate=IncorporationDate;this.DepreciatedValue=DepreciatedValue;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let OriginalValue=tape[ptr++];let CurrentValue=tape[ptr++];let TotalReplacementCost=tape[ptr++];let Owner=tape[ptr++];let User=tape[ptr++];let ResponsiblePerson=tape[ptr++];let IncorporationDate=tape[ptr++];let DepreciatedValue=tape[ptr++];return new IfcAsset(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,OriginalValue,CurrentValue,TotalReplacementCost,Owner,User,ResponsiblePerson,IncorporationDate,DepreciatedValue);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.OriginalValue);;args.push(this.CurrentValue);;args.push(this.TotalReplacementCost);;args.push(this.Owner);;args.push(this.User);;args.push(this.ResponsiblePerson);;args.push(this.IncorporationDate);;args.push(this.DepreciatedValue);;return args;}};exports.IfcAsset=IfcAsset;var IfcAsymmetricIShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,BottomFlangeWidth,OverallDepth,WebThickness,BottomFlangeThickness,BottomFlangeFilletRadius,TopFlangeWidth,TopFlangeThickness,TopFlangeFilletRadius,BottomFlangeEdgeRadius,BottomFlangeSlope,TopFlangeEdgeRadius,TopFlangeSlope){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.BottomFlangeWidth=BottomFlangeWidth;this.OverallDepth=OverallDepth;this.WebThickness=WebThickness;this.BottomFlangeThickness=BottomFlangeThickness;this.BottomFlangeFilletRadius=BottomFlangeFilletRadius;this.TopFlangeWidth=TopFlangeWidth;this.TopFlangeThickness=TopFlangeThickness;this.TopFlangeFilletRadius=TopFlangeFilletRadius;this.BottomFlangeEdgeRadius=BottomFlangeEdgeRadius;this.BottomFlangeSlope=BottomFlangeSlope;this.TopFlangeEdgeRadius=TopFlangeEdgeRadius;this.TopFlangeSlope=TopFlangeSlope;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let BottomFlangeWidth=tape[ptr++];let OverallDepth=tape[ptr++];let WebThickness=tape[ptr++];let BottomFlangeThickness=tape[ptr++];let BottomFlangeFilletRadius=tape[ptr++];let TopFlangeWidth=tape[ptr++];let TopFlangeThickness=tape[ptr++];let TopFlangeFilletRadius=tape[ptr++];let BottomFlangeEdgeRadius=tape[ptr++];let BottomFlangeSlope=tape[ptr++];let TopFlangeEdgeRadius=tape[ptr++];let TopFlangeSlope=tape[ptr++];return new IfcAsymmetricIShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,BottomFlangeWidth,OverallDepth,WebThickness,BottomFlangeThickness,BottomFlangeFilletRadius,TopFlangeWidth,TopFlangeThickness,TopFlangeFilletRadius,BottomFlangeEdgeRadius,BottomFlangeSlope,TopFlangeEdgeRadius,TopFlangeSlope);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.BottomFlangeWidth);;args.push(this.OverallDepth);;args.push(this.WebThickness);;args.push(this.BottomFlangeThickness);;args.push(this.BottomFlangeFilletRadius);;args.push(this.TopFlangeWidth);;args.push(this.TopFlangeThickness);;args.push(this.TopFlangeFilletRadius);;args.push(this.BottomFlangeEdgeRadius);;args.push(this.BottomFlangeSlope);;args.push(this.TopFlangeEdgeRadius);;args.push(this.TopFlangeSlope);;return args;}};exports.IfcAsymmetricIShapeProfileDef=IfcAsymmetricIShapeProfileDef;var IfcAudioVisualAppliance=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAudioVisualAppliance(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcAudioVisualAppliance=IfcAudioVisualAppliance;var IfcAudioVisualApplianceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcAudioVisualApplianceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcAudioVisualApplianceType=IfcAudioVisualApplianceType;var IfcAxis1Placement=class{constructor(expressID,type,Location,Axis){this.expressID=expressID;this.type=type;this.Location=Location;this.Axis=Axis;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Axis=tape[ptr++];return new IfcAxis1Placement(expressID,type,Location,Axis);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Axis);;return args;}};exports.IfcAxis1Placement=IfcAxis1Placement;var IfcAxis2Placement2D=class{constructor(expressID,type,Location,RefDirection){this.expressID=expressID;this.type=type;this.Location=Location;this.RefDirection=RefDirection;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let RefDirection=tape[ptr++];return new IfcAxis2Placement2D(expressID,type,Location,RefDirection);}ToTape(){let args=[];args.push(this.Location);;args.push(this.RefDirection);;return args;}};exports.IfcAxis2Placement2D=IfcAxis2Placement2D;var IfcAxis2Placement3D=class{constructor(expressID,type,Location,Axis,RefDirection){this.expressID=expressID;this.type=type;this.Location=Location;this.Axis=Axis;this.RefDirection=RefDirection;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Axis=tape[ptr++];let RefDirection=tape[ptr++];return new IfcAxis2Placement3D(expressID,type,Location,Axis,RefDirection);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Axis);;args.push(this.RefDirection);;return args;}};exports.IfcAxis2Placement3D=IfcAxis2Placement3D;var IfcBSplineCurve=class{constructor(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect){this.expressID=expressID;this.type=type;this.Degree=Degree;this.ControlPointsList=ControlPointsList;this.CurveForm=CurveForm;this.ClosedCurve=ClosedCurve;this.SelfIntersect=SelfIntersect;}static FromTape(expressID,type,tape){let ptr=0;let Degree=tape[ptr++];let ControlPointsList=tape[ptr++];let CurveForm=tape[ptr++];let ClosedCurve=tape[ptr++];let SelfIntersect=tape[ptr++];return new IfcBSplineCurve(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect);}ToTape(){let args=[];args.push(this.Degree);;args.push(this.ControlPointsList);;args.push(this.CurveForm);;args.push(this.ClosedCurve);;args.push(this.SelfIntersect);;return args;}};exports.IfcBSplineCurve=IfcBSplineCurve;var IfcBSplineCurveWithKnots=class{constructor(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect,KnotMultiplicities,Knots,KnotSpec){this.expressID=expressID;this.type=type;this.Degree=Degree;this.ControlPointsList=ControlPointsList;this.CurveForm=CurveForm;this.ClosedCurve=ClosedCurve;this.SelfIntersect=SelfIntersect;this.KnotMultiplicities=KnotMultiplicities;this.Knots=Knots;this.KnotSpec=KnotSpec;}static FromTape(expressID,type,tape){let ptr=0;let Degree=tape[ptr++];let ControlPointsList=tape[ptr++];let CurveForm=tape[ptr++];let ClosedCurve=tape[ptr++];let SelfIntersect=tape[ptr++];let KnotMultiplicities=tape[ptr++];let Knots=tape[ptr++];let KnotSpec=tape[ptr++];return new IfcBSplineCurveWithKnots(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect,KnotMultiplicities,Knots,KnotSpec);}ToTape(){let args=[];args.push(this.Degree);;args.push(this.ControlPointsList);;args.push(this.CurveForm);;args.push(this.ClosedCurve);;args.push(this.SelfIntersect);;args.push(this.KnotMultiplicities);;args.push(this.Knots);;args.push(this.KnotSpec);;return args;}};exports.IfcBSplineCurveWithKnots=IfcBSplineCurveWithKnots;var IfcBSplineSurface=class{constructor(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect){this.expressID=expressID;this.type=type;this.UDegree=UDegree;this.VDegree=VDegree;this.ControlPointsList=ControlPointsList;this.SurfaceForm=SurfaceForm;this.UClosed=UClosed;this.VClosed=VClosed;this.SelfIntersect=SelfIntersect;}static FromTape(expressID,type,tape){let ptr=0;let UDegree=tape[ptr++];let VDegree=tape[ptr++];let ControlPointsList=tape[ptr++];let SurfaceForm=tape[ptr++];let UClosed=tape[ptr++];let VClosed=tape[ptr++];let SelfIntersect=tape[ptr++];return new IfcBSplineSurface(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect);}ToTape(){let args=[];args.push(this.UDegree);;args.push(this.VDegree);;args.push(this.ControlPointsList);;args.push(this.SurfaceForm);;args.push(this.UClosed);;args.push(this.VClosed);;args.push(this.SelfIntersect);;return args;}};exports.IfcBSplineSurface=IfcBSplineSurface;var IfcBSplineSurfaceWithKnots=class{constructor(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect,UMultiplicities,VMultiplicities,UKnots,VKnots,KnotSpec){this.expressID=expressID;this.type=type;this.UDegree=UDegree;this.VDegree=VDegree;this.ControlPointsList=ControlPointsList;this.SurfaceForm=SurfaceForm;this.UClosed=UClosed;this.VClosed=VClosed;this.SelfIntersect=SelfIntersect;this.UMultiplicities=UMultiplicities;this.VMultiplicities=VMultiplicities;this.UKnots=UKnots;this.VKnots=VKnots;this.KnotSpec=KnotSpec;}static FromTape(expressID,type,tape){let ptr=0;let UDegree=tape[ptr++];let VDegree=tape[ptr++];let ControlPointsList=tape[ptr++];let SurfaceForm=tape[ptr++];let UClosed=tape[ptr++];let VClosed=tape[ptr++];let SelfIntersect=tape[ptr++];let UMultiplicities=tape[ptr++];let VMultiplicities=tape[ptr++];let UKnots=tape[ptr++];let VKnots=tape[ptr++];let KnotSpec=tape[ptr++];return new IfcBSplineSurfaceWithKnots(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect,UMultiplicities,VMultiplicities,UKnots,VKnots,KnotSpec);}ToTape(){let args=[];args.push(this.UDegree);;args.push(this.VDegree);;args.push(this.ControlPointsList);;args.push(this.SurfaceForm);;args.push(this.UClosed);;args.push(this.VClosed);;args.push(this.SelfIntersect);;args.push(this.UMultiplicities);;args.push(this.VMultiplicities);;args.push(this.UKnots);;args.push(this.VKnots);;args.push(this.KnotSpec);;return args;}};exports.IfcBSplineSurfaceWithKnots=IfcBSplineSurfaceWithKnots;var IfcBeam=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBeam(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcBeam=IfcBeam;var IfcBeamStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBeamStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcBeamStandardCase=IfcBeamStandardCase;var IfcBeamType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBeamType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcBeamType=IfcBeamType;var IfcBearing=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBearing(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcBearing=IfcBearing;var IfcBearingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBearingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcBearingType=IfcBearingType;var IfcBlobTexture=class{constructor(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,RasterFormat,RasterCode){this.expressID=expressID;this.type=type;this.RepeatS=RepeatS;this.RepeatT=RepeatT;this.Mode=Mode;this.TextureTransform=TextureTransform;this.Parameter=Parameter;this.RasterFormat=RasterFormat;this.RasterCode=RasterCode;}static FromTape(expressID,type,tape){let ptr=0;let RepeatS=tape[ptr++];let RepeatT=tape[ptr++];let Mode=tape[ptr++];let TextureTransform=tape[ptr++];let Parameter=tape[ptr++];let RasterFormat=tape[ptr++];let RasterCode=tape[ptr++];return new IfcBlobTexture(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,RasterFormat,RasterCode);}ToTape(){let args=[];args.push(this.RepeatS);;args.push(this.RepeatT);;args.push(this.Mode);;args.push(this.TextureTransform);;args.push(this.Parameter);;args.push(this.RasterFormat);;args.push(this.RasterCode);;return args;}};exports.IfcBlobTexture=IfcBlobTexture;var IfcBlock=class{constructor(expressID,type,Position,XLength,YLength,ZLength){this.expressID=expressID;this.type=type;this.Position=Position;this.XLength=XLength;this.YLength=YLength;this.ZLength=ZLength;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let XLength=tape[ptr++];let YLength=tape[ptr++];let ZLength=tape[ptr++];return new IfcBlock(expressID,type,Position,XLength,YLength,ZLength);}ToTape(){let args=[];args.push(this.Position);;args.push(this.XLength);;args.push(this.YLength);;args.push(this.ZLength);;return args;}};exports.IfcBlock=IfcBlock;var IfcBoiler=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBoiler(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcBoiler=IfcBoiler;var IfcBoilerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBoilerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcBoilerType=IfcBoilerType;var IfcBooleanClippingResult=class{constructor(expressID,type,Operator,FirstOperand,SecondOperand){this.expressID=expressID;this.type=type;this.Operator=Operator;this.FirstOperand=FirstOperand;this.SecondOperand=SecondOperand;}static FromTape(expressID,type,tape){let ptr=0;let Operator=tape[ptr++];let FirstOperand=tape[ptr++];let SecondOperand=tape[ptr++];return new IfcBooleanClippingResult(expressID,type,Operator,FirstOperand,SecondOperand);}ToTape(){let args=[];args.push(this.Operator);;args.push(this.FirstOperand);;args.push(this.SecondOperand);;return args;}};exports.IfcBooleanClippingResult=IfcBooleanClippingResult;var IfcBooleanResult=class{constructor(expressID,type,Operator,FirstOperand,SecondOperand){this.expressID=expressID;this.type=type;this.Operator=Operator;this.FirstOperand=FirstOperand;this.SecondOperand=SecondOperand;}static FromTape(expressID,type,tape){let ptr=0;let Operator=tape[ptr++];let FirstOperand=tape[ptr++];let SecondOperand=tape[ptr++];return new IfcBooleanResult(expressID,type,Operator,FirstOperand,SecondOperand);}ToTape(){let args=[];args.push(this.Operator);;args.push(this.FirstOperand);;args.push(this.SecondOperand);;return args;}};exports.IfcBooleanResult=IfcBooleanResult;var IfcBoundaryCondition=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcBoundaryCondition(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcBoundaryCondition=IfcBoundaryCondition;var IfcBoundaryCurve=class{constructor(expressID,type,Segments,SelfIntersect){this.expressID=expressID;this.type=type;this.Segments=Segments;this.SelfIntersect=SelfIntersect;}static FromTape(expressID,type,tape){let ptr=0;let Segments=tape[ptr++];let SelfIntersect=tape[ptr++];return new IfcBoundaryCurve(expressID,type,Segments,SelfIntersect);}ToTape(){let args=[];args.push(this.Segments);;args.push(this.SelfIntersect);;return args;}};exports.IfcBoundaryCurve=IfcBoundaryCurve;var IfcBoundaryEdgeCondition=class{constructor(expressID,type,Name,TranslationalStiffnessByLengthX,TranslationalStiffnessByLengthY,TranslationalStiffnessByLengthZ,RotationalStiffnessByLengthX,RotationalStiffnessByLengthY,RotationalStiffnessByLengthZ){this.expressID=expressID;this.type=type;this.Name=Name;this.TranslationalStiffnessByLengthX=TranslationalStiffnessByLengthX;this.TranslationalStiffnessByLengthY=TranslationalStiffnessByLengthY;this.TranslationalStiffnessByLengthZ=TranslationalStiffnessByLengthZ;this.RotationalStiffnessByLengthX=RotationalStiffnessByLengthX;this.RotationalStiffnessByLengthY=RotationalStiffnessByLengthY;this.RotationalStiffnessByLengthZ=RotationalStiffnessByLengthZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let TranslationalStiffnessByLengthX=tape[ptr++];let TranslationalStiffnessByLengthY=tape[ptr++];let TranslationalStiffnessByLengthZ=tape[ptr++];let RotationalStiffnessByLengthX=tape[ptr++];let RotationalStiffnessByLengthY=tape[ptr++];let RotationalStiffnessByLengthZ=tape[ptr++];return new IfcBoundaryEdgeCondition(expressID,type,Name,TranslationalStiffnessByLengthX,TranslationalStiffnessByLengthY,TranslationalStiffnessByLengthZ,RotationalStiffnessByLengthX,RotationalStiffnessByLengthY,RotationalStiffnessByLengthZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.TranslationalStiffnessByLengthX);;args.push(this.TranslationalStiffnessByLengthY);;args.push(this.TranslationalStiffnessByLengthZ);;args.push(this.RotationalStiffnessByLengthX);;args.push(this.RotationalStiffnessByLengthY);;args.push(this.RotationalStiffnessByLengthZ);;return args;}};exports.IfcBoundaryEdgeCondition=IfcBoundaryEdgeCondition;var IfcBoundaryFaceCondition=class{constructor(expressID,type,Name,TranslationalStiffnessByAreaX,TranslationalStiffnessByAreaY,TranslationalStiffnessByAreaZ){this.expressID=expressID;this.type=type;this.Name=Name;this.TranslationalStiffnessByAreaX=TranslationalStiffnessByAreaX;this.TranslationalStiffnessByAreaY=TranslationalStiffnessByAreaY;this.TranslationalStiffnessByAreaZ=TranslationalStiffnessByAreaZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let TranslationalStiffnessByAreaX=tape[ptr++];let TranslationalStiffnessByAreaY=tape[ptr++];let TranslationalStiffnessByAreaZ=tape[ptr++];return new IfcBoundaryFaceCondition(expressID,type,Name,TranslationalStiffnessByAreaX,TranslationalStiffnessByAreaY,TranslationalStiffnessByAreaZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.TranslationalStiffnessByAreaX);;args.push(this.TranslationalStiffnessByAreaY);;args.push(this.TranslationalStiffnessByAreaZ);;return args;}};exports.IfcBoundaryFaceCondition=IfcBoundaryFaceCondition;var IfcBoundaryNodeCondition=class{constructor(expressID,type,Name,TranslationalStiffnessX,TranslationalStiffnessY,TranslationalStiffnessZ,RotationalStiffnessX,RotationalStiffnessY,RotationalStiffnessZ){this.expressID=expressID;this.type=type;this.Name=Name;this.TranslationalStiffnessX=TranslationalStiffnessX;this.TranslationalStiffnessY=TranslationalStiffnessY;this.TranslationalStiffnessZ=TranslationalStiffnessZ;this.RotationalStiffnessX=RotationalStiffnessX;this.RotationalStiffnessY=RotationalStiffnessY;this.RotationalStiffnessZ=RotationalStiffnessZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let TranslationalStiffnessX=tape[ptr++];let TranslationalStiffnessY=tape[ptr++];let TranslationalStiffnessZ=tape[ptr++];let RotationalStiffnessX=tape[ptr++];let RotationalStiffnessY=tape[ptr++];let RotationalStiffnessZ=tape[ptr++];return new IfcBoundaryNodeCondition(expressID,type,Name,TranslationalStiffnessX,TranslationalStiffnessY,TranslationalStiffnessZ,RotationalStiffnessX,RotationalStiffnessY,RotationalStiffnessZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.TranslationalStiffnessX);;args.push(this.TranslationalStiffnessY);;args.push(this.TranslationalStiffnessZ);;args.push(this.RotationalStiffnessX);;args.push(this.RotationalStiffnessY);;args.push(this.RotationalStiffnessZ);;return args;}};exports.IfcBoundaryNodeCondition=IfcBoundaryNodeCondition;var IfcBoundaryNodeConditionWarping=class{constructor(expressID,type,Name,TranslationalStiffnessX,TranslationalStiffnessY,TranslationalStiffnessZ,RotationalStiffnessX,RotationalStiffnessY,RotationalStiffnessZ,WarpingStiffness){this.expressID=expressID;this.type=type;this.Name=Name;this.TranslationalStiffnessX=TranslationalStiffnessX;this.TranslationalStiffnessY=TranslationalStiffnessY;this.TranslationalStiffnessZ=TranslationalStiffnessZ;this.RotationalStiffnessX=RotationalStiffnessX;this.RotationalStiffnessY=RotationalStiffnessY;this.RotationalStiffnessZ=RotationalStiffnessZ;this.WarpingStiffness=WarpingStiffness;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let TranslationalStiffnessX=tape[ptr++];let TranslationalStiffnessY=tape[ptr++];let TranslationalStiffnessZ=tape[ptr++];let RotationalStiffnessX=tape[ptr++];let RotationalStiffnessY=tape[ptr++];let RotationalStiffnessZ=tape[ptr++];let WarpingStiffness=tape[ptr++];return new IfcBoundaryNodeConditionWarping(expressID,type,Name,TranslationalStiffnessX,TranslationalStiffnessY,TranslationalStiffnessZ,RotationalStiffnessX,RotationalStiffnessY,RotationalStiffnessZ,WarpingStiffness);}ToTape(){let args=[];args.push(this.Name);;args.push(this.TranslationalStiffnessX);;args.push(this.TranslationalStiffnessY);;args.push(this.TranslationalStiffnessZ);;args.push(this.RotationalStiffnessX);;args.push(this.RotationalStiffnessY);;args.push(this.RotationalStiffnessZ);;args.push(this.WarpingStiffness);;return args;}};exports.IfcBoundaryNodeConditionWarping=IfcBoundaryNodeConditionWarping;var IfcBoundedCurve=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcBoundedCurve(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcBoundedCurve=IfcBoundedCurve;var IfcBoundedSurface=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcBoundedSurface(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcBoundedSurface=IfcBoundedSurface;var IfcBoundingBox=class{constructor(expressID,type,Corner,XDim,YDim,ZDim){this.expressID=expressID;this.type=type;this.Corner=Corner;this.XDim=XDim;this.YDim=YDim;this.ZDim=ZDim;}static FromTape(expressID,type,tape){let ptr=0;let Corner=tape[ptr++];let XDim=tape[ptr++];let YDim=tape[ptr++];let ZDim=tape[ptr++];return new IfcBoundingBox(expressID,type,Corner,XDim,YDim,ZDim);}ToTape(){let args=[];args.push(this.Corner);;args.push(this.XDim);;args.push(this.YDim);;args.push(this.ZDim);;return args;}};exports.IfcBoundingBox=IfcBoundingBox;var IfcBoxedHalfSpace=class{constructor(expressID,type,BaseSurface,AgreementFlag,Enclosure){this.expressID=expressID;this.type=type;this.BaseSurface=BaseSurface;this.AgreementFlag=AgreementFlag;this.Enclosure=Enclosure;}static FromTape(expressID,type,tape){let ptr=0;let BaseSurface=tape[ptr++];let AgreementFlag=tape[ptr++];let Enclosure=tape[ptr++];return new IfcBoxedHalfSpace(expressID,type,BaseSurface,AgreementFlag,Enclosure);}ToTape(){let args=[];args.push(this.BaseSurface);;args.push(this.AgreementFlag);;args.push(this.Enclosure);;return args;}};exports.IfcBoxedHalfSpace=IfcBoxedHalfSpace;var IfcBridge=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBridge(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;args.push(this.PredefinedType);;return args;}};exports.IfcBridge=IfcBridge;var IfcBridgePart=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBridgePart(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;args.push(this.PredefinedType);;return args;}};exports.IfcBridgePart=IfcBridgePart;var IfcBuilding=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,ElevationOfRefHeight,ElevationOfTerrain,BuildingAddress){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;this.ElevationOfRefHeight=ElevationOfRefHeight;this.ElevationOfTerrain=ElevationOfTerrain;this.BuildingAddress=BuildingAddress;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];let ElevationOfRefHeight=tape[ptr++];let ElevationOfTerrain=tape[ptr++];let BuildingAddress=tape[ptr++];return new IfcBuilding(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,ElevationOfRefHeight,ElevationOfTerrain,BuildingAddress);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;args.push(this.ElevationOfRefHeight);;args.push(this.ElevationOfTerrain);;args.push(this.BuildingAddress);;return args;}};exports.IfcBuilding=IfcBuilding;var IfcBuildingElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcBuildingElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcBuildingElement=IfcBuildingElement;var IfcBuildingElementPart=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBuildingElementPart(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcBuildingElementPart=IfcBuildingElementPart;var IfcBuildingElementPartType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBuildingElementPartType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcBuildingElementPartType=IfcBuildingElementPartType;var IfcBuildingElementProxy=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBuildingElementProxy(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcBuildingElementProxy=IfcBuildingElementProxy;var IfcBuildingElementProxyType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBuildingElementProxyType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcBuildingElementProxyType=IfcBuildingElementProxyType;var IfcBuildingElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcBuildingElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcBuildingElementType=IfcBuildingElementType;var IfcBuildingStorey=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,Elevation){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;this.Elevation=Elevation;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];let Elevation=tape[ptr++];return new IfcBuildingStorey(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,Elevation);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;args.push(this.Elevation);;return args;}};exports.IfcBuildingStorey=IfcBuildingStorey;var IfcBuildingSystem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,LongName){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.PredefinedType=PredefinedType;this.LongName=LongName;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let PredefinedType=tape[ptr++];let LongName=tape[ptr++];return new IfcBuildingSystem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,LongName);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.PredefinedType);;args.push(this.LongName);;return args;}};exports.IfcBuildingSystem=IfcBuildingSystem;var IfcBurner=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBurner(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcBurner=IfcBurner;var IfcBurnerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcBurnerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcBurnerType=IfcBurnerType;var IfcCShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,Width,WallThickness,Girth,InternalFilletRadius){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.Depth=Depth;this.Width=Width;this.WallThickness=WallThickness;this.Girth=Girth;this.InternalFilletRadius=InternalFilletRadius;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let Depth=tape[ptr++];let Width=tape[ptr++];let WallThickness=tape[ptr++];let Girth=tape[ptr++];let InternalFilletRadius=tape[ptr++];return new IfcCShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,Width,WallThickness,Girth,InternalFilletRadius);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.Depth);;args.push(this.Width);;args.push(this.WallThickness);;args.push(this.Girth);;args.push(this.InternalFilletRadius);;return args;}};exports.IfcCShapeProfileDef=IfcCShapeProfileDef;var IfcCableCarrierFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCableCarrierFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCableCarrierFitting=IfcCableCarrierFitting;var IfcCableCarrierFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCableCarrierFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCableCarrierFittingType=IfcCableCarrierFittingType;var IfcCableCarrierSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCableCarrierSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCableCarrierSegment=IfcCableCarrierSegment;var IfcCableCarrierSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCableCarrierSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCableCarrierSegmentType=IfcCableCarrierSegmentType;var IfcCableFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCableFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCableFitting=IfcCableFitting;var IfcCableFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCableFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCableFittingType=IfcCableFittingType;var IfcCableSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCableSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCableSegment=IfcCableSegment;var IfcCableSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCableSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCableSegmentType=IfcCableSegmentType;var IfcCaissonFoundation=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCaissonFoundation(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCaissonFoundation=IfcCaissonFoundation;var IfcCaissonFoundationType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCaissonFoundationType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCaissonFoundationType=IfcCaissonFoundationType;var IfcCartesianPoint=class{constructor(expressID,type,Coordinates){this.expressID=expressID;this.type=type;this.Coordinates=Coordinates;}static FromTape(expressID,type,tape){let ptr=0;let Coordinates=tape[ptr++];return new IfcCartesianPoint(expressID,type,Coordinates);}ToTape(){let args=[];args.push(this.Coordinates);;return args;}};exports.IfcCartesianPoint=IfcCartesianPoint;var IfcCartesianPointList=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcCartesianPointList(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcCartesianPointList=IfcCartesianPointList;var IfcCartesianPointList2D=class{constructor(expressID,type,CoordList,TagList){this.expressID=expressID;this.type=type;this.CoordList=CoordList;this.TagList=TagList;}static FromTape(expressID,type,tape){let ptr=0;let CoordList=tape[ptr++];let TagList=tape[ptr++];return new IfcCartesianPointList2D(expressID,type,CoordList,TagList);}ToTape(){let args=[];args.push(this.CoordList);;args.push(this.TagList);;return args;}};exports.IfcCartesianPointList2D=IfcCartesianPointList2D;var IfcCartesianPointList3D=class{constructor(expressID,type,CoordList,TagList){this.expressID=expressID;this.type=type;this.CoordList=CoordList;this.TagList=TagList;}static FromTape(expressID,type,tape){let ptr=0;let CoordList=tape[ptr++];let TagList=tape[ptr++];return new IfcCartesianPointList3D(expressID,type,CoordList,TagList);}ToTape(){let args=[];args.push(this.CoordList);;args.push(this.TagList);;return args;}};exports.IfcCartesianPointList3D=IfcCartesianPointList3D;var IfcCartesianTransformationOperator=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale){this.expressID=expressID;this.type=type;this.Axis1=Axis1;this.Axis2=Axis2;this.LocalOrigin=LocalOrigin;this.Scale=Scale;}static FromTape(expressID,type,tape){let ptr=0;let Axis1=tape[ptr++];let Axis2=tape[ptr++];let LocalOrigin=tape[ptr++];let Scale=tape[ptr++];return new IfcCartesianTransformationOperator(expressID,type,Axis1,Axis2,LocalOrigin,Scale);}ToTape(){let args=[];args.push(this.Axis1);;args.push(this.Axis2);;args.push(this.LocalOrigin);;args.push(this.Scale);;return args;}};exports.IfcCartesianTransformationOperator=IfcCartesianTransformationOperator;var IfcCartesianTransformationOperator2D=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale){this.expressID=expressID;this.type=type;this.Axis1=Axis1;this.Axis2=Axis2;this.LocalOrigin=LocalOrigin;this.Scale=Scale;}static FromTape(expressID,type,tape){let ptr=0;let Axis1=tape[ptr++];let Axis2=tape[ptr++];let LocalOrigin=tape[ptr++];let Scale=tape[ptr++];return new IfcCartesianTransformationOperator2D(expressID,type,Axis1,Axis2,LocalOrigin,Scale);}ToTape(){let args=[];args.push(this.Axis1);;args.push(this.Axis2);;args.push(this.LocalOrigin);;args.push(this.Scale);;return args;}};exports.IfcCartesianTransformationOperator2D=IfcCartesianTransformationOperator2D;var IfcCartesianTransformationOperator2DnonUniform=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Scale2){this.expressID=expressID;this.type=type;this.Axis1=Axis1;this.Axis2=Axis2;this.LocalOrigin=LocalOrigin;this.Scale=Scale;this.Scale2=Scale2;}static FromTape(expressID,type,tape){let ptr=0;let Axis1=tape[ptr++];let Axis2=tape[ptr++];let LocalOrigin=tape[ptr++];let Scale=tape[ptr++];let Scale2=tape[ptr++];return new IfcCartesianTransformationOperator2DnonUniform(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Scale2);}ToTape(){let args=[];args.push(this.Axis1);;args.push(this.Axis2);;args.push(this.LocalOrigin);;args.push(this.Scale);;args.push(this.Scale2);;return args;}};exports.IfcCartesianTransformationOperator2DnonUniform=IfcCartesianTransformationOperator2DnonUniform;var IfcCartesianTransformationOperator3D=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Axis3){this.expressID=expressID;this.type=type;this.Axis1=Axis1;this.Axis2=Axis2;this.LocalOrigin=LocalOrigin;this.Scale=Scale;this.Axis3=Axis3;}static FromTape(expressID,type,tape){let ptr=0;let Axis1=tape[ptr++];let Axis2=tape[ptr++];let LocalOrigin=tape[ptr++];let Scale=tape[ptr++];let Axis3=tape[ptr++];return new IfcCartesianTransformationOperator3D(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Axis3);}ToTape(){let args=[];args.push(this.Axis1);;args.push(this.Axis2);;args.push(this.LocalOrigin);;args.push(this.Scale);;args.push(this.Axis3);;return args;}};exports.IfcCartesianTransformationOperator3D=IfcCartesianTransformationOperator3D;var IfcCartesianTransformationOperator3DnonUniform=class{constructor(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Axis3,Scale2,Scale3){this.expressID=expressID;this.type=type;this.Axis1=Axis1;this.Axis2=Axis2;this.LocalOrigin=LocalOrigin;this.Scale=Scale;this.Axis3=Axis3;this.Scale2=Scale2;this.Scale3=Scale3;}static FromTape(expressID,type,tape){let ptr=0;let Axis1=tape[ptr++];let Axis2=tape[ptr++];let LocalOrigin=tape[ptr++];let Scale=tape[ptr++];let Axis3=tape[ptr++];let Scale2=tape[ptr++];let Scale3=tape[ptr++];return new IfcCartesianTransformationOperator3DnonUniform(expressID,type,Axis1,Axis2,LocalOrigin,Scale,Axis3,Scale2,Scale3);}ToTape(){let args=[];args.push(this.Axis1);;args.push(this.Axis2);;args.push(this.LocalOrigin);;args.push(this.Scale);;args.push(this.Axis3);;args.push(this.Scale2);;args.push(this.Scale3);;return args;}};exports.IfcCartesianTransformationOperator3DnonUniform=IfcCartesianTransformationOperator3DnonUniform;var IfcCenterLineProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Curve,Thickness){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Curve=Curve;this.Thickness=Thickness;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Curve=tape[ptr++];let Thickness=tape[ptr++];return new IfcCenterLineProfileDef(expressID,type,ProfileType,ProfileName,Curve,Thickness);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Curve);;args.push(this.Thickness);;return args;}};exports.IfcCenterLineProfileDef=IfcCenterLineProfileDef;var IfcChiller=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcChiller(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcChiller=IfcChiller;var IfcChillerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcChillerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcChillerType=IfcChillerType;var IfcChimney=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcChimney(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcChimney=IfcChimney;var IfcChimneyType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcChimneyType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcChimneyType=IfcChimneyType;var IfcCircle=class{constructor(expressID,type,Position,Radius){this.expressID=expressID;this.type=type;this.Position=Position;this.Radius=Radius;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let Radius=tape[ptr++];return new IfcCircle(expressID,type,Position,Radius);}ToTape(){let args=[];args.push(this.Position);;args.push(this.Radius);;return args;}};exports.IfcCircle=IfcCircle;var IfcCircleHollowProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Radius,WallThickness){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.Radius=Radius;this.WallThickness=WallThickness;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let Radius=tape[ptr++];let WallThickness=tape[ptr++];return new IfcCircleHollowProfileDef(expressID,type,ProfileType,ProfileName,Position,Radius,WallThickness);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.Radius);;args.push(this.WallThickness);;return args;}};exports.IfcCircleHollowProfileDef=IfcCircleHollowProfileDef;var IfcCircleProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Radius){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.Radius=Radius;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let Radius=tape[ptr++];return new IfcCircleProfileDef(expressID,type,ProfileType,ProfileName,Position,Radius);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.Radius);;return args;}};exports.IfcCircleProfileDef=IfcCircleProfileDef;var IfcCircularArcSegment2D=class{constructor(expressID,type,StartPoint,StartDirection,SegmentLength,Radius,IsCCW){this.expressID=expressID;this.type=type;this.StartPoint=StartPoint;this.StartDirection=StartDirection;this.SegmentLength=SegmentLength;this.Radius=Radius;this.IsCCW=IsCCW;}static FromTape(expressID,type,tape){let ptr=0;let StartPoint=tape[ptr++];let StartDirection=tape[ptr++];let SegmentLength=tape[ptr++];let Radius=tape[ptr++];let IsCCW=tape[ptr++];return new IfcCircularArcSegment2D(expressID,type,StartPoint,StartDirection,SegmentLength,Radius,IsCCW);}ToTape(){let args=[];args.push(this.StartPoint);;args.push(this.StartDirection);;args.push(this.SegmentLength);;args.push(this.Radius);;args.push(this.IsCCW);;return args;}};exports.IfcCircularArcSegment2D=IfcCircularArcSegment2D;var IfcCivilElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcCivilElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcCivilElement=IfcCivilElement;var IfcCivilElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcCivilElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcCivilElementType=IfcCivilElementType;var IfcClassification=class{constructor(expressID,type,Source,Edition,EditionDate,Name,Description,Location,ReferenceTokens){this.expressID=expressID;this.type=type;this.Source=Source;this.Edition=Edition;this.EditionDate=EditionDate;this.Name=Name;this.Description=Description;this.Location=Location;this.ReferenceTokens=ReferenceTokens;}static FromTape(expressID,type,tape){let ptr=0;let Source=tape[ptr++];let Edition=tape[ptr++];let EditionDate=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let Location=tape[ptr++];let ReferenceTokens=tape[ptr++];return new IfcClassification(expressID,type,Source,Edition,EditionDate,Name,Description,Location,ReferenceTokens);}ToTape(){let args=[];args.push(this.Source);;args.push(this.Edition);;args.push(this.EditionDate);;args.push(this.Name);;args.push(this.Description);;args.push(this.Location);;args.push(this.ReferenceTokens);;return args;}};exports.IfcClassification=IfcClassification;var IfcClassificationReference=class{constructor(expressID,type,Location,Identification,Name,ReferencedSource,Description,Sort){this.expressID=expressID;this.type=type;this.Location=Location;this.Identification=Identification;this.Name=Name;this.ReferencedSource=ReferencedSource;this.Description=Description;this.Sort=Sort;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Identification=tape[ptr++];let Name=tape[ptr++];let ReferencedSource=tape[ptr++];let Description=tape[ptr++];let Sort=tape[ptr++];return new IfcClassificationReference(expressID,type,Location,Identification,Name,ReferencedSource,Description,Sort);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Identification);;args.push(this.Name);;args.push(this.ReferencedSource);;args.push(this.Description);;args.push(this.Sort);;return args;}};exports.IfcClassificationReference=IfcClassificationReference;var IfcClosedShell=class{constructor(expressID,type,CfsFaces){this.expressID=expressID;this.type=type;this.CfsFaces=CfsFaces;}static FromTape(expressID,type,tape){let ptr=0;let CfsFaces=tape[ptr++];return new IfcClosedShell(expressID,type,CfsFaces);}ToTape(){let args=[];args.push(this.CfsFaces);;return args;}};exports.IfcClosedShell=IfcClosedShell;var IfcCoil=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCoil(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCoil=IfcCoil;var IfcCoilType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCoilType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCoilType=IfcCoilType;var IfcColourRgb=class{constructor(expressID,type,Name,Red,Green,Blue){this.expressID=expressID;this.type=type;this.Name=Name;this.Red=Red;this.Green=Green;this.Blue=Blue;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Red=tape[ptr++];let Green=tape[ptr++];let Blue=tape[ptr++];return new IfcColourRgb(expressID,type,Name,Red,Green,Blue);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Red);;args.push(this.Green);;args.push(this.Blue);;return args;}};exports.IfcColourRgb=IfcColourRgb;var IfcColourRgbList=class{constructor(expressID,type,ColourList){this.expressID=expressID;this.type=type;this.ColourList=ColourList;}static FromTape(expressID,type,tape){let ptr=0;let ColourList=tape[ptr++];return new IfcColourRgbList(expressID,type,ColourList);}ToTape(){let args=[];args.push(this.ColourList);;return args;}};exports.IfcColourRgbList=IfcColourRgbList;var IfcColourSpecification=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcColourSpecification(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcColourSpecification=IfcColourSpecification;var IfcColumn=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcColumn(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcColumn=IfcColumn;var IfcColumnStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcColumnStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcColumnStandardCase=IfcColumnStandardCase;var IfcColumnType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcColumnType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcColumnType=IfcColumnType;var IfcCommunicationsAppliance=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCommunicationsAppliance(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCommunicationsAppliance=IfcCommunicationsAppliance;var IfcCommunicationsApplianceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCommunicationsApplianceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCommunicationsApplianceType=IfcCommunicationsApplianceType;var IfcComplexProperty=class{constructor(expressID,type,Name,Description,UsageName,HasProperties){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.UsageName=UsageName;this.HasProperties=HasProperties;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let UsageName=tape[ptr++];let HasProperties=tape[ptr++];return new IfcComplexProperty(expressID,type,Name,Description,UsageName,HasProperties);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.UsageName);;args.push(this.HasProperties);;return args;}};exports.IfcComplexProperty=IfcComplexProperty;var IfcComplexPropertyTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,UsageName,TemplateType,HasPropertyTemplates){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.UsageName=UsageName;this.TemplateType=TemplateType;this.HasPropertyTemplates=HasPropertyTemplates;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let UsageName=tape[ptr++];let TemplateType=tape[ptr++];let HasPropertyTemplates=tape[ptr++];return new IfcComplexPropertyTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description,UsageName,TemplateType,HasPropertyTemplates);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.UsageName);;args.push(this.TemplateType);;args.push(this.HasPropertyTemplates);;return args;}};exports.IfcComplexPropertyTemplate=IfcComplexPropertyTemplate;var IfcCompositeCurve=class{constructor(expressID,type,Segments,SelfIntersect){this.expressID=expressID;this.type=type;this.Segments=Segments;this.SelfIntersect=SelfIntersect;}static FromTape(expressID,type,tape){let ptr=0;let Segments=tape[ptr++];let SelfIntersect=tape[ptr++];return new IfcCompositeCurve(expressID,type,Segments,SelfIntersect);}ToTape(){let args=[];args.push(this.Segments);;args.push(this.SelfIntersect);;return args;}};exports.IfcCompositeCurve=IfcCompositeCurve;var IfcCompositeCurveOnSurface=class{constructor(expressID,type,Segments,SelfIntersect){this.expressID=expressID;this.type=type;this.Segments=Segments;this.SelfIntersect=SelfIntersect;}static FromTape(expressID,type,tape){let ptr=0;let Segments=tape[ptr++];let SelfIntersect=tape[ptr++];return new IfcCompositeCurveOnSurface(expressID,type,Segments,SelfIntersect);}ToTape(){let args=[];args.push(this.Segments);;args.push(this.SelfIntersect);;return args;}};exports.IfcCompositeCurveOnSurface=IfcCompositeCurveOnSurface;var IfcCompositeCurveSegment=class{constructor(expressID,type,Transition,SameSense,ParentCurve){this.expressID=expressID;this.type=type;this.Transition=Transition;this.SameSense=SameSense;this.ParentCurve=ParentCurve;}static FromTape(expressID,type,tape){let ptr=0;let Transition=tape[ptr++];let SameSense=tape[ptr++];let ParentCurve=tape[ptr++];return new IfcCompositeCurveSegment(expressID,type,Transition,SameSense,ParentCurve);}ToTape(){let args=[];args.push(this.Transition);;args.push(this.SameSense);;args.push(this.ParentCurve);;return args;}};exports.IfcCompositeCurveSegment=IfcCompositeCurveSegment;var IfcCompositeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Profiles,Label){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Profiles=Profiles;this.Label=Label;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Profiles=tape[ptr++];let Label=tape[ptr++];return new IfcCompositeProfileDef(expressID,type,ProfileType,ProfileName,Profiles,Label);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Profiles);;args.push(this.Label);;return args;}};exports.IfcCompositeProfileDef=IfcCompositeProfileDef;var IfcCompressor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCompressor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCompressor=IfcCompressor;var IfcCompressorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCompressorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCompressorType=IfcCompressorType;var IfcCondenser=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCondenser(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCondenser=IfcCondenser;var IfcCondenserType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCondenserType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCondenserType=IfcCondenserType;var IfcConic=class{constructor(expressID,type,Position){this.expressID=expressID;this.type=type;this.Position=Position;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];return new IfcConic(expressID,type,Position);}ToTape(){let args=[];args.push(this.Position);;return args;}};exports.IfcConic=IfcConic;var IfcConnectedFaceSet=class{constructor(expressID,type,CfsFaces){this.expressID=expressID;this.type=type;this.CfsFaces=CfsFaces;}static FromTape(expressID,type,tape){let ptr=0;let CfsFaces=tape[ptr++];return new IfcConnectedFaceSet(expressID,type,CfsFaces);}ToTape(){let args=[];args.push(this.CfsFaces);;return args;}};exports.IfcConnectedFaceSet=IfcConnectedFaceSet;var IfcConnectionCurveGeometry=class{constructor(expressID,type,CurveOnRelatingElement,CurveOnRelatedElement){this.expressID=expressID;this.type=type;this.CurveOnRelatingElement=CurveOnRelatingElement;this.CurveOnRelatedElement=CurveOnRelatedElement;}static FromTape(expressID,type,tape){let ptr=0;let CurveOnRelatingElement=tape[ptr++];let CurveOnRelatedElement=tape[ptr++];return new IfcConnectionCurveGeometry(expressID,type,CurveOnRelatingElement,CurveOnRelatedElement);}ToTape(){let args=[];args.push(this.CurveOnRelatingElement);;args.push(this.CurveOnRelatedElement);;return args;}};exports.IfcConnectionCurveGeometry=IfcConnectionCurveGeometry;var IfcConnectionGeometry=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcConnectionGeometry(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcConnectionGeometry=IfcConnectionGeometry;var IfcConnectionPointEccentricity=class{constructor(expressID,type,PointOnRelatingElement,PointOnRelatedElement,EccentricityInX,EccentricityInY,EccentricityInZ){this.expressID=expressID;this.type=type;this.PointOnRelatingElement=PointOnRelatingElement;this.PointOnRelatedElement=PointOnRelatedElement;this.EccentricityInX=EccentricityInX;this.EccentricityInY=EccentricityInY;this.EccentricityInZ=EccentricityInZ;}static FromTape(expressID,type,tape){let ptr=0;let PointOnRelatingElement=tape[ptr++];let PointOnRelatedElement=tape[ptr++];let EccentricityInX=tape[ptr++];let EccentricityInY=tape[ptr++];let EccentricityInZ=tape[ptr++];return new IfcConnectionPointEccentricity(expressID,type,PointOnRelatingElement,PointOnRelatedElement,EccentricityInX,EccentricityInY,EccentricityInZ);}ToTape(){let args=[];args.push(this.PointOnRelatingElement);;args.push(this.PointOnRelatedElement);;args.push(this.EccentricityInX);;args.push(this.EccentricityInY);;args.push(this.EccentricityInZ);;return args;}};exports.IfcConnectionPointEccentricity=IfcConnectionPointEccentricity;var IfcConnectionPointGeometry=class{constructor(expressID,type,PointOnRelatingElement,PointOnRelatedElement){this.expressID=expressID;this.type=type;this.PointOnRelatingElement=PointOnRelatingElement;this.PointOnRelatedElement=PointOnRelatedElement;}static FromTape(expressID,type,tape){let ptr=0;let PointOnRelatingElement=tape[ptr++];let PointOnRelatedElement=tape[ptr++];return new IfcConnectionPointGeometry(expressID,type,PointOnRelatingElement,PointOnRelatedElement);}ToTape(){let args=[];args.push(this.PointOnRelatingElement);;args.push(this.PointOnRelatedElement);;return args;}};exports.IfcConnectionPointGeometry=IfcConnectionPointGeometry;var IfcConnectionSurfaceGeometry=class{constructor(expressID,type,SurfaceOnRelatingElement,SurfaceOnRelatedElement){this.expressID=expressID;this.type=type;this.SurfaceOnRelatingElement=SurfaceOnRelatingElement;this.SurfaceOnRelatedElement=SurfaceOnRelatedElement;}static FromTape(expressID,type,tape){let ptr=0;let SurfaceOnRelatingElement=tape[ptr++];let SurfaceOnRelatedElement=tape[ptr++];return new IfcConnectionSurfaceGeometry(expressID,type,SurfaceOnRelatingElement,SurfaceOnRelatedElement);}ToTape(){let args=[];args.push(this.SurfaceOnRelatingElement);;args.push(this.SurfaceOnRelatedElement);;return args;}};exports.IfcConnectionSurfaceGeometry=IfcConnectionSurfaceGeometry;var IfcConnectionVolumeGeometry=class{constructor(expressID,type,VolumeOnRelatingElement,VolumeOnRelatedElement){this.expressID=expressID;this.type=type;this.VolumeOnRelatingElement=VolumeOnRelatingElement;this.VolumeOnRelatedElement=VolumeOnRelatedElement;}static FromTape(expressID,type,tape){let ptr=0;let VolumeOnRelatingElement=tape[ptr++];let VolumeOnRelatedElement=tape[ptr++];return new IfcConnectionVolumeGeometry(expressID,type,VolumeOnRelatingElement,VolumeOnRelatedElement);}ToTape(){let args=[];args.push(this.VolumeOnRelatingElement);;args.push(this.VolumeOnRelatedElement);;return args;}};exports.IfcConnectionVolumeGeometry=IfcConnectionVolumeGeometry;var IfcConstraint=class{constructor(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.ConstraintGrade=ConstraintGrade;this.ConstraintSource=ConstraintSource;this.CreatingActor=CreatingActor;this.CreationTime=CreationTime;this.UserDefinedGrade=UserDefinedGrade;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let ConstraintGrade=tape[ptr++];let ConstraintSource=tape[ptr++];let CreatingActor=tape[ptr++];let CreationTime=tape[ptr++];let UserDefinedGrade=tape[ptr++];return new IfcConstraint(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.ConstraintGrade);;args.push(this.ConstraintSource);;args.push(this.CreatingActor);;args.push(this.CreationTime);;args.push(this.UserDefinedGrade);;return args;}};exports.IfcConstraint=IfcConstraint;var IfcConstructionEquipmentResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.Usage=Usage;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let Usage=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcConstructionEquipmentResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.Usage);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcConstructionEquipmentResource=IfcConstructionEquipmentResource;var IfcConstructionEquipmentResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ResourceType=ResourceType;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ResourceType=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcConstructionEquipmentResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ResourceType);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcConstructionEquipmentResourceType=IfcConstructionEquipmentResourceType;var IfcConstructionMaterialResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.Usage=Usage;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let Usage=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcConstructionMaterialResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.Usage);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcConstructionMaterialResource=IfcConstructionMaterialResource;var IfcConstructionMaterialResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ResourceType=ResourceType;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ResourceType=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcConstructionMaterialResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ResourceType);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcConstructionMaterialResourceType=IfcConstructionMaterialResourceType;var IfcConstructionProductResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.Usage=Usage;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let Usage=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcConstructionProductResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.Usage);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcConstructionProductResource=IfcConstructionProductResource;var IfcConstructionProductResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ResourceType=ResourceType;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ResourceType=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcConstructionProductResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ResourceType);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcConstructionProductResourceType=IfcConstructionProductResourceType;var IfcConstructionResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.Usage=Usage;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let Usage=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];return new IfcConstructionResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.Usage);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;return args;}};exports.IfcConstructionResource=IfcConstructionResource;var IfcConstructionResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ResourceType=ResourceType;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ResourceType=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];return new IfcConstructionResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ResourceType);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;return args;}};exports.IfcConstructionResourceType=IfcConstructionResourceType;var IfcContext=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.LongName=LongName;this.Phase=Phase;this.RepresentationContexts=RepresentationContexts;this.UnitsInContext=UnitsInContext;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let LongName=tape[ptr++];let Phase=tape[ptr++];let RepresentationContexts=tape[ptr++];let UnitsInContext=tape[ptr++];return new IfcContext(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.LongName);;args.push(this.Phase);;args.push(this.RepresentationContexts);;args.push(this.UnitsInContext);;return args;}};exports.IfcContext=IfcContext;var IfcContextDependentUnit=class{constructor(expressID,type,Dimensions,UnitType,Name){this.expressID=expressID;this.type=type;this.Dimensions=Dimensions;this.UnitType=UnitType;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Dimensions=tape[ptr++];let UnitType=tape[ptr++];let Name=tape[ptr++];return new IfcContextDependentUnit(expressID,type,Dimensions,UnitType,Name);}ToTape(){let args=[];args.push(this.Dimensions);;args.push(this.UnitType);;args.push(this.Name);;return args;}};exports.IfcContextDependentUnit=IfcContextDependentUnit;var IfcControl=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];return new IfcControl(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;return args;}};exports.IfcControl=IfcControl;var IfcController=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcController(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcController=IfcController;var IfcControllerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcControllerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcControllerType=IfcControllerType;var IfcConversionBasedUnit=class{constructor(expressID,type,Dimensions,UnitType,Name,ConversionFactor){this.expressID=expressID;this.type=type;this.Dimensions=Dimensions;this.UnitType=UnitType;this.Name=Name;this.ConversionFactor=ConversionFactor;}static FromTape(expressID,type,tape){let ptr=0;let Dimensions=tape[ptr++];let UnitType=tape[ptr++];let Name=tape[ptr++];let ConversionFactor=tape[ptr++];return new IfcConversionBasedUnit(expressID,type,Dimensions,UnitType,Name,ConversionFactor);}ToTape(){let args=[];args.push(this.Dimensions);;args.push(this.UnitType);;args.push(this.Name);;args.push(this.ConversionFactor);;return args;}};exports.IfcConversionBasedUnit=IfcConversionBasedUnit;var IfcConversionBasedUnitWithOffset=class{constructor(expressID,type,Dimensions,UnitType,Name,ConversionFactor,ConversionOffset){this.expressID=expressID;this.type=type;this.Dimensions=Dimensions;this.UnitType=UnitType;this.Name=Name;this.ConversionFactor=ConversionFactor;this.ConversionOffset=ConversionOffset;}static FromTape(expressID,type,tape){let ptr=0;let Dimensions=tape[ptr++];let UnitType=tape[ptr++];let Name=tape[ptr++];let ConversionFactor=tape[ptr++];let ConversionOffset=tape[ptr++];return new IfcConversionBasedUnitWithOffset(expressID,type,Dimensions,UnitType,Name,ConversionFactor,ConversionOffset);}ToTape(){let args=[];args.push(this.Dimensions);;args.push(this.UnitType);;args.push(this.Name);;args.push(this.ConversionFactor);;args.push(this.ConversionOffset);;return args;}};exports.IfcConversionBasedUnitWithOffset=IfcConversionBasedUnitWithOffset;var IfcCooledBeam=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCooledBeam(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCooledBeam=IfcCooledBeam;var IfcCooledBeamType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCooledBeamType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCooledBeamType=IfcCooledBeamType;var IfcCoolingTower=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCoolingTower(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCoolingTower=IfcCoolingTower;var IfcCoolingTowerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCoolingTowerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCoolingTowerType=IfcCoolingTowerType;var IfcCoordinateOperation=class{constructor(expressID,type,SourceCRS,TargetCRS){this.expressID=expressID;this.type=type;this.SourceCRS=SourceCRS;this.TargetCRS=TargetCRS;}static FromTape(expressID,type,tape){let ptr=0;let SourceCRS=tape[ptr++];let TargetCRS=tape[ptr++];return new IfcCoordinateOperation(expressID,type,SourceCRS,TargetCRS);}ToTape(){let args=[];args.push(this.SourceCRS);;args.push(this.TargetCRS);;return args;}};exports.IfcCoordinateOperation=IfcCoordinateOperation;var IfcCoordinateReferenceSystem=class{constructor(expressID,type,Name,Description,GeodeticDatum,VerticalDatum){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.GeodeticDatum=GeodeticDatum;this.VerticalDatum=VerticalDatum;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let GeodeticDatum=tape[ptr++];let VerticalDatum=tape[ptr++];return new IfcCoordinateReferenceSystem(expressID,type,Name,Description,GeodeticDatum,VerticalDatum);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.GeodeticDatum);;args.push(this.VerticalDatum);;return args;}};exports.IfcCoordinateReferenceSystem=IfcCoordinateReferenceSystem;var IfcCostItem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,CostValues,CostQuantities){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.PredefinedType=PredefinedType;this.CostValues=CostValues;this.CostQuantities=CostQuantities;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let PredefinedType=tape[ptr++];let CostValues=tape[ptr++];let CostQuantities=tape[ptr++];return new IfcCostItem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,CostValues,CostQuantities);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.PredefinedType);;args.push(this.CostValues);;args.push(this.CostQuantities);;return args;}};exports.IfcCostItem=IfcCostItem;var IfcCostSchedule=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,SubmittedOn,UpdateDate){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.PredefinedType=PredefinedType;this.Status=Status;this.SubmittedOn=SubmittedOn;this.UpdateDate=UpdateDate;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let PredefinedType=tape[ptr++];let Status=tape[ptr++];let SubmittedOn=tape[ptr++];let UpdateDate=tape[ptr++];return new IfcCostSchedule(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,SubmittedOn,UpdateDate);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.PredefinedType);;args.push(this.Status);;args.push(this.SubmittedOn);;args.push(this.UpdateDate);;return args;}};exports.IfcCostSchedule=IfcCostSchedule;var IfcCostValue=class{constructor(expressID,type,Name,Description,AppliedValue,UnitBasis,ApplicableDate,FixedUntilDate,Category,Condition,ArithmeticOperator,Components){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.AppliedValue=AppliedValue;this.UnitBasis=UnitBasis;this.ApplicableDate=ApplicableDate;this.FixedUntilDate=FixedUntilDate;this.Category=Category;this.Condition=Condition;this.ArithmeticOperator=ArithmeticOperator;this.Components=Components;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let AppliedValue=tape[ptr++];let UnitBasis=tape[ptr++];let ApplicableDate=tape[ptr++];let FixedUntilDate=tape[ptr++];let Category=tape[ptr++];let Condition=tape[ptr++];let ArithmeticOperator=tape[ptr++];let Components=tape[ptr++];return new IfcCostValue(expressID,type,Name,Description,AppliedValue,UnitBasis,ApplicableDate,FixedUntilDate,Category,Condition,ArithmeticOperator,Components);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.AppliedValue);;args.push(this.UnitBasis);;args.push(this.ApplicableDate);;args.push(this.FixedUntilDate);;args.push(this.Category);;args.push(this.Condition);;args.push(this.ArithmeticOperator);;args.push(this.Components);;return args;}};exports.IfcCostValue=IfcCostValue;var IfcCovering=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCovering(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCovering=IfcCovering;var IfcCoveringType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCoveringType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCoveringType=IfcCoveringType;var IfcCrewResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.Usage=Usage;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let Usage=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCrewResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.Usage);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcCrewResource=IfcCrewResource;var IfcCrewResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ResourceType=ResourceType;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ResourceType=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCrewResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ResourceType);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcCrewResourceType=IfcCrewResourceType;var IfcCsgPrimitive3D=class{constructor(expressID,type,Position){this.expressID=expressID;this.type=type;this.Position=Position;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];return new IfcCsgPrimitive3D(expressID,type,Position);}ToTape(){let args=[];args.push(this.Position);;return args;}};exports.IfcCsgPrimitive3D=IfcCsgPrimitive3D;var IfcCsgSolid=class{constructor(expressID,type,TreeRootExpression){this.expressID=expressID;this.type=type;this.TreeRootExpression=TreeRootExpression;}static FromTape(expressID,type,tape){let ptr=0;let TreeRootExpression=tape[ptr++];return new IfcCsgSolid(expressID,type,TreeRootExpression);}ToTape(){let args=[];args.push(this.TreeRootExpression);;return args;}};exports.IfcCsgSolid=IfcCsgSolid;var IfcCurrencyRelationship=class{constructor(expressID,type,Name,Description,RelatingMonetaryUnit,RelatedMonetaryUnit,ExchangeRate,RateDateTime,RateSource){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.RelatingMonetaryUnit=RelatingMonetaryUnit;this.RelatedMonetaryUnit=RelatedMonetaryUnit;this.ExchangeRate=ExchangeRate;this.RateDateTime=RateDateTime;this.RateSource=RateSource;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let RelatingMonetaryUnit=tape[ptr++];let RelatedMonetaryUnit=tape[ptr++];let ExchangeRate=tape[ptr++];let RateDateTime=tape[ptr++];let RateSource=tape[ptr++];return new IfcCurrencyRelationship(expressID,type,Name,Description,RelatingMonetaryUnit,RelatedMonetaryUnit,ExchangeRate,RateDateTime,RateSource);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingMonetaryUnit);;args.push(this.RelatedMonetaryUnit);;args.push(this.ExchangeRate);;args.push(this.RateDateTime);;args.push(this.RateSource);;return args;}};exports.IfcCurrencyRelationship=IfcCurrencyRelationship;var IfcCurtainWall=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCurtainWall(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcCurtainWall=IfcCurtainWall;var IfcCurtainWallType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcCurtainWallType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcCurtainWallType=IfcCurtainWallType;var IfcCurve=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcCurve(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcCurve=IfcCurve;var IfcCurveBoundedPlane=class{constructor(expressID,type,BasisSurface,OuterBoundary,InnerBoundaries){this.expressID=expressID;this.type=type;this.BasisSurface=BasisSurface;this.OuterBoundary=OuterBoundary;this.InnerBoundaries=InnerBoundaries;}static FromTape(expressID,type,tape){let ptr=0;let BasisSurface=tape[ptr++];let OuterBoundary=tape[ptr++];let InnerBoundaries=tape[ptr++];return new IfcCurveBoundedPlane(expressID,type,BasisSurface,OuterBoundary,InnerBoundaries);}ToTape(){let args=[];args.push(this.BasisSurface);;args.push(this.OuterBoundary);;args.push(this.InnerBoundaries);;return args;}};exports.IfcCurveBoundedPlane=IfcCurveBoundedPlane;var IfcCurveBoundedSurface=class{constructor(expressID,type,BasisSurface,Boundaries,ImplicitOuter){this.expressID=expressID;this.type=type;this.BasisSurface=BasisSurface;this.Boundaries=Boundaries;this.ImplicitOuter=ImplicitOuter;}static FromTape(expressID,type,tape){let ptr=0;let BasisSurface=tape[ptr++];let Boundaries=tape[ptr++];let ImplicitOuter=tape[ptr++];return new IfcCurveBoundedSurface(expressID,type,BasisSurface,Boundaries,ImplicitOuter);}ToTape(){let args=[];args.push(this.BasisSurface);;args.push(this.Boundaries);;args.push(this.ImplicitOuter);;return args;}};exports.IfcCurveBoundedSurface=IfcCurveBoundedSurface;var IfcCurveSegment2D=class{constructor(expressID,type,StartPoint,StartDirection,SegmentLength){this.expressID=expressID;this.type=type;this.StartPoint=StartPoint;this.StartDirection=StartDirection;this.SegmentLength=SegmentLength;}static FromTape(expressID,type,tape){let ptr=0;let StartPoint=tape[ptr++];let StartDirection=tape[ptr++];let SegmentLength=tape[ptr++];return new IfcCurveSegment2D(expressID,type,StartPoint,StartDirection,SegmentLength);}ToTape(){let args=[];args.push(this.StartPoint);;args.push(this.StartDirection);;args.push(this.SegmentLength);;return args;}};exports.IfcCurveSegment2D=IfcCurveSegment2D;var IfcCurveStyle=class{constructor(expressID,type,Name,CurveFont,CurveWidth,CurveColour,ModelOrDraughting){this.expressID=expressID;this.type=type;this.Name=Name;this.CurveFont=CurveFont;this.CurveWidth=CurveWidth;this.CurveColour=CurveColour;this.ModelOrDraughting=ModelOrDraughting;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let CurveFont=tape[ptr++];let CurveWidth=tape[ptr++];let CurveColour=tape[ptr++];let ModelOrDraughting=tape[ptr++];return new IfcCurveStyle(expressID,type,Name,CurveFont,CurveWidth,CurveColour,ModelOrDraughting);}ToTape(){let args=[];args.push(this.Name);;args.push(this.CurveFont);;args.push(this.CurveWidth);;args.push(this.CurveColour);;args.push(this.ModelOrDraughting);;return args;}};exports.IfcCurveStyle=IfcCurveStyle;var IfcCurveStyleFont=class{constructor(expressID,type,Name,PatternList){this.expressID=expressID;this.type=type;this.Name=Name;this.PatternList=PatternList;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let PatternList=tape[ptr++];return new IfcCurveStyleFont(expressID,type,Name,PatternList);}ToTape(){let args=[];args.push(this.Name);;args.push(this.PatternList);;return args;}};exports.IfcCurveStyleFont=IfcCurveStyleFont;var IfcCurveStyleFontAndScaling=class{constructor(expressID,type,Name,CurveFont,CurveFontScaling){this.expressID=expressID;this.type=type;this.Name=Name;this.CurveFont=CurveFont;this.CurveFontScaling=CurveFontScaling;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let CurveFont=tape[ptr++];let CurveFontScaling=tape[ptr++];return new IfcCurveStyleFontAndScaling(expressID,type,Name,CurveFont,CurveFontScaling);}ToTape(){let args=[];args.push(this.Name);;args.push(this.CurveFont);;args.push(this.CurveFontScaling);;return args;}};exports.IfcCurveStyleFontAndScaling=IfcCurveStyleFontAndScaling;var IfcCurveStyleFontPattern=class{constructor(expressID,type,VisibleSegmentLength,InvisibleSegmentLength){this.expressID=expressID;this.type=type;this.VisibleSegmentLength=VisibleSegmentLength;this.InvisibleSegmentLength=InvisibleSegmentLength;}static FromTape(expressID,type,tape){let ptr=0;let VisibleSegmentLength=tape[ptr++];let InvisibleSegmentLength=tape[ptr++];return new IfcCurveStyleFontPattern(expressID,type,VisibleSegmentLength,InvisibleSegmentLength);}ToTape(){let args=[];args.push(this.VisibleSegmentLength);;args.push(this.InvisibleSegmentLength);;return args;}};exports.IfcCurveStyleFontPattern=IfcCurveStyleFontPattern;var IfcCylindricalSurface=class{constructor(expressID,type,Position,Radius){this.expressID=expressID;this.type=type;this.Position=Position;this.Radius=Radius;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let Radius=tape[ptr++];return new IfcCylindricalSurface(expressID,type,Position,Radius);}ToTape(){let args=[];args.push(this.Position);;args.push(this.Radius);;return args;}};exports.IfcCylindricalSurface=IfcCylindricalSurface;var IfcDamper=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDamper(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcDamper=IfcDamper;var IfcDamperType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDamperType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcDamperType=IfcDamperType;var IfcDeepFoundation=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcDeepFoundation(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcDeepFoundation=IfcDeepFoundation;var IfcDeepFoundationType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcDeepFoundationType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcDeepFoundationType=IfcDeepFoundationType;var IfcDerivedProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,ParentProfile,Operator,Label){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.ParentProfile=ParentProfile;this.Operator=Operator;this.Label=Label;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let ParentProfile=tape[ptr++];let Operator=tape[ptr++];let Label=tape[ptr++];return new IfcDerivedProfileDef(expressID,type,ProfileType,ProfileName,ParentProfile,Operator,Label);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.ParentProfile);;args.push(this.Operator);;args.push(this.Label);;return args;}};exports.IfcDerivedProfileDef=IfcDerivedProfileDef;var IfcDerivedUnit=class{constructor(expressID,type,Elements,UnitType,UserDefinedType){this.expressID=expressID;this.type=type;this.Elements=Elements;this.UnitType=UnitType;this.UserDefinedType=UserDefinedType;}static FromTape(expressID,type,tape){let ptr=0;let Elements=tape[ptr++];let UnitType=tape[ptr++];let UserDefinedType=tape[ptr++];return new IfcDerivedUnit(expressID,type,Elements,UnitType,UserDefinedType);}ToTape(){let args=[];args.push(this.Elements);;args.push(this.UnitType);;args.push(this.UserDefinedType);;return args;}};exports.IfcDerivedUnit=IfcDerivedUnit;var IfcDerivedUnitElement=class{constructor(expressID,type,Unit,Exponent){this.expressID=expressID;this.type=type;this.Unit=Unit;this.Exponent=Exponent;}static FromTape(expressID,type,tape){let ptr=0;let Unit=tape[ptr++];let Exponent=tape[ptr++];return new IfcDerivedUnitElement(expressID,type,Unit,Exponent);}ToTape(){let args=[];args.push(this.Unit);;args.push(this.Exponent);;return args;}};exports.IfcDerivedUnitElement=IfcDerivedUnitElement;var IfcDimensionalExponents=class{constructor(expressID,type,LengthExponent,MassExponent,TimeExponent,ElectricCurrentExponent,ThermodynamicTemperatureExponent,AmountOfSubstanceExponent,LuminousIntensityExponent){this.expressID=expressID;this.type=type;this.LengthExponent=LengthExponent;this.MassExponent=MassExponent;this.TimeExponent=TimeExponent;this.ElectricCurrentExponent=ElectricCurrentExponent;this.ThermodynamicTemperatureExponent=ThermodynamicTemperatureExponent;this.AmountOfSubstanceExponent=AmountOfSubstanceExponent;this.LuminousIntensityExponent=LuminousIntensityExponent;}static FromTape(expressID,type,tape){let ptr=0;let LengthExponent=tape[ptr++];let MassExponent=tape[ptr++];let TimeExponent=tape[ptr++];let ElectricCurrentExponent=tape[ptr++];let ThermodynamicTemperatureExponent=tape[ptr++];let AmountOfSubstanceExponent=tape[ptr++];let LuminousIntensityExponent=tape[ptr++];return new IfcDimensionalExponents(expressID,type,LengthExponent,MassExponent,TimeExponent,ElectricCurrentExponent,ThermodynamicTemperatureExponent,AmountOfSubstanceExponent,LuminousIntensityExponent);}ToTape(){let args=[];args.push(this.LengthExponent);;args.push(this.MassExponent);;args.push(this.TimeExponent);;args.push(this.ElectricCurrentExponent);;args.push(this.ThermodynamicTemperatureExponent);;args.push(this.AmountOfSubstanceExponent);;args.push(this.LuminousIntensityExponent);;return args;}};exports.IfcDimensionalExponents=IfcDimensionalExponents;var IfcDirection=class{constructor(expressID,type,DirectionRatios){this.expressID=expressID;this.type=type;this.DirectionRatios=DirectionRatios;}static FromTape(expressID,type,tape){let ptr=0;let DirectionRatios=tape[ptr++];return new IfcDirection(expressID,type,DirectionRatios);}ToTape(){let args=[];args.push(this.DirectionRatios);;return args;}};exports.IfcDirection=IfcDirection;var IfcDiscreteAccessory=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDiscreteAccessory(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcDiscreteAccessory=IfcDiscreteAccessory;var IfcDiscreteAccessoryType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDiscreteAccessoryType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcDiscreteAccessoryType=IfcDiscreteAccessoryType;var IfcDistanceExpression=class{constructor(expressID,type,DistanceAlong,OffsetLateral,OffsetVertical,OffsetLongitudinal,AlongHorizontal){this.expressID=expressID;this.type=type;this.DistanceAlong=DistanceAlong;this.OffsetLateral=OffsetLateral;this.OffsetVertical=OffsetVertical;this.OffsetLongitudinal=OffsetLongitudinal;this.AlongHorizontal=AlongHorizontal;}static FromTape(expressID,type,tape){let ptr=0;let DistanceAlong=tape[ptr++];let OffsetLateral=tape[ptr++];let OffsetVertical=tape[ptr++];let OffsetLongitudinal=tape[ptr++];let AlongHorizontal=tape[ptr++];return new IfcDistanceExpression(expressID,type,DistanceAlong,OffsetLateral,OffsetVertical,OffsetLongitudinal,AlongHorizontal);}ToTape(){let args=[];args.push(this.DistanceAlong);;args.push(this.OffsetLateral);;args.push(this.OffsetVertical);;args.push(this.OffsetLongitudinal);;args.push(this.AlongHorizontal);;return args;}};exports.IfcDistanceExpression=IfcDistanceExpression;var IfcDistributionChamberElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDistributionChamberElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcDistributionChamberElement=IfcDistributionChamberElement;var IfcDistributionChamberElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDistributionChamberElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcDistributionChamberElementType=IfcDistributionChamberElementType;var IfcDistributionCircuit=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.LongName=LongName;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let LongName=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDistributionCircuit(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.LongName);;args.push(this.PredefinedType);;return args;}};exports.IfcDistributionCircuit=IfcDistributionCircuit;var IfcDistributionControlElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcDistributionControlElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcDistributionControlElement=IfcDistributionControlElement;var IfcDistributionControlElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcDistributionControlElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcDistributionControlElementType=IfcDistributionControlElementType;var IfcDistributionElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcDistributionElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcDistributionElement=IfcDistributionElement;var IfcDistributionElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcDistributionElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcDistributionElementType=IfcDistributionElementType;var IfcDistributionFlowElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcDistributionFlowElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcDistributionFlowElement=IfcDistributionFlowElement;var IfcDistributionFlowElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcDistributionFlowElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcDistributionFlowElementType=IfcDistributionFlowElementType;var IfcDistributionPort=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,FlowDirection,PredefinedType,SystemType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.FlowDirection=FlowDirection;this.PredefinedType=PredefinedType;this.SystemType=SystemType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let FlowDirection=tape[ptr++];let PredefinedType=tape[ptr++];let SystemType=tape[ptr++];return new IfcDistributionPort(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,FlowDirection,PredefinedType,SystemType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.FlowDirection);;args.push(this.PredefinedType);;args.push(this.SystemType);;return args;}};exports.IfcDistributionPort=IfcDistributionPort;var IfcDistributionSystem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.LongName=LongName;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let LongName=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDistributionSystem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.LongName);;args.push(this.PredefinedType);;return args;}};exports.IfcDistributionSystem=IfcDistributionSystem;var IfcDocumentInformation=class{constructor(expressID,type,Identification,Name,Description,Location,Purpose,IntendedUse,Scope,Revision,DocumentOwner,Editors,CreationTime,LastRevisionTime,ElectronicFormat,ValidFrom,ValidUntil,Confidentiality,Status){this.expressID=expressID;this.type=type;this.Identification=Identification;this.Name=Name;this.Description=Description;this.Location=Location;this.Purpose=Purpose;this.IntendedUse=IntendedUse;this.Scope=Scope;this.Revision=Revision;this.DocumentOwner=DocumentOwner;this.Editors=Editors;this.CreationTime=CreationTime;this.LastRevisionTime=LastRevisionTime;this.ElectronicFormat=ElectronicFormat;this.ValidFrom=ValidFrom;this.ValidUntil=ValidUntil;this.Confidentiality=Confidentiality;this.Status=Status;}static FromTape(expressID,type,tape){let ptr=0;let Identification=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let Location=tape[ptr++];let Purpose=tape[ptr++];let IntendedUse=tape[ptr++];let Scope=tape[ptr++];let Revision=tape[ptr++];let DocumentOwner=tape[ptr++];let Editors=tape[ptr++];let CreationTime=tape[ptr++];let LastRevisionTime=tape[ptr++];let ElectronicFormat=tape[ptr++];let ValidFrom=tape[ptr++];let ValidUntil=tape[ptr++];let Confidentiality=tape[ptr++];let Status=tape[ptr++];return new IfcDocumentInformation(expressID,type,Identification,Name,Description,Location,Purpose,IntendedUse,Scope,Revision,DocumentOwner,Editors,CreationTime,LastRevisionTime,ElectronicFormat,ValidFrom,ValidUntil,Confidentiality,Status);}ToTape(){let args=[];args.push(this.Identification);;args.push(this.Name);;args.push(this.Description);;args.push(this.Location);;args.push(this.Purpose);;args.push(this.IntendedUse);;args.push(this.Scope);;args.push(this.Revision);;args.push(this.DocumentOwner);;args.push(this.Editors);;args.push(this.CreationTime);;args.push(this.LastRevisionTime);;args.push(this.ElectronicFormat);;args.push(this.ValidFrom);;args.push(this.ValidUntil);;args.push(this.Confidentiality);;args.push(this.Status);;return args;}};exports.IfcDocumentInformation=IfcDocumentInformation;var IfcDocumentInformationRelationship=class{constructor(expressID,type,Name,Description,RelatingDocument,RelatedDocuments,RelationshipType){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.RelatingDocument=RelatingDocument;this.RelatedDocuments=RelatedDocuments;this.RelationshipType=RelationshipType;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let RelatingDocument=tape[ptr++];let RelatedDocuments=tape[ptr++];let RelationshipType=tape[ptr++];return new IfcDocumentInformationRelationship(expressID,type,Name,Description,RelatingDocument,RelatedDocuments,RelationshipType);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingDocument);;args.push(this.RelatedDocuments);;args.push(this.RelationshipType);;return args;}};exports.IfcDocumentInformationRelationship=IfcDocumentInformationRelationship;var IfcDocumentReference=class{constructor(expressID,type,Location,Identification,Name,Description,ReferencedDocument){this.expressID=expressID;this.type=type;this.Location=Location;this.Identification=Identification;this.Name=Name;this.Description=Description;this.ReferencedDocument=ReferencedDocument;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Identification=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ReferencedDocument=tape[ptr++];return new IfcDocumentReference(expressID,type,Location,Identification,Name,Description,ReferencedDocument);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Identification);;args.push(this.Name);;args.push(this.Description);;args.push(this.ReferencedDocument);;return args;}};exports.IfcDocumentReference=IfcDocumentReference;var IfcDoor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,OperationType,UserDefinedOperationType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.OverallHeight=OverallHeight;this.OverallWidth=OverallWidth;this.PredefinedType=PredefinedType;this.OperationType=OperationType;this.UserDefinedOperationType=UserDefinedOperationType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let OverallHeight=tape[ptr++];let OverallWidth=tape[ptr++];let PredefinedType=tape[ptr++];let OperationType=tape[ptr++];let UserDefinedOperationType=tape[ptr++];return new IfcDoor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,OperationType,UserDefinedOperationType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.OverallHeight);;args.push(this.OverallWidth);;args.push(this.PredefinedType);;args.push(this.OperationType);;args.push(this.UserDefinedOperationType);;return args;}};exports.IfcDoor=IfcDoor;var IfcDoorLiningProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,LiningDepth,LiningThickness,ThresholdDepth,ThresholdThickness,TransomThickness,TransomOffset,LiningOffset,ThresholdOffset,CasingThickness,CasingDepth,ShapeAspectStyle,LiningToPanelOffsetX,LiningToPanelOffsetY){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.LiningDepth=LiningDepth;this.LiningThickness=LiningThickness;this.ThresholdDepth=ThresholdDepth;this.ThresholdThickness=ThresholdThickness;this.TransomThickness=TransomThickness;this.TransomOffset=TransomOffset;this.LiningOffset=LiningOffset;this.ThresholdOffset=ThresholdOffset;this.CasingThickness=CasingThickness;this.CasingDepth=CasingDepth;this.ShapeAspectStyle=ShapeAspectStyle;this.LiningToPanelOffsetX=LiningToPanelOffsetX;this.LiningToPanelOffsetY=LiningToPanelOffsetY;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let LiningDepth=tape[ptr++];let LiningThickness=tape[ptr++];let ThresholdDepth=tape[ptr++];let ThresholdThickness=tape[ptr++];let TransomThickness=tape[ptr++];let TransomOffset=tape[ptr++];let LiningOffset=tape[ptr++];let ThresholdOffset=tape[ptr++];let CasingThickness=tape[ptr++];let CasingDepth=tape[ptr++];let ShapeAspectStyle=tape[ptr++];let LiningToPanelOffsetX=tape[ptr++];let LiningToPanelOffsetY=tape[ptr++];return new IfcDoorLiningProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,LiningDepth,LiningThickness,ThresholdDepth,ThresholdThickness,TransomThickness,TransomOffset,LiningOffset,ThresholdOffset,CasingThickness,CasingDepth,ShapeAspectStyle,LiningToPanelOffsetX,LiningToPanelOffsetY);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.LiningDepth);;args.push(this.LiningThickness);;args.push(this.ThresholdDepth);;args.push(this.ThresholdThickness);;args.push(this.TransomThickness);;args.push(this.TransomOffset);;args.push(this.LiningOffset);;args.push(this.ThresholdOffset);;args.push(this.CasingThickness);;args.push(this.CasingDepth);;args.push(this.ShapeAspectStyle);;args.push(this.LiningToPanelOffsetX);;args.push(this.LiningToPanelOffsetY);;return args;}};exports.IfcDoorLiningProperties=IfcDoorLiningProperties;var IfcDoorPanelProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,PanelDepth,PanelOperation,PanelWidth,PanelPosition,ShapeAspectStyle){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.PanelDepth=PanelDepth;this.PanelOperation=PanelOperation;this.PanelWidth=PanelWidth;this.PanelPosition=PanelPosition;this.ShapeAspectStyle=ShapeAspectStyle;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let PanelDepth=tape[ptr++];let PanelOperation=tape[ptr++];let PanelWidth=tape[ptr++];let PanelPosition=tape[ptr++];let ShapeAspectStyle=tape[ptr++];return new IfcDoorPanelProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,PanelDepth,PanelOperation,PanelWidth,PanelPosition,ShapeAspectStyle);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.PanelDepth);;args.push(this.PanelOperation);;args.push(this.PanelWidth);;args.push(this.PanelPosition);;args.push(this.ShapeAspectStyle);;return args;}};exports.IfcDoorPanelProperties=IfcDoorPanelProperties;var IfcDoorStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,OperationType,UserDefinedOperationType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.OverallHeight=OverallHeight;this.OverallWidth=OverallWidth;this.PredefinedType=PredefinedType;this.OperationType=OperationType;this.UserDefinedOperationType=UserDefinedOperationType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let OverallHeight=tape[ptr++];let OverallWidth=tape[ptr++];let PredefinedType=tape[ptr++];let OperationType=tape[ptr++];let UserDefinedOperationType=tape[ptr++];return new IfcDoorStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,OperationType,UserDefinedOperationType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.OverallHeight);;args.push(this.OverallWidth);;args.push(this.PredefinedType);;args.push(this.OperationType);;args.push(this.UserDefinedOperationType);;return args;}};exports.IfcDoorStandardCase=IfcDoorStandardCase;var IfcDoorStyle=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,OperationType,ConstructionType,ParameterTakesPrecedence,Sizeable){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.OperationType=OperationType;this.ConstructionType=ConstructionType;this.ParameterTakesPrecedence=ParameterTakesPrecedence;this.Sizeable=Sizeable;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let OperationType=tape[ptr++];let ConstructionType=tape[ptr++];let ParameterTakesPrecedence=tape[ptr++];let Sizeable=tape[ptr++];return new IfcDoorStyle(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,OperationType,ConstructionType,ParameterTakesPrecedence,Sizeable);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.OperationType);;args.push(this.ConstructionType);;args.push(this.ParameterTakesPrecedence);;args.push(this.Sizeable);;return args;}};exports.IfcDoorStyle=IfcDoorStyle;var IfcDoorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,OperationType,ParameterTakesPrecedence,UserDefinedOperationType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;this.OperationType=OperationType;this.ParameterTakesPrecedence=ParameterTakesPrecedence;this.UserDefinedOperationType=UserDefinedOperationType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];let OperationType=tape[ptr++];let ParameterTakesPrecedence=tape[ptr++];let UserDefinedOperationType=tape[ptr++];return new IfcDoorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,OperationType,ParameterTakesPrecedence,UserDefinedOperationType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;args.push(this.OperationType);;args.push(this.ParameterTakesPrecedence);;args.push(this.UserDefinedOperationType);;return args;}};exports.IfcDoorType=IfcDoorType;var IfcDraughtingPreDefinedColour=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcDraughtingPreDefinedColour(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcDraughtingPreDefinedColour=IfcDraughtingPreDefinedColour;var IfcDraughtingPreDefinedCurveFont=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcDraughtingPreDefinedCurveFont(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcDraughtingPreDefinedCurveFont=IfcDraughtingPreDefinedCurveFont;var IfcDuctFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDuctFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcDuctFitting=IfcDuctFitting;var IfcDuctFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDuctFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcDuctFittingType=IfcDuctFittingType;var IfcDuctSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDuctSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcDuctSegment=IfcDuctSegment;var IfcDuctSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDuctSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcDuctSegmentType=IfcDuctSegmentType;var IfcDuctSilencer=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDuctSilencer(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcDuctSilencer=IfcDuctSilencer;var IfcDuctSilencerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcDuctSilencerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcDuctSilencerType=IfcDuctSilencerType;var IfcEdge=class{constructor(expressID,type,EdgeStart,EdgeEnd){this.expressID=expressID;this.type=type;this.EdgeStart=EdgeStart;this.EdgeEnd=EdgeEnd;}static FromTape(expressID,type,tape){let ptr=0;let EdgeStart=tape[ptr++];let EdgeEnd=tape[ptr++];return new IfcEdge(expressID,type,EdgeStart,EdgeEnd);}ToTape(){let args=[];args.push(this.EdgeStart);;args.push(this.EdgeEnd);;return args;}};exports.IfcEdge=IfcEdge;var IfcEdgeCurve=class{constructor(expressID,type,EdgeStart,EdgeEnd,EdgeGeometry,SameSense){this.expressID=expressID;this.type=type;this.EdgeStart=EdgeStart;this.EdgeEnd=EdgeEnd;this.EdgeGeometry=EdgeGeometry;this.SameSense=SameSense;}static FromTape(expressID,type,tape){let ptr=0;let EdgeStart=tape[ptr++];let EdgeEnd=tape[ptr++];let EdgeGeometry=tape[ptr++];let SameSense=tape[ptr++];return new IfcEdgeCurve(expressID,type,EdgeStart,EdgeEnd,EdgeGeometry,SameSense);}ToTape(){let args=[];args.push(this.EdgeStart);;args.push(this.EdgeEnd);;args.push(this.EdgeGeometry);;args.push(this.SameSense);;return args;}};exports.IfcEdgeCurve=IfcEdgeCurve;var IfcEdgeLoop=class{constructor(expressID,type,EdgeList){this.expressID=expressID;this.type=type;this.EdgeList=EdgeList;}static FromTape(expressID,type,tape){let ptr=0;let EdgeList=tape[ptr++];return new IfcEdgeLoop(expressID,type,EdgeList);}ToTape(){let args=[];args.push(this.EdgeList);;return args;}};exports.IfcEdgeLoop=IfcEdgeLoop;var IfcElectricAppliance=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricAppliance(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricAppliance=IfcElectricAppliance;var IfcElectricApplianceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricApplianceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricApplianceType=IfcElectricApplianceType;var IfcElectricDistributionBoard=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricDistributionBoard(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricDistributionBoard=IfcElectricDistributionBoard;var IfcElectricDistributionBoardType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricDistributionBoardType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricDistributionBoardType=IfcElectricDistributionBoardType;var IfcElectricFlowStorageDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricFlowStorageDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricFlowStorageDevice=IfcElectricFlowStorageDevice;var IfcElectricFlowStorageDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricFlowStorageDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricFlowStorageDeviceType=IfcElectricFlowStorageDeviceType;var IfcElectricGenerator=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricGenerator(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricGenerator=IfcElectricGenerator;var IfcElectricGeneratorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricGeneratorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricGeneratorType=IfcElectricGeneratorType;var IfcElectricMotor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricMotor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricMotor=IfcElectricMotor;var IfcElectricMotorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricMotorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricMotorType=IfcElectricMotorType;var IfcElectricTimeControl=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricTimeControl(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricTimeControl=IfcElectricTimeControl;var IfcElectricTimeControlType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElectricTimeControlType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcElectricTimeControlType=IfcElectricTimeControlType;var IfcElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcElement=IfcElement;var IfcElementAssembly=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,AssemblyPlace,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.AssemblyPlace=AssemblyPlace;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let AssemblyPlace=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElementAssembly(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,AssemblyPlace,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.AssemblyPlace);;args.push(this.PredefinedType);;return args;}};exports.IfcElementAssembly=IfcElementAssembly;var IfcElementAssemblyType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcElementAssemblyType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcElementAssemblyType=IfcElementAssemblyType;var IfcElementComponent=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcElementComponent(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcElementComponent=IfcElementComponent;var IfcElementComponentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcElementComponentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcElementComponentType=IfcElementComponentType;var IfcElementQuantity=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,MethodOfMeasurement,Quantities){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.MethodOfMeasurement=MethodOfMeasurement;this.Quantities=Quantities;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let MethodOfMeasurement=tape[ptr++];let Quantities=tape[ptr++];return new IfcElementQuantity(expressID,type,GlobalId,OwnerHistory,Name,Description,MethodOfMeasurement,Quantities);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.MethodOfMeasurement);;args.push(this.Quantities);;return args;}};exports.IfcElementQuantity=IfcElementQuantity;var IfcElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcElementType=IfcElementType;var IfcElementarySurface=class{constructor(expressID,type,Position){this.expressID=expressID;this.type=type;this.Position=Position;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];return new IfcElementarySurface(expressID,type,Position);}ToTape(){let args=[];args.push(this.Position);;return args;}};exports.IfcElementarySurface=IfcElementarySurface;var IfcEllipse=class{constructor(expressID,type,Position,SemiAxis1,SemiAxis2){this.expressID=expressID;this.type=type;this.Position=Position;this.SemiAxis1=SemiAxis1;this.SemiAxis2=SemiAxis2;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let SemiAxis1=tape[ptr++];let SemiAxis2=tape[ptr++];return new IfcEllipse(expressID,type,Position,SemiAxis1,SemiAxis2);}ToTape(){let args=[];args.push(this.Position);;args.push(this.SemiAxis1);;args.push(this.SemiAxis2);;return args;}};exports.IfcEllipse=IfcEllipse;var IfcEllipseProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,SemiAxis1,SemiAxis2){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.SemiAxis1=SemiAxis1;this.SemiAxis2=SemiAxis2;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let SemiAxis1=tape[ptr++];let SemiAxis2=tape[ptr++];return new IfcEllipseProfileDef(expressID,type,ProfileType,ProfileName,Position,SemiAxis1,SemiAxis2);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.SemiAxis1);;args.push(this.SemiAxis2);;return args;}};exports.IfcEllipseProfileDef=IfcEllipseProfileDef;var IfcEnergyConversionDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcEnergyConversionDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcEnergyConversionDevice=IfcEnergyConversionDevice;var IfcEnergyConversionDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcEnergyConversionDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcEnergyConversionDeviceType=IfcEnergyConversionDeviceType;var IfcEngine=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcEngine(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcEngine=IfcEngine;var IfcEngineType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcEngineType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcEngineType=IfcEngineType;var IfcEvaporativeCooler=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcEvaporativeCooler(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcEvaporativeCooler=IfcEvaporativeCooler;var IfcEvaporativeCoolerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcEvaporativeCoolerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcEvaporativeCoolerType=IfcEvaporativeCoolerType;var IfcEvaporator=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcEvaporator(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcEvaporator=IfcEvaporator;var IfcEvaporatorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcEvaporatorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcEvaporatorType=IfcEvaporatorType;var IfcEvent=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,PredefinedType,EventTriggerType,UserDefinedEventTriggerType,EventOccurenceTime){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.PredefinedType=PredefinedType;this.EventTriggerType=EventTriggerType;this.UserDefinedEventTriggerType=UserDefinedEventTriggerType;this.EventOccurenceTime=EventOccurenceTime;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let PredefinedType=tape[ptr++];let EventTriggerType=tape[ptr++];let UserDefinedEventTriggerType=tape[ptr++];let EventOccurenceTime=tape[ptr++];return new IfcEvent(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,PredefinedType,EventTriggerType,UserDefinedEventTriggerType,EventOccurenceTime);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.PredefinedType);;args.push(this.EventTriggerType);;args.push(this.UserDefinedEventTriggerType);;args.push(this.EventOccurenceTime);;return args;}};exports.IfcEvent=IfcEvent;var IfcEventTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,ActualDate,EarlyDate,LateDate,ScheduleDate){this.expressID=expressID;this.type=type;this.Name=Name;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.ActualDate=ActualDate;this.EarlyDate=EarlyDate;this.LateDate=LateDate;this.ScheduleDate=ScheduleDate;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let ActualDate=tape[ptr++];let EarlyDate=tape[ptr++];let LateDate=tape[ptr++];let ScheduleDate=tape[ptr++];return new IfcEventTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,ActualDate,EarlyDate,LateDate,ScheduleDate);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.ActualDate);;args.push(this.EarlyDate);;args.push(this.LateDate);;args.push(this.ScheduleDate);;return args;}};exports.IfcEventTime=IfcEventTime;var IfcEventType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType,EventTriggerType,UserDefinedEventTriggerType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ProcessType=ProcessType;this.PredefinedType=PredefinedType;this.EventTriggerType=EventTriggerType;this.UserDefinedEventTriggerType=UserDefinedEventTriggerType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ProcessType=tape[ptr++];let PredefinedType=tape[ptr++];let EventTriggerType=tape[ptr++];let UserDefinedEventTriggerType=tape[ptr++];return new IfcEventType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType,EventTriggerType,UserDefinedEventTriggerType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ProcessType);;args.push(this.PredefinedType);;args.push(this.EventTriggerType);;args.push(this.UserDefinedEventTriggerType);;return args;}};exports.IfcEventType=IfcEventType;var IfcExtendedProperties=class{constructor(expressID,type,Name,Description,Properties){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Properties=Properties;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Properties=tape[ptr++];return new IfcExtendedProperties(expressID,type,Name,Description,Properties);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Properties);;return args;}};exports.IfcExtendedProperties=IfcExtendedProperties;var IfcExternalInformation=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcExternalInformation(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcExternalInformation=IfcExternalInformation;var IfcExternalReference=class{constructor(expressID,type,Location,Identification,Name){this.expressID=expressID;this.type=type;this.Location=Location;this.Identification=Identification;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Identification=tape[ptr++];let Name=tape[ptr++];return new IfcExternalReference(expressID,type,Location,Identification,Name);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Identification);;args.push(this.Name);;return args;}};exports.IfcExternalReference=IfcExternalReference;var IfcExternalReferenceRelationship=class{constructor(expressID,type,Name,Description,RelatingReference,RelatedResourceObjects){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.RelatingReference=RelatingReference;this.RelatedResourceObjects=RelatedResourceObjects;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let RelatingReference=tape[ptr++];let RelatedResourceObjects=tape[ptr++];return new IfcExternalReferenceRelationship(expressID,type,Name,Description,RelatingReference,RelatedResourceObjects);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingReference);;args.push(this.RelatedResourceObjects);;return args;}};exports.IfcExternalReferenceRelationship=IfcExternalReferenceRelationship;var IfcExternalSpatialElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcExternalSpatialElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.PredefinedType);;return args;}};exports.IfcExternalSpatialElement=IfcExternalSpatialElement;var IfcExternalSpatialStructureElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];return new IfcExternalSpatialStructureElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;return args;}};exports.IfcExternalSpatialStructureElement=IfcExternalSpatialStructureElement;var IfcExternallyDefinedHatchStyle=class{constructor(expressID,type,Location,Identification,Name){this.expressID=expressID;this.type=type;this.Location=Location;this.Identification=Identification;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Identification=tape[ptr++];let Name=tape[ptr++];return new IfcExternallyDefinedHatchStyle(expressID,type,Location,Identification,Name);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Identification);;args.push(this.Name);;return args;}};exports.IfcExternallyDefinedHatchStyle=IfcExternallyDefinedHatchStyle;var IfcExternallyDefinedSurfaceStyle=class{constructor(expressID,type,Location,Identification,Name){this.expressID=expressID;this.type=type;this.Location=Location;this.Identification=Identification;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Identification=tape[ptr++];let Name=tape[ptr++];return new IfcExternallyDefinedSurfaceStyle(expressID,type,Location,Identification,Name);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Identification);;args.push(this.Name);;return args;}};exports.IfcExternallyDefinedSurfaceStyle=IfcExternallyDefinedSurfaceStyle;var IfcExternallyDefinedTextFont=class{constructor(expressID,type,Location,Identification,Name){this.expressID=expressID;this.type=type;this.Location=Location;this.Identification=Identification;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Identification=tape[ptr++];let Name=tape[ptr++];return new IfcExternallyDefinedTextFont(expressID,type,Location,Identification,Name);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Identification);;args.push(this.Name);;return args;}};exports.IfcExternallyDefinedTextFont=IfcExternallyDefinedTextFont;var IfcExtrudedAreaSolid=class{constructor(expressID,type,SweptArea,Position,ExtrudedDirection,Depth){this.expressID=expressID;this.type=type;this.SweptArea=SweptArea;this.Position=Position;this.ExtrudedDirection=ExtrudedDirection;this.Depth=Depth;}static FromTape(expressID,type,tape){let ptr=0;let SweptArea=tape[ptr++];let Position=tape[ptr++];let ExtrudedDirection=tape[ptr++];let Depth=tape[ptr++];return new IfcExtrudedAreaSolid(expressID,type,SweptArea,Position,ExtrudedDirection,Depth);}ToTape(){let args=[];args.push(this.SweptArea);;args.push(this.Position);;args.push(this.ExtrudedDirection);;args.push(this.Depth);;return args;}};exports.IfcExtrudedAreaSolid=IfcExtrudedAreaSolid;var IfcExtrudedAreaSolidTapered=class{constructor(expressID,type,SweptArea,Position,ExtrudedDirection,Depth,EndSweptArea){this.expressID=expressID;this.type=type;this.SweptArea=SweptArea;this.Position=Position;this.ExtrudedDirection=ExtrudedDirection;this.Depth=Depth;this.EndSweptArea=EndSweptArea;}static FromTape(expressID,type,tape){let ptr=0;let SweptArea=tape[ptr++];let Position=tape[ptr++];let ExtrudedDirection=tape[ptr++];let Depth=tape[ptr++];let EndSweptArea=tape[ptr++];return new IfcExtrudedAreaSolidTapered(expressID,type,SweptArea,Position,ExtrudedDirection,Depth,EndSweptArea);}ToTape(){let args=[];args.push(this.SweptArea);;args.push(this.Position);;args.push(this.ExtrudedDirection);;args.push(this.Depth);;args.push(this.EndSweptArea);;return args;}};exports.IfcExtrudedAreaSolidTapered=IfcExtrudedAreaSolidTapered;var IfcFace=class{constructor(expressID,type,Bounds){this.expressID=expressID;this.type=type;this.Bounds=Bounds;}static FromTape(expressID,type,tape){let ptr=0;let Bounds=tape[ptr++];return new IfcFace(expressID,type,Bounds);}ToTape(){let args=[];args.push(this.Bounds);;return args;}};exports.IfcFace=IfcFace;var IfcFaceBasedSurfaceModel=class{constructor(expressID,type,FbsmFaces){this.expressID=expressID;this.type=type;this.FbsmFaces=FbsmFaces;}static FromTape(expressID,type,tape){let ptr=0;let FbsmFaces=tape[ptr++];return new IfcFaceBasedSurfaceModel(expressID,type,FbsmFaces);}ToTape(){let args=[];args.push(this.FbsmFaces);;return args;}};exports.IfcFaceBasedSurfaceModel=IfcFaceBasedSurfaceModel;var IfcFaceBound=class{constructor(expressID,type,Bound,Orientation){this.expressID=expressID;this.type=type;this.Bound=Bound;this.Orientation=Orientation;}static FromTape(expressID,type,tape){let ptr=0;let Bound=tape[ptr++];let Orientation=tape[ptr++];return new IfcFaceBound(expressID,type,Bound,Orientation);}ToTape(){let args=[];args.push(this.Bound);;args.push(this.Orientation);;return args;}};exports.IfcFaceBound=IfcFaceBound;var IfcFaceOuterBound=class{constructor(expressID,type,Bound,Orientation){this.expressID=expressID;this.type=type;this.Bound=Bound;this.Orientation=Orientation;}static FromTape(expressID,type,tape){let ptr=0;let Bound=tape[ptr++];let Orientation=tape[ptr++];return new IfcFaceOuterBound(expressID,type,Bound,Orientation);}ToTape(){let args=[];args.push(this.Bound);;args.push(this.Orientation);;return args;}};exports.IfcFaceOuterBound=IfcFaceOuterBound;var IfcFaceSurface=class{constructor(expressID,type,Bounds,FaceSurface,SameSense){this.expressID=expressID;this.type=type;this.Bounds=Bounds;this.FaceSurface=FaceSurface;this.SameSense=SameSense;}static FromTape(expressID,type,tape){let ptr=0;let Bounds=tape[ptr++];let FaceSurface=tape[ptr++];let SameSense=tape[ptr++];return new IfcFaceSurface(expressID,type,Bounds,FaceSurface,SameSense);}ToTape(){let args=[];args.push(this.Bounds);;args.push(this.FaceSurface);;args.push(this.SameSense);;return args;}};exports.IfcFaceSurface=IfcFaceSurface;var IfcFacetedBrep=class{constructor(expressID,type,Outer){this.expressID=expressID;this.type=type;this.Outer=Outer;}static FromTape(expressID,type,tape){let ptr=0;let Outer=tape[ptr++];return new IfcFacetedBrep(expressID,type,Outer);}ToTape(){let args=[];args.push(this.Outer);;return args;}};exports.IfcFacetedBrep=IfcFacetedBrep;var IfcFacetedBrepWithVoids=class{constructor(expressID,type,Outer,Voids){this.expressID=expressID;this.type=type;this.Outer=Outer;this.Voids=Voids;}static FromTape(expressID,type,tape){let ptr=0;let Outer=tape[ptr++];let Voids=tape[ptr++];return new IfcFacetedBrepWithVoids(expressID,type,Outer,Voids);}ToTape(){let args=[];args.push(this.Outer);;args.push(this.Voids);;return args;}};exports.IfcFacetedBrepWithVoids=IfcFacetedBrepWithVoids;var IfcFacility=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];return new IfcFacility(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;return args;}};exports.IfcFacility=IfcFacility;var IfcFacilityPart=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];return new IfcFacilityPart(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;return args;}};exports.IfcFacilityPart=IfcFacilityPart;var IfcFailureConnectionCondition=class{constructor(expressID,type,Name,TensionFailureX,TensionFailureY,TensionFailureZ,CompressionFailureX,CompressionFailureY,CompressionFailureZ){this.expressID=expressID;this.type=type;this.Name=Name;this.TensionFailureX=TensionFailureX;this.TensionFailureY=TensionFailureY;this.TensionFailureZ=TensionFailureZ;this.CompressionFailureX=CompressionFailureX;this.CompressionFailureY=CompressionFailureY;this.CompressionFailureZ=CompressionFailureZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let TensionFailureX=tape[ptr++];let TensionFailureY=tape[ptr++];let TensionFailureZ=tape[ptr++];let CompressionFailureX=tape[ptr++];let CompressionFailureY=tape[ptr++];let CompressionFailureZ=tape[ptr++];return new IfcFailureConnectionCondition(expressID,type,Name,TensionFailureX,TensionFailureY,TensionFailureZ,CompressionFailureX,CompressionFailureY,CompressionFailureZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.TensionFailureX);;args.push(this.TensionFailureY);;args.push(this.TensionFailureZ);;args.push(this.CompressionFailureX);;args.push(this.CompressionFailureY);;args.push(this.CompressionFailureZ);;return args;}};exports.IfcFailureConnectionCondition=IfcFailureConnectionCondition;var IfcFan=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFan(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcFan=IfcFan;var IfcFanType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFanType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcFanType=IfcFanType;var IfcFastener=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFastener(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcFastener=IfcFastener;var IfcFastenerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFastenerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcFastenerType=IfcFastenerType;var IfcFeatureElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFeatureElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFeatureElement=IfcFeatureElement;var IfcFeatureElementAddition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFeatureElementAddition(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFeatureElementAddition=IfcFeatureElementAddition;var IfcFeatureElementSubtraction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFeatureElementSubtraction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFeatureElementSubtraction=IfcFeatureElementSubtraction;var IfcFillAreaStyle=class{constructor(expressID,type,Name,FillStyles,ModelorDraughting){this.expressID=expressID;this.type=type;this.Name=Name;this.FillStyles=FillStyles;this.ModelorDraughting=ModelorDraughting;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let FillStyles=tape[ptr++];let ModelorDraughting=tape[ptr++];return new IfcFillAreaStyle(expressID,type,Name,FillStyles,ModelorDraughting);}ToTape(){let args=[];args.push(this.Name);;args.push(this.FillStyles);;args.push(this.ModelorDraughting);;return args;}};exports.IfcFillAreaStyle=IfcFillAreaStyle;var IfcFillAreaStyleHatching=class{constructor(expressID,type,HatchLineAppearance,StartOfNextHatchLine,PointOfReferenceHatchLine,PatternStart,HatchLineAngle){this.expressID=expressID;this.type=type;this.HatchLineAppearance=HatchLineAppearance;this.StartOfNextHatchLine=StartOfNextHatchLine;this.PointOfReferenceHatchLine=PointOfReferenceHatchLine;this.PatternStart=PatternStart;this.HatchLineAngle=HatchLineAngle;}static FromTape(expressID,type,tape){let ptr=0;let HatchLineAppearance=tape[ptr++];let StartOfNextHatchLine=tape[ptr++];let PointOfReferenceHatchLine=tape[ptr++];let PatternStart=tape[ptr++];let HatchLineAngle=tape[ptr++];return new IfcFillAreaStyleHatching(expressID,type,HatchLineAppearance,StartOfNextHatchLine,PointOfReferenceHatchLine,PatternStart,HatchLineAngle);}ToTape(){let args=[];args.push(this.HatchLineAppearance);;args.push(this.StartOfNextHatchLine);;args.push(this.PointOfReferenceHatchLine);;args.push(this.PatternStart);;args.push(this.HatchLineAngle);;return args;}};exports.IfcFillAreaStyleHatching=IfcFillAreaStyleHatching;var IfcFillAreaStyleTiles=class{constructor(expressID,type,TilingPattern,Tiles,TilingScale){this.expressID=expressID;this.type=type;this.TilingPattern=TilingPattern;this.Tiles=Tiles;this.TilingScale=TilingScale;}static FromTape(expressID,type,tape){let ptr=0;let TilingPattern=tape[ptr++];let Tiles=tape[ptr++];let TilingScale=tape[ptr++];return new IfcFillAreaStyleTiles(expressID,type,TilingPattern,Tiles,TilingScale);}ToTape(){let args=[];args.push(this.TilingPattern);;args.push(this.Tiles);;args.push(this.TilingScale);;return args;}};exports.IfcFillAreaStyleTiles=IfcFillAreaStyleTiles;var IfcFilter=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFilter(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcFilter=IfcFilter;var IfcFilterType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFilterType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcFilterType=IfcFilterType;var IfcFireSuppressionTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFireSuppressionTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcFireSuppressionTerminal=IfcFireSuppressionTerminal;var IfcFireSuppressionTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFireSuppressionTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcFireSuppressionTerminalType=IfcFireSuppressionTerminalType;var IfcFixedReferenceSweptAreaSolid=class{constructor(expressID,type,SweptArea,Position,Directrix,StartParam,EndParam,FixedReference){this.expressID=expressID;this.type=type;this.SweptArea=SweptArea;this.Position=Position;this.Directrix=Directrix;this.StartParam=StartParam;this.EndParam=EndParam;this.FixedReference=FixedReference;}static FromTape(expressID,type,tape){let ptr=0;let SweptArea=tape[ptr++];let Position=tape[ptr++];let Directrix=tape[ptr++];let StartParam=tape[ptr++];let EndParam=tape[ptr++];let FixedReference=tape[ptr++];return new IfcFixedReferenceSweptAreaSolid(expressID,type,SweptArea,Position,Directrix,StartParam,EndParam,FixedReference);}ToTape(){let args=[];args.push(this.SweptArea);;args.push(this.Position);;args.push(this.Directrix);;args.push(this.StartParam);;args.push(this.EndParam);;args.push(this.FixedReference);;return args;}};exports.IfcFixedReferenceSweptAreaSolid=IfcFixedReferenceSweptAreaSolid;var IfcFlowController=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFlowController(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFlowController=IfcFlowController;var IfcFlowControllerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcFlowControllerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcFlowControllerType=IfcFlowControllerType;var IfcFlowFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFlowFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFlowFitting=IfcFlowFitting;var IfcFlowFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcFlowFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcFlowFittingType=IfcFlowFittingType;var IfcFlowInstrument=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFlowInstrument(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcFlowInstrument=IfcFlowInstrument;var IfcFlowInstrumentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFlowInstrumentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcFlowInstrumentType=IfcFlowInstrumentType;var IfcFlowMeter=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFlowMeter(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcFlowMeter=IfcFlowMeter;var IfcFlowMeterType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFlowMeterType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcFlowMeterType=IfcFlowMeterType;var IfcFlowMovingDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFlowMovingDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFlowMovingDevice=IfcFlowMovingDevice;var IfcFlowMovingDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcFlowMovingDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcFlowMovingDeviceType=IfcFlowMovingDeviceType;var IfcFlowSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFlowSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFlowSegment=IfcFlowSegment;var IfcFlowSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcFlowSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcFlowSegmentType=IfcFlowSegmentType;var IfcFlowStorageDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFlowStorageDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFlowStorageDevice=IfcFlowStorageDevice;var IfcFlowStorageDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcFlowStorageDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcFlowStorageDeviceType=IfcFlowStorageDeviceType;var IfcFlowTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFlowTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFlowTerminal=IfcFlowTerminal;var IfcFlowTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcFlowTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcFlowTerminalType=IfcFlowTerminalType;var IfcFlowTreatmentDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFlowTreatmentDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFlowTreatmentDevice=IfcFlowTreatmentDevice;var IfcFlowTreatmentDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcFlowTreatmentDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcFlowTreatmentDeviceType=IfcFlowTreatmentDeviceType;var IfcFooting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFooting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcFooting=IfcFooting;var IfcFootingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFootingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcFootingType=IfcFootingType;var IfcFurnishingElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcFurnishingElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcFurnishingElement=IfcFurnishingElement;var IfcFurnishingElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcFurnishingElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcFurnishingElementType=IfcFurnishingElementType;var IfcFurniture=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFurniture(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcFurniture=IfcFurniture;var IfcFurnitureType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,AssemblyPlace,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.AssemblyPlace=AssemblyPlace;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let AssemblyPlace=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcFurnitureType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,AssemblyPlace,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.AssemblyPlace);;args.push(this.PredefinedType);;return args;}};exports.IfcFurnitureType=IfcFurnitureType;var IfcGeographicElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcGeographicElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcGeographicElement=IfcGeographicElement;var IfcGeographicElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcGeographicElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcGeographicElementType=IfcGeographicElementType;var IfcGeometricCurveSet=class{constructor(expressID,type,Elements){this.expressID=expressID;this.type=type;this.Elements=Elements;}static FromTape(expressID,type,tape){let ptr=0;let Elements=tape[ptr++];return new IfcGeometricCurveSet(expressID,type,Elements);}ToTape(){let args=[];args.push(this.Elements);;return args;}};exports.IfcGeometricCurveSet=IfcGeometricCurveSet;var IfcGeometricRepresentationContext=class{constructor(expressID,type,ContextIdentifier,ContextType,CoordinateSpaceDimension,Precision,WorldCoordinateSystem,TrueNorth){this.expressID=expressID;this.type=type;this.ContextIdentifier=ContextIdentifier;this.ContextType=ContextType;this.CoordinateSpaceDimension=CoordinateSpaceDimension;this.Precision=Precision;this.WorldCoordinateSystem=WorldCoordinateSystem;this.TrueNorth=TrueNorth;}static FromTape(expressID,type,tape){let ptr=0;let ContextIdentifier=tape[ptr++];let ContextType=tape[ptr++];let CoordinateSpaceDimension=tape[ptr++];let Precision=tape[ptr++];let WorldCoordinateSystem=tape[ptr++];let TrueNorth=tape[ptr++];return new IfcGeometricRepresentationContext(expressID,type,ContextIdentifier,ContextType,CoordinateSpaceDimension,Precision,WorldCoordinateSystem,TrueNorth);}ToTape(){let args=[];args.push(this.ContextIdentifier);;args.push(this.ContextType);;args.push(this.CoordinateSpaceDimension);;args.push(this.Precision);;args.push(this.WorldCoordinateSystem);;args.push(this.TrueNorth);;return args;}};exports.IfcGeometricRepresentationContext=IfcGeometricRepresentationContext;var IfcGeometricRepresentationItem=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcGeometricRepresentationItem(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcGeometricRepresentationItem=IfcGeometricRepresentationItem;var IfcGeometricRepresentationSubContext=class{constructor(expressID,type,ContextIdentifier,ContextType,CoordinateSpaceDimension,Precision,WorldCoordinateSystem,TrueNorth,ParentContext,TargetScale,TargetView,UserDefinedTargetView){this.expressID=expressID;this.type=type;this.ContextIdentifier=ContextIdentifier;this.ContextType=ContextType;this.CoordinateSpaceDimension=CoordinateSpaceDimension;this.Precision=Precision;this.WorldCoordinateSystem=WorldCoordinateSystem;this.TrueNorth=TrueNorth;this.ParentContext=ParentContext;this.TargetScale=TargetScale;this.TargetView=TargetView;this.UserDefinedTargetView=UserDefinedTargetView;}static FromTape(expressID,type,tape){let ptr=0;let ContextIdentifier=tape[ptr++];let ContextType=tape[ptr++];let CoordinateSpaceDimension=tape[ptr++];let Precision=tape[ptr++];let WorldCoordinateSystem=tape[ptr++];let TrueNorth=tape[ptr++];let ParentContext=tape[ptr++];let TargetScale=tape[ptr++];let TargetView=tape[ptr++];let UserDefinedTargetView=tape[ptr++];return new IfcGeometricRepresentationSubContext(expressID,type,ContextIdentifier,ContextType,CoordinateSpaceDimension,Precision,WorldCoordinateSystem,TrueNorth,ParentContext,TargetScale,TargetView,UserDefinedTargetView);}ToTape(){let args=[];args.push(this.ContextIdentifier);;args.push(this.ContextType);;args.push(this.CoordinateSpaceDimension);;args.push(this.Precision);;args.push(this.WorldCoordinateSystem);;args.push(this.TrueNorth);;args.push(this.ParentContext);;args.push(this.TargetScale);;args.push(this.TargetView);;args.push(this.UserDefinedTargetView);;return args;}};exports.IfcGeometricRepresentationSubContext=IfcGeometricRepresentationSubContext;var IfcGeometricSet=class{constructor(expressID,type,Elements){this.expressID=expressID;this.type=type;this.Elements=Elements;}static FromTape(expressID,type,tape){let ptr=0;let Elements=tape[ptr++];return new IfcGeometricSet(expressID,type,Elements);}ToTape(){let args=[];args.push(this.Elements);;return args;}};exports.IfcGeometricSet=IfcGeometricSet;var IfcGrid=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,UAxes,VAxes,WAxes,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.UAxes=UAxes;this.VAxes=VAxes;this.WAxes=WAxes;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let UAxes=tape[ptr++];let VAxes=tape[ptr++];let WAxes=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcGrid(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,UAxes,VAxes,WAxes,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.UAxes);;args.push(this.VAxes);;args.push(this.WAxes);;args.push(this.PredefinedType);;return args;}};exports.IfcGrid=IfcGrid;var IfcGridAxis=class{constructor(expressID,type,AxisTag,AxisCurve,SameSense){this.expressID=expressID;this.type=type;this.AxisTag=AxisTag;this.AxisCurve=AxisCurve;this.SameSense=SameSense;}static FromTape(expressID,type,tape){let ptr=0;let AxisTag=tape[ptr++];let AxisCurve=tape[ptr++];let SameSense=tape[ptr++];return new IfcGridAxis(expressID,type,AxisTag,AxisCurve,SameSense);}ToTape(){let args=[];args.push(this.AxisTag);;args.push(this.AxisCurve);;args.push(this.SameSense);;return args;}};exports.IfcGridAxis=IfcGridAxis;var IfcGridPlacement=class{constructor(expressID,type,PlacementRelTo,PlacementLocation,PlacementRefDirection){this.expressID=expressID;this.type=type;this.PlacementRelTo=PlacementRelTo;this.PlacementLocation=PlacementLocation;this.PlacementRefDirection=PlacementRefDirection;}static FromTape(expressID,type,tape){let ptr=0;let PlacementRelTo=tape[ptr++];let PlacementLocation=tape[ptr++];let PlacementRefDirection=tape[ptr++];return new IfcGridPlacement(expressID,type,PlacementRelTo,PlacementLocation,PlacementRefDirection);}ToTape(){let args=[];args.push(this.PlacementRelTo);;args.push(this.PlacementLocation);;args.push(this.PlacementRefDirection);;return args;}};exports.IfcGridPlacement=IfcGridPlacement;var IfcGroup=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];return new IfcGroup(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;return args;}};exports.IfcGroup=IfcGroup;var IfcHalfSpaceSolid=class{constructor(expressID,type,BaseSurface,AgreementFlag){this.expressID=expressID;this.type=type;this.BaseSurface=BaseSurface;this.AgreementFlag=AgreementFlag;}static FromTape(expressID,type,tape){let ptr=0;let BaseSurface=tape[ptr++];let AgreementFlag=tape[ptr++];return new IfcHalfSpaceSolid(expressID,type,BaseSurface,AgreementFlag);}ToTape(){let args=[];args.push(this.BaseSurface);;args.push(this.AgreementFlag);;return args;}};exports.IfcHalfSpaceSolid=IfcHalfSpaceSolid;var IfcHeatExchanger=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcHeatExchanger(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcHeatExchanger=IfcHeatExchanger;var IfcHeatExchangerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcHeatExchangerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcHeatExchangerType=IfcHeatExchangerType;var IfcHumidifier=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcHumidifier(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcHumidifier=IfcHumidifier;var IfcHumidifierType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcHumidifierType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcHumidifierType=IfcHumidifierType;var IfcIShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,OverallWidth,OverallDepth,WebThickness,FlangeThickness,FilletRadius,FlangeEdgeRadius,FlangeSlope){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.OverallWidth=OverallWidth;this.OverallDepth=OverallDepth;this.WebThickness=WebThickness;this.FlangeThickness=FlangeThickness;this.FilletRadius=FilletRadius;this.FlangeEdgeRadius=FlangeEdgeRadius;this.FlangeSlope=FlangeSlope;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let OverallWidth=tape[ptr++];let OverallDepth=tape[ptr++];let WebThickness=tape[ptr++];let FlangeThickness=tape[ptr++];let FilletRadius=tape[ptr++];let FlangeEdgeRadius=tape[ptr++];let FlangeSlope=tape[ptr++];return new IfcIShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,OverallWidth,OverallDepth,WebThickness,FlangeThickness,FilletRadius,FlangeEdgeRadius,FlangeSlope);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.OverallWidth);;args.push(this.OverallDepth);;args.push(this.WebThickness);;args.push(this.FlangeThickness);;args.push(this.FilletRadius);;args.push(this.FlangeEdgeRadius);;args.push(this.FlangeSlope);;return args;}};exports.IfcIShapeProfileDef=IfcIShapeProfileDef;var IfcImageTexture=class{constructor(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,URLReference){this.expressID=expressID;this.type=type;this.RepeatS=RepeatS;this.RepeatT=RepeatT;this.Mode=Mode;this.TextureTransform=TextureTransform;this.Parameter=Parameter;this.URLReference=URLReference;}static FromTape(expressID,type,tape){let ptr=0;let RepeatS=tape[ptr++];let RepeatT=tape[ptr++];let Mode=tape[ptr++];let TextureTransform=tape[ptr++];let Parameter=tape[ptr++];let URLReference=tape[ptr++];return new IfcImageTexture(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,URLReference);}ToTape(){let args=[];args.push(this.RepeatS);;args.push(this.RepeatT);;args.push(this.Mode);;args.push(this.TextureTransform);;args.push(this.Parameter);;args.push(this.URLReference);;return args;}};exports.IfcImageTexture=IfcImageTexture;var IfcIndexedColourMap=class{constructor(expressID,type,MappedTo,Opacity,Colours,ColourIndex){this.expressID=expressID;this.type=type;this.MappedTo=MappedTo;this.Opacity=Opacity;this.Colours=Colours;this.ColourIndex=ColourIndex;}static FromTape(expressID,type,tape){let ptr=0;let MappedTo=tape[ptr++];let Opacity=tape[ptr++];let Colours=tape[ptr++];let ColourIndex=tape[ptr++];return new IfcIndexedColourMap(expressID,type,MappedTo,Opacity,Colours,ColourIndex);}ToTape(){let args=[];args.push(this.MappedTo);;args.push(this.Opacity);;args.push(this.Colours);;args.push(this.ColourIndex);;return args;}};exports.IfcIndexedColourMap=IfcIndexedColourMap;var IfcIndexedPolyCurve=class{constructor(expressID,type,Points,Segments,SelfIntersect){this.expressID=expressID;this.type=type;this.Points=Points;this.Segments=Segments;this.SelfIntersect=SelfIntersect;}static FromTape(expressID,type,tape){let ptr=0;let Points=tape[ptr++];let Segments=tape[ptr++];let SelfIntersect=tape[ptr++];return new IfcIndexedPolyCurve(expressID,type,Points,Segments,SelfIntersect);}ToTape(){let args=[];args.push(this.Points);;args.push(this.Segments);;args.push(this.SelfIntersect);;return args;}};exports.IfcIndexedPolyCurve=IfcIndexedPolyCurve;var IfcIndexedPolygonalFace=class{constructor(expressID,type,CoordIndex){this.expressID=expressID;this.type=type;this.CoordIndex=CoordIndex;}static FromTape(expressID,type,tape){let ptr=0;let CoordIndex=tape[ptr++];return new IfcIndexedPolygonalFace(expressID,type,CoordIndex);}ToTape(){let args=[];args.push(this.CoordIndex);;return args;}};exports.IfcIndexedPolygonalFace=IfcIndexedPolygonalFace;var IfcIndexedPolygonalFaceWithVoids=class{constructor(expressID,type,CoordIndex,InnerCoordIndices){this.expressID=expressID;this.type=type;this.CoordIndex=CoordIndex;this.InnerCoordIndices=InnerCoordIndices;}static FromTape(expressID,type,tape){let ptr=0;let CoordIndex=tape[ptr++];let InnerCoordIndices=tape[ptr++];return new IfcIndexedPolygonalFaceWithVoids(expressID,type,CoordIndex,InnerCoordIndices);}ToTape(){let args=[];args.push(this.CoordIndex);;args.push(this.InnerCoordIndices);;return args;}};exports.IfcIndexedPolygonalFaceWithVoids=IfcIndexedPolygonalFaceWithVoids;var IfcIndexedTextureMap=class{constructor(expressID,type,Maps,MappedTo,TexCoords){this.expressID=expressID;this.type=type;this.Maps=Maps;this.MappedTo=MappedTo;this.TexCoords=TexCoords;}static FromTape(expressID,type,tape){let ptr=0;let Maps=tape[ptr++];let MappedTo=tape[ptr++];let TexCoords=tape[ptr++];return new IfcIndexedTextureMap(expressID,type,Maps,MappedTo,TexCoords);}ToTape(){let args=[];args.push(this.Maps);;args.push(this.MappedTo);;args.push(this.TexCoords);;return args;}};exports.IfcIndexedTextureMap=IfcIndexedTextureMap;var IfcIndexedTriangleTextureMap=class{constructor(expressID,type,Maps,MappedTo,TexCoords,TexCoordIndex){this.expressID=expressID;this.type=type;this.Maps=Maps;this.MappedTo=MappedTo;this.TexCoords=TexCoords;this.TexCoordIndex=TexCoordIndex;}static FromTape(expressID,type,tape){let ptr=0;let Maps=tape[ptr++];let MappedTo=tape[ptr++];let TexCoords=tape[ptr++];let TexCoordIndex=tape[ptr++];return new IfcIndexedTriangleTextureMap(expressID,type,Maps,MappedTo,TexCoords,TexCoordIndex);}ToTape(){let args=[];args.push(this.Maps);;args.push(this.MappedTo);;args.push(this.TexCoords);;args.push(this.TexCoordIndex);;return args;}};exports.IfcIndexedTriangleTextureMap=IfcIndexedTriangleTextureMap;var IfcInterceptor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcInterceptor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcInterceptor=IfcInterceptor;var IfcInterceptorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcInterceptorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcInterceptorType=IfcInterceptorType;var IfcIntersectionCurve=class{constructor(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation){this.expressID=expressID;this.type=type;this.Curve3D=Curve3D;this.AssociatedGeometry=AssociatedGeometry;this.MasterRepresentation=MasterRepresentation;}static FromTape(expressID,type,tape){let ptr=0;let Curve3D=tape[ptr++];let AssociatedGeometry=tape[ptr++];let MasterRepresentation=tape[ptr++];return new IfcIntersectionCurve(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation);}ToTape(){let args=[];args.push(this.Curve3D);;args.push(this.AssociatedGeometry);;args.push(this.MasterRepresentation);;return args;}};exports.IfcIntersectionCurve=IfcIntersectionCurve;var IfcInventory=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,Jurisdiction,ResponsiblePersons,LastUpdateDate,CurrentValue,OriginalValue){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.PredefinedType=PredefinedType;this.Jurisdiction=Jurisdiction;this.ResponsiblePersons=ResponsiblePersons;this.LastUpdateDate=LastUpdateDate;this.CurrentValue=CurrentValue;this.OriginalValue=OriginalValue;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let PredefinedType=tape[ptr++];let Jurisdiction=tape[ptr++];let ResponsiblePersons=tape[ptr++];let LastUpdateDate=tape[ptr++];let CurrentValue=tape[ptr++];let OriginalValue=tape[ptr++];return new IfcInventory(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,Jurisdiction,ResponsiblePersons,LastUpdateDate,CurrentValue,OriginalValue);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.PredefinedType);;args.push(this.Jurisdiction);;args.push(this.ResponsiblePersons);;args.push(this.LastUpdateDate);;args.push(this.CurrentValue);;args.push(this.OriginalValue);;return args;}};exports.IfcInventory=IfcInventory;var IfcIrregularTimeSeries=class{constructor(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit,Values){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.StartTime=StartTime;this.EndTime=EndTime;this.TimeSeriesDataType=TimeSeriesDataType;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.Unit=Unit;this.Values=Values;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let StartTime=tape[ptr++];let EndTime=tape[ptr++];let TimeSeriesDataType=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let Unit=tape[ptr++];let Values=tape[ptr++];return new IfcIrregularTimeSeries(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit,Values);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.StartTime);;args.push(this.EndTime);;args.push(this.TimeSeriesDataType);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.Unit);;args.push(this.Values);;return args;}};exports.IfcIrregularTimeSeries=IfcIrregularTimeSeries;var IfcIrregularTimeSeriesValue=class{constructor(expressID,type,TimeStamp,ListValues){this.expressID=expressID;this.type=type;this.TimeStamp=TimeStamp;this.ListValues=ListValues;}static FromTape(expressID,type,tape){let ptr=0;let TimeStamp=tape[ptr++];let ListValues=tape[ptr++];return new IfcIrregularTimeSeriesValue(expressID,type,TimeStamp,ListValues);}ToTape(){let args=[];args.push(this.TimeStamp);;args.push(this.ListValues);;return args;}};exports.IfcIrregularTimeSeriesValue=IfcIrregularTimeSeriesValue;var IfcJunctionBox=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcJunctionBox(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcJunctionBox=IfcJunctionBox;var IfcJunctionBoxType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcJunctionBoxType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcJunctionBoxType=IfcJunctionBoxType;var IfcLShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,Width,Thickness,FilletRadius,EdgeRadius,LegSlope){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.Depth=Depth;this.Width=Width;this.Thickness=Thickness;this.FilletRadius=FilletRadius;this.EdgeRadius=EdgeRadius;this.LegSlope=LegSlope;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let Depth=tape[ptr++];let Width=tape[ptr++];let Thickness=tape[ptr++];let FilletRadius=tape[ptr++];let EdgeRadius=tape[ptr++];let LegSlope=tape[ptr++];return new IfcLShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,Width,Thickness,FilletRadius,EdgeRadius,LegSlope);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.Depth);;args.push(this.Width);;args.push(this.Thickness);;args.push(this.FilletRadius);;args.push(this.EdgeRadius);;args.push(this.LegSlope);;return args;}};exports.IfcLShapeProfileDef=IfcLShapeProfileDef;var IfcLaborResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.Usage=Usage;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let Usage=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcLaborResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.Usage);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcLaborResource=IfcLaborResource;var IfcLaborResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ResourceType=ResourceType;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ResourceType=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcLaborResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ResourceType);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcLaborResourceType=IfcLaborResourceType;var IfcLagTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,LagValue,DurationType){this.expressID=expressID;this.type=type;this.Name=Name;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.LagValue=LagValue;this.DurationType=DurationType;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let LagValue=tape[ptr++];let DurationType=tape[ptr++];return new IfcLagTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,LagValue,DurationType);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.LagValue);;args.push(this.DurationType);;return args;}};exports.IfcLagTime=IfcLagTime;var IfcLamp=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcLamp(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcLamp=IfcLamp;var IfcLampType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcLampType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcLampType=IfcLampType;var IfcLibraryInformation=class{constructor(expressID,type,Name,Version,Publisher,VersionDate,Location,Description){this.expressID=expressID;this.type=type;this.Name=Name;this.Version=Version;this.Publisher=Publisher;this.VersionDate=VersionDate;this.Location=Location;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Version=tape[ptr++];let Publisher=tape[ptr++];let VersionDate=tape[ptr++];let Location=tape[ptr++];let Description=tape[ptr++];return new IfcLibraryInformation(expressID,type,Name,Version,Publisher,VersionDate,Location,Description);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Version);;args.push(this.Publisher);;args.push(this.VersionDate);;args.push(this.Location);;args.push(this.Description);;return args;}};exports.IfcLibraryInformation=IfcLibraryInformation;var IfcLibraryReference=class{constructor(expressID,type,Location,Identification,Name,Description,Language,ReferencedLibrary){this.expressID=expressID;this.type=type;this.Location=Location;this.Identification=Identification;this.Name=Name;this.Description=Description;this.Language=Language;this.ReferencedLibrary=ReferencedLibrary;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];let Identification=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let Language=tape[ptr++];let ReferencedLibrary=tape[ptr++];return new IfcLibraryReference(expressID,type,Location,Identification,Name,Description,Language,ReferencedLibrary);}ToTape(){let args=[];args.push(this.Location);;args.push(this.Identification);;args.push(this.Name);;args.push(this.Description);;args.push(this.Language);;args.push(this.ReferencedLibrary);;return args;}};exports.IfcLibraryReference=IfcLibraryReference;var IfcLightDistributionData=class{constructor(expressID,type,MainPlaneAngle,SecondaryPlaneAngle,LuminousIntensity){this.expressID=expressID;this.type=type;this.MainPlaneAngle=MainPlaneAngle;this.SecondaryPlaneAngle=SecondaryPlaneAngle;this.LuminousIntensity=LuminousIntensity;}static FromTape(expressID,type,tape){let ptr=0;let MainPlaneAngle=tape[ptr++];let SecondaryPlaneAngle=tape[ptr++];let LuminousIntensity=tape[ptr++];return new IfcLightDistributionData(expressID,type,MainPlaneAngle,SecondaryPlaneAngle,LuminousIntensity);}ToTape(){let args=[];args.push(this.MainPlaneAngle);;args.push(this.SecondaryPlaneAngle);;args.push(this.LuminousIntensity);;return args;}};exports.IfcLightDistributionData=IfcLightDistributionData;var IfcLightFixture=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcLightFixture(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcLightFixture=IfcLightFixture;var IfcLightFixtureType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcLightFixtureType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcLightFixtureType=IfcLightFixtureType;var IfcLightIntensityDistribution=class{constructor(expressID,type,LightDistributionCurve,DistributionData){this.expressID=expressID;this.type=type;this.LightDistributionCurve=LightDistributionCurve;this.DistributionData=DistributionData;}static FromTape(expressID,type,tape){let ptr=0;let LightDistributionCurve=tape[ptr++];let DistributionData=tape[ptr++];return new IfcLightIntensityDistribution(expressID,type,LightDistributionCurve,DistributionData);}ToTape(){let args=[];args.push(this.LightDistributionCurve);;args.push(this.DistributionData);;return args;}};exports.IfcLightIntensityDistribution=IfcLightIntensityDistribution;var IfcLightSource=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity){this.expressID=expressID;this.type=type;this.Name=Name;this.LightColour=LightColour;this.AmbientIntensity=AmbientIntensity;this.Intensity=Intensity;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let LightColour=tape[ptr++];let AmbientIntensity=tape[ptr++];let Intensity=tape[ptr++];return new IfcLightSource(expressID,type,Name,LightColour,AmbientIntensity,Intensity);}ToTape(){let args=[];args.push(this.Name);;args.push(this.LightColour);;args.push(this.AmbientIntensity);;args.push(this.Intensity);;return args;}};exports.IfcLightSource=IfcLightSource;var IfcLightSourceAmbient=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity){this.expressID=expressID;this.type=type;this.Name=Name;this.LightColour=LightColour;this.AmbientIntensity=AmbientIntensity;this.Intensity=Intensity;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let LightColour=tape[ptr++];let AmbientIntensity=tape[ptr++];let Intensity=tape[ptr++];return new IfcLightSourceAmbient(expressID,type,Name,LightColour,AmbientIntensity,Intensity);}ToTape(){let args=[];args.push(this.Name);;args.push(this.LightColour);;args.push(this.AmbientIntensity);;args.push(this.Intensity);;return args;}};exports.IfcLightSourceAmbient=IfcLightSourceAmbient;var IfcLightSourceDirectional=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Orientation){this.expressID=expressID;this.type=type;this.Name=Name;this.LightColour=LightColour;this.AmbientIntensity=AmbientIntensity;this.Intensity=Intensity;this.Orientation=Orientation;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let LightColour=tape[ptr++];let AmbientIntensity=tape[ptr++];let Intensity=tape[ptr++];let Orientation=tape[ptr++];return new IfcLightSourceDirectional(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Orientation);}ToTape(){let args=[];args.push(this.Name);;args.push(this.LightColour);;args.push(this.AmbientIntensity);;args.push(this.Intensity);;args.push(this.Orientation);;return args;}};exports.IfcLightSourceDirectional=IfcLightSourceDirectional;var IfcLightSourceGoniometric=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,ColourAppearance,ColourTemperature,LuminousFlux,LightEmissionSource,LightDistributionDataSource){this.expressID=expressID;this.type=type;this.Name=Name;this.LightColour=LightColour;this.AmbientIntensity=AmbientIntensity;this.Intensity=Intensity;this.Position=Position;this.ColourAppearance=ColourAppearance;this.ColourTemperature=ColourTemperature;this.LuminousFlux=LuminousFlux;this.LightEmissionSource=LightEmissionSource;this.LightDistributionDataSource=LightDistributionDataSource;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let LightColour=tape[ptr++];let AmbientIntensity=tape[ptr++];let Intensity=tape[ptr++];let Position=tape[ptr++];let ColourAppearance=tape[ptr++];let ColourTemperature=tape[ptr++];let LuminousFlux=tape[ptr++];let LightEmissionSource=tape[ptr++];let LightDistributionDataSource=tape[ptr++];return new IfcLightSourceGoniometric(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,ColourAppearance,ColourTemperature,LuminousFlux,LightEmissionSource,LightDistributionDataSource);}ToTape(){let args=[];args.push(this.Name);;args.push(this.LightColour);;args.push(this.AmbientIntensity);;args.push(this.Intensity);;args.push(this.Position);;args.push(this.ColourAppearance);;args.push(this.ColourTemperature);;args.push(this.LuminousFlux);;args.push(this.LightEmissionSource);;args.push(this.LightDistributionDataSource);;return args;}};exports.IfcLightSourceGoniometric=IfcLightSourceGoniometric;var IfcLightSourcePositional=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,Radius,ConstantAttenuation,DistanceAttenuation,QuadricAttenuation){this.expressID=expressID;this.type=type;this.Name=Name;this.LightColour=LightColour;this.AmbientIntensity=AmbientIntensity;this.Intensity=Intensity;this.Position=Position;this.Radius=Radius;this.ConstantAttenuation=ConstantAttenuation;this.DistanceAttenuation=DistanceAttenuation;this.QuadricAttenuation=QuadricAttenuation;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let LightColour=tape[ptr++];let AmbientIntensity=tape[ptr++];let Intensity=tape[ptr++];let Position=tape[ptr++];let Radius=tape[ptr++];let ConstantAttenuation=tape[ptr++];let DistanceAttenuation=tape[ptr++];let QuadricAttenuation=tape[ptr++];return new IfcLightSourcePositional(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,Radius,ConstantAttenuation,DistanceAttenuation,QuadricAttenuation);}ToTape(){let args=[];args.push(this.Name);;args.push(this.LightColour);;args.push(this.AmbientIntensity);;args.push(this.Intensity);;args.push(this.Position);;args.push(this.Radius);;args.push(this.ConstantAttenuation);;args.push(this.DistanceAttenuation);;args.push(this.QuadricAttenuation);;return args;}};exports.IfcLightSourcePositional=IfcLightSourcePositional;var IfcLightSourceSpot=class{constructor(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,Radius,ConstantAttenuation,DistanceAttenuation,QuadricAttenuation,Orientation,ConcentrationExponent,SpreadAngle,BeamWidthAngle){this.expressID=expressID;this.type=type;this.Name=Name;this.LightColour=LightColour;this.AmbientIntensity=AmbientIntensity;this.Intensity=Intensity;this.Position=Position;this.Radius=Radius;this.ConstantAttenuation=ConstantAttenuation;this.DistanceAttenuation=DistanceAttenuation;this.QuadricAttenuation=QuadricAttenuation;this.Orientation=Orientation;this.ConcentrationExponent=ConcentrationExponent;this.SpreadAngle=SpreadAngle;this.BeamWidthAngle=BeamWidthAngle;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let LightColour=tape[ptr++];let AmbientIntensity=tape[ptr++];let Intensity=tape[ptr++];let Position=tape[ptr++];let Radius=tape[ptr++];let ConstantAttenuation=tape[ptr++];let DistanceAttenuation=tape[ptr++];let QuadricAttenuation=tape[ptr++];let Orientation=tape[ptr++];let ConcentrationExponent=tape[ptr++];let SpreadAngle=tape[ptr++];let BeamWidthAngle=tape[ptr++];return new IfcLightSourceSpot(expressID,type,Name,LightColour,AmbientIntensity,Intensity,Position,Radius,ConstantAttenuation,DistanceAttenuation,QuadricAttenuation,Orientation,ConcentrationExponent,SpreadAngle,BeamWidthAngle);}ToTape(){let args=[];args.push(this.Name);;args.push(this.LightColour);;args.push(this.AmbientIntensity);;args.push(this.Intensity);;args.push(this.Position);;args.push(this.Radius);;args.push(this.ConstantAttenuation);;args.push(this.DistanceAttenuation);;args.push(this.QuadricAttenuation);;args.push(this.Orientation);;args.push(this.ConcentrationExponent);;args.push(this.SpreadAngle);;args.push(this.BeamWidthAngle);;return args;}};exports.IfcLightSourceSpot=IfcLightSourceSpot;var IfcLine=class{constructor(expressID,type,Pnt,Dir){this.expressID=expressID;this.type=type;this.Pnt=Pnt;this.Dir=Dir;}static FromTape(expressID,type,tape){let ptr=0;let Pnt=tape[ptr++];let Dir=tape[ptr++];return new IfcLine(expressID,type,Pnt,Dir);}ToTape(){let args=[];args.push(this.Pnt);;args.push(this.Dir);;return args;}};exports.IfcLine=IfcLine;var IfcLineSegment2D=class{constructor(expressID,type,StartPoint,StartDirection,SegmentLength){this.expressID=expressID;this.type=type;this.StartPoint=StartPoint;this.StartDirection=StartDirection;this.SegmentLength=SegmentLength;}static FromTape(expressID,type,tape){let ptr=0;let StartPoint=tape[ptr++];let StartDirection=tape[ptr++];let SegmentLength=tape[ptr++];return new IfcLineSegment2D(expressID,type,StartPoint,StartDirection,SegmentLength);}ToTape(){let args=[];args.push(this.StartPoint);;args.push(this.StartDirection);;args.push(this.SegmentLength);;return args;}};exports.IfcLineSegment2D=IfcLineSegment2D;var IfcLinearPlacement=class{constructor(expressID,type,PlacementRelTo,PlacementMeasuredAlong,Distance,Orientation,CartesianPosition){this.expressID=expressID;this.type=type;this.PlacementRelTo=PlacementRelTo;this.PlacementMeasuredAlong=PlacementMeasuredAlong;this.Distance=Distance;this.Orientation=Orientation;this.CartesianPosition=CartesianPosition;}static FromTape(expressID,type,tape){let ptr=0;let PlacementRelTo=tape[ptr++];let PlacementMeasuredAlong=tape[ptr++];let Distance=tape[ptr++];let Orientation=tape[ptr++];let CartesianPosition=tape[ptr++];return new IfcLinearPlacement(expressID,type,PlacementRelTo,PlacementMeasuredAlong,Distance,Orientation,CartesianPosition);}ToTape(){let args=[];args.push(this.PlacementRelTo);;args.push(this.PlacementMeasuredAlong);;args.push(this.Distance);;args.push(this.Orientation);;args.push(this.CartesianPosition);;return args;}};exports.IfcLinearPlacement=IfcLinearPlacement;var IfcLinearPositioningElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Axis){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Axis=Axis;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Axis=tape[ptr++];return new IfcLinearPositioningElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Axis);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Axis);;return args;}};exports.IfcLinearPositioningElement=IfcLinearPositioningElement;var IfcLocalPlacement=class{constructor(expressID,type,PlacementRelTo,RelativePlacement){this.expressID=expressID;this.type=type;this.PlacementRelTo=PlacementRelTo;this.RelativePlacement=RelativePlacement;}static FromTape(expressID,type,tape){let ptr=0;let PlacementRelTo=tape[ptr++];let RelativePlacement=tape[ptr++];return new IfcLocalPlacement(expressID,type,PlacementRelTo,RelativePlacement);}ToTape(){let args=[];args.push(this.PlacementRelTo);;args.push(this.RelativePlacement);;return args;}};exports.IfcLocalPlacement=IfcLocalPlacement;var IfcLoop=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcLoop(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcLoop=IfcLoop;var IfcManifoldSolidBrep=class{constructor(expressID,type,Outer){this.expressID=expressID;this.type=type;this.Outer=Outer;}static FromTape(expressID,type,tape){let ptr=0;let Outer=tape[ptr++];return new IfcManifoldSolidBrep(expressID,type,Outer);}ToTape(){let args=[];args.push(this.Outer);;return args;}};exports.IfcManifoldSolidBrep=IfcManifoldSolidBrep;var IfcMapConversion=class{constructor(expressID,type,SourceCRS,TargetCRS,Eastings,Northings,OrthogonalHeight,XAxisAbscissa,XAxisOrdinate,Scale){this.expressID=expressID;this.type=type;this.SourceCRS=SourceCRS;this.TargetCRS=TargetCRS;this.Eastings=Eastings;this.Northings=Northings;this.OrthogonalHeight=OrthogonalHeight;this.XAxisAbscissa=XAxisAbscissa;this.XAxisOrdinate=XAxisOrdinate;this.Scale=Scale;}static FromTape(expressID,type,tape){let ptr=0;let SourceCRS=tape[ptr++];let TargetCRS=tape[ptr++];let Eastings=tape[ptr++];let Northings=tape[ptr++];let OrthogonalHeight=tape[ptr++];let XAxisAbscissa=tape[ptr++];let XAxisOrdinate=tape[ptr++];let Scale=tape[ptr++];return new IfcMapConversion(expressID,type,SourceCRS,TargetCRS,Eastings,Northings,OrthogonalHeight,XAxisAbscissa,XAxisOrdinate,Scale);}ToTape(){let args=[];args.push(this.SourceCRS);;args.push(this.TargetCRS);;args.push(this.Eastings);;args.push(this.Northings);;args.push(this.OrthogonalHeight);;args.push(this.XAxisAbscissa);;args.push(this.XAxisOrdinate);;args.push(this.Scale);;return args;}};exports.IfcMapConversion=IfcMapConversion;var IfcMappedItem=class{constructor(expressID,type,MappingSource,MappingTarget){this.expressID=expressID;this.type=type;this.MappingSource=MappingSource;this.MappingTarget=MappingTarget;}static FromTape(expressID,type,tape){let ptr=0;let MappingSource=tape[ptr++];let MappingTarget=tape[ptr++];return new IfcMappedItem(expressID,type,MappingSource,MappingTarget);}ToTape(){let args=[];args.push(this.MappingSource);;args.push(this.MappingTarget);;return args;}};exports.IfcMappedItem=IfcMappedItem;var IfcMaterial=class{constructor(expressID,type,Name,Description,Category){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Category=Category;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Category=tape[ptr++];return new IfcMaterial(expressID,type,Name,Description,Category);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Category);;return args;}};exports.IfcMaterial=IfcMaterial;var IfcMaterialClassificationRelationship=class{constructor(expressID,type,MaterialClassifications,ClassifiedMaterial){this.expressID=expressID;this.type=type;this.MaterialClassifications=MaterialClassifications;this.ClassifiedMaterial=ClassifiedMaterial;}static FromTape(expressID,type,tape){let ptr=0;let MaterialClassifications=tape[ptr++];let ClassifiedMaterial=tape[ptr++];return new IfcMaterialClassificationRelationship(expressID,type,MaterialClassifications,ClassifiedMaterial);}ToTape(){let args=[];args.push(this.MaterialClassifications);;args.push(this.ClassifiedMaterial);;return args;}};exports.IfcMaterialClassificationRelationship=IfcMaterialClassificationRelationship;var IfcMaterialConstituent=class{constructor(expressID,type,Name,Description,Material,Fraction,Category){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Material=Material;this.Fraction=Fraction;this.Category=Category;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Material=tape[ptr++];let Fraction=tape[ptr++];let Category=tape[ptr++];return new IfcMaterialConstituent(expressID,type,Name,Description,Material,Fraction,Category);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Material);;args.push(this.Fraction);;args.push(this.Category);;return args;}};exports.IfcMaterialConstituent=IfcMaterialConstituent;var IfcMaterialConstituentSet=class{constructor(expressID,type,Name,Description,MaterialConstituents){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.MaterialConstituents=MaterialConstituents;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let MaterialConstituents=tape[ptr++];return new IfcMaterialConstituentSet(expressID,type,Name,Description,MaterialConstituents);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.MaterialConstituents);;return args;}};exports.IfcMaterialConstituentSet=IfcMaterialConstituentSet;var IfcMaterialDefinition=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcMaterialDefinition(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcMaterialDefinition=IfcMaterialDefinition;var IfcMaterialDefinitionRepresentation=class{constructor(expressID,type,Name,Description,Representations,RepresentedMaterial){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Representations=Representations;this.RepresentedMaterial=RepresentedMaterial;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Representations=tape[ptr++];let RepresentedMaterial=tape[ptr++];return new IfcMaterialDefinitionRepresentation(expressID,type,Name,Description,Representations,RepresentedMaterial);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Representations);;args.push(this.RepresentedMaterial);;return args;}};exports.IfcMaterialDefinitionRepresentation=IfcMaterialDefinitionRepresentation;var IfcMaterialLayer=class{constructor(expressID,type,Material,LayerThickness,IsVentilated,Name,Description,Category,Priority){this.expressID=expressID;this.type=type;this.Material=Material;this.LayerThickness=LayerThickness;this.IsVentilated=IsVentilated;this.Name=Name;this.Description=Description;this.Category=Category;this.Priority=Priority;}static FromTape(expressID,type,tape){let ptr=0;let Material=tape[ptr++];let LayerThickness=tape[ptr++];let IsVentilated=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let Category=tape[ptr++];let Priority=tape[ptr++];return new IfcMaterialLayer(expressID,type,Material,LayerThickness,IsVentilated,Name,Description,Category,Priority);}ToTape(){let args=[];args.push(this.Material);;args.push(this.LayerThickness);;args.push(this.IsVentilated);;args.push(this.Name);;args.push(this.Description);;args.push(this.Category);;args.push(this.Priority);;return args;}};exports.IfcMaterialLayer=IfcMaterialLayer;var IfcMaterialLayerSet=class{constructor(expressID,type,MaterialLayers,LayerSetName,Description){this.expressID=expressID;this.type=type;this.MaterialLayers=MaterialLayers;this.LayerSetName=LayerSetName;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let MaterialLayers=tape[ptr++];let LayerSetName=tape[ptr++];let Description=tape[ptr++];return new IfcMaterialLayerSet(expressID,type,MaterialLayers,LayerSetName,Description);}ToTape(){let args=[];args.push(this.MaterialLayers);;args.push(this.LayerSetName);;args.push(this.Description);;return args;}};exports.IfcMaterialLayerSet=IfcMaterialLayerSet;var IfcMaterialLayerSetUsage=class{constructor(expressID,type,ForLayerSet,LayerSetDirection,DirectionSense,OffsetFromReferenceLine,ReferenceExtent){this.expressID=expressID;this.type=type;this.ForLayerSet=ForLayerSet;this.LayerSetDirection=LayerSetDirection;this.DirectionSense=DirectionSense;this.OffsetFromReferenceLine=OffsetFromReferenceLine;this.ReferenceExtent=ReferenceExtent;}static FromTape(expressID,type,tape){let ptr=0;let ForLayerSet=tape[ptr++];let LayerSetDirection=tape[ptr++];let DirectionSense=tape[ptr++];let OffsetFromReferenceLine=tape[ptr++];let ReferenceExtent=tape[ptr++];return new IfcMaterialLayerSetUsage(expressID,type,ForLayerSet,LayerSetDirection,DirectionSense,OffsetFromReferenceLine,ReferenceExtent);}ToTape(){let args=[];args.push(this.ForLayerSet);;args.push(this.LayerSetDirection);;args.push(this.DirectionSense);;args.push(this.OffsetFromReferenceLine);;args.push(this.ReferenceExtent);;return args;}};exports.IfcMaterialLayerSetUsage=IfcMaterialLayerSetUsage;var IfcMaterialLayerWithOffsets=class{constructor(expressID,type,Material,LayerThickness,IsVentilated,Name,Description,Category,Priority,OffsetDirection,OffsetValues){this.expressID=expressID;this.type=type;this.Material=Material;this.LayerThickness=LayerThickness;this.IsVentilated=IsVentilated;this.Name=Name;this.Description=Description;this.Category=Category;this.Priority=Priority;this.OffsetDirection=OffsetDirection;this.OffsetValues=OffsetValues;}static FromTape(expressID,type,tape){let ptr=0;let Material=tape[ptr++];let LayerThickness=tape[ptr++];let IsVentilated=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let Category=tape[ptr++];let Priority=tape[ptr++];let OffsetDirection=tape[ptr++];let OffsetValues=tape[ptr++];return new IfcMaterialLayerWithOffsets(expressID,type,Material,LayerThickness,IsVentilated,Name,Description,Category,Priority,OffsetDirection,OffsetValues);}ToTape(){let args=[];args.push(this.Material);;args.push(this.LayerThickness);;args.push(this.IsVentilated);;args.push(this.Name);;args.push(this.Description);;args.push(this.Category);;args.push(this.Priority);;args.push(this.OffsetDirection);;args.push(this.OffsetValues);;return args;}};exports.IfcMaterialLayerWithOffsets=IfcMaterialLayerWithOffsets;var IfcMaterialList=class{constructor(expressID,type,Materials){this.expressID=expressID;this.type=type;this.Materials=Materials;}static FromTape(expressID,type,tape){let ptr=0;let Materials=tape[ptr++];return new IfcMaterialList(expressID,type,Materials);}ToTape(){let args=[];args.push(this.Materials);;return args;}};exports.IfcMaterialList=IfcMaterialList;var IfcMaterialProfile=class{constructor(expressID,type,Name,Description,Material,Profile,Priority,Category){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Material=Material;this.Profile=Profile;this.Priority=Priority;this.Category=Category;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Material=tape[ptr++];let Profile=tape[ptr++];let Priority=tape[ptr++];let Category=tape[ptr++];return new IfcMaterialProfile(expressID,type,Name,Description,Material,Profile,Priority,Category);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Material);;args.push(this.Profile);;args.push(this.Priority);;args.push(this.Category);;return args;}};exports.IfcMaterialProfile=IfcMaterialProfile;var IfcMaterialProfileSet=class{constructor(expressID,type,Name,Description,MaterialProfiles,CompositeProfile){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.MaterialProfiles=MaterialProfiles;this.CompositeProfile=CompositeProfile;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let MaterialProfiles=tape[ptr++];let CompositeProfile=tape[ptr++];return new IfcMaterialProfileSet(expressID,type,Name,Description,MaterialProfiles,CompositeProfile);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.MaterialProfiles);;args.push(this.CompositeProfile);;return args;}};exports.IfcMaterialProfileSet=IfcMaterialProfileSet;var IfcMaterialProfileSetUsage=class{constructor(expressID,type,ForProfileSet,CardinalPoint,ReferenceExtent){this.expressID=expressID;this.type=type;this.ForProfileSet=ForProfileSet;this.CardinalPoint=CardinalPoint;this.ReferenceExtent=ReferenceExtent;}static FromTape(expressID,type,tape){let ptr=0;let ForProfileSet=tape[ptr++];let CardinalPoint=tape[ptr++];let ReferenceExtent=tape[ptr++];return new IfcMaterialProfileSetUsage(expressID,type,ForProfileSet,CardinalPoint,ReferenceExtent);}ToTape(){let args=[];args.push(this.ForProfileSet);;args.push(this.CardinalPoint);;args.push(this.ReferenceExtent);;return args;}};exports.IfcMaterialProfileSetUsage=IfcMaterialProfileSetUsage;var IfcMaterialProfileSetUsageTapering=class{constructor(expressID,type,ForProfileSet,CardinalPoint,ReferenceExtent,ForProfileEndSet,CardinalEndPoint){this.expressID=expressID;this.type=type;this.ForProfileSet=ForProfileSet;this.CardinalPoint=CardinalPoint;this.ReferenceExtent=ReferenceExtent;this.ForProfileEndSet=ForProfileEndSet;this.CardinalEndPoint=CardinalEndPoint;}static FromTape(expressID,type,tape){let ptr=0;let ForProfileSet=tape[ptr++];let CardinalPoint=tape[ptr++];let ReferenceExtent=tape[ptr++];let ForProfileEndSet=tape[ptr++];let CardinalEndPoint=tape[ptr++];return new IfcMaterialProfileSetUsageTapering(expressID,type,ForProfileSet,CardinalPoint,ReferenceExtent,ForProfileEndSet,CardinalEndPoint);}ToTape(){let args=[];args.push(this.ForProfileSet);;args.push(this.CardinalPoint);;args.push(this.ReferenceExtent);;args.push(this.ForProfileEndSet);;args.push(this.CardinalEndPoint);;return args;}};exports.IfcMaterialProfileSetUsageTapering=IfcMaterialProfileSetUsageTapering;var IfcMaterialProfileWithOffsets=class{constructor(expressID,type,Name,Description,Material,Profile,Priority,Category,OffsetValues){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Material=Material;this.Profile=Profile;this.Priority=Priority;this.Category=Category;this.OffsetValues=OffsetValues;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Material=tape[ptr++];let Profile=tape[ptr++];let Priority=tape[ptr++];let Category=tape[ptr++];let OffsetValues=tape[ptr++];return new IfcMaterialProfileWithOffsets(expressID,type,Name,Description,Material,Profile,Priority,Category,OffsetValues);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Material);;args.push(this.Profile);;args.push(this.Priority);;args.push(this.Category);;args.push(this.OffsetValues);;return args;}};exports.IfcMaterialProfileWithOffsets=IfcMaterialProfileWithOffsets;var IfcMaterialProperties=class{constructor(expressID,type,Name,Description,Properties,Material){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Properties=Properties;this.Material=Material;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Properties=tape[ptr++];let Material=tape[ptr++];return new IfcMaterialProperties(expressID,type,Name,Description,Properties,Material);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Properties);;args.push(this.Material);;return args;}};exports.IfcMaterialProperties=IfcMaterialProperties;var IfcMaterialRelationship=class{constructor(expressID,type,Name,Description,RelatingMaterial,RelatedMaterials,Expression){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.RelatingMaterial=RelatingMaterial;this.RelatedMaterials=RelatedMaterials;this.Expression=Expression;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let RelatingMaterial=tape[ptr++];let RelatedMaterials=tape[ptr++];let Expression=tape[ptr++];return new IfcMaterialRelationship(expressID,type,Name,Description,RelatingMaterial,RelatedMaterials,Expression);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingMaterial);;args.push(this.RelatedMaterials);;args.push(this.Expression);;return args;}};exports.IfcMaterialRelationship=IfcMaterialRelationship;var IfcMaterialUsageDefinition=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcMaterialUsageDefinition(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcMaterialUsageDefinition=IfcMaterialUsageDefinition;var IfcMeasureWithUnit=class{constructor(expressID,type,ValueComponent,UnitComponent){this.expressID=expressID;this.type=type;this.ValueComponent=ValueComponent;this.UnitComponent=UnitComponent;}static FromTape(expressID,type,tape){let ptr=0;let ValueComponent=tape[ptr++];let UnitComponent=tape[ptr++];return new IfcMeasureWithUnit(expressID,type,ValueComponent,UnitComponent);}ToTape(){let args=[];args.push(this.ValueComponent);;args.push(this.UnitComponent);;return args;}};exports.IfcMeasureWithUnit=IfcMeasureWithUnit;var IfcMechanicalFastener=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,NominalDiameter,NominalLength,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.NominalDiameter=NominalDiameter;this.NominalLength=NominalLength;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let NominalDiameter=tape[ptr++];let NominalLength=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcMechanicalFastener(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,NominalDiameter,NominalLength,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.NominalDiameter);;args.push(this.NominalLength);;args.push(this.PredefinedType);;return args;}};exports.IfcMechanicalFastener=IfcMechanicalFastener;var IfcMechanicalFastenerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,NominalLength){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;this.NominalDiameter=NominalDiameter;this.NominalLength=NominalLength;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];let NominalDiameter=tape[ptr++];let NominalLength=tape[ptr++];return new IfcMechanicalFastenerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,NominalLength);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;args.push(this.NominalDiameter);;args.push(this.NominalLength);;return args;}};exports.IfcMechanicalFastenerType=IfcMechanicalFastenerType;var IfcMedicalDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcMedicalDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcMedicalDevice=IfcMedicalDevice;var IfcMedicalDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcMedicalDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcMedicalDeviceType=IfcMedicalDeviceType;var IfcMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcMember(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcMember=IfcMember;var IfcMemberStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcMemberStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcMemberStandardCase=IfcMemberStandardCase;var IfcMemberType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcMemberType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcMemberType=IfcMemberType;var IfcMetric=class{constructor(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade,Benchmark,ValueSource,DataValue,ReferencePath){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.ConstraintGrade=ConstraintGrade;this.ConstraintSource=ConstraintSource;this.CreatingActor=CreatingActor;this.CreationTime=CreationTime;this.UserDefinedGrade=UserDefinedGrade;this.Benchmark=Benchmark;this.ValueSource=ValueSource;this.DataValue=DataValue;this.ReferencePath=ReferencePath;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let ConstraintGrade=tape[ptr++];let ConstraintSource=tape[ptr++];let CreatingActor=tape[ptr++];let CreationTime=tape[ptr++];let UserDefinedGrade=tape[ptr++];let Benchmark=tape[ptr++];let ValueSource=tape[ptr++];let DataValue=tape[ptr++];let ReferencePath=tape[ptr++];return new IfcMetric(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade,Benchmark,ValueSource,DataValue,ReferencePath);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.ConstraintGrade);;args.push(this.ConstraintSource);;args.push(this.CreatingActor);;args.push(this.CreationTime);;args.push(this.UserDefinedGrade);;args.push(this.Benchmark);;args.push(this.ValueSource);;args.push(this.DataValue);;args.push(this.ReferencePath);;return args;}};exports.IfcMetric=IfcMetric;var IfcMirroredProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,ParentProfile,Operator,Label){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.ParentProfile=ParentProfile;this.Operator=Operator;this.Label=Label;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let ParentProfile=tape[ptr++];let Operator=tape[ptr++];let Label=tape[ptr++];return new IfcMirroredProfileDef(expressID,type,ProfileType,ProfileName,ParentProfile,Operator,Label);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.ParentProfile);;args.push(this.Operator);;args.push(this.Label);;return args;}};exports.IfcMirroredProfileDef=IfcMirroredProfileDef;var IfcMonetaryUnit=class{constructor(expressID,type,Currency){this.expressID=expressID;this.type=type;this.Currency=Currency;}static FromTape(expressID,type,tape){let ptr=0;let Currency=tape[ptr++];return new IfcMonetaryUnit(expressID,type,Currency);}ToTape(){let args=[];args.push(this.Currency);;return args;}};exports.IfcMonetaryUnit=IfcMonetaryUnit;var IfcMotorConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcMotorConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcMotorConnection=IfcMotorConnection;var IfcMotorConnectionType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcMotorConnectionType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcMotorConnectionType=IfcMotorConnectionType;var IfcNamedUnit=class{constructor(expressID,type,Dimensions,UnitType){this.expressID=expressID;this.type=type;this.Dimensions=Dimensions;this.UnitType=UnitType;}static FromTape(expressID,type,tape){let ptr=0;let Dimensions=tape[ptr++];let UnitType=tape[ptr++];return new IfcNamedUnit(expressID,type,Dimensions,UnitType);}ToTape(){let args=[];args.push(this.Dimensions);;args.push(this.UnitType);;return args;}};exports.IfcNamedUnit=IfcNamedUnit;var IfcObject=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];return new IfcObject(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;return args;}};exports.IfcObject=IfcObject;var IfcObjectDefinition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcObjectDefinition(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcObjectDefinition=IfcObjectDefinition;var IfcObjectPlacement=class{constructor(expressID,type,PlacementRelTo){this.expressID=expressID;this.type=type;this.PlacementRelTo=PlacementRelTo;}static FromTape(expressID,type,tape){let ptr=0;let PlacementRelTo=tape[ptr++];return new IfcObjectPlacement(expressID,type,PlacementRelTo);}ToTape(){let args=[];args.push(this.PlacementRelTo);;return args;}};exports.IfcObjectPlacement=IfcObjectPlacement;var IfcObjective=class{constructor(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade,BenchmarkValues,LogicalAggregator,ObjectiveQualifier,UserDefinedQualifier){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.ConstraintGrade=ConstraintGrade;this.ConstraintSource=ConstraintSource;this.CreatingActor=CreatingActor;this.CreationTime=CreationTime;this.UserDefinedGrade=UserDefinedGrade;this.BenchmarkValues=BenchmarkValues;this.LogicalAggregator=LogicalAggregator;this.ObjectiveQualifier=ObjectiveQualifier;this.UserDefinedQualifier=UserDefinedQualifier;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let ConstraintGrade=tape[ptr++];let ConstraintSource=tape[ptr++];let CreatingActor=tape[ptr++];let CreationTime=tape[ptr++];let UserDefinedGrade=tape[ptr++];let BenchmarkValues=tape[ptr++];let LogicalAggregator=tape[ptr++];let ObjectiveQualifier=tape[ptr++];let UserDefinedQualifier=tape[ptr++];return new IfcObjective(expressID,type,Name,Description,ConstraintGrade,ConstraintSource,CreatingActor,CreationTime,UserDefinedGrade,BenchmarkValues,LogicalAggregator,ObjectiveQualifier,UserDefinedQualifier);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.ConstraintGrade);;args.push(this.ConstraintSource);;args.push(this.CreatingActor);;args.push(this.CreationTime);;args.push(this.UserDefinedGrade);;args.push(this.BenchmarkValues);;args.push(this.LogicalAggregator);;args.push(this.ObjectiveQualifier);;args.push(this.UserDefinedQualifier);;return args;}};exports.IfcObjective=IfcObjective;var IfcOccupant=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheActor,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.TheActor=TheActor;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let TheActor=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcOccupant(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheActor,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.TheActor);;args.push(this.PredefinedType);;return args;}};exports.IfcOccupant=IfcOccupant;var IfcOffsetCurve=class{constructor(expressID,type,BasisCurve){this.expressID=expressID;this.type=type;this.BasisCurve=BasisCurve;}static FromTape(expressID,type,tape){let ptr=0;let BasisCurve=tape[ptr++];return new IfcOffsetCurve(expressID,type,BasisCurve);}ToTape(){let args=[];args.push(this.BasisCurve);;return args;}};exports.IfcOffsetCurve=IfcOffsetCurve;var IfcOffsetCurve2D=class{constructor(expressID,type,BasisCurve,Distance,SelfIntersect){this.expressID=expressID;this.type=type;this.BasisCurve=BasisCurve;this.Distance=Distance;this.SelfIntersect=SelfIntersect;}static FromTape(expressID,type,tape){let ptr=0;let BasisCurve=tape[ptr++];let Distance=tape[ptr++];let SelfIntersect=tape[ptr++];return new IfcOffsetCurve2D(expressID,type,BasisCurve,Distance,SelfIntersect);}ToTape(){let args=[];args.push(this.BasisCurve);;args.push(this.Distance);;args.push(this.SelfIntersect);;return args;}};exports.IfcOffsetCurve2D=IfcOffsetCurve2D;var IfcOffsetCurve3D=class{constructor(expressID,type,BasisCurve,Distance,SelfIntersect,RefDirection){this.expressID=expressID;this.type=type;this.BasisCurve=BasisCurve;this.Distance=Distance;this.SelfIntersect=SelfIntersect;this.RefDirection=RefDirection;}static FromTape(expressID,type,tape){let ptr=0;let BasisCurve=tape[ptr++];let Distance=tape[ptr++];let SelfIntersect=tape[ptr++];let RefDirection=tape[ptr++];return new IfcOffsetCurve3D(expressID,type,BasisCurve,Distance,SelfIntersect,RefDirection);}ToTape(){let args=[];args.push(this.BasisCurve);;args.push(this.Distance);;args.push(this.SelfIntersect);;args.push(this.RefDirection);;return args;}};exports.IfcOffsetCurve3D=IfcOffsetCurve3D;var IfcOffsetCurveByDistances=class{constructor(expressID,type,BasisCurve,OffsetValues,Tag){this.expressID=expressID;this.type=type;this.BasisCurve=BasisCurve;this.OffsetValues=OffsetValues;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let BasisCurve=tape[ptr++];let OffsetValues=tape[ptr++];let Tag=tape[ptr++];return new IfcOffsetCurveByDistances(expressID,type,BasisCurve,OffsetValues,Tag);}ToTape(){let args=[];args.push(this.BasisCurve);;args.push(this.OffsetValues);;args.push(this.Tag);;return args;}};exports.IfcOffsetCurveByDistances=IfcOffsetCurveByDistances;var IfcOpenShell=class{constructor(expressID,type,CfsFaces){this.expressID=expressID;this.type=type;this.CfsFaces=CfsFaces;}static FromTape(expressID,type,tape){let ptr=0;let CfsFaces=tape[ptr++];return new IfcOpenShell(expressID,type,CfsFaces);}ToTape(){let args=[];args.push(this.CfsFaces);;return args;}};exports.IfcOpenShell=IfcOpenShell;var IfcOpeningElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcOpeningElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcOpeningElement=IfcOpeningElement;var IfcOpeningStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcOpeningStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcOpeningStandardCase=IfcOpeningStandardCase;var IfcOrganization=class{constructor(expressID,type,Identification,Name,Description,Roles,Addresses){this.expressID=expressID;this.type=type;this.Identification=Identification;this.Name=Name;this.Description=Description;this.Roles=Roles;this.Addresses=Addresses;}static FromTape(expressID,type,tape){let ptr=0;let Identification=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let Roles=tape[ptr++];let Addresses=tape[ptr++];return new IfcOrganization(expressID,type,Identification,Name,Description,Roles,Addresses);}ToTape(){let args=[];args.push(this.Identification);;args.push(this.Name);;args.push(this.Description);;args.push(this.Roles);;args.push(this.Addresses);;return args;}};exports.IfcOrganization=IfcOrganization;var IfcOrganizationRelationship=class{constructor(expressID,type,Name,Description,RelatingOrganization,RelatedOrganizations){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.RelatingOrganization=RelatingOrganization;this.RelatedOrganizations=RelatedOrganizations;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let RelatingOrganization=tape[ptr++];let RelatedOrganizations=tape[ptr++];return new IfcOrganizationRelationship(expressID,type,Name,Description,RelatingOrganization,RelatedOrganizations);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingOrganization);;args.push(this.RelatedOrganizations);;return args;}};exports.IfcOrganizationRelationship=IfcOrganizationRelationship;var IfcOrientationExpression=class{constructor(expressID,type,LateralAxisDirection,VerticalAxisDirection){this.expressID=expressID;this.type=type;this.LateralAxisDirection=LateralAxisDirection;this.VerticalAxisDirection=VerticalAxisDirection;}static FromTape(expressID,type,tape){let ptr=0;let LateralAxisDirection=tape[ptr++];let VerticalAxisDirection=tape[ptr++];return new IfcOrientationExpression(expressID,type,LateralAxisDirection,VerticalAxisDirection);}ToTape(){let args=[];args.push(this.LateralAxisDirection);;args.push(this.VerticalAxisDirection);;return args;}};exports.IfcOrientationExpression=IfcOrientationExpression;var IfcOrientedEdge=class{constructor(expressID,type,EdgeStart,EdgeEnd,EdgeElement,Orientation){this.expressID=expressID;this.type=type;this.EdgeStart=EdgeStart;this.EdgeEnd=EdgeEnd;this.EdgeElement=EdgeElement;this.Orientation=Orientation;}static FromTape(expressID,type,tape){let ptr=0;let EdgeStart=tape[ptr++];let EdgeEnd=tape[ptr++];let EdgeElement=tape[ptr++];let Orientation=tape[ptr++];return new IfcOrientedEdge(expressID,type,EdgeStart,EdgeEnd,EdgeElement,Orientation);}ToTape(){let args=[];args.push(this.EdgeStart);;args.push(this.EdgeEnd);;args.push(this.EdgeElement);;args.push(this.Orientation);;return args;}};exports.IfcOrientedEdge=IfcOrientedEdge;var IfcOuterBoundaryCurve=class{constructor(expressID,type,Segments,SelfIntersect){this.expressID=expressID;this.type=type;this.Segments=Segments;this.SelfIntersect=SelfIntersect;}static FromTape(expressID,type,tape){let ptr=0;let Segments=tape[ptr++];let SelfIntersect=tape[ptr++];return new IfcOuterBoundaryCurve(expressID,type,Segments,SelfIntersect);}ToTape(){let args=[];args.push(this.Segments);;args.push(this.SelfIntersect);;return args;}};exports.IfcOuterBoundaryCurve=IfcOuterBoundaryCurve;var IfcOutlet=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcOutlet(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcOutlet=IfcOutlet;var IfcOutletType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcOutletType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcOutletType=IfcOutletType;var IfcOwnerHistory=class{constructor(expressID,type,OwningUser,OwningApplication,State,ChangeAction,LastModifiedDate,LastModifyingUser,LastModifyingApplication,CreationDate){this.expressID=expressID;this.type=type;this.OwningUser=OwningUser;this.OwningApplication=OwningApplication;this.State=State;this.ChangeAction=ChangeAction;this.LastModifiedDate=LastModifiedDate;this.LastModifyingUser=LastModifyingUser;this.LastModifyingApplication=LastModifyingApplication;this.CreationDate=CreationDate;}static FromTape(expressID,type,tape){let ptr=0;let OwningUser=tape[ptr++];let OwningApplication=tape[ptr++];let State=tape[ptr++];let ChangeAction=tape[ptr++];let LastModifiedDate=tape[ptr++];let LastModifyingUser=tape[ptr++];let LastModifyingApplication=tape[ptr++];let CreationDate=tape[ptr++];return new IfcOwnerHistory(expressID,type,OwningUser,OwningApplication,State,ChangeAction,LastModifiedDate,LastModifyingUser,LastModifyingApplication,CreationDate);}ToTape(){let args=[];args.push(this.OwningUser);;args.push(this.OwningApplication);;args.push(this.State);;args.push(this.ChangeAction);;args.push(this.LastModifiedDate);;args.push(this.LastModifyingUser);;args.push(this.LastModifyingApplication);;args.push(this.CreationDate);;return args;}};exports.IfcOwnerHistory=IfcOwnerHistory;var IfcParameterizedProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];return new IfcParameterizedProfileDef(expressID,type,ProfileType,ProfileName,Position);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;return args;}};exports.IfcParameterizedProfileDef=IfcParameterizedProfileDef;var IfcPath=class{constructor(expressID,type,EdgeList){this.expressID=expressID;this.type=type;this.EdgeList=EdgeList;}static FromTape(expressID,type,tape){let ptr=0;let EdgeList=tape[ptr++];return new IfcPath(expressID,type,EdgeList);}ToTape(){let args=[];args.push(this.EdgeList);;return args;}};exports.IfcPath=IfcPath;var IfcPcurve=class{constructor(expressID,type,BasisSurface,ReferenceCurve){this.expressID=expressID;this.type=type;this.BasisSurface=BasisSurface;this.ReferenceCurve=ReferenceCurve;}static FromTape(expressID,type,tape){let ptr=0;let BasisSurface=tape[ptr++];let ReferenceCurve=tape[ptr++];return new IfcPcurve(expressID,type,BasisSurface,ReferenceCurve);}ToTape(){let args=[];args.push(this.BasisSurface);;args.push(this.ReferenceCurve);;return args;}};exports.IfcPcurve=IfcPcurve;var IfcPerformanceHistory=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LifeCyclePhase,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LifeCyclePhase=LifeCyclePhase;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LifeCyclePhase=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPerformanceHistory(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LifeCyclePhase,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LifeCyclePhase);;args.push(this.PredefinedType);;return args;}};exports.IfcPerformanceHistory=IfcPerformanceHistory;var IfcPermeableCoveringProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,OperationType,PanelPosition,FrameDepth,FrameThickness,ShapeAspectStyle){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.OperationType=OperationType;this.PanelPosition=PanelPosition;this.FrameDepth=FrameDepth;this.FrameThickness=FrameThickness;this.ShapeAspectStyle=ShapeAspectStyle;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let OperationType=tape[ptr++];let PanelPosition=tape[ptr++];let FrameDepth=tape[ptr++];let FrameThickness=tape[ptr++];let ShapeAspectStyle=tape[ptr++];return new IfcPermeableCoveringProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,OperationType,PanelPosition,FrameDepth,FrameThickness,ShapeAspectStyle);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.OperationType);;args.push(this.PanelPosition);;args.push(this.FrameDepth);;args.push(this.FrameThickness);;args.push(this.ShapeAspectStyle);;return args;}};exports.IfcPermeableCoveringProperties=IfcPermeableCoveringProperties;var IfcPermit=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.PredefinedType=PredefinedType;this.Status=Status;this.LongDescription=LongDescription;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let PredefinedType=tape[ptr++];let Status=tape[ptr++];let LongDescription=tape[ptr++];return new IfcPermit(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.PredefinedType);;args.push(this.Status);;args.push(this.LongDescription);;return args;}};exports.IfcPermit=IfcPermit;var IfcPerson=class{constructor(expressID,type,Identification,FamilyName,GivenName,MiddleNames,PrefixTitles,SuffixTitles,Roles,Addresses){this.expressID=expressID;this.type=type;this.Identification=Identification;this.FamilyName=FamilyName;this.GivenName=GivenName;this.MiddleNames=MiddleNames;this.PrefixTitles=PrefixTitles;this.SuffixTitles=SuffixTitles;this.Roles=Roles;this.Addresses=Addresses;}static FromTape(expressID,type,tape){let ptr=0;let Identification=tape[ptr++];let FamilyName=tape[ptr++];let GivenName=tape[ptr++];let MiddleNames=tape[ptr++];let PrefixTitles=tape[ptr++];let SuffixTitles=tape[ptr++];let Roles=tape[ptr++];let Addresses=tape[ptr++];return new IfcPerson(expressID,type,Identification,FamilyName,GivenName,MiddleNames,PrefixTitles,SuffixTitles,Roles,Addresses);}ToTape(){let args=[];args.push(this.Identification);;args.push(this.FamilyName);;args.push(this.GivenName);;args.push(this.MiddleNames);;args.push(this.PrefixTitles);;args.push(this.SuffixTitles);;args.push(this.Roles);;args.push(this.Addresses);;return args;}};exports.IfcPerson=IfcPerson;var IfcPersonAndOrganization=class{constructor(expressID,type,ThePerson,TheOrganization,Roles){this.expressID=expressID;this.type=type;this.ThePerson=ThePerson;this.TheOrganization=TheOrganization;this.Roles=Roles;}static FromTape(expressID,type,tape){let ptr=0;let ThePerson=tape[ptr++];let TheOrganization=tape[ptr++];let Roles=tape[ptr++];return new IfcPersonAndOrganization(expressID,type,ThePerson,TheOrganization,Roles);}ToTape(){let args=[];args.push(this.ThePerson);;args.push(this.TheOrganization);;args.push(this.Roles);;return args;}};exports.IfcPersonAndOrganization=IfcPersonAndOrganization;var IfcPhysicalComplexQuantity=class{constructor(expressID,type,Name,Description,HasQuantities,Discrimination,Quality,Usage){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.HasQuantities=HasQuantities;this.Discrimination=Discrimination;this.Quality=Quality;this.Usage=Usage;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let HasQuantities=tape[ptr++];let Discrimination=tape[ptr++];let Quality=tape[ptr++];let Usage=tape[ptr++];return new IfcPhysicalComplexQuantity(expressID,type,Name,Description,HasQuantities,Discrimination,Quality,Usage);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.HasQuantities);;args.push(this.Discrimination);;args.push(this.Quality);;args.push(this.Usage);;return args;}};exports.IfcPhysicalComplexQuantity=IfcPhysicalComplexQuantity;var IfcPhysicalQuantity=class{constructor(expressID,type,Name,Description){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];return new IfcPhysicalQuantity(expressID,type,Name,Description);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcPhysicalQuantity=IfcPhysicalQuantity;var IfcPhysicalSimpleQuantity=class{constructor(expressID,type,Name,Description,Unit){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Unit=Unit;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Unit=tape[ptr++];return new IfcPhysicalSimpleQuantity(expressID,type,Name,Description,Unit);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Unit);;return args;}};exports.IfcPhysicalSimpleQuantity=IfcPhysicalSimpleQuantity;var IfcPile=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType,ConstructionType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;this.ConstructionType=ConstructionType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];let ConstructionType=tape[ptr++];return new IfcPile(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType,ConstructionType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;args.push(this.ConstructionType);;return args;}};exports.IfcPile=IfcPile;var IfcPileType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPileType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcPileType=IfcPileType;var IfcPipeFitting=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPipeFitting(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcPipeFitting=IfcPipeFitting;var IfcPipeFittingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPipeFittingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcPipeFittingType=IfcPipeFittingType;var IfcPipeSegment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPipeSegment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcPipeSegment=IfcPipeSegment;var IfcPipeSegmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPipeSegmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcPipeSegmentType=IfcPipeSegmentType;var IfcPixelTexture=class{constructor(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,Width,Height,ColourComponents,Pixel){this.expressID=expressID;this.type=type;this.RepeatS=RepeatS;this.RepeatT=RepeatT;this.Mode=Mode;this.TextureTransform=TextureTransform;this.Parameter=Parameter;this.Width=Width;this.Height=Height;this.ColourComponents=ColourComponents;this.Pixel=Pixel;}static FromTape(expressID,type,tape){let ptr=0;let RepeatS=tape[ptr++];let RepeatT=tape[ptr++];let Mode=tape[ptr++];let TextureTransform=tape[ptr++];let Parameter=tape[ptr++];let Width=tape[ptr++];let Height=tape[ptr++];let ColourComponents=tape[ptr++];let Pixel=tape[ptr++];return new IfcPixelTexture(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter,Width,Height,ColourComponents,Pixel);}ToTape(){let args=[];args.push(this.RepeatS);;args.push(this.RepeatT);;args.push(this.Mode);;args.push(this.TextureTransform);;args.push(this.Parameter);;args.push(this.Width);;args.push(this.Height);;args.push(this.ColourComponents);;args.push(this.Pixel);;return args;}};exports.IfcPixelTexture=IfcPixelTexture;var IfcPlacement=class{constructor(expressID,type,Location){this.expressID=expressID;this.type=type;this.Location=Location;}static FromTape(expressID,type,tape){let ptr=0;let Location=tape[ptr++];return new IfcPlacement(expressID,type,Location);}ToTape(){let args=[];args.push(this.Location);;return args;}};exports.IfcPlacement=IfcPlacement;var IfcPlanarBox=class{constructor(expressID,type,SizeInX,SizeInY,Placement){this.expressID=expressID;this.type=type;this.SizeInX=SizeInX;this.SizeInY=SizeInY;this.Placement=Placement;}static FromTape(expressID,type,tape){let ptr=0;let SizeInX=tape[ptr++];let SizeInY=tape[ptr++];let Placement=tape[ptr++];return new IfcPlanarBox(expressID,type,SizeInX,SizeInY,Placement);}ToTape(){let args=[];args.push(this.SizeInX);;args.push(this.SizeInY);;args.push(this.Placement);;return args;}};exports.IfcPlanarBox=IfcPlanarBox;var IfcPlanarExtent=class{constructor(expressID,type,SizeInX,SizeInY){this.expressID=expressID;this.type=type;this.SizeInX=SizeInX;this.SizeInY=SizeInY;}static FromTape(expressID,type,tape){let ptr=0;let SizeInX=tape[ptr++];let SizeInY=tape[ptr++];return new IfcPlanarExtent(expressID,type,SizeInX,SizeInY);}ToTape(){let args=[];args.push(this.SizeInX);;args.push(this.SizeInY);;return args;}};exports.IfcPlanarExtent=IfcPlanarExtent;var IfcPlane=class{constructor(expressID,type,Position){this.expressID=expressID;this.type=type;this.Position=Position;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];return new IfcPlane(expressID,type,Position);}ToTape(){let args=[];args.push(this.Position);;return args;}};exports.IfcPlane=IfcPlane;var IfcPlate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPlate(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcPlate=IfcPlate;var IfcPlateStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPlateStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcPlateStandardCase=IfcPlateStandardCase;var IfcPlateType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPlateType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcPlateType=IfcPlateType;var IfcPoint=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcPoint(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcPoint=IfcPoint;var IfcPointOnCurve=class{constructor(expressID,type,BasisCurve,PointParameter){this.expressID=expressID;this.type=type;this.BasisCurve=BasisCurve;this.PointParameter=PointParameter;}static FromTape(expressID,type,tape){let ptr=0;let BasisCurve=tape[ptr++];let PointParameter=tape[ptr++];return new IfcPointOnCurve(expressID,type,BasisCurve,PointParameter);}ToTape(){let args=[];args.push(this.BasisCurve);;args.push(this.PointParameter);;return args;}};exports.IfcPointOnCurve=IfcPointOnCurve;var IfcPointOnSurface=class{constructor(expressID,type,BasisSurface,PointParameterU,PointParameterV){this.expressID=expressID;this.type=type;this.BasisSurface=BasisSurface;this.PointParameterU=PointParameterU;this.PointParameterV=PointParameterV;}static FromTape(expressID,type,tape){let ptr=0;let BasisSurface=tape[ptr++];let PointParameterU=tape[ptr++];let PointParameterV=tape[ptr++];return new IfcPointOnSurface(expressID,type,BasisSurface,PointParameterU,PointParameterV);}ToTape(){let args=[];args.push(this.BasisSurface);;args.push(this.PointParameterU);;args.push(this.PointParameterV);;return args;}};exports.IfcPointOnSurface=IfcPointOnSurface;var IfcPolyLoop=class{constructor(expressID,type,Polygon){this.expressID=expressID;this.type=type;this.Polygon=Polygon;}static FromTape(expressID,type,tape){let ptr=0;let Polygon=tape[ptr++];return new IfcPolyLoop(expressID,type,Polygon);}ToTape(){let args=[];args.push(this.Polygon);;return args;}};exports.IfcPolyLoop=IfcPolyLoop;var IfcPolygonalBoundedHalfSpace=class{constructor(expressID,type,BaseSurface,AgreementFlag,Position,PolygonalBoundary){this.expressID=expressID;this.type=type;this.BaseSurface=BaseSurface;this.AgreementFlag=AgreementFlag;this.Position=Position;this.PolygonalBoundary=PolygonalBoundary;}static FromTape(expressID,type,tape){let ptr=0;let BaseSurface=tape[ptr++];let AgreementFlag=tape[ptr++];let Position=tape[ptr++];let PolygonalBoundary=tape[ptr++];return new IfcPolygonalBoundedHalfSpace(expressID,type,BaseSurface,AgreementFlag,Position,PolygonalBoundary);}ToTape(){let args=[];args.push(this.BaseSurface);;args.push(this.AgreementFlag);;args.push(this.Position);;args.push(this.PolygonalBoundary);;return args;}};exports.IfcPolygonalBoundedHalfSpace=IfcPolygonalBoundedHalfSpace;var IfcPolygonalFaceSet=class{constructor(expressID,type,Coordinates,Closed,Faces,PnIndex){this.expressID=expressID;this.type=type;this.Coordinates=Coordinates;this.Closed=Closed;this.Faces=Faces;this.PnIndex=PnIndex;}static FromTape(expressID,type,tape){let ptr=0;let Coordinates=tape[ptr++];let Closed=tape[ptr++];let Faces=tape[ptr++];let PnIndex=tape[ptr++];return new IfcPolygonalFaceSet(expressID,type,Coordinates,Closed,Faces,PnIndex);}ToTape(){let args=[];args.push(this.Coordinates);;args.push(this.Closed);;args.push(this.Faces);;args.push(this.PnIndex);;return args;}};exports.IfcPolygonalFaceSet=IfcPolygonalFaceSet;var IfcPolyline=class{constructor(expressID,type,Points){this.expressID=expressID;this.type=type;this.Points=Points;}static FromTape(expressID,type,tape){let ptr=0;let Points=tape[ptr++];return new IfcPolyline(expressID,type,Points);}ToTape(){let args=[];args.push(this.Points);;return args;}};exports.IfcPolyline=IfcPolyline;var IfcPort=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];return new IfcPort(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;return args;}};exports.IfcPort=IfcPort;var IfcPositioningElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];return new IfcPositioningElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;return args;}};exports.IfcPositioningElement=IfcPositioningElement;var IfcPostalAddress=class{constructor(expressID,type,Purpose,Description,UserDefinedPurpose,InternalLocation,AddressLines,PostalBox,Town,Region,PostalCode,Country){this.expressID=expressID;this.type=type;this.Purpose=Purpose;this.Description=Description;this.UserDefinedPurpose=UserDefinedPurpose;this.InternalLocation=InternalLocation;this.AddressLines=AddressLines;this.PostalBox=PostalBox;this.Town=Town;this.Region=Region;this.PostalCode=PostalCode;this.Country=Country;}static FromTape(expressID,type,tape){let ptr=0;let Purpose=tape[ptr++];let Description=tape[ptr++];let UserDefinedPurpose=tape[ptr++];let InternalLocation=tape[ptr++];let AddressLines=tape[ptr++];let PostalBox=tape[ptr++];let Town=tape[ptr++];let Region=tape[ptr++];let PostalCode=tape[ptr++];let Country=tape[ptr++];return new IfcPostalAddress(expressID,type,Purpose,Description,UserDefinedPurpose,InternalLocation,AddressLines,PostalBox,Town,Region,PostalCode,Country);}ToTape(){let args=[];args.push(this.Purpose);;args.push(this.Description);;args.push(this.UserDefinedPurpose);;args.push(this.InternalLocation);;args.push(this.AddressLines);;args.push(this.PostalBox);;args.push(this.Town);;args.push(this.Region);;args.push(this.PostalCode);;args.push(this.Country);;return args;}};exports.IfcPostalAddress=IfcPostalAddress;var IfcPreDefinedColour=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcPreDefinedColour(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcPreDefinedColour=IfcPreDefinedColour;var IfcPreDefinedCurveFont=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcPreDefinedCurveFont(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcPreDefinedCurveFont=IfcPreDefinedCurveFont;var IfcPreDefinedItem=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcPreDefinedItem(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcPreDefinedItem=IfcPreDefinedItem;var IfcPreDefinedProperties=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcPreDefinedProperties(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcPreDefinedProperties=IfcPreDefinedProperties;var IfcPreDefinedPropertySet=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcPreDefinedPropertySet(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcPreDefinedPropertySet=IfcPreDefinedPropertySet;var IfcPreDefinedTextFont=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcPreDefinedTextFont(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcPreDefinedTextFont=IfcPreDefinedTextFont;var IfcPresentationItem=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcPresentationItem(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcPresentationItem=IfcPresentationItem;var IfcPresentationLayerAssignment=class{constructor(expressID,type,Name,Description,AssignedItems,Identifier){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.AssignedItems=AssignedItems;this.Identifier=Identifier;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let AssignedItems=tape[ptr++];let Identifier=tape[ptr++];return new IfcPresentationLayerAssignment(expressID,type,Name,Description,AssignedItems,Identifier);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.AssignedItems);;args.push(this.Identifier);;return args;}};exports.IfcPresentationLayerAssignment=IfcPresentationLayerAssignment;var IfcPresentationLayerWithStyle=class{constructor(expressID,type,Name,Description,AssignedItems,Identifier,LayerOn,LayerFrozen,LayerBlocked,LayerStyles){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.AssignedItems=AssignedItems;this.Identifier=Identifier;this.LayerOn=LayerOn;this.LayerFrozen=LayerFrozen;this.LayerBlocked=LayerBlocked;this.LayerStyles=LayerStyles;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let AssignedItems=tape[ptr++];let Identifier=tape[ptr++];let LayerOn=tape[ptr++];let LayerFrozen=tape[ptr++];let LayerBlocked=tape[ptr++];let LayerStyles=tape[ptr++];return new IfcPresentationLayerWithStyle(expressID,type,Name,Description,AssignedItems,Identifier,LayerOn,LayerFrozen,LayerBlocked,LayerStyles);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.AssignedItems);;args.push(this.Identifier);;args.push(this.LayerOn);;args.push(this.LayerFrozen);;args.push(this.LayerBlocked);;args.push(this.LayerStyles);;return args;}};exports.IfcPresentationLayerWithStyle=IfcPresentationLayerWithStyle;var IfcPresentationStyle=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcPresentationStyle(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcPresentationStyle=IfcPresentationStyle;var IfcPresentationStyleAssignment=class{constructor(expressID,type,Styles){this.expressID=expressID;this.type=type;this.Styles=Styles;}static FromTape(expressID,type,tape){let ptr=0;let Styles=tape[ptr++];return new IfcPresentationStyleAssignment(expressID,type,Styles);}ToTape(){let args=[];args.push(this.Styles);;return args;}};exports.IfcPresentationStyleAssignment=IfcPresentationStyleAssignment;var IfcProcedure=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcProcedure(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.PredefinedType);;return args;}};exports.IfcProcedure=IfcProcedure;var IfcProcedureType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ProcessType=ProcessType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ProcessType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcProcedureType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ProcessType);;args.push(this.PredefinedType);;return args;}};exports.IfcProcedureType=IfcProcedureType;var IfcProcess=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];return new IfcProcess(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;return args;}};exports.IfcProcess=IfcProcess;var IfcProduct=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];return new IfcProduct(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;return args;}};exports.IfcProduct=IfcProduct;var IfcProductDefinitionShape=class{constructor(expressID,type,Name,Description,Representations){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Representations=Representations;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Representations=tape[ptr++];return new IfcProductDefinitionShape(expressID,type,Name,Description,Representations);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Representations);;return args;}};exports.IfcProductDefinitionShape=IfcProductDefinitionShape;var IfcProductRepresentation=class{constructor(expressID,type,Name,Description,Representations){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Representations=Representations;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Representations=tape[ptr++];return new IfcProductRepresentation(expressID,type,Name,Description,Representations);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Representations);;return args;}};exports.IfcProductRepresentation=IfcProductRepresentation;var IfcProfileDef=class{constructor(expressID,type,ProfileType,ProfileName){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];return new IfcProfileDef(expressID,type,ProfileType,ProfileName);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;return args;}};exports.IfcProfileDef=IfcProfileDef;var IfcProfileProperties=class{constructor(expressID,type,Name,Description,Properties,ProfileDefinition){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Properties=Properties;this.ProfileDefinition=ProfileDefinition;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Properties=tape[ptr++];let ProfileDefinition=tape[ptr++];return new IfcProfileProperties(expressID,type,Name,Description,Properties,ProfileDefinition);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Properties);;args.push(this.ProfileDefinition);;return args;}};exports.IfcProfileProperties=IfcProfileProperties;var IfcProject=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.LongName=LongName;this.Phase=Phase;this.RepresentationContexts=RepresentationContexts;this.UnitsInContext=UnitsInContext;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let LongName=tape[ptr++];let Phase=tape[ptr++];let RepresentationContexts=tape[ptr++];let UnitsInContext=tape[ptr++];return new IfcProject(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.LongName);;args.push(this.Phase);;args.push(this.RepresentationContexts);;args.push(this.UnitsInContext);;return args;}};exports.IfcProject=IfcProject;var IfcProjectLibrary=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.LongName=LongName;this.Phase=Phase;this.RepresentationContexts=RepresentationContexts;this.UnitsInContext=UnitsInContext;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let LongName=tape[ptr++];let Phase=tape[ptr++];let RepresentationContexts=tape[ptr++];let UnitsInContext=tape[ptr++];return new IfcProjectLibrary(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName,Phase,RepresentationContexts,UnitsInContext);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.LongName);;args.push(this.Phase);;args.push(this.RepresentationContexts);;args.push(this.UnitsInContext);;return args;}};exports.IfcProjectLibrary=IfcProjectLibrary;var IfcProjectOrder=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.PredefinedType=PredefinedType;this.Status=Status;this.LongDescription=LongDescription;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let PredefinedType=tape[ptr++];let Status=tape[ptr++];let LongDescription=tape[ptr++];return new IfcProjectOrder(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,PredefinedType,Status,LongDescription);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.PredefinedType);;args.push(this.Status);;args.push(this.LongDescription);;return args;}};exports.IfcProjectOrder=IfcProjectOrder;var IfcProjectedCRS=class{constructor(expressID,type,Name,Description,GeodeticDatum,VerticalDatum,MapProjection,MapZone,MapUnit){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.GeodeticDatum=GeodeticDatum;this.VerticalDatum=VerticalDatum;this.MapProjection=MapProjection;this.MapZone=MapZone;this.MapUnit=MapUnit;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let GeodeticDatum=tape[ptr++];let VerticalDatum=tape[ptr++];let MapProjection=tape[ptr++];let MapZone=tape[ptr++];let MapUnit=tape[ptr++];return new IfcProjectedCRS(expressID,type,Name,Description,GeodeticDatum,VerticalDatum,MapProjection,MapZone,MapUnit);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.GeodeticDatum);;args.push(this.VerticalDatum);;args.push(this.MapProjection);;args.push(this.MapZone);;args.push(this.MapUnit);;return args;}};exports.IfcProjectedCRS=IfcProjectedCRS;var IfcProjectionElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcProjectionElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcProjectionElement=IfcProjectionElement;var IfcProperty=class{constructor(expressID,type,Name,Description){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];return new IfcProperty(expressID,type,Name,Description);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcProperty=IfcProperty;var IfcPropertyAbstraction=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcPropertyAbstraction(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcPropertyAbstraction=IfcPropertyAbstraction;var IfcPropertyBoundedValue=class{constructor(expressID,type,Name,Description,UpperBoundValue,LowerBoundValue,Unit,SetPointValue){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.UpperBoundValue=UpperBoundValue;this.LowerBoundValue=LowerBoundValue;this.Unit=Unit;this.SetPointValue=SetPointValue;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let UpperBoundValue=tape[ptr++];let LowerBoundValue=tape[ptr++];let Unit=tape[ptr++];let SetPointValue=tape[ptr++];return new IfcPropertyBoundedValue(expressID,type,Name,Description,UpperBoundValue,LowerBoundValue,Unit,SetPointValue);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.UpperBoundValue);;args.push(this.LowerBoundValue);;args.push(this.Unit);;args.push(this.SetPointValue);;return args;}};exports.IfcPropertyBoundedValue=IfcPropertyBoundedValue;var IfcPropertyDefinition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcPropertyDefinition(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcPropertyDefinition=IfcPropertyDefinition;var IfcPropertyDependencyRelationship=class{constructor(expressID,type,Name,Description,DependingProperty,DependantProperty,Expression){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.DependingProperty=DependingProperty;this.DependantProperty=DependantProperty;this.Expression=Expression;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let DependingProperty=tape[ptr++];let DependantProperty=tape[ptr++];let Expression=tape[ptr++];return new IfcPropertyDependencyRelationship(expressID,type,Name,Description,DependingProperty,DependantProperty,Expression);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.DependingProperty);;args.push(this.DependantProperty);;args.push(this.Expression);;return args;}};exports.IfcPropertyDependencyRelationship=IfcPropertyDependencyRelationship;var IfcPropertyEnumeratedValue=class{constructor(expressID,type,Name,Description,EnumerationValues,EnumerationReference){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.EnumerationValues=EnumerationValues;this.EnumerationReference=EnumerationReference;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let EnumerationValues=tape[ptr++];let EnumerationReference=tape[ptr++];return new IfcPropertyEnumeratedValue(expressID,type,Name,Description,EnumerationValues,EnumerationReference);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.EnumerationValues);;args.push(this.EnumerationReference);;return args;}};exports.IfcPropertyEnumeratedValue=IfcPropertyEnumeratedValue;var IfcPropertyEnumeration=class{constructor(expressID,type,Name,EnumerationValues,Unit){this.expressID=expressID;this.type=type;this.Name=Name;this.EnumerationValues=EnumerationValues;this.Unit=Unit;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let EnumerationValues=tape[ptr++];let Unit=tape[ptr++];return new IfcPropertyEnumeration(expressID,type,Name,EnumerationValues,Unit);}ToTape(){let args=[];args.push(this.Name);;args.push(this.EnumerationValues);;args.push(this.Unit);;return args;}};exports.IfcPropertyEnumeration=IfcPropertyEnumeration;var IfcPropertyListValue=class{constructor(expressID,type,Name,Description,ListValues,Unit){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.ListValues=ListValues;this.Unit=Unit;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let ListValues=tape[ptr++];let Unit=tape[ptr++];return new IfcPropertyListValue(expressID,type,Name,Description,ListValues,Unit);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.ListValues);;args.push(this.Unit);;return args;}};exports.IfcPropertyListValue=IfcPropertyListValue;var IfcPropertyReferenceValue=class{constructor(expressID,type,Name,Description,UsageName,PropertyReference){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.UsageName=UsageName;this.PropertyReference=PropertyReference;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let UsageName=tape[ptr++];let PropertyReference=tape[ptr++];return new IfcPropertyReferenceValue(expressID,type,Name,Description,UsageName,PropertyReference);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.UsageName);;args.push(this.PropertyReference);;return args;}};exports.IfcPropertyReferenceValue=IfcPropertyReferenceValue;var IfcPropertySet=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,HasProperties){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.HasProperties=HasProperties;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let HasProperties=tape[ptr++];return new IfcPropertySet(expressID,type,GlobalId,OwnerHistory,Name,Description,HasProperties);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.HasProperties);;return args;}};exports.IfcPropertySet=IfcPropertySet;var IfcPropertySetDefinition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcPropertySetDefinition(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcPropertySetDefinition=IfcPropertySetDefinition;var IfcPropertySetTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,TemplateType,ApplicableEntity,HasPropertyTemplates){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.TemplateType=TemplateType;this.ApplicableEntity=ApplicableEntity;this.HasPropertyTemplates=HasPropertyTemplates;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let TemplateType=tape[ptr++];let ApplicableEntity=tape[ptr++];let HasPropertyTemplates=tape[ptr++];return new IfcPropertySetTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description,TemplateType,ApplicableEntity,HasPropertyTemplates);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.TemplateType);;args.push(this.ApplicableEntity);;args.push(this.HasPropertyTemplates);;return args;}};exports.IfcPropertySetTemplate=IfcPropertySetTemplate;var IfcPropertySingleValue=class{constructor(expressID,type,Name,Description,NominalValue,Unit){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.NominalValue=NominalValue;this.Unit=Unit;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let NominalValue=tape[ptr++];let Unit=tape[ptr++];return new IfcPropertySingleValue(expressID,type,Name,Description,NominalValue,Unit);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.NominalValue);;args.push(this.Unit);;return args;}};exports.IfcPropertySingleValue=IfcPropertySingleValue;var IfcPropertyTableValue=class{constructor(expressID,type,Name,Description,DefiningValues,DefinedValues,Expression,DefiningUnit,DefinedUnit,CurveInterpolation){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.DefiningValues=DefiningValues;this.DefinedValues=DefinedValues;this.Expression=Expression;this.DefiningUnit=DefiningUnit;this.DefinedUnit=DefinedUnit;this.CurveInterpolation=CurveInterpolation;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let DefiningValues=tape[ptr++];let DefinedValues=tape[ptr++];let Expression=tape[ptr++];let DefiningUnit=tape[ptr++];let DefinedUnit=tape[ptr++];let CurveInterpolation=tape[ptr++];return new IfcPropertyTableValue(expressID,type,Name,Description,DefiningValues,DefinedValues,Expression,DefiningUnit,DefinedUnit,CurveInterpolation);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.DefiningValues);;args.push(this.DefinedValues);;args.push(this.Expression);;args.push(this.DefiningUnit);;args.push(this.DefinedUnit);;args.push(this.CurveInterpolation);;return args;}};exports.IfcPropertyTableValue=IfcPropertyTableValue;var IfcPropertyTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcPropertyTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcPropertyTemplate=IfcPropertyTemplate;var IfcPropertyTemplateDefinition=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcPropertyTemplateDefinition(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcPropertyTemplateDefinition=IfcPropertyTemplateDefinition;var IfcProtectiveDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcProtectiveDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcProtectiveDevice=IfcProtectiveDevice;var IfcProtectiveDeviceTrippingUnit=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcProtectiveDeviceTrippingUnit(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcProtectiveDeviceTrippingUnit=IfcProtectiveDeviceTrippingUnit;var IfcProtectiveDeviceTrippingUnitType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcProtectiveDeviceTrippingUnitType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcProtectiveDeviceTrippingUnitType=IfcProtectiveDeviceTrippingUnitType;var IfcProtectiveDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcProtectiveDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcProtectiveDeviceType=IfcProtectiveDeviceType;var IfcProxy=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,ProxyType,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.ProxyType=ProxyType;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let ProxyType=tape[ptr++];let Tag=tape[ptr++];return new IfcProxy(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,ProxyType,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.ProxyType);;args.push(this.Tag);;return args;}};exports.IfcProxy=IfcProxy;var IfcPump=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPump(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcPump=IfcPump;var IfcPumpType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcPumpType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcPumpType=IfcPumpType;var IfcQuantityArea=class{constructor(expressID,type,Name,Description,Unit,AreaValue,Formula){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Unit=Unit;this.AreaValue=AreaValue;this.Formula=Formula;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Unit=tape[ptr++];let AreaValue=tape[ptr++];let Formula=tape[ptr++];return new IfcQuantityArea(expressID,type,Name,Description,Unit,AreaValue,Formula);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Unit);;args.push(this.AreaValue);;args.push(this.Formula);;return args;}};exports.IfcQuantityArea=IfcQuantityArea;var IfcQuantityCount=class{constructor(expressID,type,Name,Description,Unit,CountValue,Formula){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Unit=Unit;this.CountValue=CountValue;this.Formula=Formula;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Unit=tape[ptr++];let CountValue=tape[ptr++];let Formula=tape[ptr++];return new IfcQuantityCount(expressID,type,Name,Description,Unit,CountValue,Formula);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Unit);;args.push(this.CountValue);;args.push(this.Formula);;return args;}};exports.IfcQuantityCount=IfcQuantityCount;var IfcQuantityLength=class{constructor(expressID,type,Name,Description,Unit,LengthValue,Formula){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Unit=Unit;this.LengthValue=LengthValue;this.Formula=Formula;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Unit=tape[ptr++];let LengthValue=tape[ptr++];let Formula=tape[ptr++];return new IfcQuantityLength(expressID,type,Name,Description,Unit,LengthValue,Formula);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Unit);;args.push(this.LengthValue);;args.push(this.Formula);;return args;}};exports.IfcQuantityLength=IfcQuantityLength;var IfcQuantitySet=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcQuantitySet(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcQuantitySet=IfcQuantitySet;var IfcQuantityTime=class{constructor(expressID,type,Name,Description,Unit,TimeValue,Formula){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Unit=Unit;this.TimeValue=TimeValue;this.Formula=Formula;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Unit=tape[ptr++];let TimeValue=tape[ptr++];let Formula=tape[ptr++];return new IfcQuantityTime(expressID,type,Name,Description,Unit,TimeValue,Formula);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Unit);;args.push(this.TimeValue);;args.push(this.Formula);;return args;}};exports.IfcQuantityTime=IfcQuantityTime;var IfcQuantityVolume=class{constructor(expressID,type,Name,Description,Unit,VolumeValue,Formula){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Unit=Unit;this.VolumeValue=VolumeValue;this.Formula=Formula;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Unit=tape[ptr++];let VolumeValue=tape[ptr++];let Formula=tape[ptr++];return new IfcQuantityVolume(expressID,type,Name,Description,Unit,VolumeValue,Formula);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Unit);;args.push(this.VolumeValue);;args.push(this.Formula);;return args;}};exports.IfcQuantityVolume=IfcQuantityVolume;var IfcQuantityWeight=class{constructor(expressID,type,Name,Description,Unit,WeightValue,Formula){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.Unit=Unit;this.WeightValue=WeightValue;this.Formula=Formula;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let Unit=tape[ptr++];let WeightValue=tape[ptr++];let Formula=tape[ptr++];return new IfcQuantityWeight(expressID,type,Name,Description,Unit,WeightValue,Formula);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.Unit);;args.push(this.WeightValue);;args.push(this.Formula);;return args;}};exports.IfcQuantityWeight=IfcQuantityWeight;var IfcRailing=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcRailing(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcRailing=IfcRailing;var IfcRailingType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcRailingType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcRailingType=IfcRailingType;var IfcRamp=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcRamp(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcRamp=IfcRamp;var IfcRampFlight=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcRampFlight(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcRampFlight=IfcRampFlight;var IfcRampFlightType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcRampFlightType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcRampFlightType=IfcRampFlightType;var IfcRampType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcRampType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcRampType=IfcRampType;var IfcRationalBSplineCurveWithKnots=class{constructor(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect,KnotMultiplicities,Knots,KnotSpec,WeightsData){this.expressID=expressID;this.type=type;this.Degree=Degree;this.ControlPointsList=ControlPointsList;this.CurveForm=CurveForm;this.ClosedCurve=ClosedCurve;this.SelfIntersect=SelfIntersect;this.KnotMultiplicities=KnotMultiplicities;this.Knots=Knots;this.KnotSpec=KnotSpec;this.WeightsData=WeightsData;}static FromTape(expressID,type,tape){let ptr=0;let Degree=tape[ptr++];let ControlPointsList=tape[ptr++];let CurveForm=tape[ptr++];let ClosedCurve=tape[ptr++];let SelfIntersect=tape[ptr++];let KnotMultiplicities=tape[ptr++];let Knots=tape[ptr++];let KnotSpec=tape[ptr++];let WeightsData=tape[ptr++];return new IfcRationalBSplineCurveWithKnots(expressID,type,Degree,ControlPointsList,CurveForm,ClosedCurve,SelfIntersect,KnotMultiplicities,Knots,KnotSpec,WeightsData);}ToTape(){let args=[];args.push(this.Degree);;args.push(this.ControlPointsList);;args.push(this.CurveForm);;args.push(this.ClosedCurve);;args.push(this.SelfIntersect);;args.push(this.KnotMultiplicities);;args.push(this.Knots);;args.push(this.KnotSpec);;args.push(this.WeightsData);;return args;}};exports.IfcRationalBSplineCurveWithKnots=IfcRationalBSplineCurveWithKnots;var IfcRationalBSplineSurfaceWithKnots=class{constructor(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect,UMultiplicities,VMultiplicities,UKnots,VKnots,KnotSpec,WeightsData){this.expressID=expressID;this.type=type;this.UDegree=UDegree;this.VDegree=VDegree;this.ControlPointsList=ControlPointsList;this.SurfaceForm=SurfaceForm;this.UClosed=UClosed;this.VClosed=VClosed;this.SelfIntersect=SelfIntersect;this.UMultiplicities=UMultiplicities;this.VMultiplicities=VMultiplicities;this.UKnots=UKnots;this.VKnots=VKnots;this.KnotSpec=KnotSpec;this.WeightsData=WeightsData;}static FromTape(expressID,type,tape){let ptr=0;let UDegree=tape[ptr++];let VDegree=tape[ptr++];let ControlPointsList=tape[ptr++];let SurfaceForm=tape[ptr++];let UClosed=tape[ptr++];let VClosed=tape[ptr++];let SelfIntersect=tape[ptr++];let UMultiplicities=tape[ptr++];let VMultiplicities=tape[ptr++];let UKnots=tape[ptr++];let VKnots=tape[ptr++];let KnotSpec=tape[ptr++];let WeightsData=tape[ptr++];return new IfcRationalBSplineSurfaceWithKnots(expressID,type,UDegree,VDegree,ControlPointsList,SurfaceForm,UClosed,VClosed,SelfIntersect,UMultiplicities,VMultiplicities,UKnots,VKnots,KnotSpec,WeightsData);}ToTape(){let args=[];args.push(this.UDegree);;args.push(this.VDegree);;args.push(this.ControlPointsList);;args.push(this.SurfaceForm);;args.push(this.UClosed);;args.push(this.VClosed);;args.push(this.SelfIntersect);;args.push(this.UMultiplicities);;args.push(this.VMultiplicities);;args.push(this.UKnots);;args.push(this.VKnots);;args.push(this.KnotSpec);;args.push(this.WeightsData);;return args;}};exports.IfcRationalBSplineSurfaceWithKnots=IfcRationalBSplineSurfaceWithKnots;var IfcRectangleHollowProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,XDim,YDim,WallThickness,InnerFilletRadius,OuterFilletRadius){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.XDim=XDim;this.YDim=YDim;this.WallThickness=WallThickness;this.InnerFilletRadius=InnerFilletRadius;this.OuterFilletRadius=OuterFilletRadius;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let XDim=tape[ptr++];let YDim=tape[ptr++];let WallThickness=tape[ptr++];let InnerFilletRadius=tape[ptr++];let OuterFilletRadius=tape[ptr++];return new IfcRectangleHollowProfileDef(expressID,type,ProfileType,ProfileName,Position,XDim,YDim,WallThickness,InnerFilletRadius,OuterFilletRadius);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.XDim);;args.push(this.YDim);;args.push(this.WallThickness);;args.push(this.InnerFilletRadius);;args.push(this.OuterFilletRadius);;return args;}};exports.IfcRectangleHollowProfileDef=IfcRectangleHollowProfileDef;var IfcRectangleProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,XDim,YDim){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.XDim=XDim;this.YDim=YDim;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let XDim=tape[ptr++];let YDim=tape[ptr++];return new IfcRectangleProfileDef(expressID,type,ProfileType,ProfileName,Position,XDim,YDim);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.XDim);;args.push(this.YDim);;return args;}};exports.IfcRectangleProfileDef=IfcRectangleProfileDef;var IfcRectangularPyramid=class{constructor(expressID,type,Position,XLength,YLength,Height){this.expressID=expressID;this.type=type;this.Position=Position;this.XLength=XLength;this.YLength=YLength;this.Height=Height;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let XLength=tape[ptr++];let YLength=tape[ptr++];let Height=tape[ptr++];return new IfcRectangularPyramid(expressID,type,Position,XLength,YLength,Height);}ToTape(){let args=[];args.push(this.Position);;args.push(this.XLength);;args.push(this.YLength);;args.push(this.Height);;return args;}};exports.IfcRectangularPyramid=IfcRectangularPyramid;var IfcRectangularTrimmedSurface=class{constructor(expressID,type,BasisSurface,U1,V1,U2,V2,Usense,Vsense){this.expressID=expressID;this.type=type;this.BasisSurface=BasisSurface;this.U1=U1;this.V1=V1;this.U2=U2;this.V2=V2;this.Usense=Usense;this.Vsense=Vsense;}static FromTape(expressID,type,tape){let ptr=0;let BasisSurface=tape[ptr++];let U1=tape[ptr++];let V1=tape[ptr++];let U2=tape[ptr++];let V2=tape[ptr++];let Usense=tape[ptr++];let Vsense=tape[ptr++];return new IfcRectangularTrimmedSurface(expressID,type,BasisSurface,U1,V1,U2,V2,Usense,Vsense);}ToTape(){let args=[];args.push(this.BasisSurface);;args.push(this.U1);;args.push(this.V1);;args.push(this.U2);;args.push(this.V2);;args.push(this.Usense);;args.push(this.Vsense);;return args;}};exports.IfcRectangularTrimmedSurface=IfcRectangularTrimmedSurface;var IfcRecurrencePattern=class{constructor(expressID,type,RecurrenceType,DayComponent,WeekdayComponent,MonthComponent,Position,Interval,Occurrences,TimePeriods){this.expressID=expressID;this.type=type;this.RecurrenceType=RecurrenceType;this.DayComponent=DayComponent;this.WeekdayComponent=WeekdayComponent;this.MonthComponent=MonthComponent;this.Position=Position;this.Interval=Interval;this.Occurrences=Occurrences;this.TimePeriods=TimePeriods;}static FromTape(expressID,type,tape){let ptr=0;let RecurrenceType=tape[ptr++];let DayComponent=tape[ptr++];let WeekdayComponent=tape[ptr++];let MonthComponent=tape[ptr++];let Position=tape[ptr++];let Interval=tape[ptr++];let Occurrences=tape[ptr++];let TimePeriods=tape[ptr++];return new IfcRecurrencePattern(expressID,type,RecurrenceType,DayComponent,WeekdayComponent,MonthComponent,Position,Interval,Occurrences,TimePeriods);}ToTape(){let args=[];args.push(this.RecurrenceType);;args.push(this.DayComponent);;args.push(this.WeekdayComponent);;args.push(this.MonthComponent);;args.push(this.Position);;args.push(this.Interval);;args.push(this.Occurrences);;args.push(this.TimePeriods);;return args;}};exports.IfcRecurrencePattern=IfcRecurrencePattern;var IfcReference=class{constructor(expressID,type,TypeIdentifier,AttributeIdentifier,InstanceName,ListPositions,InnerReference){this.expressID=expressID;this.type=type;this.TypeIdentifier=TypeIdentifier;this.AttributeIdentifier=AttributeIdentifier;this.InstanceName=InstanceName;this.ListPositions=ListPositions;this.InnerReference=InnerReference;}static FromTape(expressID,type,tape){let ptr=0;let TypeIdentifier=tape[ptr++];let AttributeIdentifier=tape[ptr++];let InstanceName=tape[ptr++];let ListPositions=tape[ptr++];let InnerReference=tape[ptr++];return new IfcReference(expressID,type,TypeIdentifier,AttributeIdentifier,InstanceName,ListPositions,InnerReference);}ToTape(){let args=[];args.push(this.TypeIdentifier);;args.push(this.AttributeIdentifier);;args.push(this.InstanceName);;args.push(this.ListPositions);;args.push(this.InnerReference);;return args;}};exports.IfcReference=IfcReference;var IfcReferent=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,RestartDistance){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.PredefinedType=PredefinedType;this.RestartDistance=RestartDistance;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let PredefinedType=tape[ptr++];let RestartDistance=tape[ptr++];return new IfcReferent(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,RestartDistance);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.PredefinedType);;args.push(this.RestartDistance);;return args;}};exports.IfcReferent=IfcReferent;var IfcRegularTimeSeries=class{constructor(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit,TimeStep,Values){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.StartTime=StartTime;this.EndTime=EndTime;this.TimeSeriesDataType=TimeSeriesDataType;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.Unit=Unit;this.TimeStep=TimeStep;this.Values=Values;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let StartTime=tape[ptr++];let EndTime=tape[ptr++];let TimeSeriesDataType=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let Unit=tape[ptr++];let TimeStep=tape[ptr++];let Values=tape[ptr++];return new IfcRegularTimeSeries(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit,TimeStep,Values);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.StartTime);;args.push(this.EndTime);;args.push(this.TimeSeriesDataType);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.Unit);;args.push(this.TimeStep);;args.push(this.Values);;return args;}};exports.IfcRegularTimeSeries=IfcRegularTimeSeries;var IfcReinforcementBarProperties=class{constructor(expressID,type,TotalCrossSectionArea,SteelGrade,BarSurface,EffectiveDepth,NominalBarDiameter,BarCount){this.expressID=expressID;this.type=type;this.TotalCrossSectionArea=TotalCrossSectionArea;this.SteelGrade=SteelGrade;this.BarSurface=BarSurface;this.EffectiveDepth=EffectiveDepth;this.NominalBarDiameter=NominalBarDiameter;this.BarCount=BarCount;}static FromTape(expressID,type,tape){let ptr=0;let TotalCrossSectionArea=tape[ptr++];let SteelGrade=tape[ptr++];let BarSurface=tape[ptr++];let EffectiveDepth=tape[ptr++];let NominalBarDiameter=tape[ptr++];let BarCount=tape[ptr++];return new IfcReinforcementBarProperties(expressID,type,TotalCrossSectionArea,SteelGrade,BarSurface,EffectiveDepth,NominalBarDiameter,BarCount);}ToTape(){let args=[];args.push(this.TotalCrossSectionArea);;args.push(this.SteelGrade);;args.push(this.BarSurface);;args.push(this.EffectiveDepth);;args.push(this.NominalBarDiameter);;args.push(this.BarCount);;return args;}};exports.IfcReinforcementBarProperties=IfcReinforcementBarProperties;var IfcReinforcementDefinitionProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,DefinitionType,ReinforcementSectionDefinitions){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.DefinitionType=DefinitionType;this.ReinforcementSectionDefinitions=ReinforcementSectionDefinitions;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let DefinitionType=tape[ptr++];let ReinforcementSectionDefinitions=tape[ptr++];return new IfcReinforcementDefinitionProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,DefinitionType,ReinforcementSectionDefinitions);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.DefinitionType);;args.push(this.ReinforcementSectionDefinitions);;return args;}};exports.IfcReinforcementDefinitionProperties=IfcReinforcementDefinitionProperties;var IfcReinforcingBar=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,NominalDiameter,CrossSectionArea,BarLength,PredefinedType,BarSurface){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.SteelGrade=SteelGrade;this.NominalDiameter=NominalDiameter;this.CrossSectionArea=CrossSectionArea;this.BarLength=BarLength;this.PredefinedType=PredefinedType;this.BarSurface=BarSurface;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let SteelGrade=tape[ptr++];let NominalDiameter=tape[ptr++];let CrossSectionArea=tape[ptr++];let BarLength=tape[ptr++];let PredefinedType=tape[ptr++];let BarSurface=tape[ptr++];return new IfcReinforcingBar(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,NominalDiameter,CrossSectionArea,BarLength,PredefinedType,BarSurface);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.SteelGrade);;args.push(this.NominalDiameter);;args.push(this.CrossSectionArea);;args.push(this.BarLength);;args.push(this.PredefinedType);;args.push(this.BarSurface);;return args;}};exports.IfcReinforcingBar=IfcReinforcingBar;var IfcReinforcingBarType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,CrossSectionArea,BarLength,BarSurface,BendingShapeCode,BendingParameters){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;this.NominalDiameter=NominalDiameter;this.CrossSectionArea=CrossSectionArea;this.BarLength=BarLength;this.BarSurface=BarSurface;this.BendingShapeCode=BendingShapeCode;this.BendingParameters=BendingParameters;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];let NominalDiameter=tape[ptr++];let CrossSectionArea=tape[ptr++];let BarLength=tape[ptr++];let BarSurface=tape[ptr++];let BendingShapeCode=tape[ptr++];let BendingParameters=tape[ptr++];return new IfcReinforcingBarType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,CrossSectionArea,BarLength,BarSurface,BendingShapeCode,BendingParameters);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;args.push(this.NominalDiameter);;args.push(this.CrossSectionArea);;args.push(this.BarLength);;args.push(this.BarSurface);;args.push(this.BendingShapeCode);;args.push(this.BendingParameters);;return args;}};exports.IfcReinforcingBarType=IfcReinforcingBarType;var IfcReinforcingElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.SteelGrade=SteelGrade;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let SteelGrade=tape[ptr++];return new IfcReinforcingElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.SteelGrade);;return args;}};exports.IfcReinforcingElement=IfcReinforcingElement;var IfcReinforcingElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcReinforcingElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcReinforcingElementType=IfcReinforcingElementType;var IfcReinforcingMesh=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,MeshLength,MeshWidth,LongitudinalBarNominalDiameter,TransverseBarNominalDiameter,LongitudinalBarCrossSectionArea,TransverseBarCrossSectionArea,LongitudinalBarSpacing,TransverseBarSpacing,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.SteelGrade=SteelGrade;this.MeshLength=MeshLength;this.MeshWidth=MeshWidth;this.LongitudinalBarNominalDiameter=LongitudinalBarNominalDiameter;this.TransverseBarNominalDiameter=TransverseBarNominalDiameter;this.LongitudinalBarCrossSectionArea=LongitudinalBarCrossSectionArea;this.TransverseBarCrossSectionArea=TransverseBarCrossSectionArea;this.LongitudinalBarSpacing=LongitudinalBarSpacing;this.TransverseBarSpacing=TransverseBarSpacing;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let SteelGrade=tape[ptr++];let MeshLength=tape[ptr++];let MeshWidth=tape[ptr++];let LongitudinalBarNominalDiameter=tape[ptr++];let TransverseBarNominalDiameter=tape[ptr++];let LongitudinalBarCrossSectionArea=tape[ptr++];let TransverseBarCrossSectionArea=tape[ptr++];let LongitudinalBarSpacing=tape[ptr++];let TransverseBarSpacing=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcReinforcingMesh(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,MeshLength,MeshWidth,LongitudinalBarNominalDiameter,TransverseBarNominalDiameter,LongitudinalBarCrossSectionArea,TransverseBarCrossSectionArea,LongitudinalBarSpacing,TransverseBarSpacing,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.SteelGrade);;args.push(this.MeshLength);;args.push(this.MeshWidth);;args.push(this.LongitudinalBarNominalDiameter);;args.push(this.TransverseBarNominalDiameter);;args.push(this.LongitudinalBarCrossSectionArea);;args.push(this.TransverseBarCrossSectionArea);;args.push(this.LongitudinalBarSpacing);;args.push(this.TransverseBarSpacing);;args.push(this.PredefinedType);;return args;}};exports.IfcReinforcingMesh=IfcReinforcingMesh;var IfcReinforcingMeshType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,MeshLength,MeshWidth,LongitudinalBarNominalDiameter,TransverseBarNominalDiameter,LongitudinalBarCrossSectionArea,TransverseBarCrossSectionArea,LongitudinalBarSpacing,TransverseBarSpacing,BendingShapeCode,BendingParameters){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;this.MeshLength=MeshLength;this.MeshWidth=MeshWidth;this.LongitudinalBarNominalDiameter=LongitudinalBarNominalDiameter;this.TransverseBarNominalDiameter=TransverseBarNominalDiameter;this.LongitudinalBarCrossSectionArea=LongitudinalBarCrossSectionArea;this.TransverseBarCrossSectionArea=TransverseBarCrossSectionArea;this.LongitudinalBarSpacing=LongitudinalBarSpacing;this.TransverseBarSpacing=TransverseBarSpacing;this.BendingShapeCode=BendingShapeCode;this.BendingParameters=BendingParameters;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];let MeshLength=tape[ptr++];let MeshWidth=tape[ptr++];let LongitudinalBarNominalDiameter=tape[ptr++];let TransverseBarNominalDiameter=tape[ptr++];let LongitudinalBarCrossSectionArea=tape[ptr++];let TransverseBarCrossSectionArea=tape[ptr++];let LongitudinalBarSpacing=tape[ptr++];let TransverseBarSpacing=tape[ptr++];let BendingShapeCode=tape[ptr++];let BendingParameters=tape[ptr++];return new IfcReinforcingMeshType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,MeshLength,MeshWidth,LongitudinalBarNominalDiameter,TransverseBarNominalDiameter,LongitudinalBarCrossSectionArea,TransverseBarCrossSectionArea,LongitudinalBarSpacing,TransverseBarSpacing,BendingShapeCode,BendingParameters);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;args.push(this.MeshLength);;args.push(this.MeshWidth);;args.push(this.LongitudinalBarNominalDiameter);;args.push(this.TransverseBarNominalDiameter);;args.push(this.LongitudinalBarCrossSectionArea);;args.push(this.TransverseBarCrossSectionArea);;args.push(this.LongitudinalBarSpacing);;args.push(this.TransverseBarSpacing);;args.push(this.BendingShapeCode);;args.push(this.BendingParameters);;return args;}};exports.IfcReinforcingMeshType=IfcReinforcingMeshType;var IfcRelAggregates=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingObject,RelatedObjects){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingObject=RelatingObject;this.RelatedObjects=RelatedObjects;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingObject=tape[ptr++];let RelatedObjects=tape[ptr++];return new IfcRelAggregates(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingObject,RelatedObjects);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingObject);;args.push(this.RelatedObjects);;return args;}};exports.IfcRelAggregates=IfcRelAggregates;var IfcRelAssigns=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatedObjectsType=RelatedObjectsType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatedObjectsType=tape[ptr++];return new IfcRelAssigns(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatedObjectsType);;return args;}};exports.IfcRelAssigns=IfcRelAssigns;var IfcRelAssignsToActor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingActor,ActingRole){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatedObjectsType=RelatedObjectsType;this.RelatingActor=RelatingActor;this.ActingRole=ActingRole;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatedObjectsType=tape[ptr++];let RelatingActor=tape[ptr++];let ActingRole=tape[ptr++];return new IfcRelAssignsToActor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingActor,ActingRole);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatedObjectsType);;args.push(this.RelatingActor);;args.push(this.ActingRole);;return args;}};exports.IfcRelAssignsToActor=IfcRelAssignsToActor;var IfcRelAssignsToControl=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingControl){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatedObjectsType=RelatedObjectsType;this.RelatingControl=RelatingControl;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatedObjectsType=tape[ptr++];let RelatingControl=tape[ptr++];return new IfcRelAssignsToControl(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingControl);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatedObjectsType);;args.push(this.RelatingControl);;return args;}};exports.IfcRelAssignsToControl=IfcRelAssignsToControl;var IfcRelAssignsToGroup=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingGroup){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatedObjectsType=RelatedObjectsType;this.RelatingGroup=RelatingGroup;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatedObjectsType=tape[ptr++];let RelatingGroup=tape[ptr++];return new IfcRelAssignsToGroup(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingGroup);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatedObjectsType);;args.push(this.RelatingGroup);;return args;}};exports.IfcRelAssignsToGroup=IfcRelAssignsToGroup;var IfcRelAssignsToGroupByFactor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingGroup,Factor){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatedObjectsType=RelatedObjectsType;this.RelatingGroup=RelatingGroup;this.Factor=Factor;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatedObjectsType=tape[ptr++];let RelatingGroup=tape[ptr++];let Factor=tape[ptr++];return new IfcRelAssignsToGroupByFactor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingGroup,Factor);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatedObjectsType);;args.push(this.RelatingGroup);;args.push(this.Factor);;return args;}};exports.IfcRelAssignsToGroupByFactor=IfcRelAssignsToGroupByFactor;var IfcRelAssignsToProcess=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingProcess,QuantityInProcess){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatedObjectsType=RelatedObjectsType;this.RelatingProcess=RelatingProcess;this.QuantityInProcess=QuantityInProcess;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatedObjectsType=tape[ptr++];let RelatingProcess=tape[ptr++];let QuantityInProcess=tape[ptr++];return new IfcRelAssignsToProcess(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingProcess,QuantityInProcess);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatedObjectsType);;args.push(this.RelatingProcess);;args.push(this.QuantityInProcess);;return args;}};exports.IfcRelAssignsToProcess=IfcRelAssignsToProcess;var IfcRelAssignsToProduct=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingProduct){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatedObjectsType=RelatedObjectsType;this.RelatingProduct=RelatingProduct;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatedObjectsType=tape[ptr++];let RelatingProduct=tape[ptr++];return new IfcRelAssignsToProduct(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingProduct);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatedObjectsType);;args.push(this.RelatingProduct);;return args;}};exports.IfcRelAssignsToProduct=IfcRelAssignsToProduct;var IfcRelAssignsToResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingResource){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatedObjectsType=RelatedObjectsType;this.RelatingResource=RelatingResource;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatedObjectsType=tape[ptr++];let RelatingResource=tape[ptr++];return new IfcRelAssignsToResource(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatedObjectsType,RelatingResource);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatedObjectsType);;args.push(this.RelatingResource);;return args;}};exports.IfcRelAssignsToResource=IfcRelAssignsToResource;var IfcRelAssociates=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];return new IfcRelAssociates(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;return args;}};exports.IfcRelAssociates=IfcRelAssociates;var IfcRelAssociatesApproval=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingApproval){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatingApproval=RelatingApproval;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatingApproval=tape[ptr++];return new IfcRelAssociatesApproval(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingApproval);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatingApproval);;return args;}};exports.IfcRelAssociatesApproval=IfcRelAssociatesApproval;var IfcRelAssociatesClassification=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingClassification){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatingClassification=RelatingClassification;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatingClassification=tape[ptr++];return new IfcRelAssociatesClassification(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingClassification);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatingClassification);;return args;}};exports.IfcRelAssociatesClassification=IfcRelAssociatesClassification;var IfcRelAssociatesConstraint=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,Intent,RelatingConstraint){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.Intent=Intent;this.RelatingConstraint=RelatingConstraint;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let Intent=tape[ptr++];let RelatingConstraint=tape[ptr++];return new IfcRelAssociatesConstraint(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,Intent,RelatingConstraint);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.Intent);;args.push(this.RelatingConstraint);;return args;}};exports.IfcRelAssociatesConstraint=IfcRelAssociatesConstraint;var IfcRelAssociatesDocument=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingDocument){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatingDocument=RelatingDocument;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatingDocument=tape[ptr++];return new IfcRelAssociatesDocument(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingDocument);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatingDocument);;return args;}};exports.IfcRelAssociatesDocument=IfcRelAssociatesDocument;var IfcRelAssociatesLibrary=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingLibrary){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatingLibrary=RelatingLibrary;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatingLibrary=tape[ptr++];return new IfcRelAssociatesLibrary(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingLibrary);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatingLibrary);;return args;}};exports.IfcRelAssociatesLibrary=IfcRelAssociatesLibrary;var IfcRelAssociatesMaterial=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingMaterial){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatingMaterial=RelatingMaterial;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatingMaterial=tape[ptr++];return new IfcRelAssociatesMaterial(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingMaterial);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatingMaterial);;return args;}};exports.IfcRelAssociatesMaterial=IfcRelAssociatesMaterial;var IfcRelConnects=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcRelConnects(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcRelConnects=IfcRelConnects;var IfcRelConnectsElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ConnectionGeometry=ConnectionGeometry;this.RelatingElement=RelatingElement;this.RelatedElement=RelatedElement;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ConnectionGeometry=tape[ptr++];let RelatingElement=tape[ptr++];let RelatedElement=tape[ptr++];return new IfcRelConnectsElements(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ConnectionGeometry);;args.push(this.RelatingElement);;args.push(this.RelatedElement);;return args;}};exports.IfcRelConnectsElements=IfcRelConnectsElements;var IfcRelConnectsPathElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement,RelatingPriorities,RelatedPriorities,RelatedConnectionType,RelatingConnectionType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ConnectionGeometry=ConnectionGeometry;this.RelatingElement=RelatingElement;this.RelatedElement=RelatedElement;this.RelatingPriorities=RelatingPriorities;this.RelatedPriorities=RelatedPriorities;this.RelatedConnectionType=RelatedConnectionType;this.RelatingConnectionType=RelatingConnectionType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ConnectionGeometry=tape[ptr++];let RelatingElement=tape[ptr++];let RelatedElement=tape[ptr++];let RelatingPriorities=tape[ptr++];let RelatedPriorities=tape[ptr++];let RelatedConnectionType=tape[ptr++];let RelatingConnectionType=tape[ptr++];return new IfcRelConnectsPathElements(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement,RelatingPriorities,RelatedPriorities,RelatedConnectionType,RelatingConnectionType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ConnectionGeometry);;args.push(this.RelatingElement);;args.push(this.RelatedElement);;args.push(this.RelatingPriorities);;args.push(this.RelatedPriorities);;args.push(this.RelatedConnectionType);;args.push(this.RelatingConnectionType);;return args;}};exports.IfcRelConnectsPathElements=IfcRelConnectsPathElements;var IfcRelConnectsPortToElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPort,RelatedElement){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingPort=RelatingPort;this.RelatedElement=RelatedElement;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingPort=tape[ptr++];let RelatedElement=tape[ptr++];return new IfcRelConnectsPortToElement(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPort,RelatedElement);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingPort);;args.push(this.RelatedElement);;return args;}};exports.IfcRelConnectsPortToElement=IfcRelConnectsPortToElement;var IfcRelConnectsPorts=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPort,RelatedPort,RealizingElement){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingPort=RelatingPort;this.RelatedPort=RelatedPort;this.RealizingElement=RealizingElement;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingPort=tape[ptr++];let RelatedPort=tape[ptr++];let RealizingElement=tape[ptr++];return new IfcRelConnectsPorts(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPort,RelatedPort,RealizingElement);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingPort);;args.push(this.RelatedPort);;args.push(this.RealizingElement);;return args;}};exports.IfcRelConnectsPorts=IfcRelConnectsPorts;var IfcRelConnectsStructuralActivity=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedStructuralActivity){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingElement=RelatingElement;this.RelatedStructuralActivity=RelatedStructuralActivity;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingElement=tape[ptr++];let RelatedStructuralActivity=tape[ptr++];return new IfcRelConnectsStructuralActivity(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedStructuralActivity);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingElement);;args.push(this.RelatedStructuralActivity);;return args;}};exports.IfcRelConnectsStructuralActivity=IfcRelConnectsStructuralActivity;var IfcRelConnectsStructuralMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingStructuralMember,RelatedStructuralConnection,AppliedCondition,AdditionalConditions,SupportedLength,ConditionCoordinateSystem){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingStructuralMember=RelatingStructuralMember;this.RelatedStructuralConnection=RelatedStructuralConnection;this.AppliedCondition=AppliedCondition;this.AdditionalConditions=AdditionalConditions;this.SupportedLength=SupportedLength;this.ConditionCoordinateSystem=ConditionCoordinateSystem;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingStructuralMember=tape[ptr++];let RelatedStructuralConnection=tape[ptr++];let AppliedCondition=tape[ptr++];let AdditionalConditions=tape[ptr++];let SupportedLength=tape[ptr++];let ConditionCoordinateSystem=tape[ptr++];return new IfcRelConnectsStructuralMember(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingStructuralMember,RelatedStructuralConnection,AppliedCondition,AdditionalConditions,SupportedLength,ConditionCoordinateSystem);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingStructuralMember);;args.push(this.RelatedStructuralConnection);;args.push(this.AppliedCondition);;args.push(this.AdditionalConditions);;args.push(this.SupportedLength);;args.push(this.ConditionCoordinateSystem);;return args;}};exports.IfcRelConnectsStructuralMember=IfcRelConnectsStructuralMember;var IfcRelConnectsWithEccentricity=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingStructuralMember,RelatedStructuralConnection,AppliedCondition,AdditionalConditions,SupportedLength,ConditionCoordinateSystem,ConnectionConstraint){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingStructuralMember=RelatingStructuralMember;this.RelatedStructuralConnection=RelatedStructuralConnection;this.AppliedCondition=AppliedCondition;this.AdditionalConditions=AdditionalConditions;this.SupportedLength=SupportedLength;this.ConditionCoordinateSystem=ConditionCoordinateSystem;this.ConnectionConstraint=ConnectionConstraint;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingStructuralMember=tape[ptr++];let RelatedStructuralConnection=tape[ptr++];let AppliedCondition=tape[ptr++];let AdditionalConditions=tape[ptr++];let SupportedLength=tape[ptr++];let ConditionCoordinateSystem=tape[ptr++];let ConnectionConstraint=tape[ptr++];return new IfcRelConnectsWithEccentricity(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingStructuralMember,RelatedStructuralConnection,AppliedCondition,AdditionalConditions,SupportedLength,ConditionCoordinateSystem,ConnectionConstraint);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingStructuralMember);;args.push(this.RelatedStructuralConnection);;args.push(this.AppliedCondition);;args.push(this.AdditionalConditions);;args.push(this.SupportedLength);;args.push(this.ConditionCoordinateSystem);;args.push(this.ConnectionConstraint);;return args;}};exports.IfcRelConnectsWithEccentricity=IfcRelConnectsWithEccentricity;var IfcRelConnectsWithRealizingElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement,RealizingElements,ConnectionType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ConnectionGeometry=ConnectionGeometry;this.RelatingElement=RelatingElement;this.RelatedElement=RelatedElement;this.RealizingElements=RealizingElements;this.ConnectionType=ConnectionType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ConnectionGeometry=tape[ptr++];let RelatingElement=tape[ptr++];let RelatedElement=tape[ptr++];let RealizingElements=tape[ptr++];let ConnectionType=tape[ptr++];return new IfcRelConnectsWithRealizingElements(expressID,type,GlobalId,OwnerHistory,Name,Description,ConnectionGeometry,RelatingElement,RelatedElement,RealizingElements,ConnectionType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ConnectionGeometry);;args.push(this.RelatingElement);;args.push(this.RelatedElement);;args.push(this.RealizingElements);;args.push(this.ConnectionType);;return args;}};exports.IfcRelConnectsWithRealizingElements=IfcRelConnectsWithRealizingElements;var IfcRelContainedInSpatialStructure=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedElements,RelatingStructure){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedElements=RelatedElements;this.RelatingStructure=RelatingStructure;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedElements=tape[ptr++];let RelatingStructure=tape[ptr++];return new IfcRelContainedInSpatialStructure(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedElements,RelatingStructure);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedElements);;args.push(this.RelatingStructure);;return args;}};exports.IfcRelContainedInSpatialStructure=IfcRelContainedInSpatialStructure;var IfcRelCoversBldgElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingBuildingElement,RelatedCoverings){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingBuildingElement=RelatingBuildingElement;this.RelatedCoverings=RelatedCoverings;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingBuildingElement=tape[ptr++];let RelatedCoverings=tape[ptr++];return new IfcRelCoversBldgElements(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingBuildingElement,RelatedCoverings);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingBuildingElement);;args.push(this.RelatedCoverings);;return args;}};exports.IfcRelCoversBldgElements=IfcRelCoversBldgElements;var IfcRelCoversSpaces=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedCoverings){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingSpace=RelatingSpace;this.RelatedCoverings=RelatedCoverings;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingSpace=tape[ptr++];let RelatedCoverings=tape[ptr++];return new IfcRelCoversSpaces(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedCoverings);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingSpace);;args.push(this.RelatedCoverings);;return args;}};exports.IfcRelCoversSpaces=IfcRelCoversSpaces;var IfcRelDeclares=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingContext,RelatedDefinitions){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingContext=RelatingContext;this.RelatedDefinitions=RelatedDefinitions;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingContext=tape[ptr++];let RelatedDefinitions=tape[ptr++];return new IfcRelDeclares(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingContext,RelatedDefinitions);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingContext);;args.push(this.RelatedDefinitions);;return args;}};exports.IfcRelDeclares=IfcRelDeclares;var IfcRelDecomposes=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcRelDecomposes(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcRelDecomposes=IfcRelDecomposes;var IfcRelDefines=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcRelDefines(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcRelDefines=IfcRelDefines;var IfcRelDefinesByObject=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingObject){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatingObject=RelatingObject;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatingObject=tape[ptr++];return new IfcRelDefinesByObject(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingObject);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatingObject);;return args;}};exports.IfcRelDefinesByObject=IfcRelDefinesByObject;var IfcRelDefinesByProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingPropertyDefinition){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatingPropertyDefinition=RelatingPropertyDefinition;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatingPropertyDefinition=tape[ptr++];return new IfcRelDefinesByProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingPropertyDefinition);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatingPropertyDefinition);;return args;}};exports.IfcRelDefinesByProperties=IfcRelDefinesByProperties;var IfcRelDefinesByTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedPropertySets,RelatingTemplate){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedPropertySets=RelatedPropertySets;this.RelatingTemplate=RelatingTemplate;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedPropertySets=tape[ptr++];let RelatingTemplate=tape[ptr++];return new IfcRelDefinesByTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedPropertySets,RelatingTemplate);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedPropertySets);;args.push(this.RelatingTemplate);;return args;}};exports.IfcRelDefinesByTemplate=IfcRelDefinesByTemplate;var IfcRelDefinesByType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedObjects=RelatedObjects;this.RelatingType=RelatingType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedObjects=tape[ptr++];let RelatingType=tape[ptr++];return new IfcRelDefinesByType(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedObjects,RelatingType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedObjects);;args.push(this.RelatingType);;return args;}};exports.IfcRelDefinesByType=IfcRelDefinesByType;var IfcRelFillsElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingOpeningElement,RelatedBuildingElement){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingOpeningElement=RelatingOpeningElement;this.RelatedBuildingElement=RelatedBuildingElement;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingOpeningElement=tape[ptr++];let RelatedBuildingElement=tape[ptr++];return new IfcRelFillsElement(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingOpeningElement,RelatedBuildingElement);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingOpeningElement);;args.push(this.RelatedBuildingElement);;return args;}};exports.IfcRelFillsElement=IfcRelFillsElement;var IfcRelFlowControlElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedControlElements,RelatingFlowElement){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedControlElements=RelatedControlElements;this.RelatingFlowElement=RelatingFlowElement;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedControlElements=tape[ptr++];let RelatingFlowElement=tape[ptr++];return new IfcRelFlowControlElements(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedControlElements,RelatingFlowElement);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedControlElements);;args.push(this.RelatingFlowElement);;return args;}};exports.IfcRelFlowControlElements=IfcRelFlowControlElements;var IfcRelInterferesElements=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedElement,InterferenceGeometry,InterferenceType,ImpliedOrder){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingElement=RelatingElement;this.RelatedElement=RelatedElement;this.InterferenceGeometry=InterferenceGeometry;this.InterferenceType=InterferenceType;this.ImpliedOrder=ImpliedOrder;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingElement=tape[ptr++];let RelatedElement=tape[ptr++];let InterferenceGeometry=tape[ptr++];let InterferenceType=tape[ptr++];let ImpliedOrder=tape[ptr++];return new IfcRelInterferesElements(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedElement,InterferenceGeometry,InterferenceType,ImpliedOrder);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingElement);;args.push(this.RelatedElement);;args.push(this.InterferenceGeometry);;args.push(this.InterferenceType);;args.push(this.ImpliedOrder);;return args;}};exports.IfcRelInterferesElements=IfcRelInterferesElements;var IfcRelNests=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingObject,RelatedObjects){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingObject=RelatingObject;this.RelatedObjects=RelatedObjects;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingObject=tape[ptr++];let RelatedObjects=tape[ptr++];return new IfcRelNests(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingObject,RelatedObjects);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingObject);;args.push(this.RelatedObjects);;return args;}};exports.IfcRelNests=IfcRelNests;var IfcRelPositions=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPositioningElement,RelatedProducts){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingPositioningElement=RelatingPositioningElement;this.RelatedProducts=RelatedProducts;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingPositioningElement=tape[ptr++];let RelatedProducts=tape[ptr++];return new IfcRelPositions(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingPositioningElement,RelatedProducts);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingPositioningElement);;args.push(this.RelatedProducts);;return args;}};exports.IfcRelPositions=IfcRelPositions;var IfcRelProjectsElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedFeatureElement){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingElement=RelatingElement;this.RelatedFeatureElement=RelatedFeatureElement;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingElement=tape[ptr++];let RelatedFeatureElement=tape[ptr++];return new IfcRelProjectsElement(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingElement,RelatedFeatureElement);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingElement);;args.push(this.RelatedFeatureElement);;return args;}};exports.IfcRelProjectsElement=IfcRelProjectsElement;var IfcRelReferencedInSpatialStructure=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedElements,RelatingStructure){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatedElements=RelatedElements;this.RelatingStructure=RelatingStructure;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatedElements=tape[ptr++];let RelatingStructure=tape[ptr++];return new IfcRelReferencedInSpatialStructure(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatedElements,RelatingStructure);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedElements);;args.push(this.RelatingStructure);;return args;}};exports.IfcRelReferencedInSpatialStructure=IfcRelReferencedInSpatialStructure;var IfcRelSequence=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingProcess,RelatedProcess,TimeLag,SequenceType,UserDefinedSequenceType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingProcess=RelatingProcess;this.RelatedProcess=RelatedProcess;this.TimeLag=TimeLag;this.SequenceType=SequenceType;this.UserDefinedSequenceType=UserDefinedSequenceType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingProcess=tape[ptr++];let RelatedProcess=tape[ptr++];let TimeLag=tape[ptr++];let SequenceType=tape[ptr++];let UserDefinedSequenceType=tape[ptr++];return new IfcRelSequence(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingProcess,RelatedProcess,TimeLag,SequenceType,UserDefinedSequenceType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingProcess);;args.push(this.RelatedProcess);;args.push(this.TimeLag);;args.push(this.SequenceType);;args.push(this.UserDefinedSequenceType);;return args;}};exports.IfcRelSequence=IfcRelSequence;var IfcRelServicesBuildings=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSystem,RelatedBuildings){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingSystem=RelatingSystem;this.RelatedBuildings=RelatedBuildings;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingSystem=tape[ptr++];let RelatedBuildings=tape[ptr++];return new IfcRelServicesBuildings(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSystem,RelatedBuildings);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingSystem);;args.push(this.RelatedBuildings);;return args;}};exports.IfcRelServicesBuildings=IfcRelServicesBuildings;var IfcRelSpaceBoundary=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingSpace=RelatingSpace;this.RelatedBuildingElement=RelatedBuildingElement;this.ConnectionGeometry=ConnectionGeometry;this.PhysicalOrVirtualBoundary=PhysicalOrVirtualBoundary;this.InternalOrExternalBoundary=InternalOrExternalBoundary;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingSpace=tape[ptr++];let RelatedBuildingElement=tape[ptr++];let ConnectionGeometry=tape[ptr++];let PhysicalOrVirtualBoundary=tape[ptr++];let InternalOrExternalBoundary=tape[ptr++];return new IfcRelSpaceBoundary(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingSpace);;args.push(this.RelatedBuildingElement);;args.push(this.ConnectionGeometry);;args.push(this.PhysicalOrVirtualBoundary);;args.push(this.InternalOrExternalBoundary);;return args;}};exports.IfcRelSpaceBoundary=IfcRelSpaceBoundary;var IfcRelSpaceBoundary1stLevel=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary,ParentBoundary){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingSpace=RelatingSpace;this.RelatedBuildingElement=RelatedBuildingElement;this.ConnectionGeometry=ConnectionGeometry;this.PhysicalOrVirtualBoundary=PhysicalOrVirtualBoundary;this.InternalOrExternalBoundary=InternalOrExternalBoundary;this.ParentBoundary=ParentBoundary;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingSpace=tape[ptr++];let RelatedBuildingElement=tape[ptr++];let ConnectionGeometry=tape[ptr++];let PhysicalOrVirtualBoundary=tape[ptr++];let InternalOrExternalBoundary=tape[ptr++];let ParentBoundary=tape[ptr++];return new IfcRelSpaceBoundary1stLevel(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary,ParentBoundary);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingSpace);;args.push(this.RelatedBuildingElement);;args.push(this.ConnectionGeometry);;args.push(this.PhysicalOrVirtualBoundary);;args.push(this.InternalOrExternalBoundary);;args.push(this.ParentBoundary);;return args;}};exports.IfcRelSpaceBoundary1stLevel=IfcRelSpaceBoundary1stLevel;var IfcRelSpaceBoundary2ndLevel=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary,ParentBoundary,CorrespondingBoundary){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingSpace=RelatingSpace;this.RelatedBuildingElement=RelatedBuildingElement;this.ConnectionGeometry=ConnectionGeometry;this.PhysicalOrVirtualBoundary=PhysicalOrVirtualBoundary;this.InternalOrExternalBoundary=InternalOrExternalBoundary;this.ParentBoundary=ParentBoundary;this.CorrespondingBoundary=CorrespondingBoundary;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingSpace=tape[ptr++];let RelatedBuildingElement=tape[ptr++];let ConnectionGeometry=tape[ptr++];let PhysicalOrVirtualBoundary=tape[ptr++];let InternalOrExternalBoundary=tape[ptr++];let ParentBoundary=tape[ptr++];let CorrespondingBoundary=tape[ptr++];return new IfcRelSpaceBoundary2ndLevel(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingSpace,RelatedBuildingElement,ConnectionGeometry,PhysicalOrVirtualBoundary,InternalOrExternalBoundary,ParentBoundary,CorrespondingBoundary);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingSpace);;args.push(this.RelatedBuildingElement);;args.push(this.ConnectionGeometry);;args.push(this.PhysicalOrVirtualBoundary);;args.push(this.InternalOrExternalBoundary);;args.push(this.ParentBoundary);;args.push(this.CorrespondingBoundary);;return args;}};exports.IfcRelSpaceBoundary2ndLevel=IfcRelSpaceBoundary2ndLevel;var IfcRelVoidsElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingBuildingElement,RelatedOpeningElement){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.RelatingBuildingElement=RelatingBuildingElement;this.RelatedOpeningElement=RelatedOpeningElement;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let RelatingBuildingElement=tape[ptr++];let RelatedOpeningElement=tape[ptr++];return new IfcRelVoidsElement(expressID,type,GlobalId,OwnerHistory,Name,Description,RelatingBuildingElement,RelatedOpeningElement);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingBuildingElement);;args.push(this.RelatedOpeningElement);;return args;}};exports.IfcRelVoidsElement=IfcRelVoidsElement;var IfcRelationship=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcRelationship(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcRelationship=IfcRelationship;var IfcReparametrisedCompositeCurveSegment=class{constructor(expressID,type,Transition,SameSense,ParentCurve,ParamLength){this.expressID=expressID;this.type=type;this.Transition=Transition;this.SameSense=SameSense;this.ParentCurve=ParentCurve;this.ParamLength=ParamLength;}static FromTape(expressID,type,tape){let ptr=0;let Transition=tape[ptr++];let SameSense=tape[ptr++];let ParentCurve=tape[ptr++];let ParamLength=tape[ptr++];return new IfcReparametrisedCompositeCurveSegment(expressID,type,Transition,SameSense,ParentCurve,ParamLength);}ToTape(){let args=[];args.push(this.Transition);;args.push(this.SameSense);;args.push(this.ParentCurve);;args.push(this.ParamLength);;return args;}};exports.IfcReparametrisedCompositeCurveSegment=IfcReparametrisedCompositeCurveSegment;var IfcRepresentation=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID;this.type=type;this.ContextOfItems=ContextOfItems;this.RepresentationIdentifier=RepresentationIdentifier;this.RepresentationType=RepresentationType;this.Items=Items;}static FromTape(expressID,type,tape){let ptr=0;let ContextOfItems=tape[ptr++];let RepresentationIdentifier=tape[ptr++];let RepresentationType=tape[ptr++];let Items=tape[ptr++];return new IfcRepresentation(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items);}ToTape(){let args=[];args.push(this.ContextOfItems);;args.push(this.RepresentationIdentifier);;args.push(this.RepresentationType);;args.push(this.Items);;return args;}};exports.IfcRepresentation=IfcRepresentation;var IfcRepresentationContext=class{constructor(expressID,type,ContextIdentifier,ContextType){this.expressID=expressID;this.type=type;this.ContextIdentifier=ContextIdentifier;this.ContextType=ContextType;}static FromTape(expressID,type,tape){let ptr=0;let ContextIdentifier=tape[ptr++];let ContextType=tape[ptr++];return new IfcRepresentationContext(expressID,type,ContextIdentifier,ContextType);}ToTape(){let args=[];args.push(this.ContextIdentifier);;args.push(this.ContextType);;return args;}};exports.IfcRepresentationContext=IfcRepresentationContext;var IfcRepresentationItem=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcRepresentationItem(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcRepresentationItem=IfcRepresentationItem;var IfcRepresentationMap=class{constructor(expressID,type,MappingOrigin,MappedRepresentation){this.expressID=expressID;this.type=type;this.MappingOrigin=MappingOrigin;this.MappedRepresentation=MappedRepresentation;}static FromTape(expressID,type,tape){let ptr=0;let MappingOrigin=tape[ptr++];let MappedRepresentation=tape[ptr++];return new IfcRepresentationMap(expressID,type,MappingOrigin,MappedRepresentation);}ToTape(){let args=[];args.push(this.MappingOrigin);;args.push(this.MappedRepresentation);;return args;}};exports.IfcRepresentationMap=IfcRepresentationMap;var IfcResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];return new IfcResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;return args;}};exports.IfcResource=IfcResource;var IfcResourceApprovalRelationship=class{constructor(expressID,type,Name,Description,RelatedResourceObjects,RelatingApproval){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.RelatedResourceObjects=RelatedResourceObjects;this.RelatingApproval=RelatingApproval;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let RelatedResourceObjects=tape[ptr++];let RelatingApproval=tape[ptr++];return new IfcResourceApprovalRelationship(expressID,type,Name,Description,RelatedResourceObjects,RelatingApproval);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.RelatedResourceObjects);;args.push(this.RelatingApproval);;return args;}};exports.IfcResourceApprovalRelationship=IfcResourceApprovalRelationship;var IfcResourceConstraintRelationship=class{constructor(expressID,type,Name,Description,RelatingConstraint,RelatedResourceObjects){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.RelatingConstraint=RelatingConstraint;this.RelatedResourceObjects=RelatedResourceObjects;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let RelatingConstraint=tape[ptr++];let RelatedResourceObjects=tape[ptr++];return new IfcResourceConstraintRelationship(expressID,type,Name,Description,RelatingConstraint,RelatedResourceObjects);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.RelatingConstraint);;args.push(this.RelatedResourceObjects);;return args;}};exports.IfcResourceConstraintRelationship=IfcResourceConstraintRelationship;var IfcResourceLevelRelationship=class{constructor(expressID,type,Name,Description){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];return new IfcResourceLevelRelationship(expressID,type,Name,Description);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcResourceLevelRelationship=IfcResourceLevelRelationship;var IfcResourceTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,ScheduleWork,ScheduleUsage,ScheduleStart,ScheduleFinish,ScheduleContour,LevelingDelay,IsOverAllocated,StatusTime,ActualWork,ActualUsage,ActualStart,ActualFinish,RemainingWork,RemainingUsage,Completion){this.expressID=expressID;this.type=type;this.Name=Name;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.ScheduleWork=ScheduleWork;this.ScheduleUsage=ScheduleUsage;this.ScheduleStart=ScheduleStart;this.ScheduleFinish=ScheduleFinish;this.ScheduleContour=ScheduleContour;this.LevelingDelay=LevelingDelay;this.IsOverAllocated=IsOverAllocated;this.StatusTime=StatusTime;this.ActualWork=ActualWork;this.ActualUsage=ActualUsage;this.ActualStart=ActualStart;this.ActualFinish=ActualFinish;this.RemainingWork=RemainingWork;this.RemainingUsage=RemainingUsage;this.Completion=Completion;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let ScheduleWork=tape[ptr++];let ScheduleUsage=tape[ptr++];let ScheduleStart=tape[ptr++];let ScheduleFinish=tape[ptr++];let ScheduleContour=tape[ptr++];let LevelingDelay=tape[ptr++];let IsOverAllocated=tape[ptr++];let StatusTime=tape[ptr++];let ActualWork=tape[ptr++];let ActualUsage=tape[ptr++];let ActualStart=tape[ptr++];let ActualFinish=tape[ptr++];let RemainingWork=tape[ptr++];let RemainingUsage=tape[ptr++];let Completion=tape[ptr++];return new IfcResourceTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,ScheduleWork,ScheduleUsage,ScheduleStart,ScheduleFinish,ScheduleContour,LevelingDelay,IsOverAllocated,StatusTime,ActualWork,ActualUsage,ActualStart,ActualFinish,RemainingWork,RemainingUsage,Completion);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.ScheduleWork);;args.push(this.ScheduleUsage);;args.push(this.ScheduleStart);;args.push(this.ScheduleFinish);;args.push(this.ScheduleContour);;args.push(this.LevelingDelay);;args.push(this.IsOverAllocated);;args.push(this.StatusTime);;args.push(this.ActualWork);;args.push(this.ActualUsage);;args.push(this.ActualStart);;args.push(this.ActualFinish);;args.push(this.RemainingWork);;args.push(this.RemainingUsage);;args.push(this.Completion);;return args;}};exports.IfcResourceTime=IfcResourceTime;var IfcRevolvedAreaSolid=class{constructor(expressID,type,SweptArea,Position,Axis,Angle){this.expressID=expressID;this.type=type;this.SweptArea=SweptArea;this.Position=Position;this.Axis=Axis;this.Angle=Angle;}static FromTape(expressID,type,tape){let ptr=0;let SweptArea=tape[ptr++];let Position=tape[ptr++];let Axis=tape[ptr++];let Angle=tape[ptr++];return new IfcRevolvedAreaSolid(expressID,type,SweptArea,Position,Axis,Angle);}ToTape(){let args=[];args.push(this.SweptArea);;args.push(this.Position);;args.push(this.Axis);;args.push(this.Angle);;return args;}};exports.IfcRevolvedAreaSolid=IfcRevolvedAreaSolid;var IfcRevolvedAreaSolidTapered=class{constructor(expressID,type,SweptArea,Position,Axis,Angle,EndSweptArea){this.expressID=expressID;this.type=type;this.SweptArea=SweptArea;this.Position=Position;this.Axis=Axis;this.Angle=Angle;this.EndSweptArea=EndSweptArea;}static FromTape(expressID,type,tape){let ptr=0;let SweptArea=tape[ptr++];let Position=tape[ptr++];let Axis=tape[ptr++];let Angle=tape[ptr++];let EndSweptArea=tape[ptr++];return new IfcRevolvedAreaSolidTapered(expressID,type,SweptArea,Position,Axis,Angle,EndSweptArea);}ToTape(){let args=[];args.push(this.SweptArea);;args.push(this.Position);;args.push(this.Axis);;args.push(this.Angle);;args.push(this.EndSweptArea);;return args;}};exports.IfcRevolvedAreaSolidTapered=IfcRevolvedAreaSolidTapered;var IfcRightCircularCone=class{constructor(expressID,type,Position,Height,BottomRadius){this.expressID=expressID;this.type=type;this.Position=Position;this.Height=Height;this.BottomRadius=BottomRadius;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let Height=tape[ptr++];let BottomRadius=tape[ptr++];return new IfcRightCircularCone(expressID,type,Position,Height,BottomRadius);}ToTape(){let args=[];args.push(this.Position);;args.push(this.Height);;args.push(this.BottomRadius);;return args;}};exports.IfcRightCircularCone=IfcRightCircularCone;var IfcRightCircularCylinder=class{constructor(expressID,type,Position,Height,Radius){this.expressID=expressID;this.type=type;this.Position=Position;this.Height=Height;this.Radius=Radius;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let Height=tape[ptr++];let Radius=tape[ptr++];return new IfcRightCircularCylinder(expressID,type,Position,Height,Radius);}ToTape(){let args=[];args.push(this.Position);;args.push(this.Height);;args.push(this.Radius);;return args;}};exports.IfcRightCircularCylinder=IfcRightCircularCylinder;var IfcRoof=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcRoof(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcRoof=IfcRoof;var IfcRoofType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcRoofType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcRoofType=IfcRoofType;var IfcRoot=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];return new IfcRoot(expressID,type,GlobalId,OwnerHistory,Name,Description);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcRoot=IfcRoot;var IfcRoundedRectangleProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,XDim,YDim,RoundingRadius){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.XDim=XDim;this.YDim=YDim;this.RoundingRadius=RoundingRadius;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let XDim=tape[ptr++];let YDim=tape[ptr++];let RoundingRadius=tape[ptr++];return new IfcRoundedRectangleProfileDef(expressID,type,ProfileType,ProfileName,Position,XDim,YDim,RoundingRadius);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.XDim);;args.push(this.YDim);;args.push(this.RoundingRadius);;return args;}};exports.IfcRoundedRectangleProfileDef=IfcRoundedRectangleProfileDef;var IfcSIUnit=class{constructor(expressID,type,Dimensions,UnitType,Prefix,Name){this.expressID=expressID;this.type=type;this.Dimensions=Dimensions;this.UnitType=UnitType;this.Prefix=Prefix;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Dimensions=tape[ptr++];let UnitType=tape[ptr++];let Prefix=tape[ptr++];let Name=tape[ptr++];return new IfcSIUnit(expressID,type,Dimensions,UnitType,Prefix,Name);}ToTape(){let args=[];args.push(this.Dimensions);;args.push(this.UnitType);;args.push(this.Prefix);;args.push(this.Name);;return args;}};exports.IfcSIUnit=IfcSIUnit;var IfcSanitaryTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSanitaryTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSanitaryTerminal=IfcSanitaryTerminal;var IfcSanitaryTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSanitaryTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcSanitaryTerminalType=IfcSanitaryTerminalType;var IfcSchedulingTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin){this.expressID=expressID;this.type=type;this.Name=Name;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];return new IfcSchedulingTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;return args;}};exports.IfcSchedulingTime=IfcSchedulingTime;var IfcSeamCurve=class{constructor(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation){this.expressID=expressID;this.type=type;this.Curve3D=Curve3D;this.AssociatedGeometry=AssociatedGeometry;this.MasterRepresentation=MasterRepresentation;}static FromTape(expressID,type,tape){let ptr=0;let Curve3D=tape[ptr++];let AssociatedGeometry=tape[ptr++];let MasterRepresentation=tape[ptr++];return new IfcSeamCurve(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation);}ToTape(){let args=[];args.push(this.Curve3D);;args.push(this.AssociatedGeometry);;args.push(this.MasterRepresentation);;return args;}};exports.IfcSeamCurve=IfcSeamCurve;var IfcSectionProperties=class{constructor(expressID,type,SectionType,StartProfile,EndProfile){this.expressID=expressID;this.type=type;this.SectionType=SectionType;this.StartProfile=StartProfile;this.EndProfile=EndProfile;}static FromTape(expressID,type,tape){let ptr=0;let SectionType=tape[ptr++];let StartProfile=tape[ptr++];let EndProfile=tape[ptr++];return new IfcSectionProperties(expressID,type,SectionType,StartProfile,EndProfile);}ToTape(){let args=[];args.push(this.SectionType);;args.push(this.StartProfile);;args.push(this.EndProfile);;return args;}};exports.IfcSectionProperties=IfcSectionProperties;var IfcSectionReinforcementProperties=class{constructor(expressID,type,LongitudinalStartPosition,LongitudinalEndPosition,TransversePosition,ReinforcementRole,SectionDefinition,CrossSectionReinforcementDefinitions){this.expressID=expressID;this.type=type;this.LongitudinalStartPosition=LongitudinalStartPosition;this.LongitudinalEndPosition=LongitudinalEndPosition;this.TransversePosition=TransversePosition;this.ReinforcementRole=ReinforcementRole;this.SectionDefinition=SectionDefinition;this.CrossSectionReinforcementDefinitions=CrossSectionReinforcementDefinitions;}static FromTape(expressID,type,tape){let ptr=0;let LongitudinalStartPosition=tape[ptr++];let LongitudinalEndPosition=tape[ptr++];let TransversePosition=tape[ptr++];let ReinforcementRole=tape[ptr++];let SectionDefinition=tape[ptr++];let CrossSectionReinforcementDefinitions=tape[ptr++];return new IfcSectionReinforcementProperties(expressID,type,LongitudinalStartPosition,LongitudinalEndPosition,TransversePosition,ReinforcementRole,SectionDefinition,CrossSectionReinforcementDefinitions);}ToTape(){let args=[];args.push(this.LongitudinalStartPosition);;args.push(this.LongitudinalEndPosition);;args.push(this.TransversePosition);;args.push(this.ReinforcementRole);;args.push(this.SectionDefinition);;args.push(this.CrossSectionReinforcementDefinitions);;return args;}};exports.IfcSectionReinforcementProperties=IfcSectionReinforcementProperties;var IfcSectionedSolid=class{constructor(expressID,type,Directrix,CrossSections){this.expressID=expressID;this.type=type;this.Directrix=Directrix;this.CrossSections=CrossSections;}static FromTape(expressID,type,tape){let ptr=0;let Directrix=tape[ptr++];let CrossSections=tape[ptr++];return new IfcSectionedSolid(expressID,type,Directrix,CrossSections);}ToTape(){let args=[];args.push(this.Directrix);;args.push(this.CrossSections);;return args;}};exports.IfcSectionedSolid=IfcSectionedSolid;var IfcSectionedSolidHorizontal=class{constructor(expressID,type,Directrix,CrossSections,CrossSectionPositions,FixedAxisVertical){this.expressID=expressID;this.type=type;this.Directrix=Directrix;this.CrossSections=CrossSections;this.CrossSectionPositions=CrossSectionPositions;this.FixedAxisVertical=FixedAxisVertical;}static FromTape(expressID,type,tape){let ptr=0;let Directrix=tape[ptr++];let CrossSections=tape[ptr++];let CrossSectionPositions=tape[ptr++];let FixedAxisVertical=tape[ptr++];return new IfcSectionedSolidHorizontal(expressID,type,Directrix,CrossSections,CrossSectionPositions,FixedAxisVertical);}ToTape(){let args=[];args.push(this.Directrix);;args.push(this.CrossSections);;args.push(this.CrossSectionPositions);;args.push(this.FixedAxisVertical);;return args;}};exports.IfcSectionedSolidHorizontal=IfcSectionedSolidHorizontal;var IfcSectionedSpine=class{constructor(expressID,type,SpineCurve,CrossSections,CrossSectionPositions){this.expressID=expressID;this.type=type;this.SpineCurve=SpineCurve;this.CrossSections=CrossSections;this.CrossSectionPositions=CrossSectionPositions;}static FromTape(expressID,type,tape){let ptr=0;let SpineCurve=tape[ptr++];let CrossSections=tape[ptr++];let CrossSectionPositions=tape[ptr++];return new IfcSectionedSpine(expressID,type,SpineCurve,CrossSections,CrossSectionPositions);}ToTape(){let args=[];args.push(this.SpineCurve);;args.push(this.CrossSections);;args.push(this.CrossSectionPositions);;return args;}};exports.IfcSectionedSpine=IfcSectionedSpine;var IfcSensor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSensor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSensor=IfcSensor;var IfcSensorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSensorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcSensorType=IfcSensorType;var IfcShadingDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcShadingDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcShadingDevice=IfcShadingDevice;var IfcShadingDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcShadingDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcShadingDeviceType=IfcShadingDeviceType;var IfcShapeAspect=class{constructor(expressID,type,ShapeRepresentations,Name,Description,ProductDefinitional,PartOfProductDefinitionShape){this.expressID=expressID;this.type=type;this.ShapeRepresentations=ShapeRepresentations;this.Name=Name;this.Description=Description;this.ProductDefinitional=ProductDefinitional;this.PartOfProductDefinitionShape=PartOfProductDefinitionShape;}static FromTape(expressID,type,tape){let ptr=0;let ShapeRepresentations=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ProductDefinitional=tape[ptr++];let PartOfProductDefinitionShape=tape[ptr++];return new IfcShapeAspect(expressID,type,ShapeRepresentations,Name,Description,ProductDefinitional,PartOfProductDefinitionShape);}ToTape(){let args=[];args.push(this.ShapeRepresentations);;args.push(this.Name);;args.push(this.Description);;args.push(this.ProductDefinitional);;args.push(this.PartOfProductDefinitionShape);;return args;}};exports.IfcShapeAspect=IfcShapeAspect;var IfcShapeModel=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID;this.type=type;this.ContextOfItems=ContextOfItems;this.RepresentationIdentifier=RepresentationIdentifier;this.RepresentationType=RepresentationType;this.Items=Items;}static FromTape(expressID,type,tape){let ptr=0;let ContextOfItems=tape[ptr++];let RepresentationIdentifier=tape[ptr++];let RepresentationType=tape[ptr++];let Items=tape[ptr++];return new IfcShapeModel(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items);}ToTape(){let args=[];args.push(this.ContextOfItems);;args.push(this.RepresentationIdentifier);;args.push(this.RepresentationType);;args.push(this.Items);;return args;}};exports.IfcShapeModel=IfcShapeModel;var IfcShapeRepresentation=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID;this.type=type;this.ContextOfItems=ContextOfItems;this.RepresentationIdentifier=RepresentationIdentifier;this.RepresentationType=RepresentationType;this.Items=Items;}static FromTape(expressID,type,tape){let ptr=0;let ContextOfItems=tape[ptr++];let RepresentationIdentifier=tape[ptr++];let RepresentationType=tape[ptr++];let Items=tape[ptr++];return new IfcShapeRepresentation(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items);}ToTape(){let args=[];args.push(this.ContextOfItems);;args.push(this.RepresentationIdentifier);;args.push(this.RepresentationType);;args.push(this.Items);;return args;}};exports.IfcShapeRepresentation=IfcShapeRepresentation;var IfcShellBasedSurfaceModel=class{constructor(expressID,type,SbsmBoundary){this.expressID=expressID;this.type=type;this.SbsmBoundary=SbsmBoundary;}static FromTape(expressID,type,tape){let ptr=0;let SbsmBoundary=tape[ptr++];return new IfcShellBasedSurfaceModel(expressID,type,SbsmBoundary);}ToTape(){let args=[];args.push(this.SbsmBoundary);;return args;}};exports.IfcShellBasedSurfaceModel=IfcShellBasedSurfaceModel;var IfcSimpleProperty=class{constructor(expressID,type,Name,Description){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];return new IfcSimpleProperty(expressID,type,Name,Description);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;return args;}};exports.IfcSimpleProperty=IfcSimpleProperty;var IfcSimplePropertyTemplate=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,TemplateType,PrimaryMeasureType,SecondaryMeasureType,Enumerators,PrimaryUnit,SecondaryUnit,Expression,AccessState){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.TemplateType=TemplateType;this.PrimaryMeasureType=PrimaryMeasureType;this.SecondaryMeasureType=SecondaryMeasureType;this.Enumerators=Enumerators;this.PrimaryUnit=PrimaryUnit;this.SecondaryUnit=SecondaryUnit;this.Expression=Expression;this.AccessState=AccessState;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let TemplateType=tape[ptr++];let PrimaryMeasureType=tape[ptr++];let SecondaryMeasureType=tape[ptr++];let Enumerators=tape[ptr++];let PrimaryUnit=tape[ptr++];let SecondaryUnit=tape[ptr++];let Expression=tape[ptr++];let AccessState=tape[ptr++];return new IfcSimplePropertyTemplate(expressID,type,GlobalId,OwnerHistory,Name,Description,TemplateType,PrimaryMeasureType,SecondaryMeasureType,Enumerators,PrimaryUnit,SecondaryUnit,Expression,AccessState);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.TemplateType);;args.push(this.PrimaryMeasureType);;args.push(this.SecondaryMeasureType);;args.push(this.Enumerators);;args.push(this.PrimaryUnit);;args.push(this.SecondaryUnit);;args.push(this.Expression);;args.push(this.AccessState);;return args;}};exports.IfcSimplePropertyTemplate=IfcSimplePropertyTemplate;var IfcSite=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,RefLatitude,RefLongitude,RefElevation,LandTitleNumber,SiteAddress){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;this.RefLatitude=RefLatitude;this.RefLongitude=RefLongitude;this.RefElevation=RefElevation;this.LandTitleNumber=LandTitleNumber;this.SiteAddress=SiteAddress;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];let RefLatitude=tape[ptr++];let RefLongitude=tape[ptr++];let RefElevation=tape[ptr++];let LandTitleNumber=tape[ptr++];let SiteAddress=tape[ptr++];return new IfcSite(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,RefLatitude,RefLongitude,RefElevation,LandTitleNumber,SiteAddress);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;args.push(this.RefLatitude);;args.push(this.RefLongitude);;args.push(this.RefElevation);;args.push(this.LandTitleNumber);;args.push(this.SiteAddress);;return args;}};exports.IfcSite=IfcSite;var IfcSlab=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSlab(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSlab=IfcSlab;var IfcSlabElementedCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSlabElementedCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSlabElementedCase=IfcSlabElementedCase;var IfcSlabStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSlabStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSlabStandardCase=IfcSlabStandardCase;var IfcSlabType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSlabType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcSlabType=IfcSlabType;var IfcSlippageConnectionCondition=class{constructor(expressID,type,Name,SlippageX,SlippageY,SlippageZ){this.expressID=expressID;this.type=type;this.Name=Name;this.SlippageX=SlippageX;this.SlippageY=SlippageY;this.SlippageZ=SlippageZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let SlippageX=tape[ptr++];let SlippageY=tape[ptr++];let SlippageZ=tape[ptr++];return new IfcSlippageConnectionCondition(expressID,type,Name,SlippageX,SlippageY,SlippageZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.SlippageX);;args.push(this.SlippageY);;args.push(this.SlippageZ);;return args;}};exports.IfcSlippageConnectionCondition=IfcSlippageConnectionCondition;var IfcSolarDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSolarDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSolarDevice=IfcSolarDevice;var IfcSolarDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSolarDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcSolarDeviceType=IfcSolarDeviceType;var IfcSolidModel=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcSolidModel(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcSolidModel=IfcSolidModel;var IfcSpace=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType,ElevationWithFlooring){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;this.PredefinedType=PredefinedType;this.ElevationWithFlooring=ElevationWithFlooring;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];let PredefinedType=tape[ptr++];let ElevationWithFlooring=tape[ptr++];return new IfcSpace(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType,PredefinedType,ElevationWithFlooring);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;args.push(this.PredefinedType);;args.push(this.ElevationWithFlooring);;return args;}};exports.IfcSpace=IfcSpace;var IfcSpaceHeater=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSpaceHeater(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSpaceHeater=IfcSpaceHeater;var IfcSpaceHeaterType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSpaceHeaterType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcSpaceHeaterType=IfcSpaceHeaterType;var IfcSpaceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,LongName){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;this.LongName=LongName;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];let LongName=tape[ptr++];return new IfcSpaceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,LongName);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;args.push(this.LongName);;return args;}};exports.IfcSpaceType=IfcSpaceType;var IfcSpatialElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];return new IfcSpatialElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;return args;}};exports.IfcSpatialElement=IfcSpatialElement;var IfcSpatialElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcSpatialElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcSpatialElementType=IfcSpatialElementType;var IfcSpatialStructureElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.CompositionType=CompositionType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let CompositionType=tape[ptr++];return new IfcSpatialStructureElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,CompositionType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.CompositionType);;return args;}};exports.IfcSpatialStructureElement=IfcSpatialStructureElement;var IfcSpatialStructureElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];return new IfcSpatialStructureElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;return args;}};exports.IfcSpatialStructureElementType=IfcSpatialStructureElementType;var IfcSpatialZone=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.LongName=LongName;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let LongName=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSpatialZone(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,LongName,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.LongName);;args.push(this.PredefinedType);;return args;}};exports.IfcSpatialZone=IfcSpatialZone;var IfcSpatialZoneType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,LongName){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;this.LongName=LongName;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];let LongName=tape[ptr++];return new IfcSpatialZoneType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,LongName);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;args.push(this.LongName);;return args;}};exports.IfcSpatialZoneType=IfcSpatialZoneType;var IfcSphere=class{constructor(expressID,type,Position,Radius){this.expressID=expressID;this.type=type;this.Position=Position;this.Radius=Radius;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let Radius=tape[ptr++];return new IfcSphere(expressID,type,Position,Radius);}ToTape(){let args=[];args.push(this.Position);;args.push(this.Radius);;return args;}};exports.IfcSphere=IfcSphere;var IfcSphericalSurface=class{constructor(expressID,type,Position,Radius){this.expressID=expressID;this.type=type;this.Position=Position;this.Radius=Radius;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let Radius=tape[ptr++];return new IfcSphericalSurface(expressID,type,Position,Radius);}ToTape(){let args=[];args.push(this.Position);;args.push(this.Radius);;return args;}};exports.IfcSphericalSurface=IfcSphericalSurface;var IfcStackTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStackTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcStackTerminal=IfcStackTerminal;var IfcStackTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStackTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcStackTerminalType=IfcStackTerminalType;var IfcStair=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStair(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcStair=IfcStair;var IfcStairFlight=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,NumberOfRisers,NumberOfTreads,RiserHeight,TreadLength,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.NumberOfRisers=NumberOfRisers;this.NumberOfTreads=NumberOfTreads;this.RiserHeight=RiserHeight;this.TreadLength=TreadLength;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let NumberOfRisers=tape[ptr++];let NumberOfTreads=tape[ptr++];let RiserHeight=tape[ptr++];let TreadLength=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStairFlight(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,NumberOfRisers,NumberOfTreads,RiserHeight,TreadLength,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.NumberOfRisers);;args.push(this.NumberOfTreads);;args.push(this.RiserHeight);;args.push(this.TreadLength);;args.push(this.PredefinedType);;return args;}};exports.IfcStairFlight=IfcStairFlight;var IfcStairFlightType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStairFlightType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcStairFlightType=IfcStairFlightType;var IfcStairType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStairType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcStairType=IfcStairType;var IfcStructuralAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;this.DestabilizingLoad=DestabilizingLoad;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];let DestabilizingLoad=tape[ptr++];return new IfcStructuralAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;args.push(this.DestabilizingLoad);;return args;}};exports.IfcStructuralAction=IfcStructuralAction;var IfcStructuralActivity=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];return new IfcStructuralActivity(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;return args;}};exports.IfcStructuralActivity=IfcStructuralActivity;var IfcStructuralAnalysisModel=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,OrientationOf2DPlane,LoadedBy,HasResults,SharedPlacement){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.PredefinedType=PredefinedType;this.OrientationOf2DPlane=OrientationOf2DPlane;this.LoadedBy=LoadedBy;this.HasResults=HasResults;this.SharedPlacement=SharedPlacement;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let PredefinedType=tape[ptr++];let OrientationOf2DPlane=tape[ptr++];let LoadedBy=tape[ptr++];let HasResults=tape[ptr++];let SharedPlacement=tape[ptr++];return new IfcStructuralAnalysisModel(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,OrientationOf2DPlane,LoadedBy,HasResults,SharedPlacement);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.PredefinedType);;args.push(this.OrientationOf2DPlane);;args.push(this.LoadedBy);;args.push(this.HasResults);;args.push(this.SharedPlacement);;return args;}};exports.IfcStructuralAnalysisModel=IfcStructuralAnalysisModel;var IfcStructuralConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedCondition=AppliedCondition;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedCondition=tape[ptr++];return new IfcStructuralConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedCondition);;return args;}};exports.IfcStructuralConnection=IfcStructuralConnection;var IfcStructuralConnectionCondition=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcStructuralConnectionCondition(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcStructuralConnectionCondition=IfcStructuralConnectionCondition;var IfcStructuralCurveAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;this.DestabilizingLoad=DestabilizingLoad;this.ProjectedOrTrue=ProjectedOrTrue;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];let DestabilizingLoad=tape[ptr++];let ProjectedOrTrue=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStructuralCurveAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;args.push(this.DestabilizingLoad);;args.push(this.ProjectedOrTrue);;args.push(this.PredefinedType);;return args;}};exports.IfcStructuralCurveAction=IfcStructuralCurveAction;var IfcStructuralCurveConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition,Axis){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedCondition=AppliedCondition;this.Axis=Axis;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedCondition=tape[ptr++];let Axis=tape[ptr++];return new IfcStructuralCurveConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition,Axis);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedCondition);;args.push(this.Axis);;return args;}};exports.IfcStructuralCurveConnection=IfcStructuralCurveConnection;var IfcStructuralCurveMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Axis){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.PredefinedType=PredefinedType;this.Axis=Axis;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let PredefinedType=tape[ptr++];let Axis=tape[ptr++];return new IfcStructuralCurveMember(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Axis);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.PredefinedType);;args.push(this.Axis);;return args;}};exports.IfcStructuralCurveMember=IfcStructuralCurveMember;var IfcStructuralCurveMemberVarying=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Axis){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.PredefinedType=PredefinedType;this.Axis=Axis;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let PredefinedType=tape[ptr++];let Axis=tape[ptr++];return new IfcStructuralCurveMemberVarying(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Axis);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.PredefinedType);;args.push(this.Axis);;return args;}};exports.IfcStructuralCurveMemberVarying=IfcStructuralCurveMemberVarying;var IfcStructuralCurveReaction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStructuralCurveReaction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;args.push(this.PredefinedType);;return args;}};exports.IfcStructuralCurveReaction=IfcStructuralCurveReaction;var IfcStructuralItem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];return new IfcStructuralItem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;return args;}};exports.IfcStructuralItem=IfcStructuralItem;var IfcStructuralLinearAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;this.DestabilizingLoad=DestabilizingLoad;this.ProjectedOrTrue=ProjectedOrTrue;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];let DestabilizingLoad=tape[ptr++];let ProjectedOrTrue=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStructuralLinearAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;args.push(this.DestabilizingLoad);;args.push(this.ProjectedOrTrue);;args.push(this.PredefinedType);;return args;}};exports.IfcStructuralLinearAction=IfcStructuralLinearAction;var IfcStructuralLoad=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcStructuralLoad(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcStructuralLoad=IfcStructuralLoad;var IfcStructuralLoadCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,ActionType,ActionSource,Coefficient,Purpose,SelfWeightCoefficients){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.PredefinedType=PredefinedType;this.ActionType=ActionType;this.ActionSource=ActionSource;this.Coefficient=Coefficient;this.Purpose=Purpose;this.SelfWeightCoefficients=SelfWeightCoefficients;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let PredefinedType=tape[ptr++];let ActionType=tape[ptr++];let ActionSource=tape[ptr++];let Coefficient=tape[ptr++];let Purpose=tape[ptr++];let SelfWeightCoefficients=tape[ptr++];return new IfcStructuralLoadCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,ActionType,ActionSource,Coefficient,Purpose,SelfWeightCoefficients);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.PredefinedType);;args.push(this.ActionType);;args.push(this.ActionSource);;args.push(this.Coefficient);;args.push(this.Purpose);;args.push(this.SelfWeightCoefficients);;return args;}};exports.IfcStructuralLoadCase=IfcStructuralLoadCase;var IfcStructuralLoadConfiguration=class{constructor(expressID,type,Name,Values,Locations){this.expressID=expressID;this.type=type;this.Name=Name;this.Values=Values;this.Locations=Locations;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Values=tape[ptr++];let Locations=tape[ptr++];return new IfcStructuralLoadConfiguration(expressID,type,Name,Values,Locations);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Values);;args.push(this.Locations);;return args;}};exports.IfcStructuralLoadConfiguration=IfcStructuralLoadConfiguration;var IfcStructuralLoadGroup=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,ActionType,ActionSource,Coefficient,Purpose){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.PredefinedType=PredefinedType;this.ActionType=ActionType;this.ActionSource=ActionSource;this.Coefficient=Coefficient;this.Purpose=Purpose;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let PredefinedType=tape[ptr++];let ActionType=tape[ptr++];let ActionSource=tape[ptr++];let Coefficient=tape[ptr++];let Purpose=tape[ptr++];return new IfcStructuralLoadGroup(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,PredefinedType,ActionType,ActionSource,Coefficient,Purpose);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.PredefinedType);;args.push(this.ActionType);;args.push(this.ActionSource);;args.push(this.Coefficient);;args.push(this.Purpose);;return args;}};exports.IfcStructuralLoadGroup=IfcStructuralLoadGroup;var IfcStructuralLoadLinearForce=class{constructor(expressID,type,Name,LinearForceX,LinearForceY,LinearForceZ,LinearMomentX,LinearMomentY,LinearMomentZ){this.expressID=expressID;this.type=type;this.Name=Name;this.LinearForceX=LinearForceX;this.LinearForceY=LinearForceY;this.LinearForceZ=LinearForceZ;this.LinearMomentX=LinearMomentX;this.LinearMomentY=LinearMomentY;this.LinearMomentZ=LinearMomentZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let LinearForceX=tape[ptr++];let LinearForceY=tape[ptr++];let LinearForceZ=tape[ptr++];let LinearMomentX=tape[ptr++];let LinearMomentY=tape[ptr++];let LinearMomentZ=tape[ptr++];return new IfcStructuralLoadLinearForce(expressID,type,Name,LinearForceX,LinearForceY,LinearForceZ,LinearMomentX,LinearMomentY,LinearMomentZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.LinearForceX);;args.push(this.LinearForceY);;args.push(this.LinearForceZ);;args.push(this.LinearMomentX);;args.push(this.LinearMomentY);;args.push(this.LinearMomentZ);;return args;}};exports.IfcStructuralLoadLinearForce=IfcStructuralLoadLinearForce;var IfcStructuralLoadOrResult=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcStructuralLoadOrResult(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcStructuralLoadOrResult=IfcStructuralLoadOrResult;var IfcStructuralLoadPlanarForce=class{constructor(expressID,type,Name,PlanarForceX,PlanarForceY,PlanarForceZ){this.expressID=expressID;this.type=type;this.Name=Name;this.PlanarForceX=PlanarForceX;this.PlanarForceY=PlanarForceY;this.PlanarForceZ=PlanarForceZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let PlanarForceX=tape[ptr++];let PlanarForceY=tape[ptr++];let PlanarForceZ=tape[ptr++];return new IfcStructuralLoadPlanarForce(expressID,type,Name,PlanarForceX,PlanarForceY,PlanarForceZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.PlanarForceX);;args.push(this.PlanarForceY);;args.push(this.PlanarForceZ);;return args;}};exports.IfcStructuralLoadPlanarForce=IfcStructuralLoadPlanarForce;var IfcStructuralLoadSingleDisplacement=class{constructor(expressID,type,Name,DisplacementX,DisplacementY,DisplacementZ,RotationalDisplacementRX,RotationalDisplacementRY,RotationalDisplacementRZ){this.expressID=expressID;this.type=type;this.Name=Name;this.DisplacementX=DisplacementX;this.DisplacementY=DisplacementY;this.DisplacementZ=DisplacementZ;this.RotationalDisplacementRX=RotationalDisplacementRX;this.RotationalDisplacementRY=RotationalDisplacementRY;this.RotationalDisplacementRZ=RotationalDisplacementRZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DisplacementX=tape[ptr++];let DisplacementY=tape[ptr++];let DisplacementZ=tape[ptr++];let RotationalDisplacementRX=tape[ptr++];let RotationalDisplacementRY=tape[ptr++];let RotationalDisplacementRZ=tape[ptr++];return new IfcStructuralLoadSingleDisplacement(expressID,type,Name,DisplacementX,DisplacementY,DisplacementZ,RotationalDisplacementRX,RotationalDisplacementRY,RotationalDisplacementRZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DisplacementX);;args.push(this.DisplacementY);;args.push(this.DisplacementZ);;args.push(this.RotationalDisplacementRX);;args.push(this.RotationalDisplacementRY);;args.push(this.RotationalDisplacementRZ);;return args;}};exports.IfcStructuralLoadSingleDisplacement=IfcStructuralLoadSingleDisplacement;var IfcStructuralLoadSingleDisplacementDistortion=class{constructor(expressID,type,Name,DisplacementX,DisplacementY,DisplacementZ,RotationalDisplacementRX,RotationalDisplacementRY,RotationalDisplacementRZ,Distortion){this.expressID=expressID;this.type=type;this.Name=Name;this.DisplacementX=DisplacementX;this.DisplacementY=DisplacementY;this.DisplacementZ=DisplacementZ;this.RotationalDisplacementRX=RotationalDisplacementRX;this.RotationalDisplacementRY=RotationalDisplacementRY;this.RotationalDisplacementRZ=RotationalDisplacementRZ;this.Distortion=Distortion;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DisplacementX=tape[ptr++];let DisplacementY=tape[ptr++];let DisplacementZ=tape[ptr++];let RotationalDisplacementRX=tape[ptr++];let RotationalDisplacementRY=tape[ptr++];let RotationalDisplacementRZ=tape[ptr++];let Distortion=tape[ptr++];return new IfcStructuralLoadSingleDisplacementDistortion(expressID,type,Name,DisplacementX,DisplacementY,DisplacementZ,RotationalDisplacementRX,RotationalDisplacementRY,RotationalDisplacementRZ,Distortion);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DisplacementX);;args.push(this.DisplacementY);;args.push(this.DisplacementZ);;args.push(this.RotationalDisplacementRX);;args.push(this.RotationalDisplacementRY);;args.push(this.RotationalDisplacementRZ);;args.push(this.Distortion);;return args;}};exports.IfcStructuralLoadSingleDisplacementDistortion=IfcStructuralLoadSingleDisplacementDistortion;var IfcStructuralLoadSingleForce=class{constructor(expressID,type,Name,ForceX,ForceY,ForceZ,MomentX,MomentY,MomentZ){this.expressID=expressID;this.type=type;this.Name=Name;this.ForceX=ForceX;this.ForceY=ForceY;this.ForceZ=ForceZ;this.MomentX=MomentX;this.MomentY=MomentY;this.MomentZ=MomentZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let ForceX=tape[ptr++];let ForceY=tape[ptr++];let ForceZ=tape[ptr++];let MomentX=tape[ptr++];let MomentY=tape[ptr++];let MomentZ=tape[ptr++];return new IfcStructuralLoadSingleForce(expressID,type,Name,ForceX,ForceY,ForceZ,MomentX,MomentY,MomentZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.ForceX);;args.push(this.ForceY);;args.push(this.ForceZ);;args.push(this.MomentX);;args.push(this.MomentY);;args.push(this.MomentZ);;return args;}};exports.IfcStructuralLoadSingleForce=IfcStructuralLoadSingleForce;var IfcStructuralLoadSingleForceWarping=class{constructor(expressID,type,Name,ForceX,ForceY,ForceZ,MomentX,MomentY,MomentZ,WarpingMoment){this.expressID=expressID;this.type=type;this.Name=Name;this.ForceX=ForceX;this.ForceY=ForceY;this.ForceZ=ForceZ;this.MomentX=MomentX;this.MomentY=MomentY;this.MomentZ=MomentZ;this.WarpingMoment=WarpingMoment;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let ForceX=tape[ptr++];let ForceY=tape[ptr++];let ForceZ=tape[ptr++];let MomentX=tape[ptr++];let MomentY=tape[ptr++];let MomentZ=tape[ptr++];let WarpingMoment=tape[ptr++];return new IfcStructuralLoadSingleForceWarping(expressID,type,Name,ForceX,ForceY,ForceZ,MomentX,MomentY,MomentZ,WarpingMoment);}ToTape(){let args=[];args.push(this.Name);;args.push(this.ForceX);;args.push(this.ForceY);;args.push(this.ForceZ);;args.push(this.MomentX);;args.push(this.MomentY);;args.push(this.MomentZ);;args.push(this.WarpingMoment);;return args;}};exports.IfcStructuralLoadSingleForceWarping=IfcStructuralLoadSingleForceWarping;var IfcStructuralLoadStatic=class{constructor(expressID,type,Name){this.expressID=expressID;this.type=type;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];return new IfcStructuralLoadStatic(expressID,type,Name);}ToTape(){let args=[];args.push(this.Name);;return args;}};exports.IfcStructuralLoadStatic=IfcStructuralLoadStatic;var IfcStructuralLoadTemperature=class{constructor(expressID,type,Name,DeltaTConstant,DeltaTY,DeltaTZ){this.expressID=expressID;this.type=type;this.Name=Name;this.DeltaTConstant=DeltaTConstant;this.DeltaTY=DeltaTY;this.DeltaTZ=DeltaTZ;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DeltaTConstant=tape[ptr++];let DeltaTY=tape[ptr++];let DeltaTZ=tape[ptr++];return new IfcStructuralLoadTemperature(expressID,type,Name,DeltaTConstant,DeltaTY,DeltaTZ);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DeltaTConstant);;args.push(this.DeltaTY);;args.push(this.DeltaTZ);;return args;}};exports.IfcStructuralLoadTemperature=IfcStructuralLoadTemperature;var IfcStructuralMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];return new IfcStructuralMember(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;return args;}};exports.IfcStructuralMember=IfcStructuralMember;var IfcStructuralPlanarAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;this.DestabilizingLoad=DestabilizingLoad;this.ProjectedOrTrue=ProjectedOrTrue;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];let DestabilizingLoad=tape[ptr++];let ProjectedOrTrue=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStructuralPlanarAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;args.push(this.DestabilizingLoad);;args.push(this.ProjectedOrTrue);;args.push(this.PredefinedType);;return args;}};exports.IfcStructuralPlanarAction=IfcStructuralPlanarAction;var IfcStructuralPointAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;this.DestabilizingLoad=DestabilizingLoad;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];let DestabilizingLoad=tape[ptr++];return new IfcStructuralPointAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;args.push(this.DestabilizingLoad);;return args;}};exports.IfcStructuralPointAction=IfcStructuralPointAction;var IfcStructuralPointConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition,ConditionCoordinateSystem){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedCondition=AppliedCondition;this.ConditionCoordinateSystem=ConditionCoordinateSystem;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedCondition=tape[ptr++];let ConditionCoordinateSystem=tape[ptr++];return new IfcStructuralPointConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition,ConditionCoordinateSystem);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedCondition);;args.push(this.ConditionCoordinateSystem);;return args;}};exports.IfcStructuralPointConnection=IfcStructuralPointConnection;var IfcStructuralPointReaction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];return new IfcStructuralPointReaction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;return args;}};exports.IfcStructuralPointReaction=IfcStructuralPointReaction;var IfcStructuralReaction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];return new IfcStructuralReaction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;return args;}};exports.IfcStructuralReaction=IfcStructuralReaction;var IfcStructuralResultGroup=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheoryType,ResultForLoadGroup,IsLinear){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.TheoryType=TheoryType;this.ResultForLoadGroup=ResultForLoadGroup;this.IsLinear=IsLinear;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let TheoryType=tape[ptr++];let ResultForLoadGroup=tape[ptr++];let IsLinear=tape[ptr++];return new IfcStructuralResultGroup(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,TheoryType,ResultForLoadGroup,IsLinear);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.TheoryType);;args.push(this.ResultForLoadGroup);;args.push(this.IsLinear);;return args;}};exports.IfcStructuralResultGroup=IfcStructuralResultGroup;var IfcStructuralSurfaceAction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;this.DestabilizingLoad=DestabilizingLoad;this.ProjectedOrTrue=ProjectedOrTrue;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];let DestabilizingLoad=tape[ptr++];let ProjectedOrTrue=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStructuralSurfaceAction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,DestabilizingLoad,ProjectedOrTrue,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;args.push(this.DestabilizingLoad);;args.push(this.ProjectedOrTrue);;args.push(this.PredefinedType);;return args;}};exports.IfcStructuralSurfaceAction=IfcStructuralSurfaceAction;var IfcStructuralSurfaceConnection=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedCondition=AppliedCondition;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedCondition=tape[ptr++];return new IfcStructuralSurfaceConnection(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedCondition);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedCondition);;return args;}};exports.IfcStructuralSurfaceConnection=IfcStructuralSurfaceConnection;var IfcStructuralSurfaceMember=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Thickness){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.PredefinedType=PredefinedType;this.Thickness=Thickness;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let PredefinedType=tape[ptr++];let Thickness=tape[ptr++];return new IfcStructuralSurfaceMember(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Thickness);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.PredefinedType);;args.push(this.Thickness);;return args;}};exports.IfcStructuralSurfaceMember=IfcStructuralSurfaceMember;var IfcStructuralSurfaceMemberVarying=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Thickness){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.PredefinedType=PredefinedType;this.Thickness=Thickness;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let PredefinedType=tape[ptr++];let Thickness=tape[ptr++];return new IfcStructuralSurfaceMemberVarying(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,PredefinedType,Thickness);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.PredefinedType);;args.push(this.Thickness);;return args;}};exports.IfcStructuralSurfaceMemberVarying=IfcStructuralSurfaceMemberVarying;var IfcStructuralSurfaceReaction=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.AppliedLoad=AppliedLoad;this.GlobalOrLocal=GlobalOrLocal;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let AppliedLoad=tape[ptr++];let GlobalOrLocal=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcStructuralSurfaceReaction(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,AppliedLoad,GlobalOrLocal,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.AppliedLoad);;args.push(this.GlobalOrLocal);;args.push(this.PredefinedType);;return args;}};exports.IfcStructuralSurfaceReaction=IfcStructuralSurfaceReaction;var IfcStyleModel=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID;this.type=type;this.ContextOfItems=ContextOfItems;this.RepresentationIdentifier=RepresentationIdentifier;this.RepresentationType=RepresentationType;this.Items=Items;}static FromTape(expressID,type,tape){let ptr=0;let ContextOfItems=tape[ptr++];let RepresentationIdentifier=tape[ptr++];let RepresentationType=tape[ptr++];let Items=tape[ptr++];return new IfcStyleModel(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items);}ToTape(){let args=[];args.push(this.ContextOfItems);;args.push(this.RepresentationIdentifier);;args.push(this.RepresentationType);;args.push(this.Items);;return args;}};exports.IfcStyleModel=IfcStyleModel;var IfcStyledItem=class{constructor(expressID,type,Item,Styles,Name){this.expressID=expressID;this.type=type;this.Item=Item;this.Styles=Styles;this.Name=Name;}static FromTape(expressID,type,tape){let ptr=0;let Item=tape[ptr++];let Styles=tape[ptr++];let Name=tape[ptr++];return new IfcStyledItem(expressID,type,Item,Styles,Name);}ToTape(){let args=[];args.push(this.Item);;args.push(this.Styles);;args.push(this.Name);;return args;}};exports.IfcStyledItem=IfcStyledItem;var IfcStyledRepresentation=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID;this.type=type;this.ContextOfItems=ContextOfItems;this.RepresentationIdentifier=RepresentationIdentifier;this.RepresentationType=RepresentationType;this.Items=Items;}static FromTape(expressID,type,tape){let ptr=0;let ContextOfItems=tape[ptr++];let RepresentationIdentifier=tape[ptr++];let RepresentationType=tape[ptr++];let Items=tape[ptr++];return new IfcStyledRepresentation(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items);}ToTape(){let args=[];args.push(this.ContextOfItems);;args.push(this.RepresentationIdentifier);;args.push(this.RepresentationType);;args.push(this.Items);;return args;}};exports.IfcStyledRepresentation=IfcStyledRepresentation;var IfcSubContractResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.Usage=Usage;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let Usage=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSubContractResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Usage,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.Usage);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcSubContractResource=IfcSubContractResource;var IfcSubContractResourceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ResourceType=ResourceType;this.BaseCosts=BaseCosts;this.BaseQuantity=BaseQuantity;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ResourceType=tape[ptr++];let BaseCosts=tape[ptr++];let BaseQuantity=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSubContractResourceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType,BaseCosts,BaseQuantity,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ResourceType);;args.push(this.BaseCosts);;args.push(this.BaseQuantity);;args.push(this.PredefinedType);;return args;}};exports.IfcSubContractResourceType=IfcSubContractResourceType;var IfcSubedge=class{constructor(expressID,type,EdgeStart,EdgeEnd,ParentEdge){this.expressID=expressID;this.type=type;this.EdgeStart=EdgeStart;this.EdgeEnd=EdgeEnd;this.ParentEdge=ParentEdge;}static FromTape(expressID,type,tape){let ptr=0;let EdgeStart=tape[ptr++];let EdgeEnd=tape[ptr++];let ParentEdge=tape[ptr++];return new IfcSubedge(expressID,type,EdgeStart,EdgeEnd,ParentEdge);}ToTape(){let args=[];args.push(this.EdgeStart);;args.push(this.EdgeEnd);;args.push(this.ParentEdge);;return args;}};exports.IfcSubedge=IfcSubedge;var IfcSurface=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcSurface(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcSurface=IfcSurface;var IfcSurfaceCurve=class{constructor(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation){this.expressID=expressID;this.type=type;this.Curve3D=Curve3D;this.AssociatedGeometry=AssociatedGeometry;this.MasterRepresentation=MasterRepresentation;}static FromTape(expressID,type,tape){let ptr=0;let Curve3D=tape[ptr++];let AssociatedGeometry=tape[ptr++];let MasterRepresentation=tape[ptr++];return new IfcSurfaceCurve(expressID,type,Curve3D,AssociatedGeometry,MasterRepresentation);}ToTape(){let args=[];args.push(this.Curve3D);;args.push(this.AssociatedGeometry);;args.push(this.MasterRepresentation);;return args;}};exports.IfcSurfaceCurve=IfcSurfaceCurve;var IfcSurfaceCurveSweptAreaSolid=class{constructor(expressID,type,SweptArea,Position,Directrix,StartParam,EndParam,ReferenceSurface){this.expressID=expressID;this.type=type;this.SweptArea=SweptArea;this.Position=Position;this.Directrix=Directrix;this.StartParam=StartParam;this.EndParam=EndParam;this.ReferenceSurface=ReferenceSurface;}static FromTape(expressID,type,tape){let ptr=0;let SweptArea=tape[ptr++];let Position=tape[ptr++];let Directrix=tape[ptr++];let StartParam=tape[ptr++];let EndParam=tape[ptr++];let ReferenceSurface=tape[ptr++];return new IfcSurfaceCurveSweptAreaSolid(expressID,type,SweptArea,Position,Directrix,StartParam,EndParam,ReferenceSurface);}ToTape(){let args=[];args.push(this.SweptArea);;args.push(this.Position);;args.push(this.Directrix);;args.push(this.StartParam);;args.push(this.EndParam);;args.push(this.ReferenceSurface);;return args;}};exports.IfcSurfaceCurveSweptAreaSolid=IfcSurfaceCurveSweptAreaSolid;var IfcSurfaceFeature=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSurfaceFeature(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSurfaceFeature=IfcSurfaceFeature;var IfcSurfaceOfLinearExtrusion=class{constructor(expressID,type,SweptCurve,Position,ExtrudedDirection,Depth){this.expressID=expressID;this.type=type;this.SweptCurve=SweptCurve;this.Position=Position;this.ExtrudedDirection=ExtrudedDirection;this.Depth=Depth;}static FromTape(expressID,type,tape){let ptr=0;let SweptCurve=tape[ptr++];let Position=tape[ptr++];let ExtrudedDirection=tape[ptr++];let Depth=tape[ptr++];return new IfcSurfaceOfLinearExtrusion(expressID,type,SweptCurve,Position,ExtrudedDirection,Depth);}ToTape(){let args=[];args.push(this.SweptCurve);;args.push(this.Position);;args.push(this.ExtrudedDirection);;args.push(this.Depth);;return args;}};exports.IfcSurfaceOfLinearExtrusion=IfcSurfaceOfLinearExtrusion;var IfcSurfaceOfRevolution=class{constructor(expressID,type,SweptCurve,Position,AxisPosition){this.expressID=expressID;this.type=type;this.SweptCurve=SweptCurve;this.Position=Position;this.AxisPosition=AxisPosition;}static FromTape(expressID,type,tape){let ptr=0;let SweptCurve=tape[ptr++];let Position=tape[ptr++];let AxisPosition=tape[ptr++];return new IfcSurfaceOfRevolution(expressID,type,SweptCurve,Position,AxisPosition);}ToTape(){let args=[];args.push(this.SweptCurve);;args.push(this.Position);;args.push(this.AxisPosition);;return args;}};exports.IfcSurfaceOfRevolution=IfcSurfaceOfRevolution;var IfcSurfaceReinforcementArea=class{constructor(expressID,type,Name,SurfaceReinforcement1,SurfaceReinforcement2,ShearReinforcement){this.expressID=expressID;this.type=type;this.Name=Name;this.SurfaceReinforcement1=SurfaceReinforcement1;this.SurfaceReinforcement2=SurfaceReinforcement2;this.ShearReinforcement=ShearReinforcement;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let SurfaceReinforcement1=tape[ptr++];let SurfaceReinforcement2=tape[ptr++];let ShearReinforcement=tape[ptr++];return new IfcSurfaceReinforcementArea(expressID,type,Name,SurfaceReinforcement1,SurfaceReinforcement2,ShearReinforcement);}ToTape(){let args=[];args.push(this.Name);;args.push(this.SurfaceReinforcement1);;args.push(this.SurfaceReinforcement2);;args.push(this.ShearReinforcement);;return args;}};exports.IfcSurfaceReinforcementArea=IfcSurfaceReinforcementArea;var IfcSurfaceStyle=class{constructor(expressID,type,Name,Side,Styles){this.expressID=expressID;this.type=type;this.Name=Name;this.Side=Side;this.Styles=Styles;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Side=tape[ptr++];let Styles=tape[ptr++];return new IfcSurfaceStyle(expressID,type,Name,Side,Styles);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Side);;args.push(this.Styles);;return args;}};exports.IfcSurfaceStyle=IfcSurfaceStyle;var IfcSurfaceStyleLighting=class{constructor(expressID,type,DiffuseTransmissionColour,DiffuseReflectionColour,TransmissionColour,ReflectanceColour){this.expressID=expressID;this.type=type;this.DiffuseTransmissionColour=DiffuseTransmissionColour;this.DiffuseReflectionColour=DiffuseReflectionColour;this.TransmissionColour=TransmissionColour;this.ReflectanceColour=ReflectanceColour;}static FromTape(expressID,type,tape){let ptr=0;let DiffuseTransmissionColour=tape[ptr++];let DiffuseReflectionColour=tape[ptr++];let TransmissionColour=tape[ptr++];let ReflectanceColour=tape[ptr++];return new IfcSurfaceStyleLighting(expressID,type,DiffuseTransmissionColour,DiffuseReflectionColour,TransmissionColour,ReflectanceColour);}ToTape(){let args=[];args.push(this.DiffuseTransmissionColour);;args.push(this.DiffuseReflectionColour);;args.push(this.TransmissionColour);;args.push(this.ReflectanceColour);;return args;}};exports.IfcSurfaceStyleLighting=IfcSurfaceStyleLighting;var IfcSurfaceStyleRefraction=class{constructor(expressID,type,RefractionIndex,DispersionFactor){this.expressID=expressID;this.type=type;this.RefractionIndex=RefractionIndex;this.DispersionFactor=DispersionFactor;}static FromTape(expressID,type,tape){let ptr=0;let RefractionIndex=tape[ptr++];let DispersionFactor=tape[ptr++];return new IfcSurfaceStyleRefraction(expressID,type,RefractionIndex,DispersionFactor);}ToTape(){let args=[];args.push(this.RefractionIndex);;args.push(this.DispersionFactor);;return args;}};exports.IfcSurfaceStyleRefraction=IfcSurfaceStyleRefraction;var IfcSurfaceStyleRendering=class{constructor(expressID,type,SurfaceColour,Transparency,DiffuseColour,TransmissionColour,DiffuseTransmissionColour,ReflectionColour,SpecularColour,SpecularHighlight,ReflectanceMethod){this.expressID=expressID;this.type=type;this.SurfaceColour=SurfaceColour;this.Transparency=Transparency;this.DiffuseColour=DiffuseColour;this.TransmissionColour=TransmissionColour;this.DiffuseTransmissionColour=DiffuseTransmissionColour;this.ReflectionColour=ReflectionColour;this.SpecularColour=SpecularColour;this.SpecularHighlight=SpecularHighlight;this.ReflectanceMethod=ReflectanceMethod;}static FromTape(expressID,type,tape){let ptr=0;let SurfaceColour=tape[ptr++];let Transparency=tape[ptr++];let DiffuseColour=tape[ptr++];let TransmissionColour=tape[ptr++];let DiffuseTransmissionColour=tape[ptr++];let ReflectionColour=tape[ptr++];let SpecularColour=tape[ptr++];let SpecularHighlight=tape[ptr++];let ReflectanceMethod=tape[ptr++];return new IfcSurfaceStyleRendering(expressID,type,SurfaceColour,Transparency,DiffuseColour,TransmissionColour,DiffuseTransmissionColour,ReflectionColour,SpecularColour,SpecularHighlight,ReflectanceMethod);}ToTape(){let args=[];args.push(this.SurfaceColour);;args.push(this.Transparency);;args.push(this.DiffuseColour);;args.push(this.TransmissionColour);;args.push(this.DiffuseTransmissionColour);;args.push(this.ReflectionColour);;args.push(this.SpecularColour);;args.push(this.SpecularHighlight);;args.push(this.ReflectanceMethod);;return args;}};exports.IfcSurfaceStyleRendering=IfcSurfaceStyleRendering;var IfcSurfaceStyleShading=class{constructor(expressID,type,SurfaceColour,Transparency){this.expressID=expressID;this.type=type;this.SurfaceColour=SurfaceColour;this.Transparency=Transparency;}static FromTape(expressID,type,tape){let ptr=0;let SurfaceColour=tape[ptr++];let Transparency=tape[ptr++];return new IfcSurfaceStyleShading(expressID,type,SurfaceColour,Transparency);}ToTape(){let args=[];args.push(this.SurfaceColour);;args.push(this.Transparency);;return args;}};exports.IfcSurfaceStyleShading=IfcSurfaceStyleShading;var IfcSurfaceStyleWithTextures=class{constructor(expressID,type,Textures){this.expressID=expressID;this.type=type;this.Textures=Textures;}static FromTape(expressID,type,tape){let ptr=0;let Textures=tape[ptr++];return new IfcSurfaceStyleWithTextures(expressID,type,Textures);}ToTape(){let args=[];args.push(this.Textures);;return args;}};exports.IfcSurfaceStyleWithTextures=IfcSurfaceStyleWithTextures;var IfcSurfaceTexture=class{constructor(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter){this.expressID=expressID;this.type=type;this.RepeatS=RepeatS;this.RepeatT=RepeatT;this.Mode=Mode;this.TextureTransform=TextureTransform;this.Parameter=Parameter;}static FromTape(expressID,type,tape){let ptr=0;let RepeatS=tape[ptr++];let RepeatT=tape[ptr++];let Mode=tape[ptr++];let TextureTransform=tape[ptr++];let Parameter=tape[ptr++];return new IfcSurfaceTexture(expressID,type,RepeatS,RepeatT,Mode,TextureTransform,Parameter);}ToTape(){let args=[];args.push(this.RepeatS);;args.push(this.RepeatT);;args.push(this.Mode);;args.push(this.TextureTransform);;args.push(this.Parameter);;return args;}};exports.IfcSurfaceTexture=IfcSurfaceTexture;var IfcSweptAreaSolid=class{constructor(expressID,type,SweptArea,Position){this.expressID=expressID;this.type=type;this.SweptArea=SweptArea;this.Position=Position;}static FromTape(expressID,type,tape){let ptr=0;let SweptArea=tape[ptr++];let Position=tape[ptr++];return new IfcSweptAreaSolid(expressID,type,SweptArea,Position);}ToTape(){let args=[];args.push(this.SweptArea);;args.push(this.Position);;return args;}};exports.IfcSweptAreaSolid=IfcSweptAreaSolid;var IfcSweptDiskSolid=class{constructor(expressID,type,Directrix,Radius,InnerRadius,StartParam,EndParam){this.expressID=expressID;this.type=type;this.Directrix=Directrix;this.Radius=Radius;this.InnerRadius=InnerRadius;this.StartParam=StartParam;this.EndParam=EndParam;}static FromTape(expressID,type,tape){let ptr=0;let Directrix=tape[ptr++];let Radius=tape[ptr++];let InnerRadius=tape[ptr++];let StartParam=tape[ptr++];let EndParam=tape[ptr++];return new IfcSweptDiskSolid(expressID,type,Directrix,Radius,InnerRadius,StartParam,EndParam);}ToTape(){let args=[];args.push(this.Directrix);;args.push(this.Radius);;args.push(this.InnerRadius);;args.push(this.StartParam);;args.push(this.EndParam);;return args;}};exports.IfcSweptDiskSolid=IfcSweptDiskSolid;var IfcSweptDiskSolidPolygonal=class{constructor(expressID,type,Directrix,Radius,InnerRadius,StartParam,EndParam,FilletRadius){this.expressID=expressID;this.type=type;this.Directrix=Directrix;this.Radius=Radius;this.InnerRadius=InnerRadius;this.StartParam=StartParam;this.EndParam=EndParam;this.FilletRadius=FilletRadius;}static FromTape(expressID,type,tape){let ptr=0;let Directrix=tape[ptr++];let Radius=tape[ptr++];let InnerRadius=tape[ptr++];let StartParam=tape[ptr++];let EndParam=tape[ptr++];let FilletRadius=tape[ptr++];return new IfcSweptDiskSolidPolygonal(expressID,type,Directrix,Radius,InnerRadius,StartParam,EndParam,FilletRadius);}ToTape(){let args=[];args.push(this.Directrix);;args.push(this.Radius);;args.push(this.InnerRadius);;args.push(this.StartParam);;args.push(this.EndParam);;args.push(this.FilletRadius);;return args;}};exports.IfcSweptDiskSolidPolygonal=IfcSweptDiskSolidPolygonal;var IfcSweptSurface=class{constructor(expressID,type,SweptCurve,Position){this.expressID=expressID;this.type=type;this.SweptCurve=SweptCurve;this.Position=Position;}static FromTape(expressID,type,tape){let ptr=0;let SweptCurve=tape[ptr++];let Position=tape[ptr++];return new IfcSweptSurface(expressID,type,SweptCurve,Position);}ToTape(){let args=[];args.push(this.SweptCurve);;args.push(this.Position);;return args;}};exports.IfcSweptSurface=IfcSweptSurface;var IfcSwitchingDevice=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSwitchingDevice(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSwitchingDevice=IfcSwitchingDevice;var IfcSwitchingDeviceType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSwitchingDeviceType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcSwitchingDeviceType=IfcSwitchingDeviceType;var IfcSystem=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];return new IfcSystem(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;return args;}};exports.IfcSystem=IfcSystem;var IfcSystemFurnitureElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSystemFurnitureElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcSystemFurnitureElement=IfcSystemFurnitureElement;var IfcSystemFurnitureElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcSystemFurnitureElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcSystemFurnitureElementType=IfcSystemFurnitureElementType;var IfcTShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,FlangeEdgeRadius,WebEdgeRadius,WebSlope,FlangeSlope){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.Depth=Depth;this.FlangeWidth=FlangeWidth;this.WebThickness=WebThickness;this.FlangeThickness=FlangeThickness;this.FilletRadius=FilletRadius;this.FlangeEdgeRadius=FlangeEdgeRadius;this.WebEdgeRadius=WebEdgeRadius;this.WebSlope=WebSlope;this.FlangeSlope=FlangeSlope;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let Depth=tape[ptr++];let FlangeWidth=tape[ptr++];let WebThickness=tape[ptr++];let FlangeThickness=tape[ptr++];let FilletRadius=tape[ptr++];let FlangeEdgeRadius=tape[ptr++];let WebEdgeRadius=tape[ptr++];let WebSlope=tape[ptr++];let FlangeSlope=tape[ptr++];return new IfcTShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,FlangeEdgeRadius,WebEdgeRadius,WebSlope,FlangeSlope);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.Depth);;args.push(this.FlangeWidth);;args.push(this.WebThickness);;args.push(this.FlangeThickness);;args.push(this.FilletRadius);;args.push(this.FlangeEdgeRadius);;args.push(this.WebEdgeRadius);;args.push(this.WebSlope);;args.push(this.FlangeSlope);;return args;}};exports.IfcTShapeProfileDef=IfcTShapeProfileDef;var IfcTable=class{constructor(expressID,type,Name,Rows,Columns){this.expressID=expressID;this.type=type;this.Name=Name;this.Rows=Rows;this.Columns=Columns;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Rows=tape[ptr++];let Columns=tape[ptr++];return new IfcTable(expressID,type,Name,Rows,Columns);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Rows);;args.push(this.Columns);;return args;}};exports.IfcTable=IfcTable;var IfcTableColumn=class{constructor(expressID,type,Identifier,Name,Description,Unit,ReferencePath){this.expressID=expressID;this.type=type;this.Identifier=Identifier;this.Name=Name;this.Description=Description;this.Unit=Unit;this.ReferencePath=ReferencePath;}static FromTape(expressID,type,tape){let ptr=0;let Identifier=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let Unit=tape[ptr++];let ReferencePath=tape[ptr++];return new IfcTableColumn(expressID,type,Identifier,Name,Description,Unit,ReferencePath);}ToTape(){let args=[];args.push(this.Identifier);;args.push(this.Name);;args.push(this.Description);;args.push(this.Unit);;args.push(this.ReferencePath);;return args;}};exports.IfcTableColumn=IfcTableColumn;var IfcTableRow=class{constructor(expressID,type,RowCells,IsHeading){this.expressID=expressID;this.type=type;this.RowCells=RowCells;this.IsHeading=IsHeading;}static FromTape(expressID,type,tape){let ptr=0;let RowCells=tape[ptr++];let IsHeading=tape[ptr++];return new IfcTableRow(expressID,type,RowCells,IsHeading);}ToTape(){let args=[];args.push(this.RowCells);;args.push(this.IsHeading);;return args;}};exports.IfcTableRow=IfcTableRow;var IfcTank=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTank(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcTank=IfcTank;var IfcTankType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTankType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcTankType=IfcTankType;var IfcTask=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Status,WorkMethod,IsMilestone,Priority,TaskTime,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.LongDescription=LongDescription;this.Status=Status;this.WorkMethod=WorkMethod;this.IsMilestone=IsMilestone;this.Priority=Priority;this.TaskTime=TaskTime;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let Status=tape[ptr++];let WorkMethod=tape[ptr++];let IsMilestone=tape[ptr++];let Priority=tape[ptr++];let TaskTime=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTask(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,LongDescription,Status,WorkMethod,IsMilestone,Priority,TaskTime,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.Status);;args.push(this.WorkMethod);;args.push(this.IsMilestone);;args.push(this.Priority);;args.push(this.TaskTime);;args.push(this.PredefinedType);;return args;}};exports.IfcTask=IfcTask;var IfcTaskTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,DurationType,ScheduleDuration,ScheduleStart,ScheduleFinish,EarlyStart,EarlyFinish,LateStart,LateFinish,FreeFloat,TotalFloat,IsCritical,StatusTime,ActualDuration,ActualStart,ActualFinish,RemainingTime,Completion){this.expressID=expressID;this.type=type;this.Name=Name;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.DurationType=DurationType;this.ScheduleDuration=ScheduleDuration;this.ScheduleStart=ScheduleStart;this.ScheduleFinish=ScheduleFinish;this.EarlyStart=EarlyStart;this.EarlyFinish=EarlyFinish;this.LateStart=LateStart;this.LateFinish=LateFinish;this.FreeFloat=FreeFloat;this.TotalFloat=TotalFloat;this.IsCritical=IsCritical;this.StatusTime=StatusTime;this.ActualDuration=ActualDuration;this.ActualStart=ActualStart;this.ActualFinish=ActualFinish;this.RemainingTime=RemainingTime;this.Completion=Completion;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let DurationType=tape[ptr++];let ScheduleDuration=tape[ptr++];let ScheduleStart=tape[ptr++];let ScheduleFinish=tape[ptr++];let EarlyStart=tape[ptr++];let EarlyFinish=tape[ptr++];let LateStart=tape[ptr++];let LateFinish=tape[ptr++];let FreeFloat=tape[ptr++];let TotalFloat=tape[ptr++];let IsCritical=tape[ptr++];let StatusTime=tape[ptr++];let ActualDuration=tape[ptr++];let ActualStart=tape[ptr++];let ActualFinish=tape[ptr++];let RemainingTime=tape[ptr++];let Completion=tape[ptr++];return new IfcTaskTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,DurationType,ScheduleDuration,ScheduleStart,ScheduleFinish,EarlyStart,EarlyFinish,LateStart,LateFinish,FreeFloat,TotalFloat,IsCritical,StatusTime,ActualDuration,ActualStart,ActualFinish,RemainingTime,Completion);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.DurationType);;args.push(this.ScheduleDuration);;args.push(this.ScheduleStart);;args.push(this.ScheduleFinish);;args.push(this.EarlyStart);;args.push(this.EarlyFinish);;args.push(this.LateStart);;args.push(this.LateFinish);;args.push(this.FreeFloat);;args.push(this.TotalFloat);;args.push(this.IsCritical);;args.push(this.StatusTime);;args.push(this.ActualDuration);;args.push(this.ActualStart);;args.push(this.ActualFinish);;args.push(this.RemainingTime);;args.push(this.Completion);;return args;}};exports.IfcTaskTime=IfcTaskTime;var IfcTaskTimeRecurring=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,DurationType,ScheduleDuration,ScheduleStart,ScheduleFinish,EarlyStart,EarlyFinish,LateStart,LateFinish,FreeFloat,TotalFloat,IsCritical,StatusTime,ActualDuration,ActualStart,ActualFinish,RemainingTime,Completion,Recurrence){this.expressID=expressID;this.type=type;this.Name=Name;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.DurationType=DurationType;this.ScheduleDuration=ScheduleDuration;this.ScheduleStart=ScheduleStart;this.ScheduleFinish=ScheduleFinish;this.EarlyStart=EarlyStart;this.EarlyFinish=EarlyFinish;this.LateStart=LateStart;this.LateFinish=LateFinish;this.FreeFloat=FreeFloat;this.TotalFloat=TotalFloat;this.IsCritical=IsCritical;this.StatusTime=StatusTime;this.ActualDuration=ActualDuration;this.ActualStart=ActualStart;this.ActualFinish=ActualFinish;this.RemainingTime=RemainingTime;this.Completion=Completion;this.Recurrence=Recurrence;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let DurationType=tape[ptr++];let ScheduleDuration=tape[ptr++];let ScheduleStart=tape[ptr++];let ScheduleFinish=tape[ptr++];let EarlyStart=tape[ptr++];let EarlyFinish=tape[ptr++];let LateStart=tape[ptr++];let LateFinish=tape[ptr++];let FreeFloat=tape[ptr++];let TotalFloat=tape[ptr++];let IsCritical=tape[ptr++];let StatusTime=tape[ptr++];let ActualDuration=tape[ptr++];let ActualStart=tape[ptr++];let ActualFinish=tape[ptr++];let RemainingTime=tape[ptr++];let Completion=tape[ptr++];let Recurrence=tape[ptr++];return new IfcTaskTimeRecurring(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,DurationType,ScheduleDuration,ScheduleStart,ScheduleFinish,EarlyStart,EarlyFinish,LateStart,LateFinish,FreeFloat,TotalFloat,IsCritical,StatusTime,ActualDuration,ActualStart,ActualFinish,RemainingTime,Completion,Recurrence);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.DurationType);;args.push(this.ScheduleDuration);;args.push(this.ScheduleStart);;args.push(this.ScheduleFinish);;args.push(this.EarlyStart);;args.push(this.EarlyFinish);;args.push(this.LateStart);;args.push(this.LateFinish);;args.push(this.FreeFloat);;args.push(this.TotalFloat);;args.push(this.IsCritical);;args.push(this.StatusTime);;args.push(this.ActualDuration);;args.push(this.ActualStart);;args.push(this.ActualFinish);;args.push(this.RemainingTime);;args.push(this.Completion);;args.push(this.Recurrence);;return args;}};exports.IfcTaskTimeRecurring=IfcTaskTimeRecurring;var IfcTaskType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType,WorkMethod){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ProcessType=ProcessType;this.PredefinedType=PredefinedType;this.WorkMethod=WorkMethod;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ProcessType=tape[ptr++];let PredefinedType=tape[ptr++];let WorkMethod=tape[ptr++];return new IfcTaskType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType,PredefinedType,WorkMethod);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ProcessType);;args.push(this.PredefinedType);;args.push(this.WorkMethod);;return args;}};exports.IfcTaskType=IfcTaskType;var IfcTelecomAddress=class{constructor(expressID,type,Purpose,Description,UserDefinedPurpose,TelephoneNumbers,FacsimileNumbers,PagerNumber,ElectronicMailAddresses,WWWHomePageURL,MessagingIDs){this.expressID=expressID;this.type=type;this.Purpose=Purpose;this.Description=Description;this.UserDefinedPurpose=UserDefinedPurpose;this.TelephoneNumbers=TelephoneNumbers;this.FacsimileNumbers=FacsimileNumbers;this.PagerNumber=PagerNumber;this.ElectronicMailAddresses=ElectronicMailAddresses;this.WWWHomePageURL=WWWHomePageURL;this.MessagingIDs=MessagingIDs;}static FromTape(expressID,type,tape){let ptr=0;let Purpose=tape[ptr++];let Description=tape[ptr++];let UserDefinedPurpose=tape[ptr++];let TelephoneNumbers=tape[ptr++];let FacsimileNumbers=tape[ptr++];let PagerNumber=tape[ptr++];let ElectronicMailAddresses=tape[ptr++];let WWWHomePageURL=tape[ptr++];let MessagingIDs=tape[ptr++];return new IfcTelecomAddress(expressID,type,Purpose,Description,UserDefinedPurpose,TelephoneNumbers,FacsimileNumbers,PagerNumber,ElectronicMailAddresses,WWWHomePageURL,MessagingIDs);}ToTape(){let args=[];args.push(this.Purpose);;args.push(this.Description);;args.push(this.UserDefinedPurpose);;args.push(this.TelephoneNumbers);;args.push(this.FacsimileNumbers);;args.push(this.PagerNumber);;args.push(this.ElectronicMailAddresses);;args.push(this.WWWHomePageURL);;args.push(this.MessagingIDs);;return args;}};exports.IfcTelecomAddress=IfcTelecomAddress;var IfcTendon=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType,NominalDiameter,CrossSectionArea,TensionForce,PreStress,FrictionCoefficient,AnchorageSlip,MinCurvatureRadius){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.SteelGrade=SteelGrade;this.PredefinedType=PredefinedType;this.NominalDiameter=NominalDiameter;this.CrossSectionArea=CrossSectionArea;this.TensionForce=TensionForce;this.PreStress=PreStress;this.FrictionCoefficient=FrictionCoefficient;this.AnchorageSlip=AnchorageSlip;this.MinCurvatureRadius=MinCurvatureRadius;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let SteelGrade=tape[ptr++];let PredefinedType=tape[ptr++];let NominalDiameter=tape[ptr++];let CrossSectionArea=tape[ptr++];let TensionForce=tape[ptr++];let PreStress=tape[ptr++];let FrictionCoefficient=tape[ptr++];let AnchorageSlip=tape[ptr++];let MinCurvatureRadius=tape[ptr++];return new IfcTendon(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType,NominalDiameter,CrossSectionArea,TensionForce,PreStress,FrictionCoefficient,AnchorageSlip,MinCurvatureRadius);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.SteelGrade);;args.push(this.PredefinedType);;args.push(this.NominalDiameter);;args.push(this.CrossSectionArea);;args.push(this.TensionForce);;args.push(this.PreStress);;args.push(this.FrictionCoefficient);;args.push(this.AnchorageSlip);;args.push(this.MinCurvatureRadius);;return args;}};exports.IfcTendon=IfcTendon;var IfcTendonAnchor=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.SteelGrade=SteelGrade;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let SteelGrade=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTendonAnchor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.SteelGrade);;args.push(this.PredefinedType);;return args;}};exports.IfcTendonAnchor=IfcTendonAnchor;var IfcTendonAnchorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTendonAnchorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcTendonAnchorType=IfcTendonAnchorType;var IfcTendonConduit=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.SteelGrade=SteelGrade;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let SteelGrade=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTendonConduit(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,SteelGrade,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.SteelGrade);;args.push(this.PredefinedType);;return args;}};exports.IfcTendonConduit=IfcTendonConduit;var IfcTendonConduitType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTendonConduitType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcTendonConduitType=IfcTendonConduitType;var IfcTendonType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,CrossSectionArea,SheathDiameter){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;this.NominalDiameter=NominalDiameter;this.CrossSectionArea=CrossSectionArea;this.SheathDiameter=SheathDiameter;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];let NominalDiameter=tape[ptr++];let CrossSectionArea=tape[ptr++];let SheathDiameter=tape[ptr++];return new IfcTendonType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,NominalDiameter,CrossSectionArea,SheathDiameter);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;args.push(this.NominalDiameter);;args.push(this.CrossSectionArea);;args.push(this.SheathDiameter);;return args;}};exports.IfcTendonType=IfcTendonType;var IfcTessellatedFaceSet=class{constructor(expressID,type,Coordinates){this.expressID=expressID;this.type=type;this.Coordinates=Coordinates;}static FromTape(expressID,type,tape){let ptr=0;let Coordinates=tape[ptr++];return new IfcTessellatedFaceSet(expressID,type,Coordinates);}ToTape(){let args=[];args.push(this.Coordinates);;return args;}};exports.IfcTessellatedFaceSet=IfcTessellatedFaceSet;var IfcTessellatedItem=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcTessellatedItem(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcTessellatedItem=IfcTessellatedItem;var IfcTextLiteral=class{constructor(expressID,type,Literal,Placement,Path){this.expressID=expressID;this.type=type;this.Literal=Literal;this.Placement=Placement;this.Path=Path;}static FromTape(expressID,type,tape){let ptr=0;let Literal=tape[ptr++];let Placement=tape[ptr++];let Path=tape[ptr++];return new IfcTextLiteral(expressID,type,Literal,Placement,Path);}ToTape(){let args=[];args.push(this.Literal);;args.push(this.Placement);;args.push(this.Path);;return args;}};exports.IfcTextLiteral=IfcTextLiteral;var IfcTextLiteralWithExtent=class{constructor(expressID,type,Literal,Placement,Path,Extent,BoxAlignment){this.expressID=expressID;this.type=type;this.Literal=Literal;this.Placement=Placement;this.Path=Path;this.Extent=Extent;this.BoxAlignment=BoxAlignment;}static FromTape(expressID,type,tape){let ptr=0;let Literal=tape[ptr++];let Placement=tape[ptr++];let Path=tape[ptr++];let Extent=tape[ptr++];let BoxAlignment=tape[ptr++];return new IfcTextLiteralWithExtent(expressID,type,Literal,Placement,Path,Extent,BoxAlignment);}ToTape(){let args=[];args.push(this.Literal);;args.push(this.Placement);;args.push(this.Path);;args.push(this.Extent);;args.push(this.BoxAlignment);;return args;}};exports.IfcTextLiteralWithExtent=IfcTextLiteralWithExtent;var IfcTextStyle=class{constructor(expressID,type,Name,TextCharacterAppearance,TextStyle,TextFontStyle,ModelOrDraughting){this.expressID=expressID;this.type=type;this.Name=Name;this.TextCharacterAppearance=TextCharacterAppearance;this.TextStyle=TextStyle;this.TextFontStyle=TextFontStyle;this.ModelOrDraughting=ModelOrDraughting;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let TextCharacterAppearance=tape[ptr++];let TextStyle=tape[ptr++];let TextFontStyle=tape[ptr++];let ModelOrDraughting=tape[ptr++];return new IfcTextStyle(expressID,type,Name,TextCharacterAppearance,TextStyle,TextFontStyle,ModelOrDraughting);}ToTape(){let args=[];args.push(this.Name);;args.push(this.TextCharacterAppearance);;args.push(this.TextStyle);;args.push(this.TextFontStyle);;args.push(this.ModelOrDraughting);;return args;}};exports.IfcTextStyle=IfcTextStyle;var IfcTextStyleFontModel=class{constructor(expressID,type,Name,FontFamily,FontStyle,FontVariant,FontWeight,FontSize){this.expressID=expressID;this.type=type;this.Name=Name;this.FontFamily=FontFamily;this.FontStyle=FontStyle;this.FontVariant=FontVariant;this.FontWeight=FontWeight;this.FontSize=FontSize;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let FontFamily=tape[ptr++];let FontStyle=tape[ptr++];let FontVariant=tape[ptr++];let FontWeight=tape[ptr++];let FontSize=tape[ptr++];return new IfcTextStyleFontModel(expressID,type,Name,FontFamily,FontStyle,FontVariant,FontWeight,FontSize);}ToTape(){let args=[];args.push(this.Name);;args.push(this.FontFamily);;args.push(this.FontStyle);;args.push(this.FontVariant);;args.push(this.FontWeight);;args.push(this.FontSize);;return args;}};exports.IfcTextStyleFontModel=IfcTextStyleFontModel;var IfcTextStyleForDefinedFont=class{constructor(expressID,type,Colour,BackgroundColour){this.expressID=expressID;this.type=type;this.Colour=Colour;this.BackgroundColour=BackgroundColour;}static FromTape(expressID,type,tape){let ptr=0;let Colour=tape[ptr++];let BackgroundColour=tape[ptr++];return new IfcTextStyleForDefinedFont(expressID,type,Colour,BackgroundColour);}ToTape(){let args=[];args.push(this.Colour);;args.push(this.BackgroundColour);;return args;}};exports.IfcTextStyleForDefinedFont=IfcTextStyleForDefinedFont;var IfcTextStyleTextModel=class{constructor(expressID,type,TextIndent,TextAlign,TextDecoration,LetterSpacing,WordSpacing,TextTransform,LineHeight){this.expressID=expressID;this.type=type;this.TextIndent=TextIndent;this.TextAlign=TextAlign;this.TextDecoration=TextDecoration;this.LetterSpacing=LetterSpacing;this.WordSpacing=WordSpacing;this.TextTransform=TextTransform;this.LineHeight=LineHeight;}static FromTape(expressID,type,tape){let ptr=0;let TextIndent=tape[ptr++];let TextAlign=tape[ptr++];let TextDecoration=tape[ptr++];let LetterSpacing=tape[ptr++];let WordSpacing=tape[ptr++];let TextTransform=tape[ptr++];let LineHeight=tape[ptr++];return new IfcTextStyleTextModel(expressID,type,TextIndent,TextAlign,TextDecoration,LetterSpacing,WordSpacing,TextTransform,LineHeight);}ToTape(){let args=[];args.push(this.TextIndent);;args.push(this.TextAlign);;args.push(this.TextDecoration);;args.push(this.LetterSpacing);;args.push(this.WordSpacing);;args.push(this.TextTransform);;args.push(this.LineHeight);;return args;}};exports.IfcTextStyleTextModel=IfcTextStyleTextModel;var IfcTextureCoordinate=class{constructor(expressID,type,Maps){this.expressID=expressID;this.type=type;this.Maps=Maps;}static FromTape(expressID,type,tape){let ptr=0;let Maps=tape[ptr++];return new IfcTextureCoordinate(expressID,type,Maps);}ToTape(){let args=[];args.push(this.Maps);;return args;}};exports.IfcTextureCoordinate=IfcTextureCoordinate;var IfcTextureCoordinateGenerator=class{constructor(expressID,type,Maps,Mode,Parameter){this.expressID=expressID;this.type=type;this.Maps=Maps;this.Mode=Mode;this.Parameter=Parameter;}static FromTape(expressID,type,tape){let ptr=0;let Maps=tape[ptr++];let Mode=tape[ptr++];let Parameter=tape[ptr++];return new IfcTextureCoordinateGenerator(expressID,type,Maps,Mode,Parameter);}ToTape(){let args=[];args.push(this.Maps);;args.push(this.Mode);;args.push(this.Parameter);;return args;}};exports.IfcTextureCoordinateGenerator=IfcTextureCoordinateGenerator;var IfcTextureMap=class{constructor(expressID,type,Maps,Vertices,MappedTo){this.expressID=expressID;this.type=type;this.Maps=Maps;this.Vertices=Vertices;this.MappedTo=MappedTo;}static FromTape(expressID,type,tape){let ptr=0;let Maps=tape[ptr++];let Vertices=tape[ptr++];let MappedTo=tape[ptr++];return new IfcTextureMap(expressID,type,Maps,Vertices,MappedTo);}ToTape(){let args=[];args.push(this.Maps);;args.push(this.Vertices);;args.push(this.MappedTo);;return args;}};exports.IfcTextureMap=IfcTextureMap;var IfcTextureVertex=class{constructor(expressID,type,Coordinates){this.expressID=expressID;this.type=type;this.Coordinates=Coordinates;}static FromTape(expressID,type,tape){let ptr=0;let Coordinates=tape[ptr++];return new IfcTextureVertex(expressID,type,Coordinates);}ToTape(){let args=[];args.push(this.Coordinates);;return args;}};exports.IfcTextureVertex=IfcTextureVertex;var IfcTextureVertexList=class{constructor(expressID,type,TexCoordsList){this.expressID=expressID;this.type=type;this.TexCoordsList=TexCoordsList;}static FromTape(expressID,type,tape){let ptr=0;let TexCoordsList=tape[ptr++];return new IfcTextureVertexList(expressID,type,TexCoordsList);}ToTape(){let args=[];args.push(this.TexCoordsList);;return args;}};exports.IfcTextureVertexList=IfcTextureVertexList;var IfcTimePeriod=class{constructor(expressID,type,StartTime,EndTime){this.expressID=expressID;this.type=type;this.StartTime=StartTime;this.EndTime=EndTime;}static FromTape(expressID,type,tape){let ptr=0;let StartTime=tape[ptr++];let EndTime=tape[ptr++];return new IfcTimePeriod(expressID,type,StartTime,EndTime);}ToTape(){let args=[];args.push(this.StartTime);;args.push(this.EndTime);;return args;}};exports.IfcTimePeriod=IfcTimePeriod;var IfcTimeSeries=class{constructor(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit){this.expressID=expressID;this.type=type;this.Name=Name;this.Description=Description;this.StartTime=StartTime;this.EndTime=EndTime;this.TimeSeriesDataType=TimeSeriesDataType;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.Unit=Unit;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let Description=tape[ptr++];let StartTime=tape[ptr++];let EndTime=tape[ptr++];let TimeSeriesDataType=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let Unit=tape[ptr++];return new IfcTimeSeries(expressID,type,Name,Description,StartTime,EndTime,TimeSeriesDataType,DataOrigin,UserDefinedDataOrigin,Unit);}ToTape(){let args=[];args.push(this.Name);;args.push(this.Description);;args.push(this.StartTime);;args.push(this.EndTime);;args.push(this.TimeSeriesDataType);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.Unit);;return args;}};exports.IfcTimeSeries=IfcTimeSeries;var IfcTimeSeriesValue=class{constructor(expressID,type,ListValues){this.expressID=expressID;this.type=type;this.ListValues=ListValues;}static FromTape(expressID,type,tape){let ptr=0;let ListValues=tape[ptr++];return new IfcTimeSeriesValue(expressID,type,ListValues);}ToTape(){let args=[];args.push(this.ListValues);;return args;}};exports.IfcTimeSeriesValue=IfcTimeSeriesValue;var IfcTopologicalRepresentationItem=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcTopologicalRepresentationItem(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcTopologicalRepresentationItem=IfcTopologicalRepresentationItem;var IfcTopologyRepresentation=class{constructor(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items){this.expressID=expressID;this.type=type;this.ContextOfItems=ContextOfItems;this.RepresentationIdentifier=RepresentationIdentifier;this.RepresentationType=RepresentationType;this.Items=Items;}static FromTape(expressID,type,tape){let ptr=0;let ContextOfItems=tape[ptr++];let RepresentationIdentifier=tape[ptr++];let RepresentationType=tape[ptr++];let Items=tape[ptr++];return new IfcTopologyRepresentation(expressID,type,ContextOfItems,RepresentationIdentifier,RepresentationType,Items);}ToTape(){let args=[];args.push(this.ContextOfItems);;args.push(this.RepresentationIdentifier);;args.push(this.RepresentationType);;args.push(this.Items);;return args;}};exports.IfcTopologyRepresentation=IfcTopologyRepresentation;var IfcToroidalSurface=class{constructor(expressID,type,Position,MajorRadius,MinorRadius){this.expressID=expressID;this.type=type;this.Position=Position;this.MajorRadius=MajorRadius;this.MinorRadius=MinorRadius;}static FromTape(expressID,type,tape){let ptr=0;let Position=tape[ptr++];let MajorRadius=tape[ptr++];let MinorRadius=tape[ptr++];return new IfcToroidalSurface(expressID,type,Position,MajorRadius,MinorRadius);}ToTape(){let args=[];args.push(this.Position);;args.push(this.MajorRadius);;args.push(this.MinorRadius);;return args;}};exports.IfcToroidalSurface=IfcToroidalSurface;var IfcTransformer=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTransformer(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcTransformer=IfcTransformer;var IfcTransformerType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTransformerType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcTransformerType=IfcTransformerType;var IfcTransitionCurveSegment2D=class{constructor(expressID,type,StartPoint,StartDirection,SegmentLength,StartRadius,EndRadius,IsStartRadiusCCW,IsEndRadiusCCW,TransitionCurveType){this.expressID=expressID;this.type=type;this.StartPoint=StartPoint;this.StartDirection=StartDirection;this.SegmentLength=SegmentLength;this.StartRadius=StartRadius;this.EndRadius=EndRadius;this.IsStartRadiusCCW=IsStartRadiusCCW;this.IsEndRadiusCCW=IsEndRadiusCCW;this.TransitionCurveType=TransitionCurveType;}static FromTape(expressID,type,tape){let ptr=0;let StartPoint=tape[ptr++];let StartDirection=tape[ptr++];let SegmentLength=tape[ptr++];let StartRadius=tape[ptr++];let EndRadius=tape[ptr++];let IsStartRadiusCCW=tape[ptr++];let IsEndRadiusCCW=tape[ptr++];let TransitionCurveType=tape[ptr++];return new IfcTransitionCurveSegment2D(expressID,type,StartPoint,StartDirection,SegmentLength,StartRadius,EndRadius,IsStartRadiusCCW,IsEndRadiusCCW,TransitionCurveType);}ToTape(){let args=[];args.push(this.StartPoint);;args.push(this.StartDirection);;args.push(this.SegmentLength);;args.push(this.StartRadius);;args.push(this.EndRadius);;args.push(this.IsStartRadiusCCW);;args.push(this.IsEndRadiusCCW);;args.push(this.TransitionCurveType);;return args;}};exports.IfcTransitionCurveSegment2D=IfcTransitionCurveSegment2D;var IfcTransportElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTransportElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcTransportElement=IfcTransportElement;var IfcTransportElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTransportElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcTransportElementType=IfcTransportElementType;var IfcTrapeziumProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,BottomXDim,TopXDim,YDim,TopXOffset){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.BottomXDim=BottomXDim;this.TopXDim=TopXDim;this.YDim=YDim;this.TopXOffset=TopXOffset;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let BottomXDim=tape[ptr++];let TopXDim=tape[ptr++];let YDim=tape[ptr++];let TopXOffset=tape[ptr++];return new IfcTrapeziumProfileDef(expressID,type,ProfileType,ProfileName,Position,BottomXDim,TopXDim,YDim,TopXOffset);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.BottomXDim);;args.push(this.TopXDim);;args.push(this.YDim);;args.push(this.TopXOffset);;return args;}};exports.IfcTrapeziumProfileDef=IfcTrapeziumProfileDef;var IfcTriangulatedFaceSet=class{constructor(expressID,type,Coordinates,Normals,Closed,CoordIndex,PnIndex){this.expressID=expressID;this.type=type;this.Coordinates=Coordinates;this.Normals=Normals;this.Closed=Closed;this.CoordIndex=CoordIndex;this.PnIndex=PnIndex;}static FromTape(expressID,type,tape){let ptr=0;let Coordinates=tape[ptr++];let Normals=tape[ptr++];let Closed=tape[ptr++];let CoordIndex=tape[ptr++];let PnIndex=tape[ptr++];return new IfcTriangulatedFaceSet(expressID,type,Coordinates,Normals,Closed,CoordIndex,PnIndex);}ToTape(){let args=[];args.push(this.Coordinates);;args.push(this.Normals);;args.push(this.Closed);;args.push(this.CoordIndex);;args.push(this.PnIndex);;return args;}};exports.IfcTriangulatedFaceSet=IfcTriangulatedFaceSet;var IfcTriangulatedIrregularNetwork=class{constructor(expressID,type,Coordinates,Normals,Closed,CoordIndex,PnIndex,Flags){this.expressID=expressID;this.type=type;this.Coordinates=Coordinates;this.Normals=Normals;this.Closed=Closed;this.CoordIndex=CoordIndex;this.PnIndex=PnIndex;this.Flags=Flags;}static FromTape(expressID,type,tape){let ptr=0;let Coordinates=tape[ptr++];let Normals=tape[ptr++];let Closed=tape[ptr++];let CoordIndex=tape[ptr++];let PnIndex=tape[ptr++];let Flags=tape[ptr++];return new IfcTriangulatedIrregularNetwork(expressID,type,Coordinates,Normals,Closed,CoordIndex,PnIndex,Flags);}ToTape(){let args=[];args.push(this.Coordinates);;args.push(this.Normals);;args.push(this.Closed);;args.push(this.CoordIndex);;args.push(this.PnIndex);;args.push(this.Flags);;return args;}};exports.IfcTriangulatedIrregularNetwork=IfcTriangulatedIrregularNetwork;var IfcTrimmedCurve=class{constructor(expressID,type,BasisCurve,Trim1,Trim2,SenseAgreement,MasterRepresentation){this.expressID=expressID;this.type=type;this.BasisCurve=BasisCurve;this.Trim1=Trim1;this.Trim2=Trim2;this.SenseAgreement=SenseAgreement;this.MasterRepresentation=MasterRepresentation;}static FromTape(expressID,type,tape){let ptr=0;let BasisCurve=tape[ptr++];let Trim1=tape[ptr++];let Trim2=tape[ptr++];let SenseAgreement=tape[ptr++];let MasterRepresentation=tape[ptr++];return new IfcTrimmedCurve(expressID,type,BasisCurve,Trim1,Trim2,SenseAgreement,MasterRepresentation);}ToTape(){let args=[];args.push(this.BasisCurve);;args.push(this.Trim1);;args.push(this.Trim2);;args.push(this.SenseAgreement);;args.push(this.MasterRepresentation);;return args;}};exports.IfcTrimmedCurve=IfcTrimmedCurve;var IfcTubeBundle=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTubeBundle(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcTubeBundle=IfcTubeBundle;var IfcTubeBundleType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcTubeBundleType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcTubeBundleType=IfcTubeBundleType;var IfcTypeObject=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];return new IfcTypeObject(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;return args;}};exports.IfcTypeObject=IfcTypeObject;var IfcTypeProcess=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ProcessType=ProcessType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ProcessType=tape[ptr++];return new IfcTypeProcess(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ProcessType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ProcessType);;return args;}};exports.IfcTypeProcess=IfcTypeProcess;var IfcTypeProduct=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];return new IfcTypeProduct(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;return args;}};exports.IfcTypeProduct=IfcTypeProduct;var IfcTypeResource=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.Identification=Identification;this.LongDescription=LongDescription;this.ResourceType=ResourceType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let Identification=tape[ptr++];let LongDescription=tape[ptr++];let ResourceType=tape[ptr++];return new IfcTypeResource(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,Identification,LongDescription,ResourceType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.Identification);;args.push(this.LongDescription);;args.push(this.ResourceType);;return args;}};exports.IfcTypeResource=IfcTypeResource;var IfcUShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,EdgeRadius,FlangeSlope){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.Depth=Depth;this.FlangeWidth=FlangeWidth;this.WebThickness=WebThickness;this.FlangeThickness=FlangeThickness;this.FilletRadius=FilletRadius;this.EdgeRadius=EdgeRadius;this.FlangeSlope=FlangeSlope;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let Depth=tape[ptr++];let FlangeWidth=tape[ptr++];let WebThickness=tape[ptr++];let FlangeThickness=tape[ptr++];let FilletRadius=tape[ptr++];let EdgeRadius=tape[ptr++];let FlangeSlope=tape[ptr++];return new IfcUShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,EdgeRadius,FlangeSlope);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.Depth);;args.push(this.FlangeWidth);;args.push(this.WebThickness);;args.push(this.FlangeThickness);;args.push(this.FilletRadius);;args.push(this.EdgeRadius);;args.push(this.FlangeSlope);;return args;}};exports.IfcUShapeProfileDef=IfcUShapeProfileDef;var IfcUnitAssignment=class{constructor(expressID,type,Units){this.expressID=expressID;this.type=type;this.Units=Units;}static FromTape(expressID,type,tape){let ptr=0;let Units=tape[ptr++];return new IfcUnitAssignment(expressID,type,Units);}ToTape(){let args=[];args.push(this.Units);;return args;}};exports.IfcUnitAssignment=IfcUnitAssignment;var IfcUnitaryControlElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcUnitaryControlElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcUnitaryControlElement=IfcUnitaryControlElement;var IfcUnitaryControlElementType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcUnitaryControlElementType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcUnitaryControlElementType=IfcUnitaryControlElementType;var IfcUnitaryEquipment=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcUnitaryEquipment(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcUnitaryEquipment=IfcUnitaryEquipment;var IfcUnitaryEquipmentType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcUnitaryEquipmentType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcUnitaryEquipmentType=IfcUnitaryEquipmentType;var IfcValve=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcValve(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcValve=IfcValve;var IfcValveType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcValveType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcValveType=IfcValveType;var IfcVector=class{constructor(expressID,type,Orientation,Magnitude){this.expressID=expressID;this.type=type;this.Orientation=Orientation;this.Magnitude=Magnitude;}static FromTape(expressID,type,tape){let ptr=0;let Orientation=tape[ptr++];let Magnitude=tape[ptr++];return new IfcVector(expressID,type,Orientation,Magnitude);}ToTape(){let args=[];args.push(this.Orientation);;args.push(this.Magnitude);;return args;}};exports.IfcVector=IfcVector;var IfcVertex=class{constructor(expressID,type){this.expressID=expressID;this.type=type;}static FromTape(expressID,type,tape){let ptr=0;return new IfcVertex(expressID,type);}ToTape(){let args=[];return args;}};exports.IfcVertex=IfcVertex;var IfcVertexLoop=class{constructor(expressID,type,LoopVertex){this.expressID=expressID;this.type=type;this.LoopVertex=LoopVertex;}static FromTape(expressID,type,tape){let ptr=0;let LoopVertex=tape[ptr++];return new IfcVertexLoop(expressID,type,LoopVertex);}ToTape(){let args=[];args.push(this.LoopVertex);;return args;}};exports.IfcVertexLoop=IfcVertexLoop;var IfcVertexPoint=class{constructor(expressID,type,VertexGeometry){this.expressID=expressID;this.type=type;this.VertexGeometry=VertexGeometry;}static FromTape(expressID,type,tape){let ptr=0;let VertexGeometry=tape[ptr++];return new IfcVertexPoint(expressID,type,VertexGeometry);}ToTape(){let args=[];args.push(this.VertexGeometry);;return args;}};exports.IfcVertexPoint=IfcVertexPoint;var IfcVibrationDamper=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcVibrationDamper(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcVibrationDamper=IfcVibrationDamper;var IfcVibrationDamperType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcVibrationDamperType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcVibrationDamperType=IfcVibrationDamperType;var IfcVibrationIsolator=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcVibrationIsolator(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcVibrationIsolator=IfcVibrationIsolator;var IfcVibrationIsolatorType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcVibrationIsolatorType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcVibrationIsolatorType=IfcVibrationIsolatorType;var IfcVirtualElement=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];return new IfcVirtualElement(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;return args;}};exports.IfcVirtualElement=IfcVirtualElement;var IfcVirtualGridIntersection=class{constructor(expressID,type,IntersectingAxes,OffsetDistances){this.expressID=expressID;this.type=type;this.IntersectingAxes=IntersectingAxes;this.OffsetDistances=OffsetDistances;}static FromTape(expressID,type,tape){let ptr=0;let IntersectingAxes=tape[ptr++];let OffsetDistances=tape[ptr++];return new IfcVirtualGridIntersection(expressID,type,IntersectingAxes,OffsetDistances);}ToTape(){let args=[];args.push(this.IntersectingAxes);;args.push(this.OffsetDistances);;return args;}};exports.IfcVirtualGridIntersection=IfcVirtualGridIntersection;var IfcVoidingFeature=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcVoidingFeature(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcVoidingFeature=IfcVoidingFeature;var IfcWall=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWall(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcWall=IfcWall;var IfcWallElementedCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWallElementedCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcWallElementedCase=IfcWallElementedCase;var IfcWallStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWallStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcWallStandardCase=IfcWallStandardCase;var IfcWallType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWallType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcWallType=IfcWallType;var IfcWasteTerminal=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWasteTerminal(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.PredefinedType);;return args;}};exports.IfcWasteTerminal=IfcWasteTerminal;var IfcWasteTerminalType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWasteTerminalType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;return args;}};exports.IfcWasteTerminalType=IfcWasteTerminalType;var IfcWindow=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,PartitioningType,UserDefinedPartitioningType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.OverallHeight=OverallHeight;this.OverallWidth=OverallWidth;this.PredefinedType=PredefinedType;this.PartitioningType=PartitioningType;this.UserDefinedPartitioningType=UserDefinedPartitioningType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let OverallHeight=tape[ptr++];let OverallWidth=tape[ptr++];let PredefinedType=tape[ptr++];let PartitioningType=tape[ptr++];let UserDefinedPartitioningType=tape[ptr++];return new IfcWindow(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,PartitioningType,UserDefinedPartitioningType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.OverallHeight);;args.push(this.OverallWidth);;args.push(this.PredefinedType);;args.push(this.PartitioningType);;args.push(this.UserDefinedPartitioningType);;return args;}};exports.IfcWindow=IfcWindow;var IfcWindowLiningProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,LiningDepth,LiningThickness,TransomThickness,MullionThickness,FirstTransomOffset,SecondTransomOffset,FirstMullionOffset,SecondMullionOffset,ShapeAspectStyle,LiningOffset,LiningToPanelOffsetX,LiningToPanelOffsetY){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.LiningDepth=LiningDepth;this.LiningThickness=LiningThickness;this.TransomThickness=TransomThickness;this.MullionThickness=MullionThickness;this.FirstTransomOffset=FirstTransomOffset;this.SecondTransomOffset=SecondTransomOffset;this.FirstMullionOffset=FirstMullionOffset;this.SecondMullionOffset=SecondMullionOffset;this.ShapeAspectStyle=ShapeAspectStyle;this.LiningOffset=LiningOffset;this.LiningToPanelOffsetX=LiningToPanelOffsetX;this.LiningToPanelOffsetY=LiningToPanelOffsetY;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let LiningDepth=tape[ptr++];let LiningThickness=tape[ptr++];let TransomThickness=tape[ptr++];let MullionThickness=tape[ptr++];let FirstTransomOffset=tape[ptr++];let SecondTransomOffset=tape[ptr++];let FirstMullionOffset=tape[ptr++];let SecondMullionOffset=tape[ptr++];let ShapeAspectStyle=tape[ptr++];let LiningOffset=tape[ptr++];let LiningToPanelOffsetX=tape[ptr++];let LiningToPanelOffsetY=tape[ptr++];return new IfcWindowLiningProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,LiningDepth,LiningThickness,TransomThickness,MullionThickness,FirstTransomOffset,SecondTransomOffset,FirstMullionOffset,SecondMullionOffset,ShapeAspectStyle,LiningOffset,LiningToPanelOffsetX,LiningToPanelOffsetY);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.LiningDepth);;args.push(this.LiningThickness);;args.push(this.TransomThickness);;args.push(this.MullionThickness);;args.push(this.FirstTransomOffset);;args.push(this.SecondTransomOffset);;args.push(this.FirstMullionOffset);;args.push(this.SecondMullionOffset);;args.push(this.ShapeAspectStyle);;args.push(this.LiningOffset);;args.push(this.LiningToPanelOffsetX);;args.push(this.LiningToPanelOffsetY);;return args;}};exports.IfcWindowLiningProperties=IfcWindowLiningProperties;var IfcWindowPanelProperties=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,OperationType,PanelPosition,FrameDepth,FrameThickness,ShapeAspectStyle){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.OperationType=OperationType;this.PanelPosition=PanelPosition;this.FrameDepth=FrameDepth;this.FrameThickness=FrameThickness;this.ShapeAspectStyle=ShapeAspectStyle;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let OperationType=tape[ptr++];let PanelPosition=tape[ptr++];let FrameDepth=tape[ptr++];let FrameThickness=tape[ptr++];let ShapeAspectStyle=tape[ptr++];return new IfcWindowPanelProperties(expressID,type,GlobalId,OwnerHistory,Name,Description,OperationType,PanelPosition,FrameDepth,FrameThickness,ShapeAspectStyle);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.OperationType);;args.push(this.PanelPosition);;args.push(this.FrameDepth);;args.push(this.FrameThickness);;args.push(this.ShapeAspectStyle);;return args;}};exports.IfcWindowPanelProperties=IfcWindowPanelProperties;var IfcWindowStandardCase=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,PartitioningType,UserDefinedPartitioningType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.ObjectPlacement=ObjectPlacement;this.Representation=Representation;this.Tag=Tag;this.OverallHeight=OverallHeight;this.OverallWidth=OverallWidth;this.PredefinedType=PredefinedType;this.PartitioningType=PartitioningType;this.UserDefinedPartitioningType=UserDefinedPartitioningType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let ObjectPlacement=tape[ptr++];let Representation=tape[ptr++];let Tag=tape[ptr++];let OverallHeight=tape[ptr++];let OverallWidth=tape[ptr++];let PredefinedType=tape[ptr++];let PartitioningType=tape[ptr++];let UserDefinedPartitioningType=tape[ptr++];return new IfcWindowStandardCase(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,ObjectPlacement,Representation,Tag,OverallHeight,OverallWidth,PredefinedType,PartitioningType,UserDefinedPartitioningType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.ObjectPlacement);;args.push(this.Representation);;args.push(this.Tag);;args.push(this.OverallHeight);;args.push(this.OverallWidth);;args.push(this.PredefinedType);;args.push(this.PartitioningType);;args.push(this.UserDefinedPartitioningType);;return args;}};exports.IfcWindowStandardCase=IfcWindowStandardCase;var IfcWindowStyle=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ConstructionType,OperationType,ParameterTakesPrecedence,Sizeable){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ConstructionType=ConstructionType;this.OperationType=OperationType;this.ParameterTakesPrecedence=ParameterTakesPrecedence;this.Sizeable=Sizeable;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ConstructionType=tape[ptr++];let OperationType=tape[ptr++];let ParameterTakesPrecedence=tape[ptr++];let Sizeable=tape[ptr++];return new IfcWindowStyle(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ConstructionType,OperationType,ParameterTakesPrecedence,Sizeable);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ConstructionType);;args.push(this.OperationType);;args.push(this.ParameterTakesPrecedence);;args.push(this.Sizeable);;return args;}};exports.IfcWindowStyle=IfcWindowStyle;var IfcWindowType=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,PartitioningType,ParameterTakesPrecedence,UserDefinedPartitioningType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ApplicableOccurrence=ApplicableOccurrence;this.HasPropertySets=HasPropertySets;this.RepresentationMaps=RepresentationMaps;this.Tag=Tag;this.ElementType=ElementType;this.PredefinedType=PredefinedType;this.PartitioningType=PartitioningType;this.ParameterTakesPrecedence=ParameterTakesPrecedence;this.UserDefinedPartitioningType=UserDefinedPartitioningType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ApplicableOccurrence=tape[ptr++];let HasPropertySets=tape[ptr++];let RepresentationMaps=tape[ptr++];let Tag=tape[ptr++];let ElementType=tape[ptr++];let PredefinedType=tape[ptr++];let PartitioningType=tape[ptr++];let ParameterTakesPrecedence=tape[ptr++];let UserDefinedPartitioningType=tape[ptr++];return new IfcWindowType(expressID,type,GlobalId,OwnerHistory,Name,Description,ApplicableOccurrence,HasPropertySets,RepresentationMaps,Tag,ElementType,PredefinedType,PartitioningType,ParameterTakesPrecedence,UserDefinedPartitioningType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ApplicableOccurrence);;args.push(this.HasPropertySets);;args.push(this.RepresentationMaps);;args.push(this.Tag);;args.push(this.ElementType);;args.push(this.PredefinedType);;args.push(this.PartitioningType);;args.push(this.ParameterTakesPrecedence);;args.push(this.UserDefinedPartitioningType);;return args;}};exports.IfcWindowType=IfcWindowType;var IfcWorkCalendar=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,WorkingTimes,ExceptionTimes,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.WorkingTimes=WorkingTimes;this.ExceptionTimes=ExceptionTimes;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let WorkingTimes=tape[ptr++];let ExceptionTimes=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWorkCalendar(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,WorkingTimes,ExceptionTimes,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.WorkingTimes);;args.push(this.ExceptionTimes);;args.push(this.PredefinedType);;return args;}};exports.IfcWorkCalendar=IfcWorkCalendar;var IfcWorkControl=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.CreationDate=CreationDate;this.Creators=Creators;this.Purpose=Purpose;this.Duration=Duration;this.TotalFloat=TotalFloat;this.StartTime=StartTime;this.FinishTime=FinishTime;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let CreationDate=tape[ptr++];let Creators=tape[ptr++];let Purpose=tape[ptr++];let Duration=tape[ptr++];let TotalFloat=tape[ptr++];let StartTime=tape[ptr++];let FinishTime=tape[ptr++];return new IfcWorkControl(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.CreationDate);;args.push(this.Creators);;args.push(this.Purpose);;args.push(this.Duration);;args.push(this.TotalFloat);;args.push(this.StartTime);;args.push(this.FinishTime);;return args;}};exports.IfcWorkControl=IfcWorkControl;var IfcWorkPlan=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.CreationDate=CreationDate;this.Creators=Creators;this.Purpose=Purpose;this.Duration=Duration;this.TotalFloat=TotalFloat;this.StartTime=StartTime;this.FinishTime=FinishTime;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let CreationDate=tape[ptr++];let Creators=tape[ptr++];let Purpose=tape[ptr++];let Duration=tape[ptr++];let TotalFloat=tape[ptr++];let StartTime=tape[ptr++];let FinishTime=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWorkPlan(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.CreationDate);;args.push(this.Creators);;args.push(this.Purpose);;args.push(this.Duration);;args.push(this.TotalFloat);;args.push(this.StartTime);;args.push(this.FinishTime);;args.push(this.PredefinedType);;return args;}};exports.IfcWorkPlan=IfcWorkPlan;var IfcWorkSchedule=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime,PredefinedType){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.Identification=Identification;this.CreationDate=CreationDate;this.Creators=Creators;this.Purpose=Purpose;this.Duration=Duration;this.TotalFloat=TotalFloat;this.StartTime=StartTime;this.FinishTime=FinishTime;this.PredefinedType=PredefinedType;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let Identification=tape[ptr++];let CreationDate=tape[ptr++];let Creators=tape[ptr++];let Purpose=tape[ptr++];let Duration=tape[ptr++];let TotalFloat=tape[ptr++];let StartTime=tape[ptr++];let FinishTime=tape[ptr++];let PredefinedType=tape[ptr++];return new IfcWorkSchedule(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,Identification,CreationDate,Creators,Purpose,Duration,TotalFloat,StartTime,FinishTime,PredefinedType);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.Identification);;args.push(this.CreationDate);;args.push(this.Creators);;args.push(this.Purpose);;args.push(this.Duration);;args.push(this.TotalFloat);;args.push(this.StartTime);;args.push(this.FinishTime);;args.push(this.PredefinedType);;return args;}};exports.IfcWorkSchedule=IfcWorkSchedule;var IfcWorkTime=class{constructor(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,RecurrencePattern,Start,Finish){this.expressID=expressID;this.type=type;this.Name=Name;this.DataOrigin=DataOrigin;this.UserDefinedDataOrigin=UserDefinedDataOrigin;this.RecurrencePattern=RecurrencePattern;this.Start=Start;this.Finish=Finish;}static FromTape(expressID,type,tape){let ptr=0;let Name=tape[ptr++];let DataOrigin=tape[ptr++];let UserDefinedDataOrigin=tape[ptr++];let RecurrencePattern=tape[ptr++];let Start=tape[ptr++];let Finish=tape[ptr++];return new IfcWorkTime(expressID,type,Name,DataOrigin,UserDefinedDataOrigin,RecurrencePattern,Start,Finish);}ToTape(){let args=[];args.push(this.Name);;args.push(this.DataOrigin);;args.push(this.UserDefinedDataOrigin);;args.push(this.RecurrencePattern);;args.push(this.Start);;args.push(this.Finish);;return args;}};exports.IfcWorkTime=IfcWorkTime;var IfcZShapeProfileDef=class{constructor(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,EdgeRadius){this.expressID=expressID;this.type=type;this.ProfileType=ProfileType;this.ProfileName=ProfileName;this.Position=Position;this.Depth=Depth;this.FlangeWidth=FlangeWidth;this.WebThickness=WebThickness;this.FlangeThickness=FlangeThickness;this.FilletRadius=FilletRadius;this.EdgeRadius=EdgeRadius;}static FromTape(expressID,type,tape){let ptr=0;let ProfileType=tape[ptr++];let ProfileName=tape[ptr++];let Position=tape[ptr++];let Depth=tape[ptr++];let FlangeWidth=tape[ptr++];let WebThickness=tape[ptr++];let FlangeThickness=tape[ptr++];let FilletRadius=tape[ptr++];let EdgeRadius=tape[ptr++];return new IfcZShapeProfileDef(expressID,type,ProfileType,ProfileName,Position,Depth,FlangeWidth,WebThickness,FlangeThickness,FilletRadius,EdgeRadius);}ToTape(){let args=[];args.push(this.ProfileType);;args.push(this.ProfileName);;args.push(this.Position);;args.push(this.Depth);;args.push(this.FlangeWidth);;args.push(this.WebThickness);;args.push(this.FlangeThickness);;args.push(this.FilletRadius);;args.push(this.EdgeRadius);;return args;}};exports.IfcZShapeProfileDef=IfcZShapeProfileDef;var IfcZone=class{constructor(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName){this.expressID=expressID;this.type=type;this.GlobalId=GlobalId;this.OwnerHistory=OwnerHistory;this.Name=Name;this.Description=Description;this.ObjectType=ObjectType;this.LongName=LongName;}static FromTape(expressID,type,tape){let ptr=0;let GlobalId=tape[ptr++];let OwnerHistory=tape[ptr++];let Name=tape[ptr++];let Description=tape[ptr++];let ObjectType=tape[ptr++];let LongName=tape[ptr++];return new IfcZone(expressID,type,GlobalId,OwnerHistory,Name,Description,ObjectType,LongName);}ToTape(){let args=[];args.push(this.GlobalId);;args.push(this.OwnerHistory);;args.push(this.Name);;args.push(this.Description);;args.push(this.ObjectType);;args.push(this.LongName);;return args;}};// dist/web-ifc-api.ts
exports.IfcZone=IfcZone;var WebIFCWasm=require_web_ifc();var UNKNOWN=0;exports.UNKNOWN=UNKNOWN;var STRING=1;exports.STRING=STRING;var LABEL=2;exports.LABEL=LABEL;var ENUM=3;exports.ENUM=ENUM;var REAL=4;exports.REAL=REAL;var REF=5;exports.REF=REF;var EMPTY=6;exports.EMPTY=EMPTY;var SET_BEGIN=7;exports.SET_BEGIN=SET_BEGIN;var SET_END=8;exports.SET_END=SET_END;var LINE_END=9;exports.LINE_END=LINE_END;function ms(){return new Date().getTime();}var IfcAPI=class{constructor(){this.wasmModule=void 0;this.fs=void 0;}Init(){return __async(this,null,function*(){if(WebIFCWasm){this.wasmModule=yield WebIFCWasm({noInitialRun:true});this.fs=this.wasmModule.FS;}else{console.error(`Could not find wasm module at './web-ifc' from web-ifc-api.ts`);}});}OpenModel(data,settings){this.wasmModule["FS_createDataFile"]("/","filename",data,true,true,true);let s=__spreadValues({COORDINATE_TO_ORIGIN:false,USE_FAST_BOOLS:false,CIRCLE_SEGMENTS_LOW:5,CIRCLE_SEGMENTS_MEDIUM:8,CIRCLE_SEGMENTS_HIGH:12},settings);let result=this.wasmModule.OpenModel(s);this.wasmModule["FS_unlink"]("/filename");return result;}CreateModel(settings){let s=__spreadValues({COORDINATE_TO_ORIGIN:false,USE_FAST_BOOLS:false,CIRCLE_SEGMENTS_LOW:5,CIRCLE_SEGMENTS_MEDIUM:8,CIRCLE_SEGMENTS_HIGH:12},settings);let result=this.wasmModule.CreateModel(s);return result;}ExportFileAsIFC(modelID){this.wasmModule.ExportFileAsIFC(modelID);let result=this.fs.readFile("/export.ifc");this.wasmModule["FS_unlink"]("/export.ifc");return result;}GetGeometry(modelID,geometryExpressID){return this.wasmModule.GetGeometry(modelID,geometryExpressID);}GetLine(modelID,expressID,flatten=false){let rawLineData=this.GetRawLineData(modelID,expressID);let lineData=FromRawLineData[rawLineData.type](rawLineData);if(flatten){this.FlattenLine(modelID,lineData);}return lineData;}WriteLine(modelID,lineObject){Object.keys(lineObject).forEach(propertyName=>{let property=lineObject[propertyName];if(property&&property.expressID!==void 0){this.WriteLine(modelID,property);lineObject[propertyName]={type:5,value:property.expressID};}else if(Array.isArray(property)&&property.length>0){for(let i=0;i<property.length;i++){if(property[i].expressID!==void 0){this.WriteLine(modelID,property[i]);lineObject[propertyName][i]={type:5,value:property[i].expressID};}}}});let rawLineData={ID:lineObject.expressID,type:lineObject.type,arguments:lineObject.ToTape()};this.WriteRawLineData(modelID,rawLineData);}FlattenLine(modelID,line){Object.keys(line).forEach(propertyName=>{let property=line[propertyName];if(property&&property.type===5){line[propertyName]=this.GetLine(modelID,property.value,true);}else if(Array.isArray(property)&&property.length>0&&property[0].type===5){for(let i=0;i<property.length;i++){line[propertyName][i]=this.GetLine(modelID,property[i].value,true);}}});}GetRawLineData(modelID,expressID){return this.wasmModule.GetLine(modelID,expressID);}WriteRawLineData(modelID,data){return this.wasmModule.WriteLine(modelID,data.ID,data.type,data.arguments);}GetLineIDsWithType(modelID,type){return this.wasmModule.GetLineIDsWithType(modelID,type);}GetAllLines(modelID){return this.wasmModule.GetAllLines(modelID);}SetGeometryTransformation(modelID,transformationMatrix){if(transformationMatrix.length!=16){console.log(`Bad transformation matrix size: ${transformationMatrix.length}`);return;}this.wasmModule.SetGeometryTransformation(modelID,transformationMatrix);}GetVertexArray(ptr,size){return this.getSubArray(this.wasmModule.HEAPF32,ptr,size);}GetIndexArray(ptr,size){return this.getSubArray(this.wasmModule.HEAPU32,ptr,size);}getSubArray(heap,startPtr,sizeBytes){return heap.subarray(startPtr/4,startPtr/4+sizeBytes).slice(0);}CloseModel(modelID){this.wasmModule.CloseModel(modelID);}StreamAllMeshes(modelID,meshCallback){this.wasmModule.StreamAllMeshes(modelID,meshCallback);}IsModelOpen(modelID){return this.wasmModule.IsModelOpen(modelID);}LoadAllGeometry(modelID){return this.wasmModule.LoadAllGeometry(modelID);}GetFlatMesh(modelID,expressID){return this.wasmModule.GetFlatMesh(modelID,expressID);}SetWasmPath(path){WasmPath=path;}};exports.IfcAPI=IfcAPI;var WasmPath="";

}).call(this)}).call(this,require('_process'),require("buffer").Buffer,"/ifc/web-ifc-api.js",arguments[3],arguments[4],arguments[5],arguments[6],"/ifc")
},{"_process":4,"buffer":2}],9:[function(require,module,exports){
"use strict";

var THREE = _interopRequireWildcard(require("three"));

var _OrbitControls = require("./OrbitControls.js");

var _IFCLoader = require("./IFCLoader.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let scene, camera, renderer;
init();

function init() {
    const container = document.getElementById(Configuration.tab.replace("#", ""));

  //Scene
  scene = new THREE.Scene();
  scene.background = new THREE.Color(0x8cc7de); //Camera

  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.z = -70;
  camera.position.y = 25;
  camera.position.x = 90; //Initial cube

  const geometry = new THREE.BoxGeometry();
  const material = new THREE.MeshPhongMaterial({
    color: 0xffffff
  });
  const cube = new THREE.Mesh(geometry, material);
  scene.add(cube); //Lights

  const directionalLight1 = new THREE.DirectionalLight(0xffeeff, 0.8);
  directionalLight1.position.set(1, 1, 1);
  scene.add(directionalLight1);
  const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.8);
  directionalLight2.position.set(-1, 0.5, -1);
  scene.add(directionalLight2);
  const ambientLight = new THREE.AmbientLight(0xffffee, 0.25);
  scene.add(ambientLight); //Setup IFC Loader

  const ifcLoader = new _IFCLoader.IFCLoader();
  ifcLoader.setPath(referenceUrl);
  ifcLoader.ifcManager.setWasmPath('ifc/');
  ifcLoader.load('', function (model) {
    scene.add(model.mesh);
    render();
  });
  const highlightMaterial = new THREE.MeshPhongMaterial({
    color: 0xff00ff,
    depthTest: false,
    transparent: true,
    opacity: 0.3
  });

  function selectObject(event) {
    if (event.button != 0) return;
    const mouse = new THREE.Vector2();
    mouse.x = event.clientX / window.innerWidth * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    const raycaster = new THREE.Raycaster();
    raycaster.setFromCamera(mouse, camera);
    const intersected = raycaster.intersectObjects(scene.children, false);

    if (intersected.length) {
      const found = intersected[0];
      const faceIndex = found.faceIndex;
      const geometry = found.object.geometry;
      const id = ifcLoader.ifcManager.getExpressId(geometry, faceIndex);
      const modelID = found.object.modelID;
      ifcLoader.ifcManager.createSubset({
        modelID,
        ids: [id],
        scene,
        removePrevious: true,
        material: highlightMaterial
      });
      const props = ifcLoader.ifcManager.getItemProperties(modelID, id, true);
      console.log(props);
      renderer.render(scene, camera);
    }
  }

  window.onpointerdown = selectObject; //Renderer

  renderer = new THREE.WebGLRenderer({
    antialias: true
  });
  //renderer.setSize(window.innerWidth, window.innerHeight);

     renderer.setSize(640, 480);
  renderer.setPixelRatio(window.devicePixelRatio);
  container.appendChild(renderer.domElement);
  //document.body.appendChild(renderer.domElement); //Controls

  const controls = new _OrbitControls.OrbitControls(camera, renderer.domElement);
  controls.addEventListener('change', render);
  window.addEventListener('resize', onWindowResize);
  render();
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
  render();
}

function render() {
  renderer.render(scene, camera);
}

},{"./IFCLoader.js":6,"./OrbitControls.js":7,"three":10}],10:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.AxesHelper=exports.AudioLoader=exports.AudioListener=exports.AudioContext=exports.AudioAnalyser=exports.Audio=exports.ArrowHelper=exports.ArrayCamera=exports.ArcCurve=exports.AnimationUtils=exports.AnimationObjectGroup=exports.AnimationMixer=exports.AnimationLoader=exports.AnimationClip=exports.AmbientLightProbe=exports.AmbientLight=exports.AlwaysStencilFunc=exports.AlwaysDepth=exports.AlphaFormat=exports.AdditiveBlending=exports.AdditiveAnimationBlendMode=exports.AddOperation=exports.AddEquation=exports.ACESFilmicToneMapping=void 0;exports.AxisHelper=AxisHelper;exports.BasicShadowMap=exports.BasicDepthPacking=exports.BackSide=void 0;exports.BinaryTextureLoader=BinaryTextureLoader;exports.BooleanKeyframeTrack=exports.Bone=void 0;exports.BoundingBoxHelper=BoundingBoxHelper;exports.CameraHelper=exports.Camera=exports.Cache=exports.ByteType=exports.BufferGeometryLoader=exports.BufferGeometry=exports.BufferAttribute=exports.BoxHelper=exports.BoxGeometry=exports.BoxBufferGeometry=exports.Box3Helper=exports.Box3=exports.Box2=void 0;exports.CanvasRenderer=CanvasRenderer;exports.DataTexture=exports.DataArrayTexture=exports.Data3DTexture=exports.Cylindrical=exports.CylinderGeometry=exports.CylinderBufferGeometry=exports.CustomToneMapping=exports.CustomBlending=exports.CurvePath=exports.Curve=exports.CullFaceNone=exports.CullFaceFrontBack=exports.CullFaceFront=exports.CullFaceBack=exports.CubicInterpolant=exports.CubicBezierCurve3=exports.CubicBezierCurve=exports.CubeUVRefractionMapping=exports.CubeUVReflectionMapping=exports.CubeTextureLoader=exports.CubeTexture=exports.CubeRefractionMapping=exports.CubeReflectionMapping=exports.CubeCamera=exports.ConeGeometry=exports.ConeBufferGeometry=exports.CompressedTextureLoader=exports.CompressedTexture=exports.ColorKeyframeTrack=exports.Color=exports.Clock=exports.ClampToEdgeWrapping=exports.CircleGeometry=exports.CircleBufferGeometry=exports.CineonToneMapping=exports.CatmullRomCurve3=exports.CanvasTexture=void 0;exports.DataTexture2DArray=DataTexture2DArray;exports.DataTexture3D=DataTexture3D;exports.DstAlphaFactor=exports.DoubleSide=exports.DodecahedronGeometry=exports.DodecahedronBufferGeometry=exports.DiscreteInterpolant=exports.DirectionalLightHelper=exports.DirectionalLight=exports.DepthTexture=exports.DepthStencilFormat=exports.DepthFormat=exports.DefaultLoadingManager=exports.DecrementWrapStencilOp=exports.DecrementStencilOp=exports.DataUtils=exports.DataTextureLoader=void 0;exports.DstColorFactor=exports.DstAlphaFactor=exports.DoubleSide=exports.DodecahedronGeometry=exports.DodecahedronBufferGeometry=exports.DiscreteInterpolant=exports.DirectionalLightHelper=exports.DirectionalLight=exports.DepthTexture=exports.DepthStencilFormat=exports.DepthFormat=exports.DefaultLoadingManager=exports.DecrementWrapStencilOp=exports.DecrementStencilOp=exports.DataUtils=exports.DataTextureLoader=void 0;exports.DynamicBufferAttribute=DynamicBufferAttribute;exports.EdgesGeometry=exports.DynamicReadUsage=exports.DynamicDrawUsage=exports.DynamicCopyUsage=void 0;exports.EdgesHelper=EdgesHelper;exports.Float16BufferAttribute=exports.FlatShading=exports.FileLoader=exports.FaceColors=exports.ExtrudeGeometry=exports.ExtrudeBufferGeometry=exports.EventDispatcher=exports.Euler=exports.EquirectangularRefractionMapping=exports.EquirectangularReflectionMapping=exports.EqualStencilFunc=exports.EqualDepth=exports.EllipseCurve=void 0;exports.Float32Attribute=Float32Attribute;exports.Float32BufferAttribute=void 0;exports.Float64Attribute=Float64Attribute;exports.FogExp2=exports.Fog=exports.FloatType=exports.Float64BufferAttribute=void 0;exports.Font=Font;exports.FontLoader=FontLoader;exports.ImageUtils=exports.ImageLoader=exports.ImageBitmapLoader=exports.IcosahedronGeometry=exports.IcosahedronBufferGeometry=exports.HemisphereLightProbe=exports.HemisphereLightHelper=exports.HemisphereLight=exports.HalfFloatType=exports.Group=exports.GridHelper=exports.GreaterStencilFunc=exports.GreaterEqualStencilFunc=exports.GreaterEqualDepth=exports.GreaterDepth=exports.GLSL3=exports.GLSL1=exports.GLBufferAttribute=exports.Frustum=exports.FrontSide=exports.FramebufferTexture=void 0;exports.ImmediateRenderObject=ImmediateRenderObject;exports.InstancedMesh=exports.InstancedInterleavedBuffer=exports.InstancedBufferGeometry=exports.InstancedBufferAttribute=exports.IncrementWrapStencilOp=exports.IncrementStencilOp=void 0;exports.Int16Attribute=Int16Attribute;exports.Int16BufferAttribute=void 0;exports.Int32Attribute=Int32Attribute;exports.Int32BufferAttribute=void 0;exports.Int8Attribute=Int8Attribute;exports.InvertStencilOp=exports.InterpolateSmooth=exports.InterpolateLinear=exports.InterpolateDiscrete=exports.Interpolant=exports.InterleavedBufferAttribute=exports.InterleavedBuffer=exports.IntType=exports.Int8BufferAttribute=void 0;exports.JSONLoader=JSONLoader;exports.Layers=exports.LatheGeometry=exports.LatheBufferGeometry=exports.LOD=exports.KeyframeTrack=exports.KeepStencilOp=void 0;exports.LensFlare=LensFlare;exports.LinearMipMapNearestFilter=exports.LinearMipMapLinearFilter=exports.LinearInterpolant=exports.LinearFilter=exports.LinearEncoding=exports.LineStrip=exports.LineSegments=exports.LinePieces=exports.LineLoop=exports.LineDashedMaterial=exports.LineCurve3=exports.LineCurve=exports.LineBasicMaterial=exports.Line3=exports.Line=exports.LightProbe=exports.Light=exports.LessStencilFunc=exports.LessEqualStencilFunc=exports.LessEqualDepth=exports.LessDepth=void 0;exports.MeshDistanceMaterial=exports.MeshDepthMaterial=exports.MeshBasicMaterial=exports.Mesh=exports.MaxEquation=exports.Matrix4=exports.Matrix3=exports.MathUtils=exports.Math=exports.MaterialLoader=exports.Material=exports.MOUSE=exports.LuminanceFormat=exports.LuminanceAlphaFormat=exports.LoopRepeat=exports.LoopPingPong=exports.LoopOnce=exports.LoadingManager=exports.LoaderUtils=exports.Loader=exports.LinearToneMapping=exports.LinearMipmapNearestFilter=exports.LinearMipmapLinearFilter=exports.LinearMipMapNearestFilter=exports.LinearMipMapLinearFilter=exports.LinearInterpolant=exports.LinearFilter=exports.LinearEncoding=exports.LineStrip=exports.LineSegments=exports.LinePieces=exports.LineLoop=exports.LineDashedMaterial=exports.LineCurve3=exports.LineCurve=exports.LineBasicMaterial=exports.Line3=exports.Line=exports.LightProbe=exports.Light=exports.LessStencilFunc=exports.LessEqualStencilFunc=exports.LessEqualDepth=exports.LessDepth=void 0;exports.MeshFaceMaterial=MeshFaceMaterial;exports.MixOperation=exports.MirroredRepeatWrapping=exports.MinEquation=exports.MeshToonMaterial=exports.MeshStandardMaterial=exports.MeshPhysicalMaterial=exports.MeshPhongMaterial=exports.MeshNormalMaterial=exports.MeshMatcapMaterial=exports.MeshLambertMaterial=void 0;exports.MultiMaterial=MultiMaterial;exports.PMREMGenerator=exports.PCFSoftShadowMap=exports.PCFShadowMap=exports.OrthographicCamera=exports.OneMinusSrcColorFactor=exports.OneMinusSrcAlphaFactor=exports.OneMinusDstColorFactor=exports.OneMinusDstAlphaFactor=exports.OneFactor=exports.OctahedronGeometry=exports.OctahedronBufferGeometry=exports.ObjectSpaceNormalMap=exports.ObjectLoader=exports.Object3D=exports.NumberKeyframeTrack=exports.NotEqualStencilFunc=exports.NotEqualDepth=exports.NormalBlending=exports.NormalAnimationBlendMode=exports.NoToneMapping=exports.NoColors=exports.NoBlending=exports.NeverStencilFunc=exports.NeverDepth=exports.NearestMipmapNearestFilter=exports.NearestMipmapLinearFilter=exports.NearestMipMapNearestFilter=exports.NearestMipMapLinearFilter=exports.NearestFilter=exports.MultiplyOperation=exports.MultiplyBlending=void 0;exports.ParametricGeometry=ParametricGeometry;exports.Particle=Particle;exports.ParticleBasicMaterial=ParticleBasicMaterial;exports.ParticleSystem=ParticleSystem;exports.ParticleSystemMaterial=ParticleSystemMaterial;exports.PlaneHelper=exports.PlaneGeometry=exports.PlaneBufferGeometry=exports.Plane=exports.PerspectiveCamera=exports.Path=void 0;exports.PointCloud=PointCloud;exports.PointCloudMaterial=PointCloudMaterial;exports.RGBA_ASTC_10x5_Format=exports.RGBA_ASTC_10x10_Format=exports.RGBAIntegerFormat=exports.RGBAFormat=exports.RGBADepthPacking=exports.REVISION=exports.QuaternionLinearInterpolant=exports.QuaternionKeyframeTrack=exports.Quaternion=exports.QuadraticBezierCurve3=exports.QuadraticBezierCurve=exports.PropertyMixer=exports.PropertyBinding=exports.PositionalAudio=exports.PolyhedronGeometry=exports.PolyhedronBufferGeometry=exports.PolarGridHelper=exports.PointsMaterial=exports.Points=exports.PointLightHelper=exports.PointLight=void 0;exports.TetrahedronGeometry=exports.TetrahedronBufferGeometry=exports.TangentSpaceNormalMap=exports.TOUCH=exports.SubtractiveBlending=exports.SubtractEquation=exports.StringKeyframeTrack=exports.StreamReadUsage=exports.StreamDrawUsage=exports.StreamCopyUsage=exports.StereoCamera=exports.StaticReadUsage=exports.StaticDrawUsage=exports.StaticCopyUsage=exports.SrcColorFactor=exports.SrcAlphaSaturateFactor=exports.SrcAlphaFactor=exports.SpriteMaterial=exports.Sprite=exports.SpotLightHelper=exports.SpotLight=exports.SplineCurve=exports.SphericalHarmonics3=exports.Spherical=exports.SphereGeometry=exports.SphereBufferGeometry=exports.Sphere=exports.SmoothShading=exports.SkinnedMesh=exports.SkeletonHelper=exports.Skeleton=exports.ShortType=exports.ShapeUtils=exports.ShapePath=exports.ShapeGeometry=exports.ShapeBufferGeometry=exports.Shape=exports.ShadowMaterial=exports.ShaderMaterial=exports.ShaderLib=exports.ShaderChunk=exports.SceneUtils=exports.Scene=exports.RingGeometry=exports.RingBufferGeometry=exports.ReverseSubtractEquation=exports.ReplaceStencilOp=exports.RepeatWrapping=exports.ReinhardToneMapping=exports.RedIntegerFormat=exports.RedFormat=exports.RectAreaLight=exports.Raycaster=exports.Ray=exports.RawShaderMaterial=exports.RGIntegerFormat=exports.RGFormat=exports.RGB_S3TC_DXT1_Format=exports.RGB_PVRTC_4BPPV1_Format=exports.RGB_PVRTC_2BPPV1_Format=exports.RGB_ETC2_Format=exports.RGB_ETC1_Format=exports.RGBFormat=exports.RGBA_S3TC_DXT5_Format=exports.RGBA_S3TC_DXT3_Format=exports.RGBA_S3TC_DXT1_Format=exports.RGBA_PVRTC_4BPPV1_Format=exports.RGBA_PVRTC_2BPPV1_Format=exports.RGBA_ETC2_EAC_Format=exports.RGBA_BPTC_Format=exports.RGBA_ASTC_8x8_Format=exports.RGBA_ASTC_8x6_Format=exports.RGBA_ASTC_8x5_Format=exports.RGBA_ASTC_6x6_Format=exports.RGBA_ASTC_6x5_Format=exports.RGBA_ASTC_5x5_Format=exports.RGBA_ASTC_5x4_Format=exports.RGBA_ASTC_4x4_Format=exports.RGBA_ASTC_12x12_Format=exports.RGBA_ASTC_12x10_Format=exports.RGBA_ASTC_10x8_Format=exports.RGBA_ASTC_10x6_Format=exports.RGBA_ASTC_10x5_Format=exports.RGBA_ASTC_10x10_Format=exports.RGBAIntegerFormat=exports.RGBAFormat=exports.RGBADepthPacking=exports.REVISION=exports.QuaternionLinearInterpolant=exports.QuaternionKeyframeTrack=exports.Quaternion=exports.QuadraticBezierCurve3=exports.QuadraticBezierCurve=exports.PropertyMixer=exports.PropertyBinding=exports.PositionalAudio=exports.PolyhedronGeometry=exports.PolyhedronBufferGeometry=exports.PolarGridHelper=exports.PointsMaterial=exports.Points=exports.PointLightHelper=exports.PointLight=void 0;exports.TextGeometry=TextGeometry;exports.UVMapping=exports.TubeGeometry=exports.TubeBufferGeometry=exports.TrianglesDrawMode=exports.TriangleStripDrawMode=exports.TriangleFanDrawMode=exports.Triangle=exports.TorusKnotGeometry=exports.TorusKnotBufferGeometry=exports.TorusGeometry=exports.TorusBufferGeometry=exports.TextureLoader=exports.Texture=void 0;exports.Uint16Attribute=Uint16Attribute;exports.Uint16BufferAttribute=void 0;exports.Uint32Attribute=Uint32Attribute;exports.Uint32BufferAttribute=void 0;exports.Uint32BufferAttribute=void 0;exports.Uint8Attribute=Uint8Attribute;exports.Uint8BufferAttribute=void 0;exports.Uint8ClampedAttribute=Uint8ClampedAttribute;exports.VectorKeyframeTrack=exports.Vector4=exports.Vector3=exports.Vector2=exports.VSMShadowMap=exports.UnsignedShortType=exports.UnsignedShort5551Type=exports.UnsignedShort4444Type=exports.UnsignedIntType=exports.UnsignedInt248Type=exports.UnsignedByteType=exports.UniformsUtils=exports.UniformsLib=exports.Uniform=exports.Uint8ClampedBufferAttribute=void 0;exports.Vertex=Vertex;exports.WebGLMultipleRenderTargets=exports.WebGLCubeRenderTarget=exports.WebGLArrayRenderTarget=exports.WebGL3DRenderTarget=exports.WebGL1Renderer=exports.VideoTexture=exports.VertexColors=void 0;exports.WebGLMultisampleRenderTarget=WebGLMultisampleRenderTarget;exports.WebGLRenderTarget=void 0;exports.WebGLRenderTargetCube=WebGLRenderTargetCube;exports.WebGLRenderer=WebGLRenderer;exports.WebGLUtils=WebGLUtils;exports.WireframeGeometry=void 0;exports.WireframeHelper=WireframeHelper;exports.WrapAroundEnding=void 0;exports.XHRLoader=XHRLoader;exports.sRGBEncoding=exports._SRGBAFormat=exports.ZeroStencilOp=exports.ZeroSlopeEnding=exports.ZeroFactor=exports.ZeroCurvatureEnding=void 0;/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const REVISION='138';exports.REVISION=REVISION;const MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};exports.MOUSE=MOUSE;const TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};exports.TOUCH=TOUCH;const CullFaceNone=0;exports.CullFaceNone=CullFaceNone;const CullFaceBack=1;exports.CullFaceBack=CullFaceBack;const CullFaceFront=2;exports.CullFaceFront=CullFaceFront;const CullFaceFrontBack=3;exports.CullFaceFrontBack=CullFaceFrontBack;const BasicShadowMap=0;exports.BasicShadowMap=BasicShadowMap;const PCFShadowMap=1;exports.PCFShadowMap=PCFShadowMap;const PCFSoftShadowMap=2;exports.PCFSoftShadowMap=PCFSoftShadowMap;const VSMShadowMap=3;exports.VSMShadowMap=VSMShadowMap;const FrontSide=0;exports.FrontSide=FrontSide;const BackSide=1;exports.BackSide=BackSide;const DoubleSide=2;exports.DoubleSide=DoubleSide;const FlatShading=1;exports.FlatShading=FlatShading;const SmoothShading=2;exports.SmoothShading=SmoothShading;const NoBlending=0;exports.NoBlending=NoBlending;const NormalBlending=1;exports.NormalBlending=NormalBlending;const AdditiveBlending=2;exports.AdditiveBlending=AdditiveBlending;const SubtractiveBlending=3;exports.SubtractiveBlending=SubtractiveBlending;const MultiplyBlending=4;exports.MultiplyBlending=MultiplyBlending;const CustomBlending=5;exports.CustomBlending=CustomBlending;const AddEquation=100;exports.AddEquation=AddEquation;const SubtractEquation=101;exports.SubtractEquation=SubtractEquation;const ReverseSubtractEquation=102;exports.ReverseSubtractEquation=ReverseSubtractEquation;const MinEquation=103;exports.MinEquation=MinEquation;const MaxEquation=104;exports.MaxEquation=MaxEquation;const ZeroFactor=200;exports.ZeroFactor=ZeroFactor;const OneFactor=201;exports.OneFactor=OneFactor;const SrcColorFactor=202;exports.SrcColorFactor=SrcColorFactor;const OneMinusSrcColorFactor=203;exports.OneMinusSrcColorFactor=OneMinusSrcColorFactor;const SrcAlphaFactor=204;exports.SrcAlphaFactor=SrcAlphaFactor;const OneMinusSrcAlphaFactor=205;exports.OneMinusSrcAlphaFactor=OneMinusSrcAlphaFactor;const DstAlphaFactor=206;exports.DstAlphaFactor=DstAlphaFactor;const OneMinusDstAlphaFactor=207;exports.OneMinusDstAlphaFactor=OneMinusDstAlphaFactor;const DstColorFactor=208;exports.DstColorFactor=DstColorFactor;const OneMinusDstColorFactor=209;exports.OneMinusDstColorFactor=OneMinusDstColorFactor;const SrcAlphaSaturateFactor=210;exports.SrcAlphaSaturateFactor=SrcAlphaSaturateFactor;const NeverDepth=0;exports.NeverDepth=NeverDepth;const AlwaysDepth=1;exports.AlwaysDepth=AlwaysDepth;const LessDepth=2;exports.LessDepth=LessDepth;const LessEqualDepth=3;exports.LessEqualDepth=LessEqualDepth;const EqualDepth=4;exports.EqualDepth=EqualDepth;const GreaterEqualDepth=5;exports.GreaterEqualDepth=GreaterEqualDepth;const GreaterDepth=6;exports.GreaterDepth=GreaterDepth;const NotEqualDepth=7;exports.NotEqualDepth=NotEqualDepth;const MultiplyOperation=0;exports.MultiplyOperation=MultiplyOperation;const MixOperation=1;exports.MixOperation=MixOperation;const AddOperation=2;exports.AddOperation=AddOperation;const NoToneMapping=0;exports.NoToneMapping=NoToneMapping;const LinearToneMapping=1;exports.LinearToneMapping=LinearToneMapping;const ReinhardToneMapping=2;exports.ReinhardToneMapping=ReinhardToneMapping;const CineonToneMapping=3;exports.CineonToneMapping=CineonToneMapping;const ACESFilmicToneMapping=4;exports.ACESFilmicToneMapping=ACESFilmicToneMapping;const CustomToneMapping=5;exports.CustomToneMapping=CustomToneMapping;const UVMapping=300;exports.UVMapping=UVMapping;const CubeReflectionMapping=301;exports.CubeReflectionMapping=CubeReflectionMapping;const CubeRefractionMapping=302;exports.CubeRefractionMapping=CubeRefractionMapping;const EquirectangularReflectionMapping=303;exports.EquirectangularReflectionMapping=EquirectangularReflectionMapping;const EquirectangularRefractionMapping=304;exports.EquirectangularRefractionMapping=EquirectangularRefractionMapping;const CubeUVReflectionMapping=306;exports.CubeUVReflectionMapping=CubeUVReflectionMapping;const CubeUVRefractionMapping=307;exports.CubeUVRefractionMapping=CubeUVRefractionMapping;const RepeatWrapping=1000;exports.RepeatWrapping=RepeatWrapping;const ClampToEdgeWrapping=1001;exports.ClampToEdgeWrapping=ClampToEdgeWrapping;const MirroredRepeatWrapping=1002;exports.MirroredRepeatWrapping=MirroredRepeatWrapping;const NearestFilter=1003;exports.NearestFilter=NearestFilter;const NearestMipmapNearestFilter=1004;exports.NearestMipmapNearestFilter=NearestMipmapNearestFilter;const NearestMipMapNearestFilter=1004;exports.NearestMipMapNearestFilter=NearestMipMapNearestFilter;const NearestMipmapLinearFilter=1005;exports.NearestMipmapLinearFilter=NearestMipmapLinearFilter;const NearestMipMapLinearFilter=1005;exports.NearestMipMapLinearFilter=NearestMipMapLinearFilter;const LinearFilter=1006;exports.LinearFilter=LinearFilter;const LinearMipmapNearestFilter=1007;exports.LinearMipmapNearestFilter=LinearMipmapNearestFilter;const LinearMipMapNearestFilter=1007;exports.LinearMipMapNearestFilter=LinearMipMapNearestFilter;const LinearMipmapLinearFilter=1008;exports.LinearMipmapLinearFilter=LinearMipmapLinearFilter;const LinearMipMapLinearFilter=1008;exports.LinearMipMapLinearFilter=LinearMipMapLinearFilter;const UnsignedByteType=1009;exports.UnsignedByteType=UnsignedByteType;const ByteType=1010;exports.ByteType=ByteType;const ShortType=1011;exports.ShortType=ShortType;const UnsignedShortType=1012;exports.UnsignedShortType=UnsignedShortType;const IntType=1013;exports.IntType=IntType;const UnsignedIntType=1014;exports.UnsignedIntType=UnsignedIntType;const FloatType=1015;exports.FloatType=FloatType;const HalfFloatType=1016;exports.HalfFloatType=HalfFloatType;const UnsignedShort4444Type=1017;exports.UnsignedShort4444Type=UnsignedShort4444Type;const UnsignedShort5551Type=1018;exports.UnsignedShort5551Type=UnsignedShort5551Type;const UnsignedInt248Type=1020;exports.UnsignedInt248Type=UnsignedInt248Type;const AlphaFormat=1021;exports.AlphaFormat=AlphaFormat;const RGBFormat=1022;exports.RGBFormat=RGBFormat;const RGBAFormat=1023;exports.RGBAFormat=RGBAFormat;const LuminanceFormat=1024;exports.LuminanceFormat=LuminanceFormat;const LuminanceAlphaFormat=1025;exports.LuminanceAlphaFormat=LuminanceAlphaFormat;const DepthFormat=1026;exports.DepthFormat=DepthFormat;const DepthStencilFormat=1027;exports.DepthStencilFormat=DepthStencilFormat;const RedFormat=1028;exports.RedFormat=RedFormat;const RedIntegerFormat=1029;exports.RedIntegerFormat=RedIntegerFormat;const RGFormat=1030;exports.RGFormat=RGFormat;const RGIntegerFormat=1031;exports.RGIntegerFormat=RGIntegerFormat;const RGBAIntegerFormat=1033;exports.RGBAIntegerFormat=RGBAIntegerFormat;const RGB_S3TC_DXT1_Format=33776;exports.RGB_S3TC_DXT1_Format=RGB_S3TC_DXT1_Format;const RGBA_S3TC_DXT1_Format=33777;exports.RGBA_S3TC_DXT1_Format=RGBA_S3TC_DXT1_Format;const RGBA_S3TC_DXT3_Format=33778;exports.RGBA_S3TC_DXT3_Format=RGBA_S3TC_DXT3_Format;const RGBA_S3TC_DXT5_Format=33779;exports.RGBA_S3TC_DXT5_Format=RGBA_S3TC_DXT5_Format;const RGB_PVRTC_4BPPV1_Format=35840;exports.RGB_PVRTC_4BPPV1_Format=RGB_PVRTC_4BPPV1_Format;const RGB_PVRTC_2BPPV1_Format=35841;exports.RGB_PVRTC_2BPPV1_Format=RGB_PVRTC_2BPPV1_Format;const RGBA_PVRTC_4BPPV1_Format=35842;exports.RGBA_PVRTC_4BPPV1_Format=RGBA_PVRTC_4BPPV1_Format;const RGBA_PVRTC_2BPPV1_Format=35843;exports.RGBA_PVRTC_2BPPV1_Format=RGBA_PVRTC_2BPPV1_Format;const RGB_ETC1_Format=36196;exports.RGB_ETC1_Format=RGB_ETC1_Format;const RGB_ETC2_Format=37492;exports.RGB_ETC2_Format=RGB_ETC2_Format;const RGBA_ETC2_EAC_Format=37496;exports.RGBA_ETC2_EAC_Format=RGBA_ETC2_EAC_Format;const RGBA_ASTC_4x4_Format=37808;exports.RGBA_ASTC_4x4_Format=RGBA_ASTC_4x4_Format;const RGBA_ASTC_5x4_Format=37809;exports.RGBA_ASTC_5x4_Format=RGBA_ASTC_5x4_Format;const RGBA_ASTC_5x5_Format=37810;exports.RGBA_ASTC_5x5_Format=RGBA_ASTC_5x5_Format;const RGBA_ASTC_6x5_Format=37811;exports.RGBA_ASTC_6x5_Format=RGBA_ASTC_6x5_Format;const RGBA_ASTC_6x6_Format=37812;exports.RGBA_ASTC_6x6_Format=RGBA_ASTC_6x6_Format;const RGBA_ASTC_8x5_Format=37813;exports.RGBA_ASTC_8x5_Format=RGBA_ASTC_8x5_Format;const RGBA_ASTC_8x6_Format=37814;exports.RGBA_ASTC_8x6_Format=RGBA_ASTC_8x6_Format;const RGBA_ASTC_8x8_Format=37815;exports.RGBA_ASTC_8x8_Format=RGBA_ASTC_8x8_Format;const RGBA_ASTC_10x5_Format=37816;exports.RGBA_ASTC_10x5_Format=RGBA_ASTC_10x5_Format;const RGBA_ASTC_10x6_Format=37817;exports.RGBA_ASTC_10x6_Format=RGBA_ASTC_10x6_Format;const RGBA_ASTC_10x8_Format=37818;exports.RGBA_ASTC_10x8_Format=RGBA_ASTC_10x8_Format;const RGBA_ASTC_10x10_Format=37819;exports.RGBA_ASTC_10x10_Format=RGBA_ASTC_10x10_Format;const RGBA_ASTC_12x10_Format=37820;exports.RGBA_ASTC_12x10_Format=RGBA_ASTC_12x10_Format;const RGBA_ASTC_12x12_Format=37821;exports.RGBA_ASTC_12x12_Format=RGBA_ASTC_12x12_Format;const RGBA_BPTC_Format=36492;exports.RGBA_BPTC_Format=RGBA_BPTC_Format;const LoopOnce=2200;exports.LoopOnce=LoopOnce;const LoopRepeat=2201;exports.LoopRepeat=LoopRepeat;const LoopPingPong=2202;exports.LoopPingPong=LoopPingPong;const InterpolateDiscrete=2300;exports.InterpolateDiscrete=InterpolateDiscrete;const InterpolateLinear=2301;exports.InterpolateLinear=InterpolateLinear;const InterpolateSmooth=2302;exports.InterpolateSmooth=InterpolateSmooth;const ZeroCurvatureEnding=2400;exports.ZeroCurvatureEnding=ZeroCurvatureEnding;const ZeroSlopeEnding=2401;exports.ZeroSlopeEnding=ZeroSlopeEnding;const WrapAroundEnding=2402;exports.WrapAroundEnding=WrapAroundEnding;const NormalAnimationBlendMode=2500;exports.NormalAnimationBlendMode=NormalAnimationBlendMode;const AdditiveAnimationBlendMode=2501;exports.AdditiveAnimationBlendMode=AdditiveAnimationBlendMode;const TrianglesDrawMode=0;exports.TrianglesDrawMode=TrianglesDrawMode;const TriangleStripDrawMode=1;exports.TriangleStripDrawMode=TriangleStripDrawMode;const TriangleFanDrawMode=2;exports.TriangleFanDrawMode=TriangleFanDrawMode;const LinearEncoding=3000;exports.LinearEncoding=LinearEncoding;const sRGBEncoding=3001;exports.sRGBEncoding=sRGBEncoding;const BasicDepthPacking=3200;exports.BasicDepthPacking=BasicDepthPacking;const RGBADepthPacking=3201;exports.RGBADepthPacking=RGBADepthPacking;const TangentSpaceNormalMap=0;exports.TangentSpaceNormalMap=TangentSpaceNormalMap;const ObjectSpaceNormalMap=1;exports.ObjectSpaceNormalMap=ObjectSpaceNormalMap;const ZeroStencilOp=0;exports.ZeroStencilOp=ZeroStencilOp;const KeepStencilOp=7680;exports.KeepStencilOp=KeepStencilOp;const ReplaceStencilOp=7681;exports.ReplaceStencilOp=ReplaceStencilOp;const IncrementStencilOp=7682;exports.IncrementStencilOp=IncrementStencilOp;const DecrementStencilOp=7683;exports.DecrementStencilOp=DecrementStencilOp;const IncrementWrapStencilOp=34055;exports.IncrementWrapStencilOp=IncrementWrapStencilOp;const DecrementWrapStencilOp=34056;exports.DecrementWrapStencilOp=DecrementWrapStencilOp;const InvertStencilOp=5386;exports.InvertStencilOp=InvertStencilOp;const NeverStencilFunc=512;exports.NeverStencilFunc=NeverStencilFunc;const LessStencilFunc=513;exports.LessStencilFunc=LessStencilFunc;const EqualStencilFunc=514;exports.EqualStencilFunc=EqualStencilFunc;const LessEqualStencilFunc=515;exports.LessEqualStencilFunc=LessEqualStencilFunc;const GreaterStencilFunc=516;exports.GreaterStencilFunc=GreaterStencilFunc;const NotEqualStencilFunc=517;exports.NotEqualStencilFunc=NotEqualStencilFunc;const GreaterEqualStencilFunc=518;exports.GreaterEqualStencilFunc=GreaterEqualStencilFunc;const AlwaysStencilFunc=519;exports.AlwaysStencilFunc=AlwaysStencilFunc;const StaticDrawUsage=35044;exports.StaticDrawUsage=StaticDrawUsage;const DynamicDrawUsage=35048;exports.DynamicDrawUsage=DynamicDrawUsage;const StreamDrawUsage=35040;exports.StreamDrawUsage=StreamDrawUsage;const StaticReadUsage=35045;exports.StaticReadUsage=StaticReadUsage;const DynamicReadUsage=35049;exports.DynamicReadUsage=DynamicReadUsage;const StreamReadUsage=35041;exports.StreamReadUsage=StreamReadUsage;const StaticCopyUsage=35046;exports.StaticCopyUsage=StaticCopyUsage;const DynamicCopyUsage=35050;exports.DynamicCopyUsage=DynamicCopyUsage;const StreamCopyUsage=35042;exports.StreamCopyUsage=StreamCopyUsage;const GLSL1='100';exports.GLSL1=GLSL1;const GLSL3='300 es';exports.GLSL3=GLSL3;const _SRGBAFormat=1035;// fallback for WebGL 1
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */exports._SRGBAFormat=_SRGBAFormat;class EventDispatcher{addEventListener(type,listener){if(this._listeners===undefined)this._listeners={};const listeners=this._listeners;if(listeners[type]===undefined){listeners[type]=[];}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener);}}hasEventListener(type,listener){if(this._listeners===undefined)return false;const listeners=this._listeners;return listeners[type]!==undefined&&listeners[type].indexOf(listener)!==-1;}removeEventListener(type,listener){if(this._listeners===undefined)return;const listeners=this._listeners;const listenerArray=listeners[type];if(listenerArray!==undefined){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1);}}}dispatchEvent(event){if(this._listeners===undefined)return;const listeners=this._listeners;const listenerArray=listeners[event.type];if(listenerArray!==undefined){event.target=this;// Make a copy, in case listeners are removed while iterating.
const array=listenerArray.slice(0);for(let i=0,l=array.length;i<l;i++){array[i].call(this,event);}event.target=null;}}}exports.EventDispatcher=EventDispatcher;const _lut=[];for(let i=0;i<256;i++){_lut[i]=(i<16?'0':'')+i.toString(16);}let _seed=1234567;const DEG2RAD=Math.PI/180;const RAD2DEG=180/Math.PI;// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID(){const d0=Math.random()*0xffffffff|0;const d1=Math.random()*0xffffffff|0;const d2=Math.random()*0xffffffff|0;const d3=Math.random()*0xffffffff|0;const uuid=_lut[d0&0xff]+_lut[d0>>8&0xff]+_lut[d0>>16&0xff]+_lut[d0>>24&0xff]+'-'+_lut[d1&0xff]+_lut[d1>>8&0xff]+'-'+_lut[d1>>16&0x0f|0x40]+_lut[d1>>24&0xff]+'-'+_lut[d2&0x3f|0x80]+_lut[d2>>8&0xff]+'-'+_lut[d2>>16&0xff]+_lut[d2>>24&0xff]+_lut[d3&0xff]+_lut[d3>>8&0xff]+_lut[d3>>16&0xff]+_lut[d3>>24&0xff];// .toUpperCase() here flattens concatenated strings to save heap memory space.
return uuid.toUpperCase();}function clamp(value,min,max){return Math.max(min,Math.min(max,value));}// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo(n,m){return(n%m+m)%m;}// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear(x,a1,a2,b1,b2){return b1+(x-a1)*(b2-b1)/(a2-a1);}// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp(x,y,value){if(x!==y){return(value-x)/(y-x);}else{return 0;}}// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp(x,y,t){return(1-t)*x+t*y;}// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp(x,y,lambda,dt){return lerp(x,y,1-Math.exp(-lambda*dt));}// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong(x,length=1){return length-Math.abs(euclideanModulo(x,length*2)-length);}// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*(3-2*x);}function smootherstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*x*(x*(x*6-15)+10);}// Random integer from <low, high> interval
function randInt(low,high){return low+Math.floor(Math.random()*(high-low+1));}// Random float from <low, high> interval
function randFloat(low,high){return low+Math.random()*(high-low);}// Random float from <-range/2, range/2> interval
function randFloatSpread(range){return range*(0.5-Math.random());}// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom(s){if(s!==undefined)_seed=s%2147483647;// Park-Miller algorithm
_seed=_seed*16807%2147483647;return(_seed-1)/2147483646;}function degToRad(degrees){return degrees*DEG2RAD;}function radToDeg(radians){return radians*RAD2DEG;}function isPowerOfTwo(value){return(value&value-1)===0&&value!==0;}function ceilPowerOfTwo(value){return Math.pow(2,Math.ceil(Math.log(value)/Math.LN2));}function floorPowerOfTwo(value){return Math.pow(2,Math.floor(Math.log(value)/Math.LN2));}function setQuaternionFromProperEuler(q,a,b,c,order){// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
// rotations are applied to the axes in the order specified by 'order'
// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
// angles are in radians
const cos=Math.cos;const sin=Math.sin;const c2=cos(b/2);const s2=sin(b/2);const c13=cos((a+c)/2);const s13=sin((a+c)/2);const c1_3=cos((a-c)/2);const s1_3=sin((a-c)/2);const c3_1=cos((c-a)/2);const s3_1=sin((c-a)/2);switch(order){case'XYX':q.set(c2*s13,s2*c1_3,s2*s1_3,c2*c13);break;case'YZY':q.set(s2*s1_3,c2*s13,s2*c1_3,c2*c13);break;case'ZXZ':q.set(s2*c1_3,s2*s1_3,c2*s13,c2*c13);break;case'XZX':q.set(c2*s13,s2*s3_1,s2*c3_1,c2*c13);break;case'YXY':q.set(s2*c3_1,c2*s13,s2*s3_1,c2*c13);break;case'ZYZ':q.set(s2*s3_1,s2*c3_1,c2*s13,c2*c13);break;default:console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: '+order);}}var MathUtils=/*#__PURE__*/Object.freeze({__proto__:null,DEG2RAD:DEG2RAD,RAD2DEG:RAD2DEG,generateUUID:generateUUID,clamp:clamp,euclideanModulo:euclideanModulo,mapLinear:mapLinear,inverseLerp:inverseLerp,lerp:lerp,damp:damp,pingpong:pingpong,smoothstep:smoothstep,smootherstep:smootherstep,randInt:randInt,randFloat:randFloat,randFloatSpread:randFloatSpread,seededRandom:seededRandom,degToRad:degToRad,radToDeg:radToDeg,isPowerOfTwo:isPowerOfTwo,ceilPowerOfTwo:ceilPowerOfTwo,floorPowerOfTwo:floorPowerOfTwo,setQuaternionFromProperEuler:setQuaternionFromProperEuler});exports.MathUtils=exports.Math=MathUtils;class Vector2{constructor(x=0,y=0){this.x=x;this.y=y;}get width(){return this.x;}set width(value){this.x=value;}get height(){return this.y;}set height(value){this.y=value;}set(x,y){this.x=x;this.y=y;return this;}setScalar(scalar){this.x=scalar;this.y=scalar;return this;}setX(x){this.x=x;return this;}setY(y){this.y=y;return this;}setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw new Error('index is out of range: '+index);}return this;}getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw new Error('index is out of range: '+index);}}clone(){return new this.constructor(this.x,this.y);}copy(v){this.x=v.x;this.y=v.y;return this;}add(v,w){if(w!==undefined){console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;return this;}addScalar(s){this.x+=s;this.y+=s;return this;}addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this;}addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;return this;}sub(v,w){if(w!==undefined){console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;return this;}subScalar(s){this.x-=s;this.y-=s;return this;}subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this;}multiply(v){this.x*=v.x;this.y*=v.y;return this;}multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;return this;}divide(v){this.x/=v.x;this.y/=v.y;return this;}divideScalar(scalar){return this.multiplyScalar(1/scalar);}applyMatrix3(m){const x=this.x,y=this.y;const e=m.elements;this.x=e[0]*x+e[3]*y+e[6];this.y=e[1]*x+e[4]*y+e[7];return this;}min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);return this;}max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);return this;}clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));return this;}clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));return this;}clampLength(min,max){const length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this;}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this;}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this;}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);return this;}negate(){this.x=-this.x;this.y=-this.y;return this;}dot(v){return this.x*v.x+this.y*v.y;}cross(v){return this.x*v.y-this.y*v.x;}lengthSq(){return this.x*this.x+this.y*this.y;}length(){return Math.sqrt(this.x*this.x+this.y*this.y);}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y);}normalize(){return this.divideScalar(this.length()||1);}angle(){// computes the angle in radians with respect to the positive x-axis
const angle=Math.atan2(-this.y,-this.x)+Math.PI;return angle;}distanceTo(v){return Math.sqrt(this.distanceToSquared(v));}distanceToSquared(v){const dx=this.x-v.x,dy=this.y-v.y;return dx*dx+dy*dy;}manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y);}setLength(length){return this.normalize().multiplyScalar(length);}lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;return this;}lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;return this;}equals(v){return v.x===this.x&&v.y===this.y;}fromArray(array,offset=0){this.x=array[offset];this.y=array[offset+1];return this;}toArray(array=[],offset=0){array[offset]=this.x;array[offset+1]=this.y;return array;}fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);return this;}rotateAround(center,angle){const c=Math.cos(angle),s=Math.sin(angle);const x=this.x-center.x;const y=this.y-center.y;this.x=x*c-y*s+center.x;this.y=x*s+y*c+center.y;return this;}random(){this.x=Math.random();this.y=Math.random();return this;}*[Symbol.iterator](){yield this.x;yield this.y;}}exports.Vector2=Vector2;Vector2.prototype.isVector2=true;class Matrix3{constructor(){this.elements=[1,0,0,0,1,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');}}set(n11,n12,n13,n21,n22,n23,n31,n32,n33){const te=this.elements;te[0]=n11;te[1]=n21;te[2]=n31;te[3]=n12;te[4]=n22;te[5]=n32;te[6]=n13;te[7]=n23;te[8]=n33;return this;}identity(){this.set(1,0,0,0,1,0,0,0,1);return this;}copy(m){const te=this.elements;const me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];return this;}extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrix3Column(this,0);yAxis.setFromMatrix3Column(this,1);zAxis.setFromMatrix3Column(this,2);return this;}setFromMatrix4(m){const me=m.elements;this.set(me[0],me[4],me[8],me[1],me[5],me[9],me[2],me[6],me[10]);return this;}multiply(m){return this.multiplyMatrices(this,m);}premultiply(m){return this.multiplyMatrices(m,this);}multiplyMatrices(a,b){const ae=a.elements;const be=b.elements;const te=this.elements;const a11=ae[0],a12=ae[3],a13=ae[6];const a21=ae[1],a22=ae[4],a23=ae[7];const a31=ae[2],a32=ae[5],a33=ae[8];const b11=be[0],b12=be[3],b13=be[6];const b21=be[1],b22=be[4],b23=be[7];const b31=be[2],b32=be[5],b33=be[8];te[0]=a11*b11+a12*b21+a13*b31;te[3]=a11*b12+a12*b22+a13*b32;te[6]=a11*b13+a12*b23+a13*b33;te[1]=a21*b11+a22*b21+a23*b31;te[4]=a21*b12+a22*b22+a23*b32;te[7]=a21*b13+a22*b23+a23*b33;te[2]=a31*b11+a32*b21+a33*b31;te[5]=a31*b12+a32*b22+a33*b32;te[8]=a31*b13+a32*b23+a33*b33;return this;}multiplyScalar(s){const te=this.elements;te[0]*=s;te[3]*=s;te[6]*=s;te[1]*=s;te[4]*=s;te[7]*=s;te[2]*=s;te[5]*=s;te[8]*=s;return this;}determinant(){const te=this.elements;const a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7],i=te[8];return a*e*i-a*f*h-b*d*i+b*f*g+c*d*h-c*e*g;}invert(){const te=this.elements,n11=te[0],n21=te[1],n31=te[2],n12=te[3],n22=te[4],n32=te[5],n13=te[6],n23=te[7],n33=te[8],t11=n33*n22-n32*n23,t12=n32*n13-n33*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(det===0)return this.set(0,0,0,0,0,0,0,0,0);const detInv=1/det;te[0]=t11*detInv;te[1]=(n31*n23-n33*n21)*detInv;te[2]=(n32*n21-n31*n22)*detInv;te[3]=t12*detInv;te[4]=(n33*n11-n31*n13)*detInv;te[5]=(n31*n12-n32*n11)*detInv;te[6]=t13*detInv;te[7]=(n21*n13-n23*n11)*detInv;te[8]=(n22*n11-n21*n12)*detInv;return this;}transpose(){let tmp;const m=this.elements;tmp=m[1];m[1]=m[3];m[3]=tmp;tmp=m[2];m[2]=m[6];m[6]=tmp;tmp=m[5];m[5]=m[7];m[7]=tmp;return this;}getNormalMatrix(matrix4){return this.setFromMatrix4(matrix4).invert().transpose();}transposeIntoArray(r){const m=this.elements;r[0]=m[0];r[1]=m[3];r[2]=m[6];r[3]=m[1];r[4]=m[4];r[5]=m[7];r[6]=m[2];r[7]=m[5];r[8]=m[8];return this;}setUvTransform(tx,ty,sx,sy,rotation,cx,cy){const c=Math.cos(rotation);const s=Math.sin(rotation);this.set(sx*c,sx*s,-sx*(c*cx+s*cy)+cx+tx,-sy*s,sy*c,-sy*(-s*cx+c*cy)+cy+ty,0,0,1);return this;}scale(sx,sy){const te=this.elements;te[0]*=sx;te[3]*=sx;te[6]*=sx;te[1]*=sy;te[4]*=sy;te[7]*=sy;return this;}rotate(theta){const c=Math.cos(theta);const s=Math.sin(theta);const te=this.elements;const a11=te[0],a12=te[3],a13=te[6];const a21=te[1],a22=te[4],a23=te[7];te[0]=c*a11+s*a21;te[3]=c*a12+s*a22;te[6]=c*a13+s*a23;te[1]=-s*a11+c*a21;te[4]=-s*a12+c*a22;te[7]=-s*a13+c*a23;return this;}translate(tx,ty){const te=this.elements;te[0]+=tx*te[2];te[3]+=tx*te[5];te[6]+=tx*te[8];te[1]+=ty*te[2];te[4]+=ty*te[5];te[7]+=ty*te[8];return this;}equals(matrix){const te=this.elements;const me=matrix.elements;for(let i=0;i<9;i++){if(te[i]!==me[i])return false;}return true;}fromArray(array,offset=0){for(let i=0;i<9;i++){this.elements[i]=array[i+offset];}return this;}toArray(array=[],offset=0){const te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];return array;}clone(){return new this.constructor().fromArray(this.elements);}}exports.Matrix3=Matrix3;Matrix3.prototype.isMatrix3=true;function arrayNeedsUint32(array){// assumes larger values usually on last
for(let i=array.length-1;i>=0;--i){if(array[i]>65535)return true;}return false;}const TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function getTypedArray(type,buffer){return new TYPED_ARRAYS[type](buffer);}function createElementNS(name){return document.createElementNS('http://www.w3.org/1999/xhtml',name);}const _colorKeywords={'aliceblue':0xF0F8FF,'antiquewhite':0xFAEBD7,'aqua':0x00FFFF,'aquamarine':0x7FFFD4,'azure':0xF0FFFF,'beige':0xF5F5DC,'bisque':0xFFE4C4,'black':0x000000,'blanchedalmond':0xFFEBCD,'blue':0x0000FF,'blueviolet':0x8A2BE2,'brown':0xA52A2A,'burlywood':0xDEB887,'cadetblue':0x5F9EA0,'chartreuse':0x7FFF00,'chocolate':0xD2691E,'coral':0xFF7F50,'cornflowerblue':0x6495ED,'cornsilk':0xFFF8DC,'crimson':0xDC143C,'cyan':0x00FFFF,'darkblue':0x00008B,'darkcyan':0x008B8B,'darkgoldenrod':0xB8860B,'darkgray':0xA9A9A9,'darkgreen':0x006400,'darkgrey':0xA9A9A9,'darkkhaki':0xBDB76B,'darkmagenta':0x8B008B,'darkolivegreen':0x556B2F,'darkorange':0xFF8C00,'darkorchid':0x9932CC,'darkred':0x8B0000,'darksalmon':0xE9967A,'darkseagreen':0x8FBC8F,'darkslateblue':0x483D8B,'darkslategray':0x2F4F4F,'darkslategrey':0x2F4F4F,'darkturquoise':0x00CED1,'darkviolet':0x9400D3,'deeppink':0xFF1493,'deepskyblue':0x00BFFF,'dimgray':0x696969,'dimgrey':0x696969,'dodgerblue':0x1E90FF,'firebrick':0xB22222,'floralwhite':0xFFFAF0,'forestgreen':0x228B22,'fuchsia':0xFF00FF,'gainsboro':0xDCDCDC,'ghostwhite':0xF8F8FF,'gold':0xFFD700,'goldenrod':0xDAA520,'gray':0x808080,'green':0x008000,'greenyellow':0xADFF2F,'grey':0x808080,'honeydew':0xF0FFF0,'hotpink':0xFF69B4,'indianred':0xCD5C5C,'indigo':0x4B0082,'ivory':0xFFFFF0,'khaki':0xF0E68C,'lavender':0xE6E6FA,'lavenderblush':0xFFF0F5,'lawngreen':0x7CFC00,'lemonchiffon':0xFFFACD,'lightblue':0xADD8E6,'lightcoral':0xF08080,'lightcyan':0xE0FFFF,'lightgoldenrodyellow':0xFAFAD2,'lightgray':0xD3D3D3,'lightgreen':0x90EE90,'lightgrey':0xD3D3D3,'lightpink':0xFFB6C1,'lightsalmon':0xFFA07A,'lightseagreen':0x20B2AA,'lightskyblue':0x87CEFA,'lightslategray':0x778899,'lightslategrey':0x778899,'lightsteelblue':0xB0C4DE,'lightyellow':0xFFFFE0,'lime':0x00FF00,'limegreen':0x32CD32,'linen':0xFAF0E6,'magenta':0xFF00FF,'maroon':0x800000,'mediumaquamarine':0x66CDAA,'mediumblue':0x0000CD,'mediumorchid':0xBA55D3,'mediumpurple':0x9370DB,'mediumseagreen':0x3CB371,'mediumslateblue':0x7B68EE,'mediumspringgreen':0x00FA9A,'mediumturquoise':0x48D1CC,'mediumvioletred':0xC71585,'midnightblue':0x191970,'mintcream':0xF5FFFA,'mistyrose':0xFFE4E1,'moccasin':0xFFE4B5,'navajowhite':0xFFDEAD,'navy':0x000080,'oldlace':0xFDF5E6,'olive':0x808000,'olivedrab':0x6B8E23,'orange':0xFFA500,'orangered':0xFF4500,'orchid':0xDA70D6,'palegoldenrod':0xEEE8AA,'palegreen':0x98FB98,'paleturquoise':0xAFEEEE,'palevioletred':0xDB7093,'papayawhip':0xFFEFD5,'peachpuff':0xFFDAB9,'peru':0xCD853F,'pink':0xFFC0CB,'plum':0xDDA0DD,'powderblue':0xB0E0E6,'purple':0x800080,'rebeccapurple':0x663399,'red':0xFF0000,'rosybrown':0xBC8F8F,'royalblue':0x4169E1,'saddlebrown':0x8B4513,'salmon':0xFA8072,'sandybrown':0xF4A460,'seagreen':0x2E8B57,'seashell':0xFFF5EE,'sienna':0xA0522D,'silver':0xC0C0C0,'skyblue':0x87CEEB,'slateblue':0x6A5ACD,'slategray':0x708090,'slategrey':0x708090,'snow':0xFFFAFA,'springgreen':0x00FF7F,'steelblue':0x4682B4,'tan':0xD2B48C,'teal':0x008080,'thistle':0xD8BFD8,'tomato':0xFF6347,'turquoise':0x40E0D0,'violet':0xEE82EE,'wheat':0xF5DEB3,'white':0xFFFFFF,'whitesmoke':0xF5F5F5,'yellow':0xFFFF00,'yellowgreen':0x9ACD32};const _hslA={h:0,s:0,l:0};const _hslB={h:0,s:0,l:0};function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*6*(2/3-t);return p;}function SRGBToLinear(c){return c<0.04045?c*0.0773993808:Math.pow(c*0.9478672986+0.0521327014,2.4);}function LinearToSRGB(c){return c<0.0031308?c*12.92:1.055*Math.pow(c,0.41666)-0.055;}class Color{constructor(r,g,b){if(g===undefined&&b===undefined){// r is THREE.Color, hex or string
return this.set(r);}return this.setRGB(r,g,b);}set(value){if(value&&value.isColor){this.copy(value);}else if(typeof value==='number'){this.setHex(value);}else if(typeof value==='string'){this.setStyle(value);}return this;}setScalar(scalar){this.r=scalar;this.g=scalar;this.b=scalar;return this;}setHex(hex){hex=Math.floor(hex);this.r=(hex>>16&255)/255;this.g=(hex>>8&255)/255;this.b=(hex&255)/255;return this;}setRGB(r,g,b){this.r=r;this.g=g;this.b=b;return this;}setHSL(h,s,l){// h,s,l ranges are in 0.0 - 1.0
h=euclideanModulo(h,1);s=clamp(s,0,1);l=clamp(l,0,1);if(s===0){this.r=this.g=this.b=l;}else{const p=l<=0.5?l*(1+s):l+s-l*s;const q=2*l-p;this.r=hue2rgb(q,p,h+1/3);this.g=hue2rgb(q,p,h);this.b=hue2rgb(q,p,h-1/3);}return this;}setStyle(style){function handleAlpha(string){if(string===undefined)return;if(parseFloat(string)<1){console.warn('THREE.Color: Alpha component of '+style+' will be ignored.');}}let m;if(m=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)){// rgb / hsl
let color;const name=m[1];const components=m[2];switch(name){case'rgb':case'rgba':if(color=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)){// rgb(255,0,0) rgba(255,0,0,0.5)
this.r=Math.min(255,parseInt(color[1],10))/255;this.g=Math.min(255,parseInt(color[2],10))/255;this.b=Math.min(255,parseInt(color[3],10))/255;handleAlpha(color[4]);return this;}if(color=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)){// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
this.r=Math.min(100,parseInt(color[1],10))/100;this.g=Math.min(100,parseInt(color[2],10))/100;this.b=Math.min(100,parseInt(color[3],10))/100;handleAlpha(color[4]);return this;}break;case'hsl':case'hsla':if(color=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)){// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
const h=parseFloat(color[1])/360;const s=parseInt(color[2],10)/100;const l=parseInt(color[3],10)/100;handleAlpha(color[4]);return this.setHSL(h,s,l);}break;}}else if(m=/^\#([A-Fa-f\d]+)$/.exec(style)){// hex color
const hex=m[1];const size=hex.length;if(size===3){// #ff0
this.r=parseInt(hex.charAt(0)+hex.charAt(0),16)/255;this.g=parseInt(hex.charAt(1)+hex.charAt(1),16)/255;this.b=parseInt(hex.charAt(2)+hex.charAt(2),16)/255;return this;}else if(size===6){// #ff0000
this.r=parseInt(hex.charAt(0)+hex.charAt(1),16)/255;this.g=parseInt(hex.charAt(2)+hex.charAt(3),16)/255;this.b=parseInt(hex.charAt(4)+hex.charAt(5),16)/255;return this;}}if(style&&style.length>0){return this.setColorName(style);}return this;}setColorName(style){// color keywords
const hex=_colorKeywords[style.toLowerCase()];if(hex!==undefined){// red
this.setHex(hex);}else{// unknown color
console.warn('THREE.Color: Unknown color '+style);}return this;}clone(){return new this.constructor(this.r,this.g,this.b);}copy(color){this.r=color.r;this.g=color.g;this.b=color.b;return this;}copySRGBToLinear(color){this.r=SRGBToLinear(color.r);this.g=SRGBToLinear(color.g);this.b=SRGBToLinear(color.b);return this;}copyLinearToSRGB(color){this.r=LinearToSRGB(color.r);this.g=LinearToSRGB(color.g);this.b=LinearToSRGB(color.b);return this;}convertSRGBToLinear(){this.copySRGBToLinear(this);return this;}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this;}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0;}getHexString(){return('000000'+this.getHex().toString(16)).slice(-6);}getHSL(target){// h,s,l ranges are in 0.0 - 1.0
const r=this.r,g=this.g,b=this.b;const max=Math.max(r,g,b);const min=Math.min(r,g,b);let hue,saturation;const lightness=(min+max)/2.0;if(min===max){hue=0;saturation=0;}else{const delta=max-min;saturation=lightness<=0.5?delta/(max+min):delta/(2-max-min);switch(max){case r:hue=(g-b)/delta+(g<b?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4;break;}hue/=6;}target.h=hue;target.s=saturation;target.l=lightness;return target;}getStyle(){return'rgb('+(this.r*255|0)+','+(this.g*255|0)+','+(this.b*255|0)+')';}offsetHSL(h,s,l){this.getHSL(_hslA);_hslA.h+=h;_hslA.s+=s;_hslA.l+=l;this.setHSL(_hslA.h,_hslA.s,_hslA.l);return this;}add(color){this.r+=color.r;this.g+=color.g;this.b+=color.b;return this;}addColors(color1,color2){this.r=color1.r+color2.r;this.g=color1.g+color2.g;this.b=color1.b+color2.b;return this;}addScalar(s){this.r+=s;this.g+=s;this.b+=s;return this;}sub(color){this.r=Math.max(0,this.r-color.r);this.g=Math.max(0,this.g-color.g);this.b=Math.max(0,this.b-color.b);return this;}multiply(color){this.r*=color.r;this.g*=color.g;this.b*=color.b;return this;}multiplyScalar(s){this.r*=s;this.g*=s;this.b*=s;return this;}lerp(color,alpha){this.r+=(color.r-this.r)*alpha;this.g+=(color.g-this.g)*alpha;this.b+=(color.b-this.b)*alpha;return this;}lerpColors(color1,color2,alpha){this.r=color1.r+(color2.r-color1.r)*alpha;this.g=color1.g+(color2.g-color1.g)*alpha;this.b=color1.b+(color2.b-color1.b)*alpha;return this;}lerpHSL(color,alpha){this.getHSL(_hslA);color.getHSL(_hslB);const h=lerp(_hslA.h,_hslB.h,alpha);const s=lerp(_hslA.s,_hslB.s,alpha);const l=lerp(_hslA.l,_hslB.l,alpha);this.setHSL(h,s,l);return this;}equals(c){return c.r===this.r&&c.g===this.g&&c.b===this.b;}fromArray(array,offset=0){this.r=array[offset];this.g=array[offset+1];this.b=array[offset+2];return this;}toArray(array=[],offset=0){array[offset]=this.r;array[offset+1]=this.g;array[offset+2]=this.b;return array;}fromBufferAttribute(attribute,index){this.r=attribute.getX(index);this.g=attribute.getY(index);this.b=attribute.getZ(index);if(attribute.normalized===true){// assuming Uint8Array
this.r/=255;this.g/=255;this.b/=255;}return this;}toJSON(){return this.getHex();}}exports.Color=Color;Color.NAMES=_colorKeywords;Color.prototype.isColor=true;Color.prototype.r=1;Color.prototype.g=1;Color.prototype.b=1;let _canvas;class ImageUtils{static getDataURL(image){if(/^data:/i.test(image.src)){return image.src;}if(typeof HTMLCanvasElement=='undefined'){return image.src;}let canvas;if(image instanceof HTMLCanvasElement){canvas=image;}else{if(_canvas===undefined)_canvas=createElementNS('canvas');_canvas.width=image.width;_canvas.height=image.height;const context=_canvas.getContext('2d');if(image instanceof ImageData){context.putImageData(image,0,0);}else{context.drawImage(image,0,0,image.width,image.height);}canvas=_canvas;}if(canvas.width>2048||canvas.height>2048){console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons',image);return canvas.toDataURL('image/jpeg',0.6);}else{return canvas.toDataURL('image/png');}}static sRGBToLinear(image){if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){const canvas=createElementNS('canvas');canvas.width=image.width;canvas.height=image.height;const context=canvas.getContext('2d');context.drawImage(image,0,0,image.width,image.height);const imageData=context.getImageData(0,0,image.width,image.height);const data=imageData.data;for(let i=0;i<data.length;i++){data[i]=SRGBToLinear(data[i]/255)*255;}context.putImageData(imageData,0,0);return canvas;}else if(image.data){const data=image.data.slice(0);for(let i=0;i<data.length;i++){if(data instanceof Uint8Array||data instanceof Uint8ClampedArray){data[i]=Math.floor(SRGBToLinear(data[i]/255)*255);}else{// assuming float
data[i]=SRGBToLinear(data[i]);}}return{data:data,width:image.width,height:image.height};}else{console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');return image;}}}exports.ImageUtils=ImageUtils;class Source{constructor(data=null){this.uuid=generateUUID();this.data=data;this.version=0;}set needsUpdate(value){if(value===true)this.version++;}toJSON(meta){const isRootObject=meta===undefined||typeof meta==='string';if(!isRootObject&&meta.images[this.uuid]!==undefined){return meta.images[this.uuid];}const output={uuid:this.uuid,url:''};const data=this.data;if(data!==null){let url;if(Array.isArray(data)){// cube texture
url=[];for(let i=0,l=data.length;i<l;i++){if(data[i].isDataTexture){url.push(serializeImage(data[i].image));}else{url.push(serializeImage(data[i]));}}}else{// texture
url=serializeImage(data);}output.url=url;}if(!isRootObject){meta.images[this.uuid]=output;}return output;}}function serializeImage(image){if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){// default images
return ImageUtils.getDataURL(image);}else{if(image.data){// images of DataTexture
return{data:Array.prototype.slice.call(image.data),width:image.width,height:image.height,type:image.data.constructor.name};}else{console.warn('THREE.Texture: Unable to serialize Texture.');return{};}}}Source.prototype.isSource=true;let textureId=0;class Texture extends EventDispatcher{constructor(image=Texture.DEFAULT_IMAGE,mapping=Texture.DEFAULT_MAPPING,wrapS=ClampToEdgeWrapping,wrapT=ClampToEdgeWrapping,magFilter=LinearFilter,minFilter=LinearMipmapLinearFilter,format=RGBAFormat,type=UnsignedByteType,anisotropy=1,encoding=LinearEncoding){super();Object.defineProperty(this,'id',{value:textureId++});this.uuid=generateUUID();this.name='';this.source=new Source(image);this.mipmaps=[];this.mapping=mapping;this.wrapS=wrapS;this.wrapT=wrapT;this.magFilter=magFilter;this.minFilter=minFilter;this.anisotropy=anisotropy;this.format=format;this.internalFormat=null;this.type=type;this.offset=new Vector2(0,0);this.repeat=new Vector2(1,1);this.center=new Vector2(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Matrix3();this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
//
// Also changing the encoding after already used by a Material will not automatically make the Material
// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
this.encoding=encoding;this.userData={};this.version=0;this.onUpdate=null;this.isRenderTargetTexture=false;// indicates whether a texture belongs to a render target or not
this.needsPMREMUpdate=false;// indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
}get image(){return this.source.data;}set image(value){this.source.data=value;}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y);}clone(){return new this.constructor().copy(this);}copy(source){this.name=source.name;this.source=source.source;this.mipmaps=source.mipmaps.slice(0);this.mapping=source.mapping;this.wrapS=source.wrapS;this.wrapT=source.wrapT;this.magFilter=source.magFilter;this.minFilter=source.minFilter;this.anisotropy=source.anisotropy;this.format=source.format;this.internalFormat=source.internalFormat;this.type=source.type;this.offset.copy(source.offset);this.repeat.copy(source.repeat);this.center.copy(source.center);this.rotation=source.rotation;this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrix.copy(source.matrix);this.generateMipmaps=source.generateMipmaps;this.premultiplyAlpha=source.premultiplyAlpha;this.flipY=source.flipY;this.unpackAlignment=source.unpackAlignment;this.encoding=source.encoding;this.userData=JSON.parse(JSON.stringify(source.userData));return this;}toJSON(meta){const isRootObject=meta===undefined||typeof meta==='string';if(!isRootObject&&meta.textures[this.uuid]!==undefined){return meta.textures[this.uuid];}const output={metadata:{version:4.5,type:'Texture',generator:'Texture.toJSON'},uuid:this.uuid,name:this.name,image:this.source.toJSON(meta).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(JSON.stringify(this.userData)!=='{}')output.userData=this.userData;if(!isRootObject){meta.textures[this.uuid]=output;}return output;}dispose(){this.dispatchEvent({type:'dispose'});}transformUv(uv){if(this.mapping!==UVMapping)return uv;uv.applyMatrix3(this.matrix);if(uv.x<0||uv.x>1){switch(this.wrapS){case RepeatWrapping:uv.x=uv.x-Math.floor(uv.x);break;case ClampToEdgeWrapping:uv.x=uv.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.x)%2)===1){uv.x=Math.ceil(uv.x)-uv.x;}else{uv.x=uv.x-Math.floor(uv.x);}break;}}if(uv.y<0||uv.y>1){switch(this.wrapT){case RepeatWrapping:uv.y=uv.y-Math.floor(uv.y);break;case ClampToEdgeWrapping:uv.y=uv.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.y)%2)===1){uv.y=Math.ceil(uv.y)-uv.y;}else{uv.y=uv.y-Math.floor(uv.y);}break;}}if(this.flipY){uv.y=1-uv.y;}return uv;}set needsUpdate(value){if(value===true){this.version++;this.source.needsUpdate=true;}}}exports.Texture=Texture;Texture.DEFAULT_IMAGE=null;Texture.DEFAULT_MAPPING=UVMapping;Texture.prototype.isTexture=true;class Vector4{constructor(x=0,y=0,z=0,w=1){this.x=x;this.y=y;this.z=z;this.w=w;}get width(){return this.z;}set width(value){this.z=value;}get height(){return this.w;}set height(value){this.w=value;}set(x,y,z,w){this.x=x;this.y=y;this.z=z;this.w=w;return this;}setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;this.w=scalar;return this;}setX(x){this.x=x;return this;}setY(y){this.y=y;return this;}setZ(z){this.z=z;return this;}setW(w){this.w=w;return this;}setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw new Error('index is out of range: '+index);}return this;}getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error('index is out of range: '+index);}}clone(){return new this.constructor(this.x,this.y,this.z,this.w);}copy(v){this.x=v.x;this.y=v.y;this.z=v.z;this.w=v.w!==undefined?v.w:1;return this;}add(v,w){if(w!==undefined){console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;this.w+=v.w;return this;}addScalar(s){this.x+=s;this.y+=s;this.z+=s;this.w+=s;return this;}addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this;}addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;this.w+=v.w*s;return this;}sub(v,w){if(w!==undefined){console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;this.w-=v.w;return this;}subScalar(s){this.x-=s;this.y-=s;this.z-=s;this.w-=s;return this;}subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this;}multiply(v){this.x*=v.x;this.y*=v.y;this.z*=v.z;this.w*=v.w;return this;}multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;this.w*=scalar;return this;}applyMatrix4(m){const x=this.x,y=this.y,z=this.z,w=this.w;const e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z+e[12]*w;this.y=e[1]*x+e[5]*y+e[9]*z+e[13]*w;this.z=e[2]*x+e[6]*y+e[10]*z+e[14]*w;this.w=e[3]*x+e[7]*y+e[11]*z+e[15]*w;return this;}divideScalar(scalar){return this.multiplyScalar(1/scalar);}setAxisAngleFromQuaternion(q){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
// q is assumed to be normalized
this.w=2*Math.acos(q.w);const s=Math.sqrt(1-q.w*q.w);if(s<0.0001){this.x=1;this.y=0;this.z=0;}else{this.x=q.x/s;this.y=q.y/s;this.z=q.z/s;}return this;}setAxisAngleFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
let angle,x,y,z;// variables for result
const epsilon=0.01,// margin to allow for rounding errors
epsilon2=0.1,// margin to distinguish between 0 and 180 degrees
te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];if(Math.abs(m12-m21)<epsilon&&Math.abs(m13-m31)<epsilon&&Math.abs(m23-m32)<epsilon){// singularity found
// first check for identity matrix which must have +1 for all terms
// in leading diagonal and zero in other terms
if(Math.abs(m12+m21)<epsilon2&&Math.abs(m13+m31)<epsilon2&&Math.abs(m23+m32)<epsilon2&&Math.abs(m11+m22+m33-3)<epsilon2){// this singularity is identity matrix so angle = 0
this.set(1,0,0,0);return this;// zero angle, arbitrary axis
}// otherwise this singularity is angle = 180
angle=Math.PI;const xx=(m11+1)/2;const yy=(m22+1)/2;const zz=(m33+1)/2;const xy=(m12+m21)/4;const xz=(m13+m31)/4;const yz=(m23+m32)/4;if(xx>yy&&xx>zz){// m11 is the largest diagonal term
if(xx<epsilon){x=0;y=0.707106781;z=0.707106781;}else{x=Math.sqrt(xx);y=xy/x;z=xz/x;}}else if(yy>zz){// m22 is the largest diagonal term
if(yy<epsilon){x=0.707106781;y=0;z=0.707106781;}else{y=Math.sqrt(yy);x=xy/y;z=yz/y;}}else{// m33 is the largest diagonal term so base result on this
if(zz<epsilon){x=0.707106781;y=0.707106781;z=0;}else{z=Math.sqrt(zz);x=xz/z;y=yz/z;}}this.set(x,y,z,angle);return this;// return 180 deg rotation
}// as we have reached here there are no singularities so we can handle normally
let s=Math.sqrt((m32-m23)*(m32-m23)+(m13-m31)*(m13-m31)+(m21-m12)*(m21-m12));// used to normalize
if(Math.abs(s)<0.001)s=1;// prevent divide by zero, should not happen if matrix is orthogonal and should be
// caught by singularity test above, but I've left it in just in case
this.x=(m32-m23)/s;this.y=(m13-m31)/s;this.z=(m21-m12)/s;this.w=Math.acos((m11+m22+m33-1)/2);return this;}min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);this.w=Math.min(this.w,v.w);return this;}max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);this.w=Math.max(this.w,v.w);return this;}clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));this.w=Math.max(min.w,Math.min(max.w,this.w));return this;}clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));this.z=Math.max(minVal,Math.min(maxVal,this.z));this.w=Math.max(minVal,Math.min(maxVal,this.w));return this;}clampLength(min,max){const length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this;}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this;}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this;}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w);return this;}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this;}dot(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w;}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w);}normalize(){return this.divideScalar(this.length()||1);}setLength(length){return this.normalize().multiplyScalar(length);}lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;this.w+=(v.w-this.w)*alpha;return this;}lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;this.z=v1.z+(v2.z-v1.z)*alpha;this.w=v1.w+(v2.w-v1.w)*alpha;return this;}equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w;}fromArray(array,offset=0){this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];this.w=array[offset+3];return this;}toArray(array=[],offset=0){array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;array[offset+3]=this.w;return array;}fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);this.w=attribute.getW(index);return this;}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this;}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;yield this.w;}}exports.Vector4=Vector4;Vector4.prototype.isVector4=true;/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/class WebGLRenderTarget extends EventDispatcher{constructor(width,height,options={}){super();this.width=width;this.height=height;this.depth=1;this.scissor=new Vector4(0,0,width,height);this.scissorTest=false;this.viewport=new Vector4(0,0,width,height);const image={width:width,height:height,depth:1};this.texture=new Texture(image,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);this.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=options.generateMipmaps!==undefined?options.generateMipmaps:false;this.texture.internalFormat=options.internalFormat!==undefined?options.internalFormat:null;this.texture.minFilter=options.minFilter!==undefined?options.minFilter:LinearFilter;this.depthBuffer=options.depthBuffer!==undefined?options.depthBuffer:true;this.stencilBuffer=options.stencilBuffer!==undefined?options.stencilBuffer:false;this.depthTexture=options.depthTexture!==undefined?options.depthTexture:null;this.samples=options.samples!==undefined?options.samples:0;}setSize(width,height,depth=1){if(this.width!==width||this.height!==height||this.depth!==depth){this.width=width;this.height=height;this.depth=depth;this.texture.image.width=width;this.texture.image.height=height;this.texture.image.depth=depth;this.dispose();}this.viewport.set(0,0,width,height);this.scissor.set(0,0,width,height);}clone(){return new this.constructor().copy(this);}copy(source){this.width=source.width;this.height=source.height;this.depth=source.depth;this.viewport.copy(source.viewport);this.texture=source.texture.clone();// ensure image object is not shared, see #20328
this.texture.image=Object.assign({},source.texture.image);this.depthBuffer=source.depthBuffer;this.stencilBuffer=source.stencilBuffer;if(source.depthTexture!==null)this.depthTexture=source.depthTexture.clone();this.samples=source.samples;return this;}dispose(){this.dispatchEvent({type:'dispose'});}}exports.WebGLRenderTarget=WebGLRenderTarget;WebGLRenderTarget.prototype.isWebGLRenderTarget=true;class DataArrayTexture extends Texture{constructor(data=null,width=1,height=1,depth=1){super(null);this.image={data,width,height,depth};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;}}exports.DataArrayTexture=DataArrayTexture;DataArrayTexture.prototype.isDataArrayTexture=true;class WebGLArrayRenderTarget extends WebGLRenderTarget{constructor(width,height,depth){super(width,height);this.depth=depth;this.texture=new DataArrayTexture(null,width,height,depth);this.texture.isRenderTargetTexture=true;}}exports.WebGLArrayRenderTarget=WebGLArrayRenderTarget;WebGLArrayRenderTarget.prototype.isWebGLArrayRenderTarget=true;class Data3DTexture extends Texture{constructor(data=null,width=1,height=1,depth=1){// We're going to add .setXXX() methods for setting properties later.
// Users can still set in DataTexture3D directly.
//
//	const texture = new THREE.DataTexture3D( data, width, height, depth );
// 	texture.anisotropy = 16;
//
// See #14839
super(null);this.image={data,width,height,depth};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;}}exports.Data3DTexture=Data3DTexture;Data3DTexture.prototype.isData3DTexture=true;class WebGL3DRenderTarget extends WebGLRenderTarget{constructor(width,height,depth){super(width,height);this.depth=depth;this.texture=new Data3DTexture(null,width,height,depth);this.texture.isRenderTargetTexture=true;}}exports.WebGL3DRenderTarget=WebGL3DRenderTarget;WebGL3DRenderTarget.prototype.isWebGL3DRenderTarget=true;class WebGLMultipleRenderTargets extends WebGLRenderTarget{constructor(width,height,count,options={}){super(width,height,options);const texture=this.texture;this.texture=[];for(let i=0;i<count;i++){this.texture[i]=texture.clone();}}setSize(width,height,depth=1){if(this.width!==width||this.height!==height||this.depth!==depth){this.width=width;this.height=height;this.depth=depth;for(let i=0,il=this.texture.length;i<il;i++){this.texture[i].image.width=width;this.texture[i].image.height=height;this.texture[i].image.depth=depth;}this.dispose();}this.viewport.set(0,0,width,height);this.scissor.set(0,0,width,height);return this;}copy(source){this.dispose();this.width=source.width;this.height=source.height;this.depth=source.depth;this.viewport.set(0,0,this.width,this.height);this.scissor.set(0,0,this.width,this.height);this.depthBuffer=source.depthBuffer;this.stencilBuffer=source.stencilBuffer;this.depthTexture=source.depthTexture;this.texture.length=0;for(let i=0,il=source.texture.length;i<il;i++){this.texture[i]=source.texture[i].clone();}return this;}}exports.WebGLMultipleRenderTargets=WebGLMultipleRenderTargets;WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets=true;class Quaternion{constructor(x=0,y=0,z=0,w=1){this._x=x;this._y=y;this._z=z;this._w=w;}static slerp(qa,qb,qm,t){console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');return qm.slerpQuaternions(qa,qb,t);}static slerpFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){// fuzz-free, array-based Quaternion SLERP operation
let x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3];const x1=src1[srcOffset1+0],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];if(t===0){dst[dstOffset+0]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;return;}if(t===1){dst[dstOffset+0]=x1;dst[dstOffset+1]=y1;dst[dstOffset+2]=z1;dst[dstOffset+3]=w1;return;}if(w0!==w1||x0!==x1||y0!==y1||z0!==z1){let s=1-t;const cos=x0*x1+y0*y1+z0*z1+w0*w1,dir=cos>=0?1:-1,sqrSin=1-cos*cos;// Skip the Slerp for tiny steps to avoid numeric problems:
if(sqrSin>Number.EPSILON){const sin=Math.sqrt(sqrSin),len=Math.atan2(sin,cos*dir);s=Math.sin(s*len)/sin;t=Math.sin(t*len)/sin;}const tDir=t*dir;x0=x0*s+x1*tDir;y0=y0*s+y1*tDir;z0=z0*s+z1*tDir;w0=w0*s+w1*tDir;// Normalize in case we just did a lerp:
if(s===1-t){const f=1/Math.sqrt(x0*x0+y0*y0+z0*z0+w0*w0);x0*=f;y0*=f;z0*=f;w0*=f;}}dst[dstOffset]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;}static multiplyQuaternionsFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1){const x0=src0[srcOffset0];const y0=src0[srcOffset0+1];const z0=src0[srcOffset0+2];const w0=src0[srcOffset0+3];const x1=src1[srcOffset1];const y1=src1[srcOffset1+1];const z1=src1[srcOffset1+2];const w1=src1[srcOffset1+3];dst[dstOffset]=x0*w1+w0*x1+y0*z1-z0*y1;dst[dstOffset+1]=y0*w1+w0*y1+z0*x1-x0*z1;dst[dstOffset+2]=z0*w1+w0*z1+x0*y1-y0*x1;dst[dstOffset+3]=w0*w1-x0*x1-y0*y1-z0*z1;return dst;}get x(){return this._x;}set x(value){this._x=value;this._onChangeCallback();}get y(){return this._y;}set y(value){this._y=value;this._onChangeCallback();}get z(){return this._z;}set z(value){this._z=value;this._onChangeCallback();}get w(){return this._w;}set w(value){this._w=value;this._onChangeCallback();}set(x,y,z,w){this._x=x;this._y=y;this._z=z;this._w=w;this._onChangeCallback();return this;}clone(){return new this.constructor(this._x,this._y,this._z,this._w);}copy(quaternion){this._x=quaternion.x;this._y=quaternion.y;this._z=quaternion.z;this._w=quaternion.w;this._onChangeCallback();return this;}setFromEuler(euler,update){if(!(euler&&euler.isEuler)){throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');}const x=euler._x,y=euler._y,z=euler._z,order=euler._order;// http://www.mathworks.com/matlabcentral/fileexchange/
// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
//	content/SpinCalc.m
const cos=Math.cos;const sin=Math.sin;const c1=cos(x/2);const c2=cos(y/2);const c3=cos(z/2);const s1=sin(x/2);const s2=sin(y/2);const s3=sin(z/2);switch(order){case'XYZ':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'YXZ':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;case'ZXY':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'ZYX':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;case'YZX':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'XZY':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;default:console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: '+order);}if(update!==false)this._onChangeCallback();return this;}setFromAxisAngle(axis,angle){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
// assumes axis is normalized
const halfAngle=angle/2,s=Math.sin(halfAngle);this._x=axis.x*s;this._y=axis.y*s;this._z=axis.z*s;this._w=Math.cos(halfAngle);this._onChangeCallback();return this;}setFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
const te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10],trace=m11+m22+m33;if(trace>0){const s=0.5/Math.sqrt(trace+1.0);this._w=0.25/s;this._x=(m32-m23)*s;this._y=(m13-m31)*s;this._z=(m21-m12)*s;}else if(m11>m22&&m11>m33){const s=2.0*Math.sqrt(1.0+m11-m22-m33);this._w=(m32-m23)/s;this._x=0.25*s;this._y=(m12+m21)/s;this._z=(m13+m31)/s;}else if(m22>m33){const s=2.0*Math.sqrt(1.0+m22-m11-m33);this._w=(m13-m31)/s;this._x=(m12+m21)/s;this._y=0.25*s;this._z=(m23+m32)/s;}else{const s=2.0*Math.sqrt(1.0+m33-m11-m22);this._w=(m21-m12)/s;this._x=(m13+m31)/s;this._y=(m23+m32)/s;this._z=0.25*s;}this._onChangeCallback();return this;}setFromUnitVectors(vFrom,vTo){// assumes direction vectors vFrom and vTo are normalized
let r=vFrom.dot(vTo)+1;if(r<Number.EPSILON){// vFrom and vTo point in opposite directions
r=0;if(Math.abs(vFrom.x)>Math.abs(vFrom.z)){this._x=-vFrom.y;this._y=vFrom.x;this._z=0;this._w=r;}else{this._x=0;this._y=-vFrom.z;this._z=vFrom.y;this._w=r;}}else{// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
this._x=vFrom.y*vTo.z-vFrom.z*vTo.y;this._y=vFrom.z*vTo.x-vFrom.x*vTo.z;this._z=vFrom.x*vTo.y-vFrom.y*vTo.x;this._w=r;}return this.normalize();}angleTo(q){return 2*Math.acos(Math.abs(clamp(this.dot(q),-1,1)));}rotateTowards(q,step){const angle=this.angleTo(q);if(angle===0)return this;const t=Math.min(1,step/angle);this.slerp(q,t);return this;}identity(){return this.set(0,0,0,1);}invert(){// quaternion is assumed to have unit length
return this.conjugate();}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this;}dot(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w;}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w;}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w);}normalize(){let l=this.length();if(l===0){this._x=0;this._y=0;this._z=0;this._w=1;}else{l=1/l;this._x=this._x*l;this._y=this._y*l;this._z=this._z*l;this._w=this._w*l;}this._onChangeCallback();return this;}multiply(q,p){if(p!==undefined){console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');return this.multiplyQuaternions(q,p);}return this.multiplyQuaternions(this,q);}premultiply(q){return this.multiplyQuaternions(q,this);}multiplyQuaternions(a,b){// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
const qax=a._x,qay=a._y,qaz=a._z,qaw=a._w;const qbx=b._x,qby=b._y,qbz=b._z,qbw=b._w;this._x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby;this._y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz;this._z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx;this._w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz;this._onChangeCallback();return this;}slerp(qb,t){if(t===0)return this;if(t===1)return this.copy(qb);const x=this._x,y=this._y,z=this._z,w=this._w;// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
let cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;if(cosHalfTheta<0){this._w=-qb._w;this._x=-qb._x;this._y=-qb._y;this._z=-qb._z;cosHalfTheta=-cosHalfTheta;}else{this.copy(qb);}if(cosHalfTheta>=1.0){this._w=w;this._x=x;this._y=y;this._z=z;return this;}const sqrSinHalfTheta=1.0-cosHalfTheta*cosHalfTheta;if(sqrSinHalfTheta<=Number.EPSILON){const s=1-t;this._w=s*w+t*this._w;this._x=s*x+t*this._x;this._y=s*y+t*this._y;this._z=s*z+t*this._z;this.normalize();this._onChangeCallback();return this;}const sinHalfTheta=Math.sqrt(sqrSinHalfTheta);const halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta);const ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta,ratioB=Math.sin(t*halfTheta)/sinHalfTheta;this._w=w*ratioA+this._w*ratioB;this._x=x*ratioA+this._x*ratioB;this._y=y*ratioA+this._y*ratioB;this._z=z*ratioA+this._z*ratioB;this._onChangeCallback();return this;}slerpQuaternions(qa,qb,t){return this.copy(qa).slerp(qb,t);}random(){// Derived from http://planning.cs.uiuc.edu/node198.html
// Note, this source uses w, x, y, z ordering,
// so we swap the order below.
const u1=Math.random();const sqrt1u1=Math.sqrt(1-u1);const sqrtu1=Math.sqrt(u1);const u2=2*Math.PI*Math.random();const u3=2*Math.PI*Math.random();return this.set(sqrt1u1*Math.cos(u2),sqrtu1*Math.sin(u3),sqrtu1*Math.cos(u3),sqrt1u1*Math.sin(u2));}equals(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w;}fromArray(array,offset=0){this._x=array[offset];this._y=array[offset+1];this._z=array[offset+2];this._w=array[offset+3];this._onChangeCallback();return this;}toArray(array=[],offset=0){array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._w;return array;}fromBufferAttribute(attribute,index){this._x=attribute.getX(index);this._y=attribute.getY(index);this._z=attribute.getZ(index);this._w=attribute.getW(index);return this;}_onChange(callback){this._onChangeCallback=callback;return this;}_onChangeCallback(){}}exports.Quaternion=Quaternion;Quaternion.prototype.isQuaternion=true;class Vector3{constructor(x=0,y=0,z=0){this.x=x;this.y=y;this.z=z;}set(x,y,z){if(z===undefined)z=this.z;// sprite.scale.set(x,y)
this.x=x;this.y=y;this.z=z;return this;}setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;return this;}setX(x){this.x=x;return this;}setY(y){this.y=y;return this;}setZ(z){this.z=z;return this;}setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw new Error('index is out of range: '+index);}return this;}getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error('index is out of range: '+index);}}clone(){return new this.constructor(this.x,this.y,this.z);}copy(v){this.x=v.x;this.y=v.y;this.z=v.z;return this;}add(v,w){if(w!==undefined){console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;return this;}addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this;}addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this;}addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;return this;}sub(v,w){if(w!==undefined){console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;return this;}subScalar(s){this.x-=s;this.y-=s;this.z-=s;return this;}subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this;}multiply(v,w){if(w!==undefined){console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');return this.multiplyVectors(v,w);}this.x*=v.x;this.y*=v.y;this.z*=v.z;return this;}multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;return this;}multiplyVectors(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this;}applyEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');}return this.applyQuaternion(_quaternion$4.setFromEuler(euler));}applyAxisAngle(axis,angle){return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis,angle));}applyMatrix3(m){const x=this.x,y=this.y,z=this.z;const e=m.elements;this.x=e[0]*x+e[3]*y+e[6]*z;this.y=e[1]*x+e[4]*y+e[7]*z;this.z=e[2]*x+e[5]*y+e[8]*z;return this;}applyNormalMatrix(m){return this.applyMatrix3(m).normalize();}applyMatrix4(m){const x=this.x,y=this.y,z=this.z;const e=m.elements;const w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w;this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w;this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w;return this;}applyQuaternion(q){const x=this.x,y=this.y,z=this.z;const qx=q.x,qy=q.y,qz=q.z,qw=q.w;// calculate quat * vector
const ix=qw*x+qy*z-qz*y;const iy=qw*y+qz*x-qx*z;const iz=qw*z+qx*y-qy*x;const iw=-qx*x-qy*y-qz*z;// calculate result * inverse quat
this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy;this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz;this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx;return this;}project(camera){return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);}unproject(camera){return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);}transformDirection(m){// input: THREE.Matrix4 affine matrix
// vector interpreted as a direction
const x=this.x,y=this.y,z=this.z;const e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z;this.y=e[1]*x+e[5]*y+e[9]*z;this.z=e[2]*x+e[6]*y+e[10]*z;return this.normalize();}divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this;}divideScalar(scalar){return this.multiplyScalar(1/scalar);}min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);return this;}max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);return this;}clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));return this;}clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));this.z=Math.max(minVal,Math.min(maxVal,this.z));return this;}clampLength(min,max){const length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this;}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this;}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this;}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);return this;}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this;}dot(v){return this.x*v.x+this.y*v.y+this.z*v.z;}// TODO lengthSquared?
lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z;}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z);}normalize(){return this.divideScalar(this.length()||1);}setLength(length){return this.normalize().multiplyScalar(length);}lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;return this;}lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;this.z=v1.z+(v2.z-v1.z)*alpha;return this;}cross(v,w){if(w!==undefined){console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');return this.crossVectors(v,w);}return this.crossVectors(this,v);}crossVectors(a,b){const ax=a.x,ay=a.y,az=a.z;const bx=b.x,by=b.y,bz=b.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this;}projectOnVector(v){const denominator=v.lengthSq();if(denominator===0)return this.set(0,0,0);const scalar=v.dot(this)/denominator;return this.copy(v).multiplyScalar(scalar);}projectOnPlane(planeNormal){_vector$c.copy(this).projectOnVector(planeNormal);return this.sub(_vector$c);}reflect(normal){// reflect incident vector off plane orthogonal to normal
// normal is assumed to have unit length
return this.sub(_vector$c.copy(normal).multiplyScalar(2*this.dot(normal)));}angleTo(v){const denominator=Math.sqrt(this.lengthSq()*v.lengthSq());if(denominator===0)return Math.PI/2;const theta=this.dot(v)/denominator;// clamp, to handle numerical problems
return Math.acos(clamp(theta,-1,1));}distanceTo(v){return Math.sqrt(this.distanceToSquared(v));}distanceToSquared(v){const dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz;}manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)+Math.abs(this.z-v.z);}setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta);}setFromSphericalCoords(radius,phi,theta){const sinPhiRadius=Math.sin(phi)*radius;this.x=sinPhiRadius*Math.sin(theta);this.y=Math.cos(phi)*radius;this.z=sinPhiRadius*Math.cos(theta);return this;}setFromCylindrical(c){return this.setFromCylindricalCoords(c.radius,c.theta,c.y);}setFromCylindricalCoords(radius,theta,y){this.x=radius*Math.sin(theta);this.y=y;this.z=radius*Math.cos(theta);return this;}setFromMatrixPosition(m){const e=m.elements;this.x=e[12];this.y=e[13];this.z=e[14];return this;}setFromMatrixScale(m){const sx=this.setFromMatrixColumn(m,0).length();const sy=this.setFromMatrixColumn(m,1).length();const sz=this.setFromMatrixColumn(m,2).length();this.x=sx;this.y=sy;this.z=sz;return this;}setFromMatrixColumn(m,index){return this.fromArray(m.elements,index*4);}setFromMatrix3Column(m,index){return this.fromArray(m.elements,index*3);}setFromEuler(e){this.x=e._x;this.y=e._y;this.z=e._z;return this;}equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z;}fromArray(array,offset=0){this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];return this;}toArray(array=[],offset=0){array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;return array;}fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);return this;}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this;}randomDirection(){// Derived from https://mathworld.wolfram.com/SpherePointPicking.html
const u=(Math.random()-0.5)*2;const t=Math.random()*Math.PI*2;const f=Math.sqrt(1-u**2);this.x=f*Math.cos(t);this.y=f*Math.sin(t);this.z=u;return this;}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;}}exports.Vector3=Vector3;Vector3.prototype.isVector3=true;const _vector$c=/*@__PURE__*/new Vector3();const _quaternion$4=/*@__PURE__*/new Quaternion();class Box3{constructor(min=new Vector3(+Infinity,+Infinity,+Infinity),max=new Vector3(-Infinity,-Infinity,-Infinity)){this.min=min;this.max=max;}set(min,max){this.min.copy(min);this.max.copy(max);return this;}setFromArray(array){let minX=+Infinity;let minY=+Infinity;let minZ=+Infinity;let maxX=-Infinity;let maxY=-Infinity;let maxZ=-Infinity;for(let i=0,l=array.length;i<l;i+=3){const x=array[i];const y=array[i+1];const z=array[i+2];if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;}setFromBufferAttribute(attribute){let minX=+Infinity;let minY=+Infinity;let minZ=+Infinity;let maxX=-Infinity;let maxY=-Infinity;let maxZ=-Infinity;for(let i=0,l=attribute.count;i<l;i++){const x=attribute.getX(i);const y=attribute.getY(i);const z=attribute.getZ(i);if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;}setFromPoints(points){this.makeEmpty();for(let i=0,il=points.length;i<il;i++){this.expandByPoint(points[i]);}return this;}setFromCenterAndSize(center,size){const halfSize=_vector$b.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;}setFromObject(object,precise=false){this.makeEmpty();return this.expandByObject(object,precise);}clone(){return new this.constructor().copy(this);}copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;}makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this;}isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z;}getCenter(target){return this.isEmpty()?target.set(0,0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);}getSize(target){return this.isEmpty()?target.set(0,0,0):target.subVectors(this.max,this.min);}expandByPoint(point){this.min.min(point);this.max.max(point);return this;}expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;}expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;}expandByObject(object,precise=false){// Computes the world-axis-aligned bounding box of an object (including its children),
// accounting for both the object's, and children's, world transforms
object.updateWorldMatrix(false,false);const geometry=object.geometry;if(geometry!==undefined){if(precise&&geometry.attributes!=undefined&&geometry.attributes.position!==undefined){const position=geometry.attributes.position;for(let i=0,l=position.count;i<l;i++){_vector$b.fromBufferAttribute(position,i).applyMatrix4(object.matrixWorld);this.expandByPoint(_vector$b);}}else{if(geometry.boundingBox===null){geometry.computeBoundingBox();}_box$3.copy(geometry.boundingBox);_box$3.applyMatrix4(object.matrixWorld);this.union(_box$3);}}const children=object.children;for(let i=0,l=children.length;i<l;i++){this.expandByObject(children[i],precise);}return this;}containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y||point.z<this.min.z||point.z>this.max.z?false:true;}containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y&&this.min.z<=box.min.z&&box.max.z<=this.max.z;}getParameter(point,target){// This can potentially have a divide by zero if the box
// has a size dimension of 0.
return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y),(point.z-this.min.z)/(this.max.z-this.min.z));}intersectsBox(box){// using 6 splitting planes to rule out intersections.
return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y||box.max.z<this.min.z||box.min.z>this.max.z?false:true;}intersectsSphere(sphere){// Find the point on the AABB closest to the sphere center.
this.clampPoint(sphere.center,_vector$b);// If that point is inside the sphere, the AABB and sphere intersect.
return _vector$b.distanceToSquared(sphere.center)<=sphere.radius*sphere.radius;}intersectsPlane(plane){// We compute the minimum and maximum dot product values. If those values
// are on the same side (back or front) of the plane, then there is no intersection.
let min,max;if(plane.normal.x>0){min=plane.normal.x*this.min.x;max=plane.normal.x*this.max.x;}else{min=plane.normal.x*this.max.x;max=plane.normal.x*this.min.x;}if(plane.normal.y>0){min+=plane.normal.y*this.min.y;max+=plane.normal.y*this.max.y;}else{min+=plane.normal.y*this.max.y;max+=plane.normal.y*this.min.y;}if(plane.normal.z>0){min+=plane.normal.z*this.min.z;max+=plane.normal.z*this.max.z;}else{min+=plane.normal.z*this.max.z;max+=plane.normal.z*this.min.z;}return min<=-plane.constant&&max>=-plane.constant;}intersectsTriangle(triangle){if(this.isEmpty()){return false;}// compute box center and extents
this.getCenter(_center);_extents.subVectors(this.max,_center);// translate triangle to aabb origin
_v0$2.subVectors(triangle.a,_center);_v1$7.subVectors(triangle.b,_center);_v2$3.subVectors(triangle.c,_center);// compute edge vectors for triangle
_f0.subVectors(_v1$7,_v0$2);_f1.subVectors(_v2$3,_v1$7);_f2.subVectors(_v0$2,_v2$3);// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
let axes=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(axes,_v0$2,_v1$7,_v2$3,_extents)){return false;}// test 3 face normals from the aabb
axes=[1,0,0,0,1,0,0,0,1];if(!satForAxes(axes,_v0$2,_v1$7,_v2$3,_extents)){return false;}// finally testing the face normal of the triangle
// use already existing triangle edge vectors here
_triangleNormal.crossVectors(_f0,_f1);axes=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(axes,_v0$2,_v1$7,_v2$3,_extents);}clampPoint(point,target){return target.copy(point).clamp(this.min,this.max);}distanceToPoint(point){const clampedPoint=_vector$b.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();}getBoundingSphere(target){this.getCenter(target.center);target.radius=this.getSize(_vector$b).length()*0.5;return target;}intersect(box){this.min.max(box.min);this.max.min(box.max);// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
if(this.isEmpty())this.makeEmpty();return this;}union(box){this.min.min(box.min);this.max.max(box.max);return this;}applyMatrix4(matrix){// transform of empty box is an empty box.
if(this.isEmpty())return this;// NOTE: I am using a binary pattern to specify all 2^3 combinations below
_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix);// 000
_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix);// 001
_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(matrix);// 010
_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix);// 011
_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix);// 100
_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix);// 101
_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix);// 110
_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix);// 111
this.setFromPoints(_points);return this;}translate(offset){this.min.add(offset);this.max.add(offset);return this;}equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}}exports.Box3=Box3;Box3.prototype.isBox3=true;const _points=[/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3()];const _vector$b=/*@__PURE__*/new Vector3();const _box$3=/*@__PURE__*/new Box3();// triangle centered vertices
const _v0$2=/*@__PURE__*/new Vector3();const _v1$7=/*@__PURE__*/new Vector3();const _v2$3=/*@__PURE__*/new Vector3();// triangle edge vectors
const _f0=/*@__PURE__*/new Vector3();const _f1=/*@__PURE__*/new Vector3();const _f2=/*@__PURE__*/new Vector3();const _center=/*@__PURE__*/new Vector3();const _extents=/*@__PURE__*/new Vector3();const _triangleNormal=/*@__PURE__*/new Vector3();const _testAxis=/*@__PURE__*/new Vector3();function satForAxes(axes,v0,v1,v2,extents){for(let i=0,j=axes.length-3;i<=j;i+=3){_testAxis.fromArray(axes,i);// project the aabb onto the seperating axis
const r=extents.x*Math.abs(_testAxis.x)+extents.y*Math.abs(_testAxis.y)+extents.z*Math.abs(_testAxis.z);// project all 3 vertices of the triangle onto the seperating axis
const p0=v0.dot(_testAxis);const p1=v1.dot(_testAxis);const p2=v2.dot(_testAxis);// actual test, basically see if either of the most extreme of the triangle points intersects r
if(Math.max(-Math.max(p0,p1,p2),Math.min(p0,p1,p2))>r){// points of the projected triangle are outside the projected half-length of the aabb
// the axis is seperating and we can exit
return false;}}return true;}const _box$2=/*@__PURE__*/new Box3();const _v1$6=/*@__PURE__*/new Vector3();const _toFarthestPoint=/*@__PURE__*/new Vector3();const _toPoint=/*@__PURE__*/new Vector3();class Sphere{constructor(center=new Vector3(),radius=-1){this.center=center;this.radius=radius;}set(center,radius){this.center.copy(center);this.radius=radius;return this;}setFromPoints(points,optionalCenter){const center=this.center;if(optionalCenter!==undefined){center.copy(optionalCenter);}else{_box$2.setFromPoints(points).getCenter(center);}let maxRadiusSq=0;for(let i=0,il=points.length;i<il;i++){maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(points[i]));}this.radius=Math.sqrt(maxRadiusSq);return this;}copy(sphere){this.center.copy(sphere.center);this.radius=sphere.radius;return this;}isEmpty(){return this.radius<0;}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this;}containsPoint(point){return point.distanceToSquared(this.center)<=this.radius*this.radius;}distanceToPoint(point){return point.distanceTo(this.center)-this.radius;}intersectsSphere(sphere){const radiusSum=this.radius+sphere.radius;return sphere.center.distanceToSquared(this.center)<=radiusSum*radiusSum;}intersectsBox(box){return box.intersectsSphere(this);}intersectsPlane(plane){return Math.abs(plane.distanceToPoint(this.center))<=this.radius;}clampPoint(point,target){const deltaLengthSq=this.center.distanceToSquared(point);target.copy(point);if(deltaLengthSq>this.radius*this.radius){target.sub(this.center).normalize();target.multiplyScalar(this.radius).add(this.center);}return target;}getBoundingBox(target){if(this.isEmpty()){// Empty sphere produces empty bounding box
target.makeEmpty();return target;}target.set(this.center,this.center);target.expandByScalar(this.radius);return target;}applyMatrix4(matrix){this.center.applyMatrix4(matrix);this.radius=this.radius*matrix.getMaxScaleOnAxis();return this;}translate(offset){this.center.add(offset);return this;}expandByPoint(point){// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
_toPoint.subVectors(point,this.center);const lengthSq=_toPoint.lengthSq();if(lengthSq>this.radius*this.radius){const length=Math.sqrt(lengthSq);const missingRadiusHalf=(length-this.radius)*0.5;// Nudge this sphere towards the target point. Add half the missing distance to radius,
// and the other half to position. This gives a tighter enclosure, instead of if
// the whole missing distance were just added to radius.
this.center.add(_toPoint.multiplyScalar(missingRadiusHalf/length));this.radius+=missingRadiusHalf;}return this;}union(sphere){// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
// To enclose another sphere into this sphere, we only need to enclose two points:
// 1) Enclose the farthest point on the other sphere into this sphere.
// 2) Enclose the opposite point of the farthest point into this sphere.
if(this.center.equals(sphere.center)===true){_toFarthestPoint.set(0,0,1).multiplyScalar(sphere.radius);}else{_toFarthestPoint.subVectors(sphere.center,this.center).normalize().multiplyScalar(sphere.radius);}this.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));this.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));return this;}equals(sphere){return sphere.center.equals(this.center)&&sphere.radius===this.radius;}clone(){return new this.constructor().copy(this);}}exports.Sphere=Sphere;const _vector$a=/*@__PURE__*/new Vector3();const _segCenter=/*@__PURE__*/new Vector3();const _segDir=/*@__PURE__*/new Vector3();const _diff=/*@__PURE__*/new Vector3();const _edge1=/*@__PURE__*/new Vector3();const _edge2=/*@__PURE__*/new Vector3();const _normal$1=/*@__PURE__*/new Vector3();class Ray{constructor(origin=new Vector3(),direction=new Vector3(0,0,-1)){this.origin=origin;this.direction=direction;}set(origin,direction){this.origin.copy(origin);this.direction.copy(direction);return this;}copy(ray){this.origin.copy(ray.origin);this.direction.copy(ray.direction);return this;}at(t,target){return target.copy(this.direction).multiplyScalar(t).add(this.origin);}lookAt(v){this.direction.copy(v).sub(this.origin).normalize();return this;}recast(t){this.origin.copy(this.at(t,_vector$a));return this;}closestPointToPoint(point,target){target.subVectors(point,this.origin);const directionDistance=target.dot(this.direction);if(directionDistance<0){return target.copy(this.origin);}return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);}distanceToPoint(point){return Math.sqrt(this.distanceSqToPoint(point));}distanceSqToPoint(point){const directionDistance=_vector$a.subVectors(point,this.origin).dot(this.direction);// point behind the ray
if(directionDistance<0){return this.origin.distanceToSquared(point);}_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);return _vector$a.distanceToSquared(point);}distanceSqToSegment(v0,v1,optionalPointOnRay,optionalPointOnSegment){// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
// It returns the min distance between the ray and the segment
// defined by v0 and v1
// It can also set two optional targets :
// - The closest point on the ray
// - The closest point on the segment
_segCenter.copy(v0).add(v1).multiplyScalar(0.5);_segDir.copy(v1).sub(v0).normalize();_diff.copy(this.origin).sub(_segCenter);const segExtent=v0.distanceTo(v1)*0.5;const a01=-this.direction.dot(_segDir);const b0=_diff.dot(this.direction);const b1=-_diff.dot(_segDir);const c=_diff.lengthSq();const det=Math.abs(1-a01*a01);let s0,s1,sqrDist,extDet;if(det>0){// The ray and segment are not parallel.
s0=a01*b1-b0;s1=a01*b0-b1;extDet=segExtent*det;if(s0>=0){if(s1>=-extDet){if(s1<=extDet){// region 0
// Minimum at interior points of ray and segment.
const invDet=1/det;s0*=invDet;s1*=invDet;sqrDist=s0*(s0+a01*s1+2*b0)+s1*(a01*s0+s1+2*b1)+c;}else{// region 1
s1=segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else{// region 5
s1=-segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else{if(s1<=-extDet){// region 4
s0=Math.max(0,-(-a01*segExtent+b0));s1=s0>0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}else if(s1<=extDet){// region 3
s0=0;s1=Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=s1*(s1+2*b1)+c;}else{// region 2
s0=Math.max(0,-(a01*segExtent+b0));s1=s0>0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}}else{// Ray and segment are parallel.
s1=a01>0?-segExtent:segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}if(optionalPointOnRay){optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);}if(optionalPointOnSegment){optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);}return sqrDist;}intersectSphere(sphere,target){_vector$a.subVectors(sphere.center,this.origin);const tca=_vector$a.dot(this.direction);const d2=_vector$a.dot(_vector$a)-tca*tca;const radius2=sphere.radius*sphere.radius;if(d2>radius2)return null;const thc=Math.sqrt(radius2-d2);// t0 = first intersect point - entrance on front of sphere
const t0=tca-thc;// t1 = second intersect point - exit point on back of sphere
const t1=tca+thc;// test to see if both t0 and t1 are behind the ray - if so, return null
if(t0<0&&t1<0)return null;// test to see if t0 is behind the ray:
// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
// in order to always return an intersect point that is in front of the ray.
if(t0<0)return this.at(t1,target);// else t0 is in front of the ray, so return the first collision point scaled by t0
return this.at(t0,target);}intersectsSphere(sphere){return this.distanceSqToPoint(sphere.center)<=sphere.radius*sphere.radius;}distanceToPlane(plane){const denominator=plane.normal.dot(this.direction);if(denominator===0){// line is coplanar, return origin
if(plane.distanceToPoint(this.origin)===0){return 0;}// Null is preferable to undefined since undefined means.... it is undefined
return null;}const t=-(this.origin.dot(plane.normal)+plane.constant)/denominator;// Return if the ray never intersects the plane
return t>=0?t:null;}intersectPlane(plane,target){const t=this.distanceToPlane(plane);if(t===null){return null;}return this.at(t,target);}intersectsPlane(plane){// check if the ray lies on the plane first
const distToPoint=plane.distanceToPoint(this.origin);if(distToPoint===0){return true;}const denominator=plane.normal.dot(this.direction);if(denominator*distToPoint<0){return true;}// ray origin is behind the plane (and is pointing behind it)
return false;}intersectBox(box,target){let tmin,tmax,tymin,tymax,tzmin,tzmax;const invdirx=1/this.direction.x,invdiry=1/this.direction.y,invdirz=1/this.direction.z;const origin=this.origin;if(invdirx>=0){tmin=(box.min.x-origin.x)*invdirx;tmax=(box.max.x-origin.x)*invdirx;}else{tmin=(box.max.x-origin.x)*invdirx;tmax=(box.min.x-origin.x)*invdirx;}if(invdiry>=0){tymin=(box.min.y-origin.y)*invdiry;tymax=(box.max.y-origin.y)*invdiry;}else{tymin=(box.max.y-origin.y)*invdiry;tymax=(box.min.y-origin.y)*invdiry;}if(tmin>tymax||tymin>tmax)return null;// These lines also handle the case where tmin or tmax is NaN
// (result of 0 * Infinity). x !== x returns true if x is NaN
if(tymin>tmin||tmin!==tmin)tmin=tymin;if(tymax<tmax||tmax!==tmax)tmax=tymax;if(invdirz>=0){tzmin=(box.min.z-origin.z)*invdirz;tzmax=(box.max.z-origin.z)*invdirz;}else{tzmin=(box.max.z-origin.z)*invdirz;tzmax=(box.min.z-origin.z)*invdirz;}if(tmin>tzmax||tzmin>tmax)return null;if(tzmin>tmin||tmin!==tmin)tmin=tzmin;if(tzmax<tmax||tmax!==tmax)tmax=tzmax;//return point closest to the ray (positive side)
if(tmax<0)return null;return this.at(tmin>=0?tmin:tmax,target);}intersectsBox(box){return this.intersectBox(box,_vector$a)!==null;}intersectTriangle(a,b,c,backfaceCulling,target){// Compute the offset origin, edges, and normal.
// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
_edge1.subVectors(b,a);_edge2.subVectors(c,a);_normal$1.crossVectors(_edge1,_edge2);// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
let DdN=this.direction.dot(_normal$1);let sign;if(DdN>0){if(backfaceCulling)return null;sign=1;}else if(DdN<0){sign=-1;DdN=-DdN;}else{return null;}_diff.subVectors(this.origin,a);const DdQxE2=sign*this.direction.dot(_edge2.crossVectors(_diff,_edge2));// b1 < 0, no intersection
if(DdQxE2<0){return null;}const DdE1xQ=sign*this.direction.dot(_edge1.cross(_diff));// b2 < 0, no intersection
if(DdE1xQ<0){return null;}// b1+b2 > 1, no intersection
if(DdQxE2+DdE1xQ>DdN){return null;}// Line intersects triangle, check if ray does.
const QdN=-sign*_diff.dot(_normal$1);// t < 0, no intersection
if(QdN<0){return null;}// Ray intersects triangle.
return this.at(QdN/DdN,target);}applyMatrix4(matrix4){this.origin.applyMatrix4(matrix4);this.direction.transformDirection(matrix4);return this;}equals(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction);}clone(){return new this.constructor().copy(this);}}exports.Ray=Ray;class Matrix4{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');}}set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){const te=this.elements;te[0]=n11;te[4]=n12;te[8]=n13;te[12]=n14;te[1]=n21;te[5]=n22;te[9]=n23;te[13]=n24;te[2]=n31;te[6]=n32;te[10]=n33;te[14]=n34;te[3]=n41;te[7]=n42;te[11]=n43;te[15]=n44;return this;}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this;}clone(){return new Matrix4().fromArray(this.elements);}copy(m){const te=this.elements;const me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];te[9]=me[9];te[10]=me[10];te[11]=me[11];te[12]=me[12];te[13]=me[13];te[14]=me[14];te[15]=me[15];return this;}copyPosition(m){const te=this.elements,me=m.elements;te[12]=me[12];te[13]=me[13];te[14]=me[14];return this;}setFromMatrix3(m){const me=m.elements;this.set(me[0],me[3],me[6],0,me[1],me[4],me[7],0,me[2],me[5],me[8],0,0,0,0,1);return this;}extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrixColumn(this,0);yAxis.setFromMatrixColumn(this,1);zAxis.setFromMatrixColumn(this,2);return this;}makeBasis(xAxis,yAxis,zAxis){this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1);return this;}extractRotation(m){// this method does not support reflection matrices
const te=this.elements;const me=m.elements;const scaleX=1/_v1$5.setFromMatrixColumn(m,0).length();const scaleY=1/_v1$5.setFromMatrixColumn(m,1).length();const scaleZ=1/_v1$5.setFromMatrixColumn(m,2).length();te[0]=me[0]*scaleX;te[1]=me[1]*scaleX;te[2]=me[2]*scaleX;te[3]=0;te[4]=me[4]*scaleY;te[5]=me[5]*scaleY;te[6]=me[6]*scaleY;te[7]=0;te[8]=me[8]*scaleZ;te[9]=me[9]*scaleZ;te[10]=me[10]*scaleZ;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;}makeRotationFromEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');}const te=this.elements;const x=euler.x,y=euler.y,z=euler.z;const a=Math.cos(x),b=Math.sin(x);const c=Math.cos(y),d=Math.sin(y);const e=Math.cos(z),f=Math.sin(z);if(euler.order==='XYZ'){const ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=-c*f;te[8]=d;te[1]=af+be*d;te[5]=ae-bf*d;te[9]=-b*c;te[2]=bf-ae*d;te[6]=be+af*d;te[10]=a*c;}else if(euler.order==='YXZ'){const ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b;te[4]=de*b-cf;te[8]=a*d;te[1]=a*f;te[5]=a*e;te[9]=-b;te[2]=cf*b-de;te[6]=df+ce*b;te[10]=a*c;}else if(euler.order==='ZXY'){const ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce-df*b;te[4]=-a*f;te[8]=de+cf*b;te[1]=cf+de*b;te[5]=a*e;te[9]=df-ce*b;te[2]=-a*d;te[6]=b;te[10]=a*c;}else if(euler.order==='ZYX'){const ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=be*d-af;te[8]=ae*d+bf;te[1]=c*f;te[5]=bf*d+ae;te[9]=af*d-be;te[2]=-d;te[6]=b*c;te[10]=a*c;}else if(euler.order==='YZX'){const ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=bd-ac*f;te[8]=bc*f+ad;te[1]=f;te[5]=a*e;te[9]=-b*e;te[2]=-d*e;te[6]=ad*f+bc;te[10]=ac-bd*f;}else if(euler.order==='XZY'){const ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=-f;te[8]=d*e;te[1]=ac*f+bd;te[5]=a*e;te[9]=ad*f-bc;te[2]=bc*f-ad;te[6]=b*e;te[10]=bd*f+ac;}// bottom row
te[3]=0;te[7]=0;te[11]=0;// last column
te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;}makeRotationFromQuaternion(q){return this.compose(_zero,q,_one);}lookAt(eye,target,up){const te=this.elements;_z.subVectors(eye,target);if(_z.lengthSq()===0){// eye and target are in the same position
_z.z=1;}_z.normalize();_x.crossVectors(up,_z);if(_x.lengthSq()===0){// up and z are parallel
if(Math.abs(up.z)===1){_z.x+=0.0001;}else{_z.z+=0.0001;}_z.normalize();_x.crossVectors(up,_z);}_x.normalize();_y.crossVectors(_z,_x);te[0]=_x.x;te[4]=_y.x;te[8]=_z.x;te[1]=_x.y;te[5]=_y.y;te[9]=_z.y;te[2]=_x.z;te[6]=_y.z;te[10]=_z.z;return this;}multiply(m,n){if(n!==undefined){console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');return this.multiplyMatrices(m,n);}return this.multiplyMatrices(this,m);}premultiply(m){return this.multiplyMatrices(m,this);}multiplyMatrices(a,b){const ae=a.elements;const be=b.elements;const te=this.elements;const a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12];const a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13];const a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14];const a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15];const b11=be[0],b12=be[4],b13=be[8],b14=be[12];const b21=be[1],b22=be[5],b23=be[9],b24=be[13];const b31=be[2],b32=be[6],b33=be[10],b34=be[14];const b41=be[3],b42=be[7],b43=be[11],b44=be[15];te[0]=a11*b11+a12*b21+a13*b31+a14*b41;te[4]=a11*b12+a12*b22+a13*b32+a14*b42;te[8]=a11*b13+a12*b23+a13*b33+a14*b43;te[12]=a11*b14+a12*b24+a13*b34+a14*b44;te[1]=a21*b11+a22*b21+a23*b31+a24*b41;te[5]=a21*b12+a22*b22+a23*b32+a24*b42;te[9]=a21*b13+a22*b23+a23*b33+a24*b43;te[13]=a21*b14+a22*b24+a23*b34+a24*b44;te[2]=a31*b11+a32*b21+a33*b31+a34*b41;te[6]=a31*b12+a32*b22+a33*b32+a34*b42;te[10]=a31*b13+a32*b23+a33*b33+a34*b43;te[14]=a31*b14+a32*b24+a33*b34+a34*b44;te[3]=a41*b11+a42*b21+a43*b31+a44*b41;te[7]=a41*b12+a42*b22+a43*b32+a44*b42;te[11]=a41*b13+a42*b23+a43*b33+a44*b43;te[15]=a41*b14+a42*b24+a43*b34+a44*b44;return this;}multiplyScalar(s){const te=this.elements;te[0]*=s;te[4]*=s;te[8]*=s;te[12]*=s;te[1]*=s;te[5]*=s;te[9]*=s;te[13]*=s;te[2]*=s;te[6]*=s;te[10]*=s;te[14]*=s;te[3]*=s;te[7]*=s;te[11]*=s;te[15]*=s;return this;}determinant(){const te=this.elements;const n11=te[0],n12=te[4],n13=te[8],n14=te[12];const n21=te[1],n22=te[5],n23=te[9],n24=te[13];const n31=te[2],n32=te[6],n33=te[10],n34=te[14];const n41=te[3],n42=te[7],n43=te[11],n44=te[15];//TODO: make this more efficient
//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
return n41*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34)+n42*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+n43*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+n44*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31);}transpose(){const te=this.elements;let tmp;tmp=te[1];te[1]=te[4];te[4]=tmp;tmp=te[2];te[2]=te[8];te[8]=tmp;tmp=te[6];te[6]=te[9];te[9]=tmp;tmp=te[3];te[3]=te[12];te[12]=tmp;tmp=te[7];te[7]=te[13];te[13]=tmp;tmp=te[11];te[11]=te[14];te[14]=tmp;return this;}setPosition(x,y,z){const te=this.elements;if(x.isVector3){te[12]=x.x;te[13]=x.y;te[14]=x.z;}else{te[12]=x;te[13]=y;te[14]=z;}return this;}invert(){// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
const te=this.elements,n11=te[0],n21=te[1],n31=te[2],n41=te[3],n12=te[4],n22=te[5],n32=te[6],n42=te[7],n13=te[8],n23=te[9],n33=te[10],n43=te[11],n14=te[12],n24=te[13],n34=te[14],n44=te[15],t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*n44+n22*n33*n44,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*n44-n12*n33*n44,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*n44+n12*n23*n44,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34;const det=n11*t11+n21*t12+n31*t13+n41*t14;if(det===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const detInv=1/det;te[0]=t11*detInv;te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*n44-n21*n33*n44)*detInv;te[2]=(n22*n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*n44+n21*n32*n44)*detInv;te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*detInv;te[4]=t12*detInv;te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-n11*n34*n43-n13*n31*n44+n11*n33*n44)*detInv;te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+n11*n34*n42+n12*n31*n44-n11*n32*n44)*detInv;te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-n11*n33*n42-n12*n31*n43+n11*n32*n43)*detInv;te[8]=t13*detInv;te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+n11*n24*n43+n13*n21*n44-n11*n23*n44)*detInv;te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-n11*n24*n42-n12*n21*n44+n11*n22*n44)*detInv;te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+n11*n23*n42+n12*n21*n43-n11*n22*n43)*detInv;te[12]=t14*detInv;te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-n11*n24*n33-n13*n21*n34+n11*n23*n34)*detInv;te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+n11*n24*n32+n12*n21*n34-n11*n22*n34)*detInv;te[15]=(n12*n23*n31-n13*n22*n31+n13*n21*n32-n11*n23*n32-n12*n21*n33+n11*n22*n33)*detInv;return this;}scale(v){const te=this.elements;const x=v.x,y=v.y,z=v.z;te[0]*=x;te[4]*=y;te[8]*=z;te[1]*=x;te[5]*=y;te[9]*=z;te[2]*=x;te[6]*=y;te[10]*=z;te[3]*=x;te[7]*=y;te[11]*=z;return this;}getMaxScaleOnAxis(){const te=this.elements;const scaleXSq=te[0]*te[0]+te[1]*te[1]+te[2]*te[2];const scaleYSq=te[4]*te[4]+te[5]*te[5]+te[6]*te[6];const scaleZSq=te[8]*te[8]+te[9]*te[9]+te[10]*te[10];return Math.sqrt(Math.max(scaleXSq,scaleYSq,scaleZSq));}makeTranslation(x,y,z){this.set(1,0,0,x,0,1,0,y,0,0,1,z,0,0,0,1);return this;}makeRotationX(theta){const c=Math.cos(theta),s=Math.sin(theta);this.set(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1);return this;}makeRotationY(theta){const c=Math.cos(theta),s=Math.sin(theta);this.set(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1);return this;}makeRotationZ(theta){const c=Math.cos(theta),s=Math.sin(theta);this.set(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1);return this;}makeRotationAxis(axis,angle){// Based on http://www.gamedev.net/reference/articles/article1199.asp
const c=Math.cos(angle);const s=Math.sin(angle);const t=1-c;const x=axis.x,y=axis.y,z=axis.z;const tx=t*x,ty=t*y;this.set(tx*x+c,tx*y-s*z,tx*z+s*y,0,tx*y+s*z,ty*y+c,ty*z-s*x,0,tx*z-s*y,ty*z+s*x,t*z*z+c,0,0,0,0,1);return this;}makeScale(x,y,z){this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1);return this;}makeShear(xy,xz,yx,yz,zx,zy){this.set(1,yx,zx,0,xy,1,zy,0,xz,yz,1,0,0,0,0,1);return this;}compose(position,quaternion,scale){const te=this.elements;const x=quaternion._x,y=quaternion._y,z=quaternion._z,w=quaternion._w;const x2=x+x,y2=y+y,z2=z+z;const xx=x*x2,xy=x*y2,xz=x*z2;const yy=y*y2,yz=y*z2,zz=z*z2;const wx=w*x2,wy=w*y2,wz=w*z2;const sx=scale.x,sy=scale.y,sz=scale.z;te[0]=(1-(yy+zz))*sx;te[1]=(xy+wz)*sx;te[2]=(xz-wy)*sx;te[3]=0;te[4]=(xy-wz)*sy;te[5]=(1-(xx+zz))*sy;te[6]=(yz+wx)*sy;te[7]=0;te[8]=(xz+wy)*sz;te[9]=(yz-wx)*sz;te[10]=(1-(xx+yy))*sz;te[11]=0;te[12]=position.x;te[13]=position.y;te[14]=position.z;te[15]=1;return this;}decompose(position,quaternion,scale){const te=this.elements;let sx=_v1$5.set(te[0],te[1],te[2]).length();const sy=_v1$5.set(te[4],te[5],te[6]).length();const sz=_v1$5.set(te[8],te[9],te[10]).length();// if determine is negative, we need to invert one scale
const det=this.determinant();if(det<0)sx=-sx;position.x=te[12];position.y=te[13];position.z=te[14];// scale the rotation part
_m1$2.copy(this);const invSX=1/sx;const invSY=1/sy;const invSZ=1/sz;_m1$2.elements[0]*=invSX;_m1$2.elements[1]*=invSX;_m1$2.elements[2]*=invSX;_m1$2.elements[4]*=invSY;_m1$2.elements[5]*=invSY;_m1$2.elements[6]*=invSY;_m1$2.elements[8]*=invSZ;_m1$2.elements[9]*=invSZ;_m1$2.elements[10]*=invSZ;quaternion.setFromRotationMatrix(_m1$2);scale.x=sx;scale.y=sy;scale.z=sz;return this;}makePerspective(left,right,top,bottom,near,far){if(far===undefined){console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');}const te=this.elements;const x=2*near/(right-left);const y=2*near/(top-bottom);const a=(right+left)/(right-left);const b=(top+bottom)/(top-bottom);const c=-(far+near)/(far-near);const d=-2*far*near/(far-near);te[0]=x;te[4]=0;te[8]=a;te[12]=0;te[1]=0;te[5]=y;te[9]=b;te[13]=0;te[2]=0;te[6]=0;te[10]=c;te[14]=d;te[3]=0;te[7]=0;te[11]=-1;te[15]=0;return this;}makeOrthographic(left,right,top,bottom,near,far){const te=this.elements;const w=1.0/(right-left);const h=1.0/(top-bottom);const p=1.0/(far-near);const x=(right+left)*w;const y=(top+bottom)*h;const z=(far+near)*p;te[0]=2*w;te[4]=0;te[8]=0;te[12]=-x;te[1]=0;te[5]=2*h;te[9]=0;te[13]=-y;te[2]=0;te[6]=0;te[10]=-2*p;te[14]=-z;te[3]=0;te[7]=0;te[11]=0;te[15]=1;return this;}equals(matrix){const te=this.elements;const me=matrix.elements;for(let i=0;i<16;i++){if(te[i]!==me[i])return false;}return true;}fromArray(array,offset=0){for(let i=0;i<16;i++){this.elements[i]=array[i+offset];}return this;}toArray(array=[],offset=0){const te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];array[offset+9]=te[9];array[offset+10]=te[10];array[offset+11]=te[11];array[offset+12]=te[12];array[offset+13]=te[13];array[offset+14]=te[14];array[offset+15]=te[15];return array;}}exports.Matrix4=Matrix4;Matrix4.prototype.isMatrix4=true;const _v1$5=/*@__PURE__*/new Vector3();const _m1$2=/*@__PURE__*/new Matrix4();const _zero=/*@__PURE__*/new Vector3(0,0,0);const _one=/*@__PURE__*/new Vector3(1,1,1);const _x=/*@__PURE__*/new Vector3();const _y=/*@__PURE__*/new Vector3();const _z=/*@__PURE__*/new Vector3();const _matrix$1=/*@__PURE__*/new Matrix4();const _quaternion$3=/*@__PURE__*/new Quaternion();class Euler{constructor(x=0,y=0,z=0,order=Euler.DefaultOrder){this._x=x;this._y=y;this._z=z;this._order=order;}get x(){return this._x;}set x(value){this._x=value;this._onChangeCallback();}get y(){return this._y;}set y(value){this._y=value;this._onChangeCallback();}get z(){return this._z;}set z(value){this._z=value;this._onChangeCallback();}get order(){return this._order;}set order(value){this._order=value;this._onChangeCallback();}set(x,y,z,order=this._order){this._x=x;this._y=y;this._z=z;this._order=order;this._onChangeCallback();return this;}clone(){return new this.constructor(this._x,this._y,this._z,this._order);}copy(euler){this._x=euler._x;this._y=euler._y;this._z=euler._z;this._order=euler._order;this._onChangeCallback();return this;}setFromRotationMatrix(m,order=this._order,update=true){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
const te=m.elements;const m11=te[0],m12=te[4],m13=te[8];const m21=te[1],m22=te[5],m23=te[9];const m31=te[2],m32=te[6],m33=te[10];switch(order){case'XYZ':this._y=Math.asin(clamp(m13,-1,1));if(Math.abs(m13)<0.9999999){this._x=Math.atan2(-m23,m33);this._z=Math.atan2(-m12,m11);}else{this._x=Math.atan2(m32,m22);this._z=0;}break;case'YXZ':this._x=Math.asin(-clamp(m23,-1,1));if(Math.abs(m23)<0.9999999){this._y=Math.atan2(m13,m33);this._z=Math.atan2(m21,m22);}else{this._y=Math.atan2(-m31,m11);this._z=0;}break;case'ZXY':this._x=Math.asin(clamp(m32,-1,1));if(Math.abs(m32)<0.9999999){this._y=Math.atan2(-m31,m33);this._z=Math.atan2(-m12,m22);}else{this._y=0;this._z=Math.atan2(m21,m11);}break;case'ZYX':this._y=Math.asin(-clamp(m31,-1,1));if(Math.abs(m31)<0.9999999){this._x=Math.atan2(m32,m33);this._z=Math.atan2(m21,m11);}else{this._x=0;this._z=Math.atan2(-m12,m22);}break;case'YZX':this._z=Math.asin(clamp(m21,-1,1));if(Math.abs(m21)<0.9999999){this._x=Math.atan2(-m23,m22);this._y=Math.atan2(-m31,m11);}else{this._x=0;this._y=Math.atan2(m13,m33);}break;case'XZY':this._z=Math.asin(-clamp(m12,-1,1));if(Math.abs(m12)<0.9999999){this._x=Math.atan2(m32,m22);this._y=Math.atan2(m13,m11);}else{this._x=Math.atan2(-m23,m33);this._y=0;}break;default:console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: '+order);}this._order=order;if(update===true)this._onChangeCallback();return this;}setFromQuaternion(q,order,update){_matrix$1.makeRotationFromQuaternion(q);return this.setFromRotationMatrix(_matrix$1,order,update);}setFromVector3(v,order=this._order){return this.set(v.x,v.y,v.z,order);}reorder(newOrder){// WARNING: this discards revolution information -bhouston
_quaternion$3.setFromEuler(this);return this.setFromQuaternion(_quaternion$3,newOrder);}equals(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order;}fromArray(array){this._x=array[0];this._y=array[1];this._z=array[2];if(array[3]!==undefined)this._order=array[3];this._onChangeCallback();return this;}toArray(array=[],offset=0){array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._order;return array;}_onChange(callback){this._onChangeCallback=callback;return this;}_onChangeCallback(){}}exports.Euler=Euler;Euler.prototype.isEuler=true;Euler.DefaultOrder='XYZ';Euler.RotationOrders=['XYZ','YZX','ZXY','XZY','YXZ','ZYX'];class Layers{constructor(){this.mask=1|0;}set(channel){this.mask=(1<<channel|0)>>>0;}enable(channel){this.mask|=1<<channel|0;}enableAll(){this.mask=0xffffffff|0;}toggle(channel){this.mask^=1<<channel|0;}disable(channel){this.mask&=~(1<<channel|0);}disableAll(){this.mask=0;}test(layers){return(this.mask&layers.mask)!==0;}isEnabled(channel){return(this.mask&(1<<channel|0))!==0;}}exports.Layers=Layers;let _object3DId=0;const _v1$4=/*@__PURE__*/new Vector3();const _q1=/*@__PURE__*/new Quaternion();const _m1$1=/*@__PURE__*/new Matrix4();const _target=/*@__PURE__*/new Vector3();const _position$3=/*@__PURE__*/new Vector3();const _scale$2=/*@__PURE__*/new Vector3();const _quaternion$2=/*@__PURE__*/new Quaternion();const _xAxis=/*@__PURE__*/new Vector3(1,0,0);const _yAxis=/*@__PURE__*/new Vector3(0,1,0);const _zAxis=/*@__PURE__*/new Vector3(0,0,1);const _addedEvent={type:'added'};const _removedEvent={type:'removed'};class Object3D extends EventDispatcher{constructor(){super();Object.defineProperty(this,'id',{value:_object3DId++});this.uuid=generateUUID();this.name='';this.type='Object3D';this.parent=null;this.children=[];this.up=Object3D.DefaultUp.clone();const position=new Vector3();const rotation=new Euler();const quaternion=new Quaternion();const scale=new Vector3(1,1,1);function onRotationChange(){quaternion.setFromEuler(rotation,false);}function onQuaternionChange(){rotation.setFromQuaternion(quaternion,undefined,false);}rotation._onChange(onRotationChange);quaternion._onChange(onQuaternionChange);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:position},rotation:{configurable:true,enumerable:true,value:rotation},quaternion:{configurable:true,enumerable:true,value:quaternion},scale:{configurable:true,enumerable:true,value:scale},modelViewMatrix:{value:new Matrix4()},normalMatrix:{value:new Matrix3()}});this.matrix=new Matrix4();this.matrixWorld=new Matrix4();this.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=false;this.layers=new Layers();this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.animations=[];this.userData={};}onBeforeRender(){}onAfterRender(){}applyMatrix4(matrix){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(matrix);this.matrix.decompose(this.position,this.quaternion,this.scale);}applyQuaternion(q){this.quaternion.premultiply(q);return this;}setRotationFromAxisAngle(axis,angle){// assumes axis is normalized
this.quaternion.setFromAxisAngle(axis,angle);}setRotationFromEuler(euler){this.quaternion.setFromEuler(euler,true);}setRotationFromMatrix(m){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
this.quaternion.setFromRotationMatrix(m);}setRotationFromQuaternion(q){// assumes q is normalized
this.quaternion.copy(q);}rotateOnAxis(axis,angle){// rotate object on axis in object space
// axis is assumed to be normalized
_q1.setFromAxisAngle(axis,angle);this.quaternion.multiply(_q1);return this;}rotateOnWorldAxis(axis,angle){// rotate object on axis in world space
// axis is assumed to be normalized
// method assumes no rotated parent
_q1.setFromAxisAngle(axis,angle);this.quaternion.premultiply(_q1);return this;}rotateX(angle){return this.rotateOnAxis(_xAxis,angle);}rotateY(angle){return this.rotateOnAxis(_yAxis,angle);}rotateZ(angle){return this.rotateOnAxis(_zAxis,angle);}translateOnAxis(axis,distance){// translate object by distance along axis in object space
// axis is assumed to be normalized
_v1$4.copy(axis).applyQuaternion(this.quaternion);this.position.add(_v1$4.multiplyScalar(distance));return this;}translateX(distance){return this.translateOnAxis(_xAxis,distance);}translateY(distance){return this.translateOnAxis(_yAxis,distance);}translateZ(distance){return this.translateOnAxis(_zAxis,distance);}localToWorld(vector){return vector.applyMatrix4(this.matrixWorld);}worldToLocal(vector){return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());}lookAt(x,y,z){// This method does not support objects having non-uniformly-scaled parent(s)
if(x.isVector3){_target.copy(x);}else{_target.set(x,y,z);}const parent=this.parent;this.updateWorldMatrix(true,false);_position$3.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$1.lookAt(_position$3,_target,this.up);}else{_m1$1.lookAt(_target,_position$3,this.up);}this.quaternion.setFromRotationMatrix(_m1$1);if(parent){_m1$1.extractRotation(parent.matrixWorld);_q1.setFromRotationMatrix(_m1$1);this.quaternion.premultiply(_q1.invert());}}add(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++){this.add(arguments[i]);}return this;}if(object===this){console.error('THREE.Object3D.add: object can\'t be added as a child of itself.',object);return this;}if(object&&object.isObject3D){if(object.parent!==null){object.parent.remove(object);}object.parent=this;this.children.push(object);object.dispatchEvent(_addedEvent);}else{console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.',object);}return this;}remove(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++){this.remove(arguments[i]);}return this;}const index=this.children.indexOf(object);if(index!==-1){object.parent=null;this.children.splice(index,1);object.dispatchEvent(_removedEvent);}return this;}removeFromParent(){const parent=this.parent;if(parent!==null){parent.remove(this);}return this;}clear(){for(let i=0;i<this.children.length;i++){const object=this.children[i];object.parent=null;object.dispatchEvent(_removedEvent);}this.children.length=0;return this;}attach(object){// adds object as a child of this, while maintaining the object's world transform
// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
this.updateWorldMatrix(true,false);_m1$1.copy(this.matrixWorld).invert();if(object.parent!==null){object.parent.updateWorldMatrix(true,false);_m1$1.multiply(object.parent.matrixWorld);}object.applyMatrix4(_m1$1);this.add(object);object.updateWorldMatrix(false,true);return this;}getObjectById(id){return this.getObjectByProperty('id',id);}getObjectByName(name){return this.getObjectByProperty('name',name);}getObjectByProperty(name,value){if(this[name]===value)return this;for(let i=0,l=this.children.length;i<l;i++){const child=this.children[i];const object=child.getObjectByProperty(name,value);if(object!==undefined){return object;}}return undefined;}getWorldPosition(target){this.updateWorldMatrix(true,false);return target.setFromMatrixPosition(this.matrixWorld);}getWorldQuaternion(target){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,target,_scale$2);return target;}getWorldScale(target){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,_quaternion$2,target);return target;}getWorldDirection(target){this.updateWorldMatrix(true,false);const e=this.matrixWorld.elements;return target.set(e[8],e[9],e[10]).normalize();}raycast(){}traverse(callback){callback(this);const children=this.children;for(let i=0,l=children.length;i<l;i++){children[i].traverse(callback);}}traverseVisible(callback){if(this.visible===false)return;callback(this);const children=this.children;for(let i=0,l=children.length;i<l;i++){children[i].traverseVisible(callback);}}traverseAncestors(callback){const parent=this.parent;if(parent!==null){callback(parent);parent.traverseAncestors(callback);}}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true;}updateMatrixWorld(force){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||force){if(this.parent===null){this.matrixWorld.copy(this.matrix);}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}this.matrixWorldNeedsUpdate=false;force=true;}// update children
const children=this.children;for(let i=0,l=children.length;i<l;i++){children[i].updateMatrixWorld(force);}}updateWorldMatrix(updateParents,updateChildren){const parent=this.parent;if(updateParents===true&&parent!==null){parent.updateWorldMatrix(true,false);}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix);}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}// update children
if(updateChildren===true){const children=this.children;for(let i=0,l=children.length;i<l;i++){children[i].updateWorldMatrix(false,true);}}}toJSON(meta){// meta is a string when called from JSON.stringify
const isRootObject=meta===undefined||typeof meta==='string';const output={};// meta is a hash used to collect geometries, materials.
// not providing it implies that this is the root object
// being serialized.
if(isRootObject){// initialize meta obj
meta={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}};output.metadata={version:4.5,type:'Object',generator:'Object3D.toJSON'};}// standard Object3D serialization
const object={};object.uuid=this.uuid;object.type=this.type;if(this.name!=='')object.name=this.name;if(this.castShadow===true)object.castShadow=true;if(this.receiveShadow===true)object.receiveShadow=true;if(this.visible===false)object.visible=false;if(this.frustumCulled===false)object.frustumCulled=false;if(this.renderOrder!==0)object.renderOrder=this.renderOrder;if(JSON.stringify(this.userData)!=='{}')object.userData=this.userData;object.layers=this.layers.mask;object.matrix=this.matrix.toArray();if(this.matrixAutoUpdate===false)object.matrixAutoUpdate=false;// object specific properties
if(this.isInstancedMesh){object.type='InstancedMesh';object.count=this.count;object.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)object.instanceColor=this.instanceColor.toJSON();}//
function serialize(library,element){if(library[element.uuid]===undefined){library[element.uuid]=element.toJSON(meta);}return element.uuid;}if(this.isScene){if(this.background){if(this.background.isColor){object.background=this.background.toJSON();}else if(this.background.isTexture){object.background=this.background.toJSON(meta).uuid;}}if(this.environment&&this.environment.isTexture){object.environment=this.environment.toJSON(meta).uuid;}}else if(this.isMesh||this.isLine||this.isPoints){object.geometry=serialize(meta.geometries,this.geometry);const parameters=this.geometry.parameters;if(parameters!==undefined&&parameters.shapes!==undefined){const shapes=parameters.shapes;if(Array.isArray(shapes)){for(let i=0,l=shapes.length;i<l;i++){const shape=shapes[i];serialize(meta.shapes,shape);}}else{serialize(meta.shapes,shapes);}}}if(this.isSkinnedMesh){object.bindMode=this.bindMode;object.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==undefined){serialize(meta.skeletons,this.skeleton);object.skeleton=this.skeleton.uuid;}}if(this.material!==undefined){if(Array.isArray(this.material)){const uuids=[];for(let i=0,l=this.material.length;i<l;i++){uuids.push(serialize(meta.materials,this.material[i]));}object.material=uuids;}else{object.material=serialize(meta.materials,this.material);}}//
if(this.children.length>0){object.children=[];for(let i=0;i<this.children.length;i++){object.children.push(this.children[i].toJSON(meta).object);}}//
if(this.animations.length>0){object.animations=[];for(let i=0;i<this.animations.length;i++){const animation=this.animations[i];object.animations.push(serialize(meta.animations,animation));}}if(isRootObject){const geometries=extractFromCache(meta.geometries);const materials=extractFromCache(meta.materials);const textures=extractFromCache(meta.textures);const images=extractFromCache(meta.images);const shapes=extractFromCache(meta.shapes);const skeletons=extractFromCache(meta.skeletons);const animations=extractFromCache(meta.animations);const nodes=extractFromCache(meta.nodes);if(geometries.length>0)output.geometries=geometries;if(materials.length>0)output.materials=materials;if(textures.length>0)output.textures=textures;if(images.length>0)output.images=images;if(shapes.length>0)output.shapes=shapes;if(skeletons.length>0)output.skeletons=skeletons;if(animations.length>0)output.animations=animations;if(nodes.length>0)output.nodes=nodes;}output.object=object;return output;// extract data from the cache hash
// remove metadata on each item
// and return as array
function extractFromCache(cache){const values=[];for(const key in cache){const data=cache[key];delete data.metadata;values.push(data);}return values;}}clone(recursive){return new this.constructor().copy(this,recursive);}copy(source,recursive=true){this.name=source.name;this.up.copy(source.up);this.position.copy(source.position);this.rotation.order=source.rotation.order;this.quaternion.copy(source.quaternion);this.scale.copy(source.scale);this.matrix.copy(source.matrix);this.matrixWorld.copy(source.matrixWorld);this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate;this.layers.mask=source.layers.mask;this.visible=source.visible;this.castShadow=source.castShadow;this.receiveShadow=source.receiveShadow;this.frustumCulled=source.frustumCulled;this.renderOrder=source.renderOrder;this.userData=JSON.parse(JSON.stringify(source.userData));if(recursive===true){for(let i=0;i<source.children.length;i++){const child=source.children[i];this.add(child.clone());}}return this;}}exports.Object3D=Object3D;Object3D.DefaultUp=new Vector3(0,1,0);Object3D.DefaultMatrixAutoUpdate=true;Object3D.prototype.isObject3D=true;const _v0$1=/*@__PURE__*/new Vector3();const _v1$3=/*@__PURE__*/new Vector3();const _v2$2=/*@__PURE__*/new Vector3();const _v3$1=/*@__PURE__*/new Vector3();const _vab=/*@__PURE__*/new Vector3();const _vac=/*@__PURE__*/new Vector3();const _vbc=/*@__PURE__*/new Vector3();const _vap=/*@__PURE__*/new Vector3();const _vbp=/*@__PURE__*/new Vector3();const _vcp=/*@__PURE__*/new Vector3();class Triangle{constructor(a=new Vector3(),b=new Vector3(),c=new Vector3()){this.a=a;this.b=b;this.c=c;}static getNormal(a,b,c,target){target.subVectors(c,b);_v0$1.subVectors(a,b);target.cross(_v0$1);const targetLengthSq=target.lengthSq();if(targetLengthSq>0){return target.multiplyScalar(1/Math.sqrt(targetLengthSq));}return target.set(0,0,0);}// static/instance method to calculate barycentric coordinates
// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
static getBarycoord(point,a,b,c,target){_v0$1.subVectors(c,a);_v1$3.subVectors(b,a);_v2$2.subVectors(point,a);const dot00=_v0$1.dot(_v0$1);const dot01=_v0$1.dot(_v1$3);const dot02=_v0$1.dot(_v2$2);const dot11=_v1$3.dot(_v1$3);const dot12=_v1$3.dot(_v2$2);const denom=dot00*dot11-dot01*dot01;// collinear or singular triangle
if(denom===0){// arbitrary location outside of triangle?
// not sure if this is the best idea, maybe should be returning undefined
return target.set(-2,-1,-1);}const invDenom=1/denom;const u=(dot11*dot02-dot01*dot12)*invDenom;const v=(dot00*dot12-dot01*dot02)*invDenom;// barycentric coordinates must always sum to 1
return target.set(1-u-v,v,u);}static containsPoint(point,a,b,c){this.getBarycoord(point,a,b,c,_v3$1);return _v3$1.x>=0&&_v3$1.y>=0&&_v3$1.x+_v3$1.y<=1;}static getUV(point,p1,p2,p3,uv1,uv2,uv3,target){this.getBarycoord(point,p1,p2,p3,_v3$1);target.set(0,0);target.addScaledVector(uv1,_v3$1.x);target.addScaledVector(uv2,_v3$1.y);target.addScaledVector(uv3,_v3$1.z);return target;}static isFrontFacing(a,b,c,direction){_v0$1.subVectors(c,b);_v1$3.subVectors(a,b);// strictly front facing
return _v0$1.cross(_v1$3).dot(direction)<0?true:false;}set(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;}setFromPointsAndIndices(points,i0,i1,i2){this.a.copy(points[i0]);this.b.copy(points[i1]);this.c.copy(points[i2]);return this;}setFromAttributeAndIndices(attribute,i0,i1,i2){this.a.fromBufferAttribute(attribute,i0);this.b.fromBufferAttribute(attribute,i1);this.c.fromBufferAttribute(attribute,i2);return this;}clone(){return new this.constructor().copy(this);}copy(triangle){this.a.copy(triangle.a);this.b.copy(triangle.b);this.c.copy(triangle.c);return this;}getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*0.5;}getMidpoint(target){return target.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3);}getNormal(target){return Triangle.getNormal(this.a,this.b,this.c,target);}getPlane(target){return target.setFromCoplanarPoints(this.a,this.b,this.c);}getBarycoord(point,target){return Triangle.getBarycoord(point,this.a,this.b,this.c,target);}getUV(point,uv1,uv2,uv3,target){return Triangle.getUV(point,this.a,this.b,this.c,uv1,uv2,uv3,target);}containsPoint(point){return Triangle.containsPoint(point,this.a,this.b,this.c);}isFrontFacing(direction){return Triangle.isFrontFacing(this.a,this.b,this.c,direction);}intersectsBox(box){return box.intersectsTriangle(this);}closestPointToPoint(p,target){const a=this.a,b=this.b,c=this.c;let v,w;// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
// under the accompanying license; see chapter 5.1.5 for detailed explanation.
// basically, we're distinguishing which of the voronoi regions of the triangle
// the point lies in with the minimum amount of redundant computation.
_vab.subVectors(b,a);_vac.subVectors(c,a);_vap.subVectors(p,a);const d1=_vab.dot(_vap);const d2=_vac.dot(_vap);if(d1<=0&&d2<=0){// vertex region of A; barycentric coords (1, 0, 0)
return target.copy(a);}_vbp.subVectors(p,b);const d3=_vab.dot(_vbp);const d4=_vac.dot(_vbp);if(d3>=0&&d4<=d3){// vertex region of B; barycentric coords (0, 1, 0)
return target.copy(b);}const vc=d1*d4-d3*d2;if(vc<=0&&d1>=0&&d3<=0){v=d1/(d1-d3);// edge region of AB; barycentric coords (1-v, v, 0)
return target.copy(a).addScaledVector(_vab,v);}_vcp.subVectors(p,c);const d5=_vab.dot(_vcp);const d6=_vac.dot(_vcp);if(d6>=0&&d5<=d6){// vertex region of C; barycentric coords (0, 0, 1)
return target.copy(c);}const vb=d5*d2-d1*d6;if(vb<=0&&d2>=0&&d6<=0){w=d2/(d2-d6);// edge region of AC; barycentric coords (1-w, 0, w)
return target.copy(a).addScaledVector(_vac,w);}const va=d3*d6-d5*d4;if(va<=0&&d4-d3>=0&&d5-d6>=0){_vbc.subVectors(c,b);w=(d4-d3)/(d4-d3+(d5-d6));// edge region of BC; barycentric coords (0, 1-w, w)
return target.copy(b).addScaledVector(_vbc,w);// edge region of BC
}// face region
const denom=1/(va+vb+vc);// u = va * denom
v=vb*denom;w=vc*denom;return target.copy(a).addScaledVector(_vab,v).addScaledVector(_vac,w);}equals(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c);}}exports.Triangle=Triangle;let materialId=0;class Material extends EventDispatcher{constructor(){super();Object.defineProperty(this,'id',{value:materialId++});this.uuid=generateUUID();this.name='';this.type='Material';this.fog=true;this.blending=NormalBlending;this.side=FrontSide;this.vertexColors=false;this.opacity=1;this.transparent=false;this.blendSrc=SrcAlphaFactor;this.blendDst=OneMinusSrcAlphaFactor;this.blendEquation=AddEquation;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.depthFunc=LessEqualDepth;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=0xff;this.stencilFunc=AlwaysStencilFunc;this.stencilRef=0;this.stencilFuncMask=0xff;this.stencilFail=KeepStencilOp;this.stencilZFail=KeepStencilOp;this.stencilZPass=KeepStencilOp;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;// override the renderer's default precision for this material
this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaToCoverage=false;this.premultipliedAlpha=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;this._alphaTest=0;}get alphaTest(){return this._alphaTest;}set alphaTest(value){if(this._alphaTest>0!==value>0){this.version++;}this._alphaTest=value;}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString();}setValues(values){if(values===undefined)return;for(const key in values){const newValue=values[key];if(newValue===undefined){console.warn('THREE.Material: \''+key+'\' parameter is undefined.');continue;}// for backward compatability if shading is set in the constructor
if(key==='shading'){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=newValue===FlatShading?true:false;continue;}const currentValue=this[key];if(currentValue===undefined){console.warn('THREE.'+this.type+': \''+key+'\' is not a property of this material.');continue;}if(currentValue&&currentValue.isColor){currentValue.set(newValue);}else if(currentValue&&currentValue.isVector3&&newValue&&newValue.isVector3){currentValue.copy(newValue);}else{this[key]=newValue;}}}toJSON(meta){const isRootObject=meta===undefined||typeof meta==='string';if(isRootObject){meta={textures:{},images:{}};}const data={metadata:{version:4.5,type:'Material',generator:'Material.toJSON'}};// standard Material serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.color&&this.color.isColor)data.color=this.color.getHex();if(this.roughness!==undefined)data.roughness=this.roughness;if(this.metalness!==undefined)data.metalness=this.metalness;if(this.sheen!==undefined)data.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)data.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==undefined)data.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)data.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)data.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)data.specular=this.specular.getHex();if(this.specularIntensity!==undefined)data.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)data.specularColor=this.specularColor.getHex();if(this.shininess!==undefined)data.shininess=this.shininess;if(this.clearcoat!==undefined)data.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)data.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){data.clearcoatMap=this.clearcoatMap.toJSON(meta).uuid;}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){data.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(meta).uuid;}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){data.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(meta).uuid;data.clearcoatNormalScale=this.clearcoatNormalScale.toArray();}if(this.map&&this.map.isTexture)data.map=this.map.toJSON(meta).uuid;if(this.matcap&&this.matcap.isTexture)data.matcap=this.matcap.toJSON(meta).uuid;if(this.alphaMap&&this.alphaMap.isTexture)data.alphaMap=this.alphaMap.toJSON(meta).uuid;if(this.lightMap&&this.lightMap.isTexture){data.lightMap=this.lightMap.toJSON(meta).uuid;data.lightMapIntensity=this.lightMapIntensity;}if(this.aoMap&&this.aoMap.isTexture){data.aoMap=this.aoMap.toJSON(meta).uuid;data.aoMapIntensity=this.aoMapIntensity;}if(this.bumpMap&&this.bumpMap.isTexture){data.bumpMap=this.bumpMap.toJSON(meta).uuid;data.bumpScale=this.bumpScale;}if(this.normalMap&&this.normalMap.isTexture){data.normalMap=this.normalMap.toJSON(meta).uuid;data.normalMapType=this.normalMapType;data.normalScale=this.normalScale.toArray();}if(this.displacementMap&&this.displacementMap.isTexture){data.displacementMap=this.displacementMap.toJSON(meta).uuid;data.displacementScale=this.displacementScale;data.displacementBias=this.displacementBias;}if(this.roughnessMap&&this.roughnessMap.isTexture)data.roughnessMap=this.roughnessMap.toJSON(meta).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)data.metalnessMap=this.metalnessMap.toJSON(meta).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)data.emissiveMap=this.emissiveMap.toJSON(meta).uuid;if(this.specularMap&&this.specularMap.isTexture)data.specularMap=this.specularMap.toJSON(meta).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)data.specularIntensityMap=this.specularIntensityMap.toJSON(meta).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)data.specularColorMap=this.specularColorMap.toJSON(meta).uuid;if(this.envMap&&this.envMap.isTexture){data.envMap=this.envMap.toJSON(meta).uuid;if(this.combine!==undefined)data.combine=this.combine;}if(this.envMapIntensity!==undefined)data.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==undefined)data.reflectivity=this.reflectivity;if(this.refractionRatio!==undefined)data.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){data.gradientMap=this.gradientMap.toJSON(meta).uuid;}if(this.transmission!==undefined)data.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)data.transmissionMap=this.transmissionMap.toJSON(meta).uuid;if(this.thickness!==undefined)data.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)data.thicknessMap=this.thicknessMap.toJSON(meta).uuid;if(this.attenuationDistance!==undefined)data.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==undefined)data.attenuationColor=this.attenuationColor.getHex();if(this.size!==undefined)data.size=this.size;if(this.shadowSide!==null)data.shadowSide=this.shadowSide;if(this.sizeAttenuation!==undefined)data.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)data.blending=this.blending;if(this.side!==FrontSide)data.side=this.side;if(this.vertexColors)data.vertexColors=true;if(this.opacity<1)data.opacity=this.opacity;if(this.transparent===true)data.transparent=this.transparent;data.depthFunc=this.depthFunc;data.depthTest=this.depthTest;data.depthWrite=this.depthWrite;data.colorWrite=this.colorWrite;data.stencilWrite=this.stencilWrite;data.stencilWriteMask=this.stencilWriteMask;data.stencilFunc=this.stencilFunc;data.stencilRef=this.stencilRef;data.stencilFuncMask=this.stencilFuncMask;data.stencilFail=this.stencilFail;data.stencilZFail=this.stencilZFail;data.stencilZPass=this.stencilZPass;// rotation (SpriteMaterial)
if(this.rotation!==undefined&&this.rotation!==0)data.rotation=this.rotation;if(this.polygonOffset===true)data.polygonOffset=true;if(this.polygonOffsetFactor!==0)data.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)data.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==undefined&&this.linewidth!==1)data.linewidth=this.linewidth;if(this.dashSize!==undefined)data.dashSize=this.dashSize;if(this.gapSize!==undefined)data.gapSize=this.gapSize;if(this.scale!==undefined)data.scale=this.scale;if(this.dithering===true)data.dithering=true;if(this.alphaTest>0)data.alphaTest=this.alphaTest;if(this.alphaToCoverage===true)data.alphaToCoverage=this.alphaToCoverage;if(this.premultipliedAlpha===true)data.premultipliedAlpha=this.premultipliedAlpha;if(this.wireframe===true)data.wireframe=this.wireframe;if(this.wireframeLinewidth>1)data.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=='round')data.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=='round')data.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)data.flatShading=this.flatShading;if(this.visible===false)data.visible=false;if(this.toneMapped===false)data.toneMapped=false;if(JSON.stringify(this.userData)!=='{}')data.userData=this.userData;// TODO: Copied from Object3D.toJSON
function extractFromCache(cache){const values=[];for(const key in cache){const data=cache[key];delete data.metadata;values.push(data);}return values;}if(isRootObject){const textures=extractFromCache(meta.textures);const images=extractFromCache(meta.images);if(textures.length>0)data.textures=textures;if(images.length>0)data.images=images;}return data;}clone(){return new this.constructor().copy(this);}copy(source){this.name=source.name;this.fog=source.fog;this.blending=source.blending;this.side=source.side;this.vertexColors=source.vertexColors;this.opacity=source.opacity;this.transparent=source.transparent;this.blendSrc=source.blendSrc;this.blendDst=source.blendDst;this.blendEquation=source.blendEquation;this.blendSrcAlpha=source.blendSrcAlpha;this.blendDstAlpha=source.blendDstAlpha;this.blendEquationAlpha=source.blendEquationAlpha;this.depthFunc=source.depthFunc;this.depthTest=source.depthTest;this.depthWrite=source.depthWrite;this.stencilWriteMask=source.stencilWriteMask;this.stencilFunc=source.stencilFunc;this.stencilRef=source.stencilRef;this.stencilFuncMask=source.stencilFuncMask;this.stencilFail=source.stencilFail;this.stencilZFail=source.stencilZFail;this.stencilZPass=source.stencilZPass;this.stencilWrite=source.stencilWrite;const srcPlanes=source.clippingPlanes;let dstPlanes=null;if(srcPlanes!==null){const n=srcPlanes.length;dstPlanes=new Array(n);for(let i=0;i!==n;++i){dstPlanes[i]=srcPlanes[i].clone();}}this.clippingPlanes=dstPlanes;this.clipIntersection=source.clipIntersection;this.clipShadows=source.clipShadows;this.shadowSide=source.shadowSide;this.colorWrite=source.colorWrite;this.precision=source.precision;this.polygonOffset=source.polygonOffset;this.polygonOffsetFactor=source.polygonOffsetFactor;this.polygonOffsetUnits=source.polygonOffsetUnits;this.dithering=source.dithering;this.alphaTest=source.alphaTest;this.alphaToCoverage=source.alphaToCoverage;this.premultipliedAlpha=source.premultipliedAlpha;this.visible=source.visible;this.toneMapped=source.toneMapped;this.userData=JSON.parse(JSON.stringify(source.userData));return this;}dispose(){this.dispatchEvent({type:'dispose'});}set needsUpdate(value){if(value===true)this.version++;}}exports.Material=Material;Material.prototype.isMaterial=true;Material.fromType=function/*type*/(){// TODO: Behavior added in Materials.js
return null;};/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 * }
 */class MeshBasicMaterial extends Material{constructor(parameters){super();this.type='MeshBasicMaterial';this.color=new Color(0xffffff);// emissive
this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;return this;}}exports.MeshBasicMaterial=MeshBasicMaterial;MeshBasicMaterial.prototype.isMeshBasicMaterial=true;const _vector$9=/*@__PURE__*/new Vector3();const _vector2$1=/*@__PURE__*/new Vector2();class BufferAttribute{constructor(array,itemSize,normalized){if(Array.isArray(array)){throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');}this.name='';this.array=array;this.itemSize=itemSize;this.count=array!==undefined?array.length/itemSize:0;this.normalized=normalized===true;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;}onUploadCallback(){}set needsUpdate(value){if(value===true)this.version++;}setUsage(value){this.usage=value;return this;}copy(source){this.name=source.name;this.array=new source.array.constructor(source.array);this.itemSize=source.itemSize;this.count=source.count;this.normalized=source.normalized;this.usage=source.usage;return this;}copyAt(index1,attribute,index2){index1*=this.itemSize;index2*=attribute.itemSize;for(let i=0,l=this.itemSize;i<l;i++){this.array[index1+i]=attribute.array[index2+i];}return this;}copyArray(array){this.array.set(array);return this;}copyColorsArray(colors){const array=this.array;let offset=0;for(let i=0,l=colors.length;i<l;i++){let color=colors[i];if(color===undefined){console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined',i);color=new Color();}array[offset++]=color.r;array[offset++]=color.g;array[offset++]=color.b;}return this;}copyVector2sArray(vectors){const array=this.array;let offset=0;for(let i=0,l=vectors.length;i<l;i++){let vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined',i);vector=new Vector2();}array[offset++]=vector.x;array[offset++]=vector.y;}return this;}copyVector3sArray(vectors){const array=this.array;let offset=0;for(let i=0,l=vectors.length;i<l;i++){let vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined',i);vector=new Vector3();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;}return this;}copyVector4sArray(vectors){const array=this.array;let offset=0;for(let i=0,l=vectors.length;i<l;i++){let vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined',i);vector=new Vector4();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;array[offset++]=vector.w;}return this;}applyMatrix3(m){if(this.itemSize===2){for(let i=0,l=this.count;i<l;i++){_vector2$1.fromBufferAttribute(this,i);_vector2$1.applyMatrix3(m);this.setXY(i,_vector2$1.x,_vector2$1.y);}}else if(this.itemSize===3){for(let i=0,l=this.count;i<l;i++){_vector$9.fromBufferAttribute(this,i);_vector$9.applyMatrix3(m);this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);}}return this;}applyMatrix4(m){for(let i=0,l=this.count;i<l;i++){_vector$9.x=this.getX(i);_vector$9.y=this.getY(i);_vector$9.z=this.getZ(i);_vector$9.applyMatrix4(m);this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}applyNormalMatrix(m){for(let i=0,l=this.count;i<l;i++){_vector$9.x=this.getX(i);_vector$9.y=this.getY(i);_vector$9.z=this.getZ(i);_vector$9.applyNormalMatrix(m);this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}transformDirection(m){for(let i=0,l=this.count;i<l;i++){_vector$9.x=this.getX(i);_vector$9.y=this.getY(i);_vector$9.z=this.getZ(i);_vector$9.transformDirection(m);this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}set(value,offset=0){this.array.set(value,offset);return this;}getX(index){return this.array[index*this.itemSize];}setX(index,x){this.array[index*this.itemSize]=x;return this;}getY(index){return this.array[index*this.itemSize+1];}setY(index,y){this.array[index*this.itemSize+1]=y;return this;}getZ(index){return this.array[index*this.itemSize+2];}setZ(index,z){this.array[index*this.itemSize+2]=z;return this;}getW(index){return this.array[index*this.itemSize+3];}setW(index,w){this.array[index*this.itemSize+3]=w;return this;}setXY(index,x,y){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;return this;}setXYZ(index,x,y,z){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;return this;}setXYZW(index,x,y,z,w){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;this.array[index+3]=w;return this;}onUpload(callback){this.onUploadCallback=callback;return this;}clone(){return new this.constructor(this.array,this.itemSize).copy(this);}toJSON(){const data={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};if(this.name!=='')data.name=this.name;if(this.usage!==StaticDrawUsage)data.usage=this.usage;if(this.updateRange.offset!==0||this.updateRange.count!==-1)data.updateRange=this.updateRange;return data;}}exports.BufferAttribute=BufferAttribute;BufferAttribute.prototype.isBufferAttribute=true;//
class Int8BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Int8Array(array),itemSize,normalized);}}exports.Int8BufferAttribute=Int8BufferAttribute;class Uint8BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint8Array(array),itemSize,normalized);}}exports.Uint8BufferAttribute=Uint8BufferAttribute;class Uint8ClampedBufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint8ClampedArray(array),itemSize,normalized);}}exports.Uint8ClampedBufferAttribute=Uint8ClampedBufferAttribute;class Int16BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Int16Array(array),itemSize,normalized);}}exports.Int16BufferAttribute=Int16BufferAttribute;class Uint16BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint16Array(array),itemSize,normalized);}}exports.Uint16BufferAttribute=Uint16BufferAttribute;class Int32BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Int32Array(array),itemSize,normalized);}}exports.Int32BufferAttribute=Int32BufferAttribute;class Uint32BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint32Array(array),itemSize,normalized);}}exports.Uint32BufferAttribute=Uint32BufferAttribute;class Float16BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint16Array(array),itemSize,normalized);}}exports.Float16BufferAttribute=Float16BufferAttribute;Float16BufferAttribute.prototype.isFloat16BufferAttribute=true;class Float32BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Float32Array(array),itemSize,normalized);}}exports.Float32BufferAttribute=Float32BufferAttribute;class Float64BufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized){super(new Float64Array(array),itemSize,normalized);}}exports.Float64BufferAttribute=Float64BufferAttribute;let _id$1=0;const _m1=/*@__PURE__*/new Matrix4();const _obj=/*@__PURE__*/new Object3D();const _offset=/*@__PURE__*/new Vector3();const _box$1=/*@__PURE__*/new Box3();const _boxMorphTargets=/*@__PURE__*/new Box3();const _vector$8=/*@__PURE__*/new Vector3();class BufferGeometry extends EventDispatcher{constructor(){super();Object.defineProperty(this,'id',{value:_id$1++});this.uuid=generateUUID();this.name='';this.type='BufferGeometry';this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={};}getIndex(){return this.index;}setIndex(index){if(Array.isArray(index)){this.index=new(arrayNeedsUint32(index)?Uint32BufferAttribute:Uint16BufferAttribute)(index,1);}else{this.index=index;}return this;}getAttribute(name){return this.attributes[name];}setAttribute(name,attribute){this.attributes[name]=attribute;return this;}deleteAttribute(name){delete this.attributes[name];return this;}hasAttribute(name){return this.attributes[name]!==undefined;}addGroup(start,count,materialIndex=0){this.groups.push({start:start,count:count,materialIndex:materialIndex});}clearGroups(){this.groups=[];}setDrawRange(start,count){this.drawRange.start=start;this.drawRange.count=count;}applyMatrix4(matrix){const position=this.attributes.position;if(position!==undefined){position.applyMatrix4(matrix);position.needsUpdate=true;}const normal=this.attributes.normal;if(normal!==undefined){const normalMatrix=new Matrix3().getNormalMatrix(matrix);normal.applyNormalMatrix(normalMatrix);normal.needsUpdate=true;}const tangent=this.attributes.tangent;if(tangent!==undefined){tangent.transformDirection(matrix);tangent.needsUpdate=true;}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}return this;}applyQuaternion(q){_m1.makeRotationFromQuaternion(q);this.applyMatrix4(_m1);return this;}rotateX(angle){// rotate geometry around world x-axis
_m1.makeRotationX(angle);this.applyMatrix4(_m1);return this;}rotateY(angle){// rotate geometry around world y-axis
_m1.makeRotationY(angle);this.applyMatrix4(_m1);return this;}rotateZ(angle){// rotate geometry around world z-axis
_m1.makeRotationZ(angle);this.applyMatrix4(_m1);return this;}translate(x,y,z){// translate geometry
_m1.makeTranslation(x,y,z);this.applyMatrix4(_m1);return this;}scale(x,y,z){// scale geometry
_m1.makeScale(x,y,z);this.applyMatrix4(_m1);return this;}lookAt(vector){_obj.lookAt(vector);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this;}center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this;}setFromPoints(points){const position=[];for(let i=0,l=points.length;i<l;i++){const point=points[i];position.push(point.x,point.y,point.z||0);}this.setAttribute('position',new Float32BufferAttribute(position,3));return this;}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}const position=this.attributes.position;const morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingBox.set(new Vector3(-Infinity,-Infinity,-Infinity),new Vector3(+Infinity,+Infinity,+Infinity));return;}if(position!==undefined){this.boundingBox.setFromBufferAttribute(position);// process morph attributes if present
if(morphAttributesPosition){for(let i=0,il=morphAttributesPosition.length;i<il;i++){const morphAttribute=morphAttributesPosition[i];_box$1.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$8.addVectors(this.boundingBox.min,_box$1.min);this.boundingBox.expandByPoint(_vector$8);_vector$8.addVectors(this.boundingBox.max,_box$1.max);this.boundingBox.expandByPoint(_vector$8);}else{this.boundingBox.expandByPoint(_box$1.min);this.boundingBox.expandByPoint(_box$1.max);}}}}else{this.boundingBox.makeEmpty();}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this);}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}const position=this.attributes.position;const morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingSphere.set(new Vector3(),Infinity);return;}if(position){// first, find the center of the bounding sphere
const center=this.boundingSphere.center;_box$1.setFromBufferAttribute(position);// process morph attributes if present
if(morphAttributesPosition){for(let i=0,il=morphAttributesPosition.length;i<il;i++){const morphAttribute=morphAttributesPosition[i];_boxMorphTargets.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$8.addVectors(_box$1.min,_boxMorphTargets.min);_box$1.expandByPoint(_vector$8);_vector$8.addVectors(_box$1.max,_boxMorphTargets.max);_box$1.expandByPoint(_vector$8);}else{_box$1.expandByPoint(_boxMorphTargets.min);_box$1.expandByPoint(_boxMorphTargets.max);}}}_box$1.getCenter(center);// second, try to find a boundingSphere with a radius smaller than the
// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
let maxRadiusSq=0;for(let i=0,il=position.count;i<il;i++){_vector$8.fromBufferAttribute(position,i);maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$8));}// process morph attributes if present
if(morphAttributesPosition){for(let i=0,il=morphAttributesPosition.length;i<il;i++){const morphAttribute=morphAttributesPosition[i];const morphTargetsRelative=this.morphTargetsRelative;for(let j=0,jl=morphAttribute.count;j<jl;j++){_vector$8.fromBufferAttribute(morphAttribute,j);if(morphTargetsRelative){_offset.fromBufferAttribute(position,j);_vector$8.add(_offset);}maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$8));}}}this.boundingSphere.radius=Math.sqrt(maxRadiusSq);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this);}}}computeTangents(){const index=this.index;const attributes=this.attributes;// based on http://www.terathon.com/code/tangent.html
// (per vertex tangents)
if(index===null||attributes.position===undefined||attributes.normal===undefined||attributes.uv===undefined){console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');return;}const indices=index.array;const positions=attributes.position.array;const normals=attributes.normal.array;const uvs=attributes.uv.array;const nVertices=positions.length/3;if(this.hasAttribute('tangent')===false){this.setAttribute('tangent',new BufferAttribute(new Float32Array(4*nVertices),4));}const tangents=this.getAttribute('tangent').array;const tan1=[],tan2=[];for(let i=0;i<nVertices;i++){tan1[i]=new Vector3();tan2[i]=new Vector3();}const vA=new Vector3(),vB=new Vector3(),vC=new Vector3(),uvA=new Vector2(),uvB=new Vector2(),uvC=new Vector2(),sdir=new Vector3(),tdir=new Vector3();function handleTriangle(a,b,c){vA.fromArray(positions,a*3);vB.fromArray(positions,b*3);vC.fromArray(positions,c*3);uvA.fromArray(uvs,a*2);uvB.fromArray(uvs,b*2);uvC.fromArray(uvs,c*2);vB.sub(vA);vC.sub(vA);uvB.sub(uvA);uvC.sub(uvA);const r=1.0/(uvB.x*uvC.y-uvC.x*uvB.y);// silently ignore degenerate uv triangles having coincident or colinear vertices
if(!isFinite(r))return;sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC,-uvB.y).multiplyScalar(r);tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB,-uvC.x).multiplyScalar(r);tan1[a].add(sdir);tan1[b].add(sdir);tan1[c].add(sdir);tan2[a].add(tdir);tan2[b].add(tdir);tan2[c].add(tdir);}let groups=this.groups;if(groups.length===0){groups=[{start:0,count:indices.length}];}for(let i=0,il=groups.length;i<il;++i){const group=groups[i];const start=group.start;const count=group.count;for(let j=start,jl=start+count;j<jl;j+=3){handleTriangle(indices[j+0],indices[j+1],indices[j+2]);}}const tmp=new Vector3(),tmp2=new Vector3();const n=new Vector3(),n2=new Vector3();function handleVertex(v){n.fromArray(normals,v*3);n2.copy(n);const t=tan1[v];// Gram-Schmidt orthogonalize
tmp.copy(t);tmp.sub(n.multiplyScalar(n.dot(t))).normalize();// Calculate handedness
tmp2.crossVectors(n2,t);const test=tmp2.dot(tan2[v]);const w=test<0.0?-1.0:1.0;tangents[v*4]=tmp.x;tangents[v*4+1]=tmp.y;tangents[v*4+2]=tmp.z;tangents[v*4+3]=w;}for(let i=0,il=groups.length;i<il;++i){const group=groups[i];const start=group.start;const count=group.count;for(let j=start,jl=start+count;j<jl;j+=3){handleVertex(indices[j+0]);handleVertex(indices[j+1]);handleVertex(indices[j+2]);}}}computeVertexNormals(){const index=this.index;const positionAttribute=this.getAttribute('position');if(positionAttribute!==undefined){let normalAttribute=this.getAttribute('normal');if(normalAttribute===undefined){normalAttribute=new BufferAttribute(new Float32Array(positionAttribute.count*3),3);this.setAttribute('normal',normalAttribute);}else{// reset existing normals to zero
for(let i=0,il=normalAttribute.count;i<il;i++){normalAttribute.setXYZ(i,0,0,0);}}const pA=new Vector3(),pB=new Vector3(),pC=new Vector3();const nA=new Vector3(),nB=new Vector3(),nC=new Vector3();const cb=new Vector3(),ab=new Vector3();// indexed elements
if(index){for(let i=0,il=index.count;i<il;i+=3){const vA=index.getX(i+0);const vB=index.getX(i+1);const vC=index.getX(i+2);pA.fromBufferAttribute(positionAttribute,vA);pB.fromBufferAttribute(positionAttribute,vB);pC.fromBufferAttribute(positionAttribute,vC);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);nA.fromBufferAttribute(normalAttribute,vA);nB.fromBufferAttribute(normalAttribute,vB);nC.fromBufferAttribute(normalAttribute,vC);nA.add(cb);nB.add(cb);nC.add(cb);normalAttribute.setXYZ(vA,nA.x,nA.y,nA.z);normalAttribute.setXYZ(vB,nB.x,nB.y,nB.z);normalAttribute.setXYZ(vC,nC.x,nC.y,nC.z);}}else{// non-indexed elements (unconnected triangle soup)
for(let i=0,il=positionAttribute.count;i<il;i+=3){pA.fromBufferAttribute(positionAttribute,i+0);pB.fromBufferAttribute(positionAttribute,i+1);pC.fromBufferAttribute(positionAttribute,i+2);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);normalAttribute.setXYZ(i+0,cb.x,cb.y,cb.z);normalAttribute.setXYZ(i+1,cb.x,cb.y,cb.z);normalAttribute.setXYZ(i+2,cb.x,cb.y,cb.z);}}this.normalizeNormals();normalAttribute.needsUpdate=true;}}merge(geometry,offset){if(!(geometry&&geometry.isBufferGeometry)){console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.',geometry);return;}if(offset===undefined){offset=0;console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '+'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');}const attributes=this.attributes;for(const key in attributes){if(geometry.attributes[key]===undefined)continue;const attribute1=attributes[key];const attributeArray1=attribute1.array;const attribute2=geometry.attributes[key];const attributeArray2=attribute2.array;const attributeOffset=attribute2.itemSize*offset;const length=Math.min(attributeArray2.length,attributeArray1.length-attributeOffset);for(let i=0,j=attributeOffset;i<length;i++,j++){attributeArray1[j]=attributeArray2[i];}}return this;}normalizeNormals(){const normals=this.attributes.normal;for(let i=0,il=normals.count;i<il;i++){_vector$8.fromBufferAttribute(normals,i);_vector$8.normalize();normals.setXYZ(i,_vector$8.x,_vector$8.y,_vector$8.z);}}toNonIndexed(){function convertBufferAttribute(attribute,indices){const array=attribute.array;const itemSize=attribute.itemSize;const normalized=attribute.normalized;const array2=new array.constructor(indices.length*itemSize);let index=0,index2=0;for(let i=0,l=indices.length;i<l;i++){if(attribute.isInterleavedBufferAttribute){index=indices[i]*attribute.data.stride+attribute.offset;}else{index=indices[i]*itemSize;}for(let j=0;j<itemSize;j++){array2[index2++]=array[index++];}}return new BufferAttribute(array2,itemSize,normalized);}//
if(this.index===null){console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');return this;}const geometry2=new BufferGeometry();const indices=this.index.array;const attributes=this.attributes;// attributes
for(const name in attributes){const attribute=attributes[name];const newAttribute=convertBufferAttribute(attribute,indices);geometry2.setAttribute(name,newAttribute);}// morph attributes
const morphAttributes=this.morphAttributes;for(const name in morphAttributes){const morphArray=[];const morphAttribute=morphAttributes[name];// morphAttribute: array of Float32BufferAttributes
for(let i=0,il=morphAttribute.length;i<il;i++){const attribute=morphAttribute[i];const newAttribute=convertBufferAttribute(attribute,indices);morphArray.push(newAttribute);}geometry2.morphAttributes[name]=morphArray;}geometry2.morphTargetsRelative=this.morphTargetsRelative;// groups
const groups=this.groups;for(let i=0,l=groups.length;i<l;i++){const group=groups[i];geometry2.addGroup(group.start,group.count,group.materialIndex);}return geometry2;}toJSON(){const data={metadata:{version:4.5,type:'BufferGeometry',generator:'BufferGeometry.toJSON'}};// standard BufferGeometry serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(Object.keys(this.userData).length>0)data.userData=this.userData;if(this.parameters!==undefined){const parameters=this.parameters;for(const key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}// for simplicity the code assumes attributes are not shared across geometries, see #15811
data.data={attributes:{}};const index=this.index;if(index!==null){data.data.index={type:index.array.constructor.name,array:Array.prototype.slice.call(index.array)};}const attributes=this.attributes;for(const key in attributes){const attribute=attributes[key];data.data.attributes[key]=attribute.toJSON(data.data);}const morphAttributes={};let hasMorphAttributes=false;for(const key in this.morphAttributes){const attributeArray=this.morphAttributes[key];const array=[];for(let i=0,il=attributeArray.length;i<il;i++){const attribute=attributeArray[i];array.push(attribute.toJSON(data.data));}if(array.length>0){morphAttributes[key]=array;hasMorphAttributes=true;}}if(hasMorphAttributes){data.data.morphAttributes=morphAttributes;data.data.morphTargetsRelative=this.morphTargetsRelative;}const groups=this.groups;if(groups.length>0){data.data.groups=JSON.parse(JSON.stringify(groups));}const boundingSphere=this.boundingSphere;if(boundingSphere!==null){data.data.boundingSphere={center:boundingSphere.center.toArray(),radius:boundingSphere.radius};}return data;}clone(){return new this.constructor().copy(this);}copy(source){// reset
this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;// used for storing cloned, shared data
const data={};// name
this.name=source.name;// index
const index=source.index;if(index!==null){this.setIndex(index.clone(data));}// attributes
const attributes=source.attributes;for(const name in attributes){const attribute=attributes[name];this.setAttribute(name,attribute.clone(data));}// morph attributes
const morphAttributes=source.morphAttributes;for(const name in morphAttributes){const array=[];const morphAttribute=morphAttributes[name];// morphAttribute: array of Float32BufferAttributes
for(let i=0,l=morphAttribute.length;i<l;i++){array.push(morphAttribute[i].clone(data));}this.morphAttributes[name]=array;}this.morphTargetsRelative=source.morphTargetsRelative;// groups
const groups=source.groups;for(let i=0,l=groups.length;i<l;i++){const group=groups[i];this.addGroup(group.start,group.count,group.materialIndex);}// bounding box
const boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere
const boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// draw range
this.drawRange.start=source.drawRange.start;this.drawRange.count=source.drawRange.count;// user data
this.userData=source.userData;// geometry generator parameters
if(source.parameters!==undefined)this.parameters=Object.assign({},source.parameters);return this;}dispose(){this.dispatchEvent({type:'dispose'});}}exports.BufferGeometry=BufferGeometry;BufferGeometry.prototype.isBufferGeometry=true;const _inverseMatrix$2=/*@__PURE__*/new Matrix4();const _ray$2=/*@__PURE__*/new Ray();const _sphere$3=/*@__PURE__*/new Sphere();const _vA$1=/*@__PURE__*/new Vector3();const _vB$1=/*@__PURE__*/new Vector3();const _vC$1=/*@__PURE__*/new Vector3();const _tempA=/*@__PURE__*/new Vector3();const _tempB=/*@__PURE__*/new Vector3();const _tempC=/*@__PURE__*/new Vector3();const _morphA=/*@__PURE__*/new Vector3();const _morphB=/*@__PURE__*/new Vector3();const _morphC=/*@__PURE__*/new Vector3();const _uvA$1=/*@__PURE__*/new Vector2();const _uvB$1=/*@__PURE__*/new Vector2();const _uvC$1=/*@__PURE__*/new Vector2();const _intersectionPoint=/*@__PURE__*/new Vector3();const _intersectionPointWorld=/*@__PURE__*/new Vector3();class Mesh extends Object3D{constructor(geometry=new BufferGeometry(),material=new MeshBasicMaterial()){super();this.type='Mesh';this.geometry=geometry;this.material=material;this.updateMorphTargets();}copy(source){super.copy(source);if(source.morphTargetInfluences!==undefined){this.morphTargetInfluences=source.morphTargetInfluences.slice();}if(source.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary);}this.material=source.material;this.geometry=source.geometry;return this;}updateMorphTargets(){const geometry=this.geometry;if(geometry.isBufferGeometry){const morphAttributes=geometry.morphAttributes;const keys=Object.keys(morphAttributes);if(keys.length>0){const morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){const name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else{const morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}}raycast(raycaster,intersects){const geometry=this.geometry;const material=this.material;const matrixWorld=this.matrixWorld;if(material===undefined)return;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$3.copy(geometry.boundingSphere);_sphere$3.applyMatrix4(matrixWorld);if(raycaster.ray.intersectsSphere(_sphere$3)===false)return;//
_inverseMatrix$2.copy(matrixWorld).invert();_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);// Check boundingBox before continuing
if(geometry.boundingBox!==null){if(_ray$2.intersectsBox(geometry.boundingBox)===false)return;}let intersection;if(geometry.isBufferGeometry){const index=geometry.index;const position=geometry.attributes.position;const morphPosition=geometry.morphAttributes.position;const morphTargetsRelative=geometry.morphTargetsRelative;const uv=geometry.attributes.uv;const uv2=geometry.attributes.uv2;const groups=geometry.groups;const drawRange=geometry.drawRange;if(index!==null){// indexed buffer geometry
if(Array.isArray(material)){for(let i=0,il=groups.length;i<il;i++){const group=groups[i];const groupMaterial=material[group.materialIndex];const start=Math.max(group.start,drawRange.start);const end=Math.min(index.count,Math.min(group.start+group.count,drawRange.start+drawRange.count));for(let j=start,jl=end;j<jl;j+=3){const a=index.getX(j);const b=index.getX(j+1);const c=index.getX(j+2);intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in indexed buffer semantics
intersection.face.materialIndex=group.materialIndex;intersects.push(intersection);}}}}else{const start=Math.max(0,drawRange.start);const end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i+=3){const a=index.getX(i);const b=index.getX(i+1);const c=index.getX(i+2);intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(i/3);// triangle number in indexed buffer semantics
intersects.push(intersection);}}}}else if(position!==undefined){// non-indexed buffer geometry
if(Array.isArray(material)){for(let i=0,il=groups.length;i<il;i++){const group=groups[i];const groupMaterial=material[group.materialIndex];const start=Math.max(group.start,drawRange.start);const end=Math.min(position.count,Math.min(group.start+group.count,drawRange.start+drawRange.count));for(let j=start,jl=end;j<jl;j+=3){const a=j;const b=j+1;const c=j+2;intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in non-indexed buffer semantics
intersection.face.materialIndex=group.materialIndex;intersects.push(intersection);}}}}else{const start=Math.max(0,drawRange.start);const end=Math.min(position.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i+=3){const a=i;const b=i+1;const c=i+2;intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(i/3);// triangle number in non-indexed buffer semantics
intersects.push(intersection);}}}}}else if(geometry.isGeometry){console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}}exports.Mesh=Mesh;Mesh.prototype.isMesh=true;function checkIntersection(object,material,raycaster,ray,pA,pB,pC,point){let intersect;if(material.side===BackSide){intersect=ray.intersectTriangle(pC,pB,pA,true,point);}else{intersect=ray.intersectTriangle(pA,pB,pC,material.side!==DoubleSide,point);}if(intersect===null)return null;_intersectionPointWorld.copy(point);_intersectionPointWorld.applyMatrix4(object.matrixWorld);const distance=raycaster.ray.origin.distanceTo(_intersectionPointWorld);if(distance<raycaster.near||distance>raycaster.far)return null;return{distance:distance,point:_intersectionPointWorld.clone(),object:object};}function checkBufferGeometryIntersection(object,material,raycaster,ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c){_vA$1.fromBufferAttribute(position,a);_vB$1.fromBufferAttribute(position,b);_vC$1.fromBufferAttribute(position,c);const morphInfluences=object.morphTargetInfluences;if(morphPosition&&morphInfluences){_morphA.set(0,0,0);_morphB.set(0,0,0);_morphC.set(0,0,0);for(let i=0,il=morphPosition.length;i<il;i++){const influence=morphInfluences[i];const morphAttribute=morphPosition[i];if(influence===0)continue;_tempA.fromBufferAttribute(morphAttribute,a);_tempB.fromBufferAttribute(morphAttribute,b);_tempC.fromBufferAttribute(morphAttribute,c);if(morphTargetsRelative){_morphA.addScaledVector(_tempA,influence);_morphB.addScaledVector(_tempB,influence);_morphC.addScaledVector(_tempC,influence);}else{_morphA.addScaledVector(_tempA.sub(_vA$1),influence);_morphB.addScaledVector(_tempB.sub(_vB$1),influence);_morphC.addScaledVector(_tempC.sub(_vC$1),influence);}}_vA$1.add(_morphA);_vB$1.add(_morphB);_vC$1.add(_morphC);}if(object.isSkinnedMesh){object.boneTransform(a,_vA$1);object.boneTransform(b,_vB$1);object.boneTransform(c,_vC$1);}const intersection=checkIntersection(object,material,raycaster,ray,_vA$1,_vB$1,_vC$1,_intersectionPoint);if(intersection){if(uv){_uvA$1.fromBufferAttribute(uv,a);_uvB$1.fromBufferAttribute(uv,b);_uvC$1.fromBufferAttribute(uv,c);intersection.uv=Triangle.getUV(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2());}if(uv2){_uvA$1.fromBufferAttribute(uv2,a);_uvB$1.fromBufferAttribute(uv2,b);_uvC$1.fromBufferAttribute(uv2,c);intersection.uv2=Triangle.getUV(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2());}const face={a:a,b:b,c:c,normal:new Vector3(),materialIndex:0};Triangle.getNormal(_vA$1,_vB$1,_vC$1,face.normal);intersection.face=face;}return intersection;}class BoxGeometry extends BufferGeometry{constructor(width=1,height=1,depth=1,widthSegments=1,heightSegments=1,depthSegments=1){super();this.type='BoxGeometry';this.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};const scope=this;// segments
widthSegments=Math.floor(widthSegments);heightSegments=Math.floor(heightSegments);depthSegments=Math.floor(depthSegments);// buffers
const indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables
let numberOfVertices=0;let groupStart=0;// build each side of the box geometry
buildPlane('z','y','x',-1,-1,depth,height,width,depthSegments,heightSegments,0);// px
buildPlane('z','y','x',1,-1,depth,height,-width,depthSegments,heightSegments,1);// nx
buildPlane('x','z','y',1,1,width,depth,height,widthSegments,depthSegments,2);// py
buildPlane('x','z','y',1,-1,width,depth,-height,widthSegments,depthSegments,3);// ny
buildPlane('x','y','z',1,-1,width,height,depth,widthSegments,heightSegments,4);// pz
buildPlane('x','y','z',-1,-1,width,height,-depth,widthSegments,heightSegments,5);// nz
// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){const segmentWidth=width/gridX;const segmentHeight=height/gridY;const widthHalf=width/2;const heightHalf=height/2;const depthHalf=depth/2;const gridX1=gridX+1;const gridY1=gridY+1;let vertexCounter=0;let groupCount=0;const vector=new Vector3();// generate vertices, normals and uvs
for(let iy=0;iy<gridY1;iy++){const y=iy*segmentHeight-heightHalf;for(let ix=0;ix<gridX1;ix++){const x=ix*segmentWidth-widthHalf;// set values to correct vector component
vector[u]=x*udir;vector[v]=y*vdir;vector[w]=depthHalf;// now apply vector to vertex buffer
vertices.push(vector.x,vector.y,vector.z);// set values to correct vector component
vector[u]=0;vector[v]=0;vector[w]=depth>0?1:-1;// now apply vector to normal buffer
normals.push(vector.x,vector.y,vector.z);// uvs
uvs.push(ix/gridX);uvs.push(1-iy/gridY);// counters
vertexCounter+=1;}}// indices
// 1. you need three indices to draw a single face
// 2. a single segment consists of two faces
// 3. so we need to generate six (2*3) indices per segment
for(let iy=0;iy<gridY;iy++){for(let ix=0;ix<gridX;ix++){const a=numberOfVertices+ix+gridX1*iy;const b=numberOfVertices+ix+gridX1*(iy+1);const c=numberOfVertices+(ix+1)+gridX1*(iy+1);const d=numberOfVertices+(ix+1)+gridX1*iy;// faces
indices.push(a,b,d);indices.push(b,c,d);// increase counter
groupCount+=6;}}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,materialIndex);// calculate new start value for groups
groupStart+=groupCount;// update total number of vertices
numberOfVertices+=vertexCounter;}}static fromJSON(data){return new BoxGeometry(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments);}}/**
 * Uniform Utilities
 */exports.BoxGeometry=exports.BoxBufferGeometry=BoxGeometry;function cloneUniforms(src){const dst={};for(const u in src){dst[u]={};for(const p in src[u]){const property=src[u][p];if(property&&(property.isColor||property.isMatrix3||property.isMatrix4||property.isVector2||property.isVector3||property.isVector4||property.isTexture||property.isQuaternion)){dst[u][p]=property.clone();}else if(Array.isArray(property)){dst[u][p]=property.slice();}else{dst[u][p]=property;}}}return dst;}function mergeUniforms(uniforms){const merged={};for(let u=0;u<uniforms.length;u++){const tmp=cloneUniforms(uniforms[u]);for(const p in tmp){merged[p]=tmp[p];}}return merged;}// Legacy
const UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};exports.UniformsUtils=UniformsUtils;var default_vertex="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var default_fragment="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";/**
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>
 * }
 */class ShaderMaterial extends Material{constructor(parameters){super();this.type='ShaderMaterial';this.defines={};this.uniforms={};this.vertexShader=default_vertex;this.fragmentShader=default_fragment;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;// set to use scene fog
this.lights=false;// set to use scene lights
this.clipping=false;// set to use user-defined clipping planes
this.extensions={derivatives:false,// set to use derivatives
fragDepth:false,// set to use fragment depth values
drawBuffers:false,// set to use draw buffers
shaderTextureLOD:false// set to use shader texture LOD
};// When rendered geometry doesn't include these attributes but the material does,
// use these default values in WebGL. This avoids errors when buffer data is missing.
this.defaultAttributeValues={'color':[1,1,1],'uv':[0,0],'uv2':[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;this.glslVersion=null;if(parameters!==undefined){if(parameters.attributes!==undefined){console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');}this.setValues(parameters);}}copy(source){super.copy(source);this.fragmentShader=source.fragmentShader;this.vertexShader=source.vertexShader;this.uniforms=cloneUniforms(source.uniforms);this.defines=Object.assign({},source.defines);this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.lights=source.lights;this.clipping=source.clipping;this.extensions=Object.assign({},source.extensions);this.glslVersion=source.glslVersion;return this;}toJSON(meta){const data=super.toJSON(meta);data.glslVersion=this.glslVersion;data.uniforms={};for(const name in this.uniforms){const uniform=this.uniforms[name];const value=uniform.value;if(value&&value.isTexture){data.uniforms[name]={type:'t',value:value.toJSON(meta).uuid};}else if(value&&value.isColor){data.uniforms[name]={type:'c',value:value.getHex()};}else if(value&&value.isVector2){data.uniforms[name]={type:'v2',value:value.toArray()};}else if(value&&value.isVector3){data.uniforms[name]={type:'v3',value:value.toArray()};}else if(value&&value.isVector4){data.uniforms[name]={type:'v4',value:value.toArray()};}else if(value&&value.isMatrix3){data.uniforms[name]={type:'m3',value:value.toArray()};}else if(value&&value.isMatrix4){data.uniforms[name]={type:'m4',value:value.toArray()};}else{data.uniforms[name]={value:value};// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
}}if(Object.keys(this.defines).length>0)data.defines=this.defines;data.vertexShader=this.vertexShader;data.fragmentShader=this.fragmentShader;const extensions={};for(const key in this.extensions){if(this.extensions[key]===true)extensions[key]=true;}if(Object.keys(extensions).length>0)data.extensions=extensions;return data;}}exports.ShaderMaterial=ShaderMaterial;ShaderMaterial.prototype.isShaderMaterial=true;class Camera extends Object3D{constructor(){super();this.type='Camera';this.matrixWorldInverse=new Matrix4();this.projectionMatrix=new Matrix4();this.projectionMatrixInverse=new Matrix4();}copy(source,recursive){super.copy(source,recursive);this.matrixWorldInverse.copy(source.matrixWorldInverse);this.projectionMatrix.copy(source.projectionMatrix);this.projectionMatrixInverse.copy(source.projectionMatrixInverse);return this;}getWorldDirection(target){this.updateWorldMatrix(true,false);const e=this.matrixWorld.elements;return target.set(-e[8],-e[9],-e[10]).normalize();}updateMatrixWorld(force){super.updateMatrixWorld(force);this.matrixWorldInverse.copy(this.matrixWorld).invert();}updateWorldMatrix(updateParents,updateChildren){super.updateWorldMatrix(updateParents,updateChildren);this.matrixWorldInverse.copy(this.matrixWorld).invert();}clone(){return new this.constructor().copy(this);}}exports.Camera=Camera;Camera.prototype.isCamera=true;class PerspectiveCamera extends Camera{constructor(fov=50,aspect=1,near=0.1,far=2000){super();this.type='PerspectiveCamera';this.fov=fov;this.zoom=1;this.near=near;this.far=far;this.focus=10;this.aspect=aspect;this.view=null;this.filmGauge=35;// width of the film (default in millimeters)
this.filmOffset=0;// horizontal film offset (same unit as gauge)
this.updateProjectionMatrix();}copy(source,recursive){super.copy(source,recursive);this.fov=source.fov;this.zoom=source.zoom;this.near=source.near;this.far=source.far;this.focus=source.focus;this.aspect=source.aspect;this.view=source.view===null?null:Object.assign({},source.view);this.filmGauge=source.filmGauge;this.filmOffset=source.filmOffset;return this;}/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */setFocalLength(focalLength){/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */const vExtentSlope=0.5*this.getFilmHeight()/focalLength;this.fov=RAD2DEG*2*Math.atan(vExtentSlope);this.updateProjectionMatrix();}/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */getFocalLength(){const vExtentSlope=Math.tan(DEG2RAD*0.5*this.fov);return 0.5*this.getFilmHeight()/vExtentSlope;}getEffectiveFOV(){return RAD2DEG*2*Math.atan(Math.tan(DEG2RAD*0.5*this.fov)/this.zoom);}getFilmWidth(){// film not completely covered in portrait format (aspect < 1)
return this.filmGauge*Math.min(this.aspect,1);}getFilmHeight(){// film not completely covered in landscape format (aspect > 1)
return this.filmGauge/Math.max(this.aspect,1);}/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */setViewOffset(fullWidth,fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();}clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();}updateProjectionMatrix(){const near=this.near;let top=near*Math.tan(DEG2RAD*0.5*this.fov)/this.zoom;let height=2*top;let width=this.aspect*height;let left=-0.5*width;const view=this.view;if(this.view!==null&&this.view.enabled){const fullWidth=view.fullWidth,fullHeight=view.fullHeight;left+=view.offsetX*width/fullWidth;top-=view.offsetY*height/fullHeight;width*=view.width/fullWidth;height*=view.height/fullHeight;}const skew=this.filmOffset;if(skew!==0)left+=near*skew/this.getFilmWidth();this.projectionMatrix.makePerspective(left,left+width,top,top-height,near,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert();}toJSON(meta){const data=super.toJSON(meta);data.object.fov=this.fov;data.object.zoom=this.zoom;data.object.near=this.near;data.object.far=this.far;data.object.focus=this.focus;data.object.aspect=this.aspect;if(this.view!==null)data.object.view=Object.assign({},this.view);data.object.filmGauge=this.filmGauge;data.object.filmOffset=this.filmOffset;return data;}}exports.PerspectiveCamera=PerspectiveCamera;PerspectiveCamera.prototype.isPerspectiveCamera=true;const fov=90,aspect=1;class CubeCamera extends Object3D{constructor(near,far,renderTarget){super();this.type='CubeCamera';if(renderTarget.isWebGLCubeRenderTarget!==true){console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');return;}this.renderTarget=renderTarget;const cameraPX=new PerspectiveCamera(fov,aspect,near,far);cameraPX.layers=this.layers;cameraPX.up.set(0,-1,0);cameraPX.lookAt(new Vector3(1,0,0));this.add(cameraPX);const cameraNX=new PerspectiveCamera(fov,aspect,near,far);cameraNX.layers=this.layers;cameraNX.up.set(0,-1,0);cameraNX.lookAt(new Vector3(-1,0,0));this.add(cameraNX);const cameraPY=new PerspectiveCamera(fov,aspect,near,far);cameraPY.layers=this.layers;cameraPY.up.set(0,0,1);cameraPY.lookAt(new Vector3(0,1,0));this.add(cameraPY);const cameraNY=new PerspectiveCamera(fov,aspect,near,far);cameraNY.layers=this.layers;cameraNY.up.set(0,0,-1);cameraNY.lookAt(new Vector3(0,-1,0));this.add(cameraNY);const cameraPZ=new PerspectiveCamera(fov,aspect,near,far);cameraPZ.layers=this.layers;cameraPZ.up.set(0,-1,0);cameraPZ.lookAt(new Vector3(0,0,1));this.add(cameraPZ);const cameraNZ=new PerspectiveCamera(fov,aspect,near,far);cameraNZ.layers=this.layers;cameraNZ.up.set(0,-1,0);cameraNZ.lookAt(new Vector3(0,0,-1));this.add(cameraNZ);}update(renderer,scene){if(this.parent===null)this.updateMatrixWorld();const renderTarget=this.renderTarget;const[cameraPX,cameraNX,cameraPY,cameraNY,cameraPZ,cameraNZ]=this.children;const currentXrEnabled=renderer.xr.enabled;const currentRenderTarget=renderer.getRenderTarget();renderer.xr.enabled=false;const generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=false;renderer.setRenderTarget(renderTarget,0);renderer.render(scene,cameraPX);renderer.setRenderTarget(renderTarget,1);renderer.render(scene,cameraNX);renderer.setRenderTarget(renderTarget,2);renderer.render(scene,cameraPY);renderer.setRenderTarget(renderTarget,3);renderer.render(scene,cameraNY);renderer.setRenderTarget(renderTarget,4);renderer.render(scene,cameraPZ);renderTarget.texture.generateMipmaps=generateMipmaps;renderer.setRenderTarget(renderTarget,5);renderer.render(scene,cameraNZ);renderer.setRenderTarget(currentRenderTarget);renderer.xr.enabled=currentXrEnabled;renderTarget.texture.needsPMREMUpdate=true;}}exports.CubeCamera=CubeCamera;class CubeTexture extends Texture{constructor(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){images=images!==undefined?images:[];mapping=mapping!==undefined?mapping:CubeReflectionMapping;super(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.flipY=false;}get images(){return this.image;}set images(value){this.image=value;}}exports.CubeTexture=CubeTexture;CubeTexture.prototype.isCubeTexture=true;class WebGLCubeRenderTarget extends WebGLRenderTarget{constructor(size,options={}){super(size,size,options);const image={width:size,height:size,depth:1};const images=[image,image,image,image,image,image];this.texture=new CubeTexture(images,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
this.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=options.generateMipmaps!==undefined?options.generateMipmaps:false;this.texture.minFilter=options.minFilter!==undefined?options.minFilter:LinearFilter;}fromEquirectangularTexture(renderer,texture){this.texture.type=texture.type;this.texture.format=RGBAFormat;// see #18859
this.texture.encoding=texture.encoding;this.texture.generateMipmaps=texture.generateMipmaps;this.texture.minFilter=texture.minFilter;this.texture.magFilter=texture.magFilter;const shader={uniforms:{tEquirect:{value:null}},vertexShader:/* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:/* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`};const geometry=new BoxGeometry(5,5,5);const material=new ShaderMaterial({name:'CubemapFromEquirect',uniforms:cloneUniforms(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,side:BackSide,blending:NoBlending});material.uniforms.tEquirect.value=texture;const mesh=new Mesh(geometry,material);const currentMinFilter=texture.minFilter;// Avoid blurred poles
if(texture.minFilter===LinearMipmapLinearFilter)texture.minFilter=LinearFilter;const camera=new CubeCamera(1,10,this);camera.update(renderer,mesh);texture.minFilter=currentMinFilter;mesh.geometry.dispose();mesh.material.dispose();return this;}clear(renderer,color,depth,stencil){const currentRenderTarget=renderer.getRenderTarget();for(let i=0;i<6;i++){renderer.setRenderTarget(this,i);renderer.clear(color,depth,stencil);}renderer.setRenderTarget(currentRenderTarget);}}exports.WebGLCubeRenderTarget=WebGLCubeRenderTarget;WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget=true;const _vector1=/*@__PURE__*/new Vector3();const _vector2=/*@__PURE__*/new Vector3();const _normalMatrix=/*@__PURE__*/new Matrix3();class Plane{constructor(normal=new Vector3(1,0,0),constant=0){// normal is assumed to be normalized
this.normal=normal;this.constant=constant;}set(normal,constant){this.normal.copy(normal);this.constant=constant;return this;}setComponents(x,y,z,w){this.normal.set(x,y,z);this.constant=w;return this;}setFromNormalAndCoplanarPoint(normal,point){this.normal.copy(normal);this.constant=-point.dot(this.normal);return this;}setFromCoplanarPoints(a,b,c){const normal=_vector1.subVectors(c,b).cross(_vector2.subVectors(a,b)).normalize();// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
this.setFromNormalAndCoplanarPoint(normal,a);return this;}copy(plane){this.normal.copy(plane.normal);this.constant=plane.constant;return this;}normalize(){// Note: will lead to a divide by zero if the plane is invalid.
const inverseNormalLength=1.0/this.normal.length();this.normal.multiplyScalar(inverseNormalLength);this.constant*=inverseNormalLength;return this;}negate(){this.constant*=-1;this.normal.negate();return this;}distanceToPoint(point){return this.normal.dot(point)+this.constant;}distanceToSphere(sphere){return this.distanceToPoint(sphere.center)-sphere.radius;}projectPoint(point,target){return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);}intersectLine(line,target){const direction=line.delta(_vector1);const denominator=this.normal.dot(direction);if(denominator===0){// line is coplanar, return origin
if(this.distanceToPoint(line.start)===0){return target.copy(line.start);}// Unsure if this is the correct method to handle this case.
return null;}const t=-(line.start.dot(this.normal)+this.constant)/denominator;if(t<0||t>1){return null;}return target.copy(direction).multiplyScalar(t).add(line.start);}intersectsLine(line){// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
const startSign=this.distanceToPoint(line.start);const endSign=this.distanceToPoint(line.end);return startSign<0&&endSign>0||endSign<0&&startSign>0;}intersectsBox(box){return box.intersectsPlane(this);}intersectsSphere(sphere){return sphere.intersectsPlane(this);}coplanarPoint(target){return target.copy(this.normal).multiplyScalar(-this.constant);}applyMatrix4(matrix,optionalNormalMatrix){const normalMatrix=optionalNormalMatrix||_normalMatrix.getNormalMatrix(matrix);const referencePoint=this.coplanarPoint(_vector1).applyMatrix4(matrix);const normal=this.normal.applyMatrix3(normalMatrix).normalize();this.constant=-referencePoint.dot(normal);return this;}translate(offset){this.constant-=offset.dot(this.normal);return this;}equals(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant;}clone(){return new this.constructor().copy(this);}}exports.Plane=Plane;Plane.prototype.isPlane=true;const _sphere$2=/*@__PURE__*/new Sphere();const _vector$7=/*@__PURE__*/new Vector3();class Frustum{constructor(p0=new Plane(),p1=new Plane(),p2=new Plane(),p3=new Plane(),p4=new Plane(),p5=new Plane()){this.planes=[p0,p1,p2,p3,p4,p5];}set(p0,p1,p2,p3,p4,p5){const planes=this.planes;planes[0].copy(p0);planes[1].copy(p1);planes[2].copy(p2);planes[3].copy(p3);planes[4].copy(p4);planes[5].copy(p5);return this;}copy(frustum){const planes=this.planes;for(let i=0;i<6;i++){planes[i].copy(frustum.planes[i]);}return this;}setFromProjectionMatrix(m){const planes=this.planes;const me=m.elements;const me0=me[0],me1=me[1],me2=me[2],me3=me[3];const me4=me[4],me5=me[5],me6=me[6],me7=me[7];const me8=me[8],me9=me[9],me10=me[10],me11=me[11];const me12=me[12],me13=me[13],me14=me[14],me15=me[15];planes[0].setComponents(me3-me0,me7-me4,me11-me8,me15-me12).normalize();planes[1].setComponents(me3+me0,me7+me4,me11+me8,me15+me12).normalize();planes[2].setComponents(me3+me1,me7+me5,me11+me9,me15+me13).normalize();planes[3].setComponents(me3-me1,me7-me5,me11-me9,me15-me13).normalize();planes[4].setComponents(me3-me2,me7-me6,me11-me10,me15-me14).normalize();planes[5].setComponents(me3+me2,me7+me6,me11+me10,me15+me14).normalize();return this;}intersectsObject(object){const geometry=object.geometry;if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);return this.intersectsSphere(_sphere$2);}intersectsSprite(sprite){_sphere$2.center.set(0,0,0);_sphere$2.radius=0.7071067811865476;_sphere$2.applyMatrix4(sprite.matrixWorld);return this.intersectsSphere(_sphere$2);}intersectsSphere(sphere){const planes=this.planes;const center=sphere.center;const negRadius=-sphere.radius;for(let i=0;i<6;i++){const distance=planes[i].distanceToPoint(center);if(distance<negRadius){return false;}}return true;}intersectsBox(box){const planes=this.planes;for(let i=0;i<6;i++){const plane=planes[i];// corner at max distance
_vector$7.x=plane.normal.x>0?box.max.x:box.min.x;_vector$7.y=plane.normal.y>0?box.max.y:box.min.y;_vector$7.z=plane.normal.z>0?box.max.z:box.min.z;if(plane.distanceToPoint(_vector$7)<0){return false;}}return true;}containsPoint(point){const planes=this.planes;for(let i=0;i<6;i++){if(planes[i].distanceToPoint(point)<0){return false;}}return true;}clone(){return new this.constructor().copy(this);}}exports.Frustum=Frustum;function WebGLAnimation(){let context=null;let isAnimating=false;let animationLoop=null;let requestId=null;function onAnimationFrame(time,frame){animationLoop(time,frame);requestId=context.requestAnimationFrame(onAnimationFrame);}return{start:function(){if(isAnimating===true)return;if(animationLoop===null)return;requestId=context.requestAnimationFrame(onAnimationFrame);isAnimating=true;},stop:function(){context.cancelAnimationFrame(requestId);isAnimating=false;},setAnimationLoop:function(callback){animationLoop=callback;},setContext:function(value){context=value;}};}function WebGLAttributes(gl,capabilities){const isWebGL2=capabilities.isWebGL2;const buffers=new WeakMap();function createBuffer(attribute,bufferType){const array=attribute.array;const usage=attribute.usage;const buffer=gl.createBuffer();gl.bindBuffer(bufferType,buffer);gl.bufferData(bufferType,array,usage);attribute.onUploadCallback();let type;if(array instanceof Float32Array){type=5126;}else if(array instanceof Uint16Array){if(attribute.isFloat16BufferAttribute){if(isWebGL2){type=5131;}else{throw new Error('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');}}else{type=5123;}}else if(array instanceof Int16Array){type=5122;}else if(array instanceof Uint32Array){type=5125;}else if(array instanceof Int32Array){type=5124;}else if(array instanceof Int8Array){type=5120;}else if(array instanceof Uint8Array){type=5121;}else if(array instanceof Uint8ClampedArray){type=5121;}else{throw new Error('THREE.WebGLAttributes: Unsupported buffer data format: '+array);}return{buffer:buffer,type:type,bytesPerElement:array.BYTES_PER_ELEMENT,version:attribute.version};}function updateBuffer(buffer,attribute,bufferType){const array=attribute.array;const updateRange=attribute.updateRange;gl.bindBuffer(bufferType,buffer);if(updateRange.count===-1){// Not using update ranges
gl.bufferSubData(bufferType,0,array);}else{if(isWebGL2){gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array,updateRange.offset,updateRange.count);}else{gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array.subarray(updateRange.offset,updateRange.offset+updateRange.count));}updateRange.count=-1;// reset range
}}//
function get(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;return buffers.get(attribute);}function remove(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;const data=buffers.get(attribute);if(data){gl.deleteBuffer(data.buffer);buffers.delete(attribute);}}function update(attribute,bufferType){if(attribute.isGLBufferAttribute){const cached=buffers.get(attribute);if(!cached||cached.version<attribute.version){buffers.set(attribute,{buffer:attribute.buffer,type:attribute.type,bytesPerElement:attribute.elementSize,version:attribute.version});}return;}if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;const data=buffers.get(attribute);if(data===undefined){buffers.set(attribute,createBuffer(attribute,bufferType));}else if(data.version<attribute.version){updateBuffer(data.buffer,attribute,bufferType);data.version=attribute.version;}}return{get:get,remove:remove,update:update};}class PlaneGeometry extends BufferGeometry{constructor(width=1,height=1,widthSegments=1,heightSegments=1){super();this.type='PlaneGeometry';this.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};const width_half=width/2;const height_half=height/2;const gridX=Math.floor(widthSegments);const gridY=Math.floor(heightSegments);const gridX1=gridX+1;const gridY1=gridY+1;const segment_width=width/gridX;const segment_height=height/gridY;//
const indices=[];const vertices=[];const normals=[];const uvs=[];for(let iy=0;iy<gridY1;iy++){const y=iy*segment_height-height_half;for(let ix=0;ix<gridX1;ix++){const x=ix*segment_width-width_half;vertices.push(x,-y,0);normals.push(0,0,1);uvs.push(ix/gridX);uvs.push(1-iy/gridY);}}for(let iy=0;iy<gridY;iy++){for(let ix=0;ix<gridX;ix++){const a=ix+gridX1*iy;const b=ix+gridX1*(iy+1);const c=ix+1+gridX1*(iy+1);const d=ix+1+gridX1*iy;indices.push(a,b,d);indices.push(b,c,d);}}this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}static fromJSON(data){return new PlaneGeometry(data.width,data.height,data.widthSegments,data.heightSegments);}}exports.PlaneGeometry=exports.PlaneBufferGeometry=PlaneGeometry;var alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var alphatest_fragment="#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";var alphatest_pars_fragment="#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";var aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";var aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var begin_vertex="vec3 transformed = vec3( position );";var beginnormal_vertex="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var bsdfs="vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var color_fragment="#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";var color_pars_fragment="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_pars_vertex="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_vertex="#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";var common="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var defaultnormal_vertex="vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var encodings_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );";var encodings_pars_fragment="vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";var envmap_fragment="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var envmap_common_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var envmap_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var envmap_vertex="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var fog_vertex="#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";var fog_pars_vertex="#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";var fog_fragment="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var gradientmap_pars_fragment="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";var lightmap_fragment="#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";var lights_pars_begin="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";var envmap_physical_pars_fragment="#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";var lights_toon_fragment="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var lights_toon_pars_fragment="varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";var lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var lights_phong_pars_fragment="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";var lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";var lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var lights_fragment_begin="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";var map_fragment="#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";var map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var map_particle_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var map_particle_pars_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var morphcolor_vertex="#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ]\n\t\t#endif\n\t}\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tfloat texelIndex = float( vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";var normal_fragment_begin="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";var normal_fragment_maps="#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var normal_pars_fragment="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var normal_pars_vertex="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var normal_vertex="#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";var clearcoat_normal_fragment_begin="#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";var clearcoat_normal_fragment_maps="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";var clearcoat_pars_fragment="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";var output_fragment="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var project_vertex="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var dithering_fragment="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var dithering_pars_fragment="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";var shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";var shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";var skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var tonemapping_pars_fragment="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var transmission_fragment="#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";var transmission_pars_fragment="#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";var uv_pars_fragment="#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";var uv_pars_vertex="#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";var uv_vertex="#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";var uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";var uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";var uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";const vertex$g="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const fragment$g="uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";const vertex$f="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const fragment$f="#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";const vertex$e="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";const fragment$e="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";const vertex$d="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";const fragment$d="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";const vertex$c="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";const fragment$c="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";const vertex$b="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const fragment$b="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const vertex$a="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$a="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$9="#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$9="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$8="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";const fragment$8="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$7="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";const fragment$7="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";const vertex$6="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$6="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$5="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";const fragment$5="#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$4="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$4="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$3="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";const fragment$3="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const vertex$2="#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$2="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";const vertex$1="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const fragment$1="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";const ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,alphatest_pars_fragment:alphatest_pars_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphcolor_vertex:morphcolor_vertex,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normal_pars_fragment:normal_pars_fragment,normal_pars_vertex:normal_pars_vertex,normal_vertex:normal_vertex,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_pars_fragment:clearcoat_pars_fragment,output_fragment:output_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,transmission_fragment:transmission_fragment,transmission_pars_fragment:transmission_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,background_vert:vertex$g,background_frag:fragment$g,cube_vert:vertex$f,cube_frag:fragment$f,depth_vert:vertex$e,depth_frag:fragment$e,distanceRGBA_vert:vertex$d,distanceRGBA_frag:fragment$d,equirect_vert:vertex$c,equirect_frag:fragment$c,linedashed_vert:vertex$b,linedashed_frag:fragment$b,meshbasic_vert:vertex$a,meshbasic_frag:fragment$a,meshlambert_vert:vertex$9,meshlambert_frag:fragment$9,meshmatcap_vert:vertex$8,meshmatcap_frag:fragment$8,meshnormal_vert:vertex$7,meshnormal_frag:fragment$7,meshphong_vert:vertex$6,meshphong_frag:fragment$6,meshphysical_vert:vertex$5,meshphysical_frag:fragment$5,meshtoon_vert:vertex$4,meshtoon_frag:fragment$4,points_vert:vertex$3,points_frag:fragment$3,shadow_vert:vertex$2,shadow_frag:fragment$2,sprite_vert:vertex$1,sprite_frag:fragment$1};/**
 * Uniforms library for shared webgl shaders
 */exports.ShaderChunk=ShaderChunk;const UniformsLib={common:{diffuse:{value:new Color(0xffffff)},opacity:{value:1.0},map:{value:null},uvTransform:{value:new Matrix3()},uv2Transform:{value:new Matrix3()},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1.0},// basic, lambert, phong
ior:{value:1.5},// standard, physical
refractionRatio:{value:0.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:0.00025},fogNear:{value:1},fogFar:{value:2000},fogColor:{value:new Color(0xffffff)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color(0xffffff)},opacity:{value:1.0},size:{value:1.0},scale:{value:1.0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Matrix3()}},sprite:{diffuse:{value:new Color(0xffffff)},opacity:{value:1.0},center:{value:new Vector2(0.5,0.5)},rotation:{value:0.0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Matrix3()}}};exports.UniformsLib=UniformsLib;const ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},specular:{value:new Color(0x111111)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},roughness:{value:1.0},metalness:{value:0.0},envMapIntensity:{value:1}// temporary
}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.meshnormal_vert,fragmentShader:ShaderChunk.meshnormal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3()},t2D:{value:null}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */cube:{uniforms:mergeUniforms([UniformsLib.envmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3()},nearDistance:{value:1},farDistance:{value:1000}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0x00000)},opacity:{value:1.0}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};exports.ShaderLib=ShaderLib;ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new Color(0x000000)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Vector2()},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Color(0x000000)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Color(1,1,1)},specularColorMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};function WebGLBackground(renderer,cubemaps,state,objects,alpha,premultipliedAlpha){const clearColor=new Color(0x000000);let clearAlpha=alpha===true?0:1;let planeMesh;let boxMesh;let currentBackground=null;let currentBackgroundVersion=0;let currentTonemapping=null;function render(renderList,scene){let forceClear=false;let background=scene.isScene===true?scene.background:null;if(background&&background.isTexture){background=cubemaps.get(background);}// Ignore background in AR
// TODO: Reconsider this.
const xr=renderer.xr;const session=xr.getSession&&xr.getSession();if(session&&session.environmentBlendMode==='additive'){background=null;}if(background===null){setClear(clearColor,clearAlpha);}else if(background&&background.isColor){setClear(background,1);forceClear=true;}if(renderer.autoClear||forceClear){renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil);}if(background&&(background.isCubeTexture||background.mapping===CubeUVReflectionMapping)){if(boxMesh===undefined){boxMesh=new Mesh(new BoxGeometry(1,1,1),new ShaderMaterial({name:'BackgroundCubeMaterial',uniforms:cloneUniforms(ShaderLib.cube.uniforms),vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:false,depthWrite:false,fog:false}));boxMesh.geometry.deleteAttribute('normal');boxMesh.geometry.deleteAttribute('uv');boxMesh.onBeforeRender=function(renderer,scene,camera){this.matrixWorld.copyPosition(camera.matrixWorld);};// enable code injection for non-built-in material
Object.defineProperty(boxMesh.material,'envMap',{get:function(){return this.uniforms.envMap.value;}});objects.update(boxMesh);}boxMesh.material.uniforms.envMap.value=background;boxMesh.material.uniforms.flipEnvMap.value=background.isCubeTexture&&background.isRenderTargetTexture===false?-1:1;if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping){boxMesh.material.needsUpdate=true;currentBackground=background;currentBackgroundVersion=background.version;currentTonemapping=renderer.toneMapping;}// push to the pre-sorted opaque render list
renderList.unshift(boxMesh,boxMesh.geometry,boxMesh.material,0,0,null);}else if(background&&background.isTexture){if(planeMesh===undefined){planeMesh=new Mesh(new PlaneGeometry(2,2),new ShaderMaterial({name:'BackgroundMaterial',uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:false,depthWrite:false,fog:false}));planeMesh.geometry.deleteAttribute('normal');// enable code injection for non-built-in material
Object.defineProperty(planeMesh.material,'map',{get:function(){return this.uniforms.t2D.value;}});objects.update(planeMesh);}planeMesh.material.uniforms.t2D.value=background;if(background.matrixAutoUpdate===true){background.updateMatrix();}planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping){planeMesh.material.needsUpdate=true;currentBackground=background;currentBackgroundVersion=background.version;currentTonemapping=renderer.toneMapping;}// push to the pre-sorted opaque render list
renderList.unshift(planeMesh,planeMesh.geometry,planeMesh.material,0,0,null);}}function setClear(color,alpha){state.buffers.color.setClear(color.r,color.g,color.b,alpha,premultipliedAlpha);}return{getClearColor:function(){return clearColor;},setClearColor:function(color,alpha=1){clearColor.set(color);clearAlpha=alpha;setClear(clearColor,clearAlpha);},getClearAlpha:function(){return clearAlpha;},setClearAlpha:function(alpha){clearAlpha=alpha;setClear(clearColor,clearAlpha);},render:render};}function WebGLBindingStates(gl,extensions,attributes,capabilities){const maxVertexAttributes=gl.getParameter(34921);const extension=capabilities.isWebGL2?null:extensions.get('OES_vertex_array_object');const vaoAvailable=capabilities.isWebGL2||extension!==null;const bindingStates={};const defaultState=createBindingState(null);let currentState=defaultState;function setup(object,material,program,geometry,index){let updateBuffers=false;if(vaoAvailable){const state=getBindingState(geometry,program,material);if(currentState!==state){currentState=state;bindVertexArrayObject(currentState.object);}updateBuffers=needsUpdate(geometry,index);if(updateBuffers)saveCache(geometry,index);}else{const wireframe=material.wireframe===true;if(currentState.geometry!==geometry.id||currentState.program!==program.id||currentState.wireframe!==wireframe){currentState.geometry=geometry.id;currentState.program=program.id;currentState.wireframe=wireframe;updateBuffers=true;}}if(object.isInstancedMesh===true){updateBuffers=true;}if(index!==null){attributes.update(index,34963);}if(updateBuffers){setupVertexAttributes(object,material,program,geometry);if(index!==null){gl.bindBuffer(34963,attributes.get(index).buffer);}}}function createVertexArrayObject(){if(capabilities.isWebGL2)return gl.createVertexArray();return extension.createVertexArrayOES();}function bindVertexArrayObject(vao){if(capabilities.isWebGL2)return gl.bindVertexArray(vao);return extension.bindVertexArrayOES(vao);}function deleteVertexArrayObject(vao){if(capabilities.isWebGL2)return gl.deleteVertexArray(vao);return extension.deleteVertexArrayOES(vao);}function getBindingState(geometry,program,material){const wireframe=material.wireframe===true;let programMap=bindingStates[geometry.id];if(programMap===undefined){programMap={};bindingStates[geometry.id]=programMap;}let stateMap=programMap[program.id];if(stateMap===undefined){stateMap={};programMap[program.id]=stateMap;}let state=stateMap[wireframe];if(state===undefined){state=createBindingState(createVertexArrayObject());stateMap[wireframe]=state;}return state;}function createBindingState(vao){const newAttributes=[];const enabledAttributes=[];const attributeDivisors=[];for(let i=0;i<maxVertexAttributes;i++){newAttributes[i]=0;enabledAttributes[i]=0;attributeDivisors[i]=0;}return{// for backward compatibility on non-VAO support browser
geometry:null,program:null,wireframe:false,newAttributes:newAttributes,enabledAttributes:enabledAttributes,attributeDivisors:attributeDivisors,object:vao,attributes:{},index:null};}function needsUpdate(geometry,index){const cachedAttributes=currentState.attributes;const geometryAttributes=geometry.attributes;let attributesNum=0;for(const key in geometryAttributes){const cachedAttribute=cachedAttributes[key];const geometryAttribute=geometryAttributes[key];if(cachedAttribute===undefined)return true;if(cachedAttribute.attribute!==geometryAttribute)return true;if(cachedAttribute.data!==geometryAttribute.data)return true;attributesNum++;}if(currentState.attributesNum!==attributesNum)return true;if(currentState.index!==index)return true;return false;}function saveCache(geometry,index){const cache={};const attributes=geometry.attributes;let attributesNum=0;for(const key in attributes){const attribute=attributes[key];const data={};data.attribute=attribute;if(attribute.data){data.data=attribute.data;}cache[key]=data;attributesNum++;}currentState.attributes=cache;currentState.attributesNum=attributesNum;currentState.index=index;}function initAttributes(){const newAttributes=currentState.newAttributes;for(let i=0,il=newAttributes.length;i<il;i++){newAttributes[i]=0;}}function enableAttribute(attribute){enableAttributeAndDivisor(attribute,0);}function enableAttributeAndDivisor(attribute,meshPerAttribute){const newAttributes=currentState.newAttributes;const enabledAttributes=currentState.enabledAttributes;const attributeDivisors=currentState.attributeDivisors;newAttributes[attribute]=1;if(enabledAttributes[attribute]===0){gl.enableVertexAttribArray(attribute);enabledAttributes[attribute]=1;}if(attributeDivisors[attribute]!==meshPerAttribute){const extension=capabilities.isWebGL2?gl:extensions.get('ANGLE_instanced_arrays');extension[capabilities.isWebGL2?'vertexAttribDivisor':'vertexAttribDivisorANGLE'](attribute,meshPerAttribute);attributeDivisors[attribute]=meshPerAttribute;}}function disableUnusedAttributes(){const newAttributes=currentState.newAttributes;const enabledAttributes=currentState.enabledAttributes;for(let i=0,il=enabledAttributes.length;i<il;i++){if(enabledAttributes[i]!==newAttributes[i]){gl.disableVertexAttribArray(i);enabledAttributes[i]=0;}}}function vertexAttribPointer(index,size,type,normalized,stride,offset){if(capabilities.isWebGL2===true&&(type===5124||type===5125)){gl.vertexAttribIPointer(index,size,type,stride,offset);}else{gl.vertexAttribPointer(index,size,type,normalized,stride,offset);}}function setupVertexAttributes(object,material,program,geometry){if(capabilities.isWebGL2===false&&(object.isInstancedMesh||geometry.isInstancedBufferGeometry)){if(extensions.get('ANGLE_instanced_arrays')===null)return;}initAttributes();const geometryAttributes=geometry.attributes;const programAttributes=program.getAttributes();const materialDefaultAttributeValues=material.defaultAttributeValues;for(const name in programAttributes){const programAttribute=programAttributes[name];if(programAttribute.location>=0){let geometryAttribute=geometryAttributes[name];if(geometryAttribute===undefined){if(name==='instanceMatrix'&&object.instanceMatrix)geometryAttribute=object.instanceMatrix;if(name==='instanceColor'&&object.instanceColor)geometryAttribute=object.instanceColor;}if(geometryAttribute!==undefined){const normalized=geometryAttribute.normalized;const size=geometryAttribute.itemSize;const attribute=attributes.get(geometryAttribute);// TODO Attribute may not be available on context restore
if(attribute===undefined)continue;const buffer=attribute.buffer;const type=attribute.type;const bytesPerElement=attribute.bytesPerElement;if(geometryAttribute.isInterleavedBufferAttribute){const data=geometryAttribute.data;const stride=data.stride;const offset=geometryAttribute.offset;if(data.isInstancedInterleavedBuffer){for(let i=0;i<programAttribute.locationSize;i++){enableAttributeAndDivisor(programAttribute.location+i,data.meshPerAttribute);}if(object.isInstancedMesh!==true&&geometry._maxInstanceCount===undefined){geometry._maxInstanceCount=data.meshPerAttribute*data.count;}}else{for(let i=0;i<programAttribute.locationSize;i++){enableAttribute(programAttribute.location+i);}}gl.bindBuffer(34962,buffer);for(let i=0;i<programAttribute.locationSize;i++){vertexAttribPointer(programAttribute.location+i,size/programAttribute.locationSize,type,normalized,stride*bytesPerElement,(offset+size/programAttribute.locationSize*i)*bytesPerElement);}}else{if(geometryAttribute.isInstancedBufferAttribute){for(let i=0;i<programAttribute.locationSize;i++){enableAttributeAndDivisor(programAttribute.location+i,geometryAttribute.meshPerAttribute);}if(object.isInstancedMesh!==true&&geometry._maxInstanceCount===undefined){geometry._maxInstanceCount=geometryAttribute.meshPerAttribute*geometryAttribute.count;}}else{for(let i=0;i<programAttribute.locationSize;i++){enableAttribute(programAttribute.location+i);}}gl.bindBuffer(34962,buffer);for(let i=0;i<programAttribute.locationSize;i++){vertexAttribPointer(programAttribute.location+i,size/programAttribute.locationSize,type,normalized,size*bytesPerElement,size/programAttribute.locationSize*i*bytesPerElement);}}}else if(materialDefaultAttributeValues!==undefined){const value=materialDefaultAttributeValues[name];if(value!==undefined){switch(value.length){case 2:gl.vertexAttrib2fv(programAttribute.location,value);break;case 3:gl.vertexAttrib3fv(programAttribute.location,value);break;case 4:gl.vertexAttrib4fv(programAttribute.location,value);break;default:gl.vertexAttrib1fv(programAttribute.location,value);}}}}}disableUnusedAttributes();}function dispose(){reset();for(const geometryId in bindingStates){const programMap=bindingStates[geometryId];for(const programId in programMap){const stateMap=programMap[programId];for(const wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[programId];}delete bindingStates[geometryId];}}function releaseStatesOfGeometry(geometry){if(bindingStates[geometry.id]===undefined)return;const programMap=bindingStates[geometry.id];for(const programId in programMap){const stateMap=programMap[programId];for(const wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[programId];}delete bindingStates[geometry.id];}function releaseStatesOfProgram(program){for(const geometryId in bindingStates){const programMap=bindingStates[geometryId];if(programMap[program.id]===undefined)continue;const stateMap=programMap[program.id];for(const wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[program.id];}}function reset(){resetDefaultState();if(currentState===defaultState)return;currentState=defaultState;bindVertexArrayObject(currentState.object);}// for backward-compatilibity
function resetDefaultState(){defaultState.geometry=null;defaultState.program=null;defaultState.wireframe=false;}return{setup:setup,reset:reset,resetDefaultState:resetDefaultState,dispose:dispose,releaseStatesOfGeometry:releaseStatesOfGeometry,releaseStatesOfProgram:releaseStatesOfProgram,initAttributes:initAttributes,enableAttribute:enableAttribute,disableUnusedAttributes:disableUnusedAttributes};}function WebGLBufferRenderer(gl,extensions,info,capabilities){const isWebGL2=capabilities.isWebGL2;let mode;function setMode(value){mode=value;}function render(start,count){gl.drawArrays(mode,start,count);info.update(count,mode,1);}function renderInstances(start,count,primcount){if(primcount===0)return;let extension,methodName;if(isWebGL2){extension=gl;methodName='drawArraysInstanced';}else{extension=extensions.get('ANGLE_instanced_arrays');methodName='drawArraysInstancedANGLE';if(extension===null){console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[methodName](mode,start,count,primcount);info.update(count,mode,primcount);}//
this.setMode=setMode;this.render=render;this.renderInstances=renderInstances;}function WebGLCapabilities(gl,extensions,parameters){let maxAnisotropy;function getMaxAnisotropy(){if(maxAnisotropy!==undefined)return maxAnisotropy;if(extensions.has('EXT_texture_filter_anisotropic')===true){const extension=extensions.get('EXT_texture_filter_anisotropic');maxAnisotropy=gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);}else{maxAnisotropy=0;}return maxAnisotropy;}function getMaxPrecision(precision){if(precision==='highp'){if(gl.getShaderPrecisionFormat(35633,36338).precision>0&&gl.getShaderPrecisionFormat(35632,36338).precision>0){return'highp';}precision='mediump';}if(precision==='mediump'){if(gl.getShaderPrecisionFormat(35633,36337).precision>0&&gl.getShaderPrecisionFormat(35632,36337).precision>0){return'mediump';}}return'lowp';}const isWebGL2=typeof WebGL2RenderingContext!=='undefined'&&gl instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!=='undefined'&&gl instanceof WebGL2ComputeRenderingContext;let precision=parameters.precision!==undefined?parameters.precision:'highp';const maxPrecision=getMaxPrecision(precision);if(maxPrecision!==precision){console.warn('THREE.WebGLRenderer:',precision,'not supported, using',maxPrecision,'instead.');precision=maxPrecision;}const drawBuffers=isWebGL2||extensions.has('WEBGL_draw_buffers');const logarithmicDepthBuffer=parameters.logarithmicDepthBuffer===true;const maxTextures=gl.getParameter(34930);const maxVertexTextures=gl.getParameter(35660);const maxTextureSize=gl.getParameter(3379);const maxCubemapSize=gl.getParameter(34076);const maxAttributes=gl.getParameter(34921);const maxVertexUniforms=gl.getParameter(36347);const maxVaryings=gl.getParameter(36348);const maxFragmentUniforms=gl.getParameter(36349);const vertexTextures=maxVertexTextures>0;const floatFragmentTextures=isWebGL2||extensions.has('OES_texture_float');const floatVertexTextures=vertexTextures&&floatFragmentTextures;const maxSamples=isWebGL2?gl.getParameter(36183):0;return{isWebGL2:isWebGL2,drawBuffers:drawBuffers,getMaxAnisotropy:getMaxAnisotropy,getMaxPrecision:getMaxPrecision,precision:precision,logarithmicDepthBuffer:logarithmicDepthBuffer,maxTextures:maxTextures,maxVertexTextures:maxVertexTextures,maxTextureSize:maxTextureSize,maxCubemapSize:maxCubemapSize,maxAttributes:maxAttributes,maxVertexUniforms:maxVertexUniforms,maxVaryings:maxVaryings,maxFragmentUniforms:maxFragmentUniforms,vertexTextures:vertexTextures,floatFragmentTextures:floatFragmentTextures,floatVertexTextures:floatVertexTextures,maxSamples:maxSamples};}function WebGLClipping(properties){const scope=this;let globalState=null,numGlobalPlanes=0,localClippingEnabled=false,renderingShadows=false;const plane=new Plane(),viewNormalMatrix=new Matrix3(),uniform={value:null,needsUpdate:false};this.uniform=uniform;this.numPlanes=0;this.numIntersection=0;this.init=function(planes,enableLocalClipping,camera){const enabled=planes.length!==0||enableLocalClipping||// enable state of previous frame - the clipping code has to
// run another frame in order to reset the state:
numGlobalPlanes!==0||localClippingEnabled;localClippingEnabled=enableLocalClipping;globalState=projectPlanes(planes,camera,0);numGlobalPlanes=planes.length;return enabled;};this.beginShadows=function(){renderingShadows=true;projectPlanes(null);};this.endShadows=function(){renderingShadows=false;resetGlobalState();};this.setState=function(material,camera,useCache){const planes=material.clippingPlanes,clipIntersection=material.clipIntersection,clipShadows=material.clipShadows;const materialProperties=properties.get(material);if(!localClippingEnabled||planes===null||planes.length===0||renderingShadows&&!clipShadows){// there's no local clipping
if(renderingShadows){// there's no global clipping
projectPlanes(null);}else{resetGlobalState();}}else{const nGlobal=renderingShadows?0:numGlobalPlanes,lGlobal=nGlobal*4;let dstArray=materialProperties.clippingState||null;uniform.value=dstArray;// ensure unique state
dstArray=projectPlanes(planes,camera,lGlobal,useCache);for(let i=0;i!==lGlobal;++i){dstArray[i]=globalState[i];}materialProperties.clippingState=dstArray;this.numIntersection=clipIntersection?this.numPlanes:0;this.numPlanes+=nGlobal;}};function resetGlobalState(){if(uniform.value!==globalState){uniform.value=globalState;uniform.needsUpdate=numGlobalPlanes>0;}scope.numPlanes=numGlobalPlanes;scope.numIntersection=0;}function projectPlanes(planes,camera,dstOffset,skipTransform){const nPlanes=planes!==null?planes.length:0;let dstArray=null;if(nPlanes!==0){dstArray=uniform.value;if(skipTransform!==true||dstArray===null){const flatSize=dstOffset+nPlanes*4,viewMatrix=camera.matrixWorldInverse;viewNormalMatrix.getNormalMatrix(viewMatrix);if(dstArray===null||dstArray.length<flatSize){dstArray=new Float32Array(flatSize);}for(let i=0,i4=dstOffset;i!==nPlanes;++i,i4+=4){plane.copy(planes[i]).applyMatrix4(viewMatrix,viewNormalMatrix);plane.normal.toArray(dstArray,i4);dstArray[i4+3]=plane.constant;}}uniform.value=dstArray;uniform.needsUpdate=true;}scope.numPlanes=nPlanes;scope.numIntersection=0;return dstArray;}}function WebGLCubeMaps(renderer){let cubemaps=new WeakMap();function mapTextureMapping(texture,mapping){if(mapping===EquirectangularReflectionMapping){texture.mapping=CubeReflectionMapping;}else if(mapping===EquirectangularRefractionMapping){texture.mapping=CubeRefractionMapping;}return texture;}function get(texture){if(texture&&texture.isTexture&&texture.isRenderTargetTexture===false){const mapping=texture.mapping;if(mapping===EquirectangularReflectionMapping||mapping===EquirectangularRefractionMapping){if(cubemaps.has(texture)){const cubemap=cubemaps.get(texture).texture;return mapTextureMapping(cubemap,texture.mapping);}else{const image=texture.image;if(image&&image.height>0){const renderTarget=new WebGLCubeRenderTarget(image.height/2);renderTarget.fromEquirectangularTexture(renderer,texture);cubemaps.set(texture,renderTarget);texture.addEventListener('dispose',onTextureDispose);return mapTextureMapping(renderTarget.texture,texture.mapping);}else{// image not yet ready. try the conversion next frame
return null;}}}}return texture;}function onTextureDispose(event){const texture=event.target;texture.removeEventListener('dispose',onTextureDispose);const cubemap=cubemaps.get(texture);if(cubemap!==undefined){cubemaps.delete(texture);cubemap.dispose();}}function dispose(){cubemaps=new WeakMap();}return{get:get,dispose:dispose};}class OrthographicCamera extends Camera{constructor(left=-1,right=1,top=1,bottom=-1,near=0.1,far=2000){super();this.type='OrthographicCamera';this.zoom=1;this.view=null;this.left=left;this.right=right;this.top=top;this.bottom=bottom;this.near=near;this.far=far;this.updateProjectionMatrix();}copy(source,recursive){super.copy(source,recursive);this.left=source.left;this.right=source.right;this.top=source.top;this.bottom=source.bottom;this.near=source.near;this.far=source.far;this.zoom=source.zoom;this.view=source.view===null?null:Object.assign({},source.view);return this;}setViewOffset(fullWidth,fullHeight,x,y,width,height){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();}clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();}updateProjectionMatrix(){const dx=(this.right-this.left)/(2*this.zoom);const dy=(this.top-this.bottom)/(2*this.zoom);const cx=(this.right+this.left)/2;const cy=(this.top+this.bottom)/2;let left=cx-dx;let right=cx+dx;let top=cy+dy;let bottom=cy-dy;if(this.view!==null&&this.view.enabled){const scaleW=(this.right-this.left)/this.view.fullWidth/this.zoom;const scaleH=(this.top-this.bottom)/this.view.fullHeight/this.zoom;left+=scaleW*this.view.offsetX;right=left+scaleW*this.view.width;top-=scaleH*this.view.offsetY;bottom=top-scaleH*this.view.height;}this.projectionMatrix.makeOrthographic(left,right,top,bottom,this.near,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert();}toJSON(meta){const data=super.toJSON(meta);data.object.zoom=this.zoom;data.object.left=this.left;data.object.right=this.right;data.object.top=this.top;data.object.bottom=this.bottom;data.object.near=this.near;data.object.far=this.far;if(this.view!==null)data.object.view=Object.assign({},this.view);return data;}}exports.OrthographicCamera=OrthographicCamera;OrthographicCamera.prototype.isOrthographicCamera=true;const LOD_MIN=4;// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const EXTRA_LOD_SIGMA=[0.125,0.215,0.35,0.446,0.526,0.582];// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
const MAX_SAMPLES=20;const _flatCamera=/*@__PURE__*/new OrthographicCamera();const _clearColor=/*@__PURE__*/new Color();let _oldTarget=null;// Golden Ratio
const PHI=(1+Math.sqrt(5))/2;const INV_PHI=1/PHI;// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
const _axisDirections=[/*@__PURE__*/new Vector3(1,1,1),/*@__PURE__*/new Vector3(-1,1,1),/*@__PURE__*/new Vector3(1,1,-1),/*@__PURE__*/new Vector3(-1,1,-1),/*@__PURE__*/new Vector3(0,PHI,INV_PHI),/*@__PURE__*/new Vector3(0,PHI,-INV_PHI),/*@__PURE__*/new Vector3(INV_PHI,0,PHI),/*@__PURE__*/new Vector3(-INV_PHI,0,PHI),/*@__PURE__*/new Vector3(PHI,INV_PHI,0),/*@__PURE__*/new Vector3(-PHI,INV_PHI,0)];/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/class PMREMGenerator{constructor(renderer){this._renderer=renderer;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial);}/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */fromScene(scene,sigma=0,near=0.1,far=100){_oldTarget=this._renderer.getRenderTarget();this._setSize(256);const cubeUVRenderTarget=this._allocateTargets();cubeUVRenderTarget.depthBuffer=true;this._sceneToCubeUV(scene,near,far,cubeUVRenderTarget);if(sigma>0){this._blur(cubeUVRenderTarget,0,0,sigma);}this._applyPMREM(cubeUVRenderTarget);this._cleanup(cubeUVRenderTarget);return cubeUVRenderTarget;}/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */fromEquirectangular(equirectangular,renderTarget=null){return this._fromTexture(equirectangular,renderTarget);}/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */fromCubemap(cubemap,renderTarget=null){return this._fromTexture(cubemap,renderTarget);}/**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=_getCubemapMaterial();this._compileMaterial(this._cubemapMaterial);}}/**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=_getEquirectMaterial();this._compileMaterial(this._equirectMaterial);}}/**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */dispose(){this._dispose();if(this._cubemapMaterial!==null)this._cubemapMaterial.dispose();if(this._equirectMaterial!==null)this._equirectMaterial.dispose();}// private interface
_setSize(cubeSize){this._lodMax=Math.floor(Math.log2(cubeSize));this._cubeSize=Math.pow(2,this._lodMax);}_dispose(){this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();for(let i=0;i<this._lodPlanes.length;i++){this._lodPlanes[i].dispose();}}_cleanup(outputTarget){this._renderer.setRenderTarget(_oldTarget);outputTarget.scissorTest=false;_setViewport(outputTarget,0,0,outputTarget.width,outputTarget.height);}_fromTexture(texture,renderTarget){if(texture.mapping===CubeReflectionMapping||texture.mapping===CubeRefractionMapping){this._setSize(texture.image.length===0?16:texture.image[0].width||texture.image[0].image.width);}else{// Equirectangular
this._setSize(texture.image.width/4);}_oldTarget=this._renderer.getRenderTarget();const cubeUVRenderTarget=renderTarget||this._allocateTargets();this._textureToCubeUV(texture,cubeUVRenderTarget);this._applyPMREM(cubeUVRenderTarget);this._cleanup(cubeUVRenderTarget);return cubeUVRenderTarget;}_allocateTargets(){const width=3*Math.max(this._cubeSize,16*7);const height=4*this._cubeSize-32;const params={magFilter:LinearFilter,minFilter:LinearFilter,generateMipmaps:false,type:HalfFloatType,format:RGBAFormat,encoding:LinearEncoding,depthBuffer:false};const cubeUVRenderTarget=_createRenderTarget(width,height,params);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==width){if(this._pingPongRenderTarget!==null){this._dispose();}this._pingPongRenderTarget=_createRenderTarget(width,height,params);const{_lodMax}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=_createPlanes(_lodMax));this._blurMaterial=_getBlurShader(_lodMax,width,height);}return cubeUVRenderTarget;}_compileMaterial(material){const tmpMesh=new Mesh(this._lodPlanes[0],material);this._renderer.compile(tmpMesh,_flatCamera);}_sceneToCubeUV(scene,near,far,cubeUVRenderTarget){const fov=90;const aspect=1;const cubeCamera=new PerspectiveCamera(fov,aspect,near,far);const upSign=[1,-1,1,1,1,1];const forwardSign=[1,1,1,-1,-1,-1];const renderer=this._renderer;const originalAutoClear=renderer.autoClear;const toneMapping=renderer.toneMapping;renderer.getClearColor(_clearColor);renderer.toneMapping=NoToneMapping;renderer.autoClear=false;const backgroundMaterial=new MeshBasicMaterial({name:'PMREM.Background',side:BackSide,depthWrite:false,depthTest:false});const backgroundBox=new Mesh(new BoxGeometry(),backgroundMaterial);let useSolidColor=false;const background=scene.background;if(background){if(background.isColor){backgroundMaterial.color.copy(background);scene.background=null;useSolidColor=true;}}else{backgroundMaterial.color.copy(_clearColor);useSolidColor=true;}for(let i=0;i<6;i++){const col=i%3;if(col===0){cubeCamera.up.set(0,upSign[i],0);cubeCamera.lookAt(forwardSign[i],0,0);}else if(col===1){cubeCamera.up.set(0,0,upSign[i]);cubeCamera.lookAt(0,forwardSign[i],0);}else{cubeCamera.up.set(0,upSign[i],0);cubeCamera.lookAt(0,0,forwardSign[i]);}const size=this._cubeSize;_setViewport(cubeUVRenderTarget,col*size,i>2?size:0,size,size);renderer.setRenderTarget(cubeUVRenderTarget);if(useSolidColor){renderer.render(backgroundBox,cubeCamera);}renderer.render(scene,cubeCamera);}backgroundBox.geometry.dispose();backgroundBox.material.dispose();renderer.toneMapping=toneMapping;renderer.autoClear=originalAutoClear;scene.background=background;}_textureToCubeUV(texture,cubeUVRenderTarget){const renderer=this._renderer;const isCubeTexture=texture.mapping===CubeReflectionMapping||texture.mapping===CubeRefractionMapping;if(isCubeTexture){if(this._cubemapMaterial===null){this._cubemapMaterial=_getCubemapMaterial();}this._cubemapMaterial.uniforms.flipEnvMap.value=texture.isRenderTargetTexture===false?-1:1;}else{if(this._equirectMaterial===null){this._equirectMaterial=_getEquirectMaterial();}}const material=isCubeTexture?this._cubemapMaterial:this._equirectMaterial;const mesh=new Mesh(this._lodPlanes[0],material);const uniforms=material.uniforms;uniforms['envMap'].value=texture;const size=this._cubeSize;_setViewport(cubeUVRenderTarget,0,0,3*size,2*size);renderer.setRenderTarget(cubeUVRenderTarget);renderer.render(mesh,_flatCamera);}_applyPMREM(cubeUVRenderTarget){const renderer=this._renderer;const autoClear=renderer.autoClear;renderer.autoClear=false;for(let i=1;i<this._lodPlanes.length;i++){const sigma=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]);const poleAxis=_axisDirections[(i-1)%_axisDirections.length];this._blur(cubeUVRenderTarget,i-1,i,sigma,poleAxis);}renderer.autoClear=autoClear;}/**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */_blur(cubeUVRenderTarget,lodIn,lodOut,sigma,poleAxis){const pingPongRenderTarget=this._pingPongRenderTarget;this._halfBlur(cubeUVRenderTarget,pingPongRenderTarget,lodIn,lodOut,sigma,'latitudinal',poleAxis);this._halfBlur(pingPongRenderTarget,cubeUVRenderTarget,lodOut,lodOut,sigma,'longitudinal',poleAxis);}_halfBlur(targetIn,targetOut,lodIn,lodOut,sigmaRadians,direction,poleAxis){const renderer=this._renderer;const blurMaterial=this._blurMaterial;if(direction!=='latitudinal'&&direction!=='longitudinal'){console.error('blur direction must be either latitudinal or longitudinal!');}// Number of standard deviations at which to cut off the discrete approximation.
const STANDARD_DEVIATIONS=3;const blurMesh=new Mesh(this._lodPlanes[lodOut],blurMaterial);const blurUniforms=blurMaterial.uniforms;const pixels=this._sizeLods[lodIn]-1;const radiansPerPixel=isFinite(sigmaRadians)?Math.PI/(2*pixels):2*Math.PI/(2*MAX_SAMPLES-1);const sigmaPixels=sigmaRadians/radiansPerPixel;const samples=isFinite(sigmaRadians)?1+Math.floor(STANDARD_DEVIATIONS*sigmaPixels):MAX_SAMPLES;if(samples>MAX_SAMPLES){console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);}const weights=[];let sum=0;for(let i=0;i<MAX_SAMPLES;++i){const x=i/sigmaPixels;const weight=Math.exp(-x*x/2);weights.push(weight);if(i===0){sum+=weight;}else if(i<samples){sum+=2*weight;}}for(let i=0;i<weights.length;i++){weights[i]=weights[i]/sum;}blurUniforms['envMap'].value=targetIn.texture;blurUniforms['samples'].value=samples;blurUniforms['weights'].value=weights;blurUniforms['latitudinal'].value=direction==='latitudinal';if(poleAxis){blurUniforms['poleAxis'].value=poleAxis;}const{_lodMax}=this;blurUniforms['dTheta'].value=radiansPerPixel;blurUniforms['mipInt'].value=_lodMax-lodIn;const outputSize=this._sizeLods[lodOut];const x=3*outputSize*(lodOut>_lodMax-LOD_MIN?lodOut-_lodMax+LOD_MIN:0);const y=4*(this._cubeSize-outputSize);_setViewport(targetOut,x,y,3*outputSize,2*outputSize);renderer.setRenderTarget(targetOut);renderer.render(blurMesh,_flatCamera);}}exports.PMREMGenerator=PMREMGenerator;function _createPlanes(lodMax){const lodPlanes=[];const sizeLods=[];const sigmas=[];let lod=lodMax;const totalLods=lodMax-LOD_MIN+1+EXTRA_LOD_SIGMA.length;for(let i=0;i<totalLods;i++){const sizeLod=Math.pow(2,lod);sizeLods.push(sizeLod);let sigma=1.0/sizeLod;if(i>lodMax-LOD_MIN){sigma=EXTRA_LOD_SIGMA[i-lodMax+LOD_MIN-1];}else if(i===0){sigma=0;}sigmas.push(sigma);const texelSize=1.0/(sizeLod-1);const min=-texelSize/2;const max=1+texelSize/2;const uv1=[min,min,max,min,max,max,min,min,max,max,min,max];const cubeFaces=6;const vertices=6;const positionSize=3;const uvSize=2;const faceIndexSize=1;const position=new Float32Array(positionSize*vertices*cubeFaces);const uv=new Float32Array(uvSize*vertices*cubeFaces);const faceIndex=new Float32Array(faceIndexSize*vertices*cubeFaces);for(let face=0;face<cubeFaces;face++){const x=face%3*2/3-1;const y=face>2?0:-1;const coordinates=[x,y,0,x+2/3,y,0,x+2/3,y+1,0,x,y,0,x+2/3,y+1,0,x,y+1,0];position.set(coordinates,positionSize*vertices*face);uv.set(uv1,uvSize*vertices*face);const fill=[face,face,face,face,face,face];faceIndex.set(fill,faceIndexSize*vertices*face);}const planes=new BufferGeometry();planes.setAttribute('position',new BufferAttribute(position,positionSize));planes.setAttribute('uv',new BufferAttribute(uv,uvSize));planes.setAttribute('faceIndex',new BufferAttribute(faceIndex,faceIndexSize));lodPlanes.push(planes);if(lod>LOD_MIN){lod--;}}return{lodPlanes,sizeLods,sigmas};}function _createRenderTarget(width,height,params){const cubeUVRenderTarget=new WebGLRenderTarget(width,height,params);cubeUVRenderTarget.texture.mapping=CubeUVReflectionMapping;cubeUVRenderTarget.texture.name='PMREM.cubeUv';cubeUVRenderTarget.scissorTest=true;return cubeUVRenderTarget;}function _setViewport(target,x,y,width,height){target.viewport.set(x,y,width,height);target.scissor.set(x,y,width,height);}function _getBlurShader(lodMax,width,height){const weights=new Float32Array(MAX_SAMPLES);const poleAxis=new Vector3(0,1,0);const shaderMaterial=new ShaderMaterial({name:'SphericalGaussianBlur',defines:{'n':MAX_SAMPLES,'CUBEUV_TEXEL_WIDTH':1.0/width,'CUBEUV_TEXEL_HEIGHT':1.0/height,'CUBEUV_MAX_MIP':`${lodMax}.0`},uniforms:{'envMap':{value:null},'samples':{value:1},'weights':{value:weights},'latitudinal':{value:false},'dTheta':{value:0},'mipInt':{value:0},'poleAxis':{value:poleAxis}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false});return shaderMaterial;}function _getEquirectMaterial(){return new ShaderMaterial({name:'EquirectangularToCubeUV',uniforms:{'envMap':{value:null}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false});}function _getCubemapMaterial(){return new ShaderMaterial({name:'CubemapToCubeUV',uniforms:{'envMap':{value:null},'flipEnvMap':{value:-1}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:NoBlending,depthTest:false,depthWrite:false});}function _getCommonVertexShader(){return(/* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`);}function WebGLCubeUVMaps(renderer){let cubeUVmaps=new WeakMap();let pmremGenerator=null;function get(texture){if(texture&&texture.isTexture){const mapping=texture.mapping;const isEquirectMap=mapping===EquirectangularReflectionMapping||mapping===EquirectangularRefractionMapping;const isCubeMap=mapping===CubeReflectionMapping||mapping===CubeRefractionMapping;// equirect/cube map to cubeUV conversion
if(isEquirectMap||isCubeMap){if(texture.isRenderTargetTexture&&texture.needsPMREMUpdate===true){texture.needsPMREMUpdate=false;let renderTarget=cubeUVmaps.get(texture);if(pmremGenerator===null)pmremGenerator=new PMREMGenerator(renderer);renderTarget=isEquirectMap?pmremGenerator.fromEquirectangular(texture,renderTarget):pmremGenerator.fromCubemap(texture,renderTarget);cubeUVmaps.set(texture,renderTarget);return renderTarget.texture;}else{if(cubeUVmaps.has(texture)){return cubeUVmaps.get(texture).texture;}else{const image=texture.image;if(isEquirectMap&&image&&image.height>0||isCubeMap&&image&&isCubeTextureComplete(image)){if(pmremGenerator===null)pmremGenerator=new PMREMGenerator(renderer);const renderTarget=isEquirectMap?pmremGenerator.fromEquirectangular(texture):pmremGenerator.fromCubemap(texture);cubeUVmaps.set(texture,renderTarget);texture.addEventListener('dispose',onTextureDispose);return renderTarget.texture;}else{// image not yet ready. try the conversion next frame
return null;}}}}}return texture;}function isCubeTextureComplete(image){let count=0;const length=6;for(let i=0;i<length;i++){if(image[i]!==undefined)count++;}return count===length;}function onTextureDispose(event){const texture=event.target;texture.removeEventListener('dispose',onTextureDispose);const cubemapUV=cubeUVmaps.get(texture);if(cubemapUV!==undefined){cubeUVmaps.delete(texture);cubemapUV.dispose();}}function dispose(){cubeUVmaps=new WeakMap();if(pmremGenerator!==null){pmremGenerator.dispose();pmremGenerator=null;}}return{get:get,dispose:dispose};}function WebGLExtensions(gl){const extensions={};function getExtension(name){if(extensions[name]!==undefined){return extensions[name];}let extension;switch(name){case'WEBGL_depth_texture':extension=gl.getExtension('WEBGL_depth_texture')||gl.getExtension('MOZ_WEBGL_depth_texture')||gl.getExtension('WEBKIT_WEBGL_depth_texture');break;case'EXT_texture_filter_anisotropic':extension=gl.getExtension('EXT_texture_filter_anisotropic')||gl.getExtension('MOZ_EXT_texture_filter_anisotropic')||gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');break;case'WEBGL_compressed_texture_s3tc':extension=gl.getExtension('WEBGL_compressed_texture_s3tc')||gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');break;case'WEBGL_compressed_texture_pvrtc':extension=gl.getExtension('WEBGL_compressed_texture_pvrtc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');break;default:extension=gl.getExtension(name);}extensions[name]=extension;return extension;}return{has:function(name){return getExtension(name)!==null;},init:function(capabilities){if(capabilities.isWebGL2){getExtension('EXT_color_buffer_float');}else{getExtension('WEBGL_depth_texture');getExtension('OES_texture_float');getExtension('OES_texture_half_float');getExtension('OES_texture_half_float_linear');getExtension('OES_standard_derivatives');getExtension('OES_element_index_uint');getExtension('OES_vertex_array_object');getExtension('ANGLE_instanced_arrays');}getExtension('OES_texture_float_linear');getExtension('EXT_color_buffer_half_float');getExtension('WEBGL_multisampled_render_to_texture');},get:function(name){const extension=getExtension(name);if(extension===null){console.warn('THREE.WebGLRenderer: '+name+' extension not supported.');}return extension;}};}function WebGLGeometries(gl,attributes,info,bindingStates){const geometries={};const wireframeAttributes=new WeakMap();function onGeometryDispose(event){const geometry=event.target;if(geometry.index!==null){attributes.remove(geometry.index);}for(const name in geometry.attributes){attributes.remove(geometry.attributes[name]);}geometry.removeEventListener('dispose',onGeometryDispose);delete geometries[geometry.id];const attribute=wireframeAttributes.get(geometry);if(attribute){attributes.remove(attribute);wireframeAttributes.delete(geometry);}bindingStates.releaseStatesOfGeometry(geometry);if(geometry.isInstancedBufferGeometry===true){delete geometry._maxInstanceCount;}//
info.memory.geometries--;}function get(object,geometry){if(geometries[geometry.id]===true)return geometry;geometry.addEventListener('dispose',onGeometryDispose);geometries[geometry.id]=true;info.memory.geometries++;return geometry;}function update(geometry){const geometryAttributes=geometry.attributes;// Updating index buffer in VAO now. See WebGLBindingStates.
for(const name in geometryAttributes){attributes.update(geometryAttributes[name],34962);}// morph targets
const morphAttributes=geometry.morphAttributes;for(const name in morphAttributes){const array=morphAttributes[name];for(let i=0,l=array.length;i<l;i++){attributes.update(array[i],34962);}}}function updateWireframeAttribute(geometry){const indices=[];const geometryIndex=geometry.index;const geometryPosition=geometry.attributes.position;let version=0;if(geometryIndex!==null){const array=geometryIndex.array;version=geometryIndex.version;for(let i=0,l=array.length;i<l;i+=3){const a=array[i+0];const b=array[i+1];const c=array[i+2];indices.push(a,b,b,c,c,a);}}else{const array=geometryPosition.array;version=geometryPosition.version;for(let i=0,l=array.length/3-1;i<l;i+=3){const a=i+0;const b=i+1;const c=i+2;indices.push(a,b,b,c,c,a);}}const attribute=new(arrayNeedsUint32(indices)?Uint32BufferAttribute:Uint16BufferAttribute)(indices,1);attribute.version=version;// Updating index buffer in VAO now. See WebGLBindingStates
//
const previousAttribute=wireframeAttributes.get(geometry);if(previousAttribute)attributes.remove(previousAttribute);//
wireframeAttributes.set(geometry,attribute);}function getWireframeAttribute(geometry){const currentAttribute=wireframeAttributes.get(geometry);if(currentAttribute){const geometryIndex=geometry.index;if(geometryIndex!==null){// if the attribute is obsolete, create a new one
if(currentAttribute.version<geometryIndex.version){updateWireframeAttribute(geometry);}}}else{updateWireframeAttribute(geometry);}return wireframeAttributes.get(geometry);}return{get:get,update:update,getWireframeAttribute:getWireframeAttribute};}function WebGLIndexedBufferRenderer(gl,extensions,info,capabilities){const isWebGL2=capabilities.isWebGL2;let mode;function setMode(value){mode=value;}let type,bytesPerElement;function setIndex(value){type=value.type;bytesPerElement=value.bytesPerElement;}function render(start,count){gl.drawElements(mode,count,type,start*bytesPerElement);info.update(count,mode,1);}function renderInstances(start,count,primcount){if(primcount===0)return;let extension,methodName;if(isWebGL2){extension=gl;methodName='drawElementsInstanced';}else{extension=extensions.get('ANGLE_instanced_arrays');methodName='drawElementsInstancedANGLE';if(extension===null){console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[methodName](mode,count,type,start*bytesPerElement,primcount);info.update(count,mode,primcount);}//
this.setMode=setMode;this.setIndex=setIndex;this.render=render;this.renderInstances=renderInstances;}function WebGLInfo(gl){const memory={geometries:0,textures:0};const render={frame:0,calls:0,triangles:0,points:0,lines:0};function update(count,mode,instanceCount){render.calls++;switch(mode){case 4:render.triangles+=instanceCount*(count/3);break;case 1:render.lines+=instanceCount*(count/2);break;case 3:render.lines+=instanceCount*(count-1);break;case 2:render.lines+=instanceCount*count;break;case 0:render.points+=instanceCount*count;break;default:console.error('THREE.WebGLInfo: Unknown draw mode:',mode);break;}}function reset(){render.frame++;render.calls=0;render.triangles=0;render.points=0;render.lines=0;}return{memory:memory,render:render,programs:null,autoReset:true,reset:reset,update:update};}function numericalSort(a,b){return a[0]-b[0];}function absNumericalSort(a,b){return Math.abs(b[1])-Math.abs(a[1]);}function denormalize(morph,attribute){let denominator=1;const array=attribute.isInterleavedBufferAttribute?attribute.data.array:attribute.array;if(array instanceof Int8Array)denominator=127;else if(array instanceof Int16Array)denominator=32767;else if(array instanceof Int32Array)denominator=2147483647;else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ',array);morph.divideScalar(denominator);}function WebGLMorphtargets(gl,capabilities,textures){const influencesList={};const morphInfluences=new Float32Array(8);const morphTextures=new WeakMap();const morph=new Vector4();const workInfluences=[];for(let i=0;i<8;i++){workInfluences[i]=[i,0];}function update(object,geometry,material,program){const objectInfluences=object.morphTargetInfluences;if(capabilities.isWebGL2===true){// instead of using attributes, the WebGL 2 code path encodes morph targets
// into an array of data textures. Each layer represents a single morph target.
const morphAttribute=geometry.morphAttributes.position||geometry.morphAttributes.normal||geometry.morphAttributes.color;const morphTargetsCount=morphAttribute!==undefined?morphAttribute.length:0;let entry=morphTextures.get(geometry);if(entry===undefined||entry.count!==morphTargetsCount){if(entry!==undefined)entry.texture.dispose();const hasMorphPosition=geometry.morphAttributes.position!==undefined;const hasMorphNormals=geometry.morphAttributes.normal!==undefined;const hasMorphColors=geometry.morphAttributes.color!==undefined;const morphTargets=geometry.morphAttributes.position||[];const morphNormals=geometry.morphAttributes.normal||[];const morphColors=geometry.morphAttributes.color||[];let vertexDataCount=0;if(hasMorphPosition===true)vertexDataCount=1;if(hasMorphNormals===true)vertexDataCount=2;if(hasMorphColors===true)vertexDataCount=3;let width=geometry.attributes.position.count*vertexDataCount;let height=1;if(width>capabilities.maxTextureSize){height=Math.ceil(width/capabilities.maxTextureSize);width=capabilities.maxTextureSize;}const buffer=new Float32Array(width*height*4*morphTargetsCount);const texture=new DataArrayTexture(buffer,width,height,morphTargetsCount);texture.format=RGBAFormat;// using RGBA since RGB might be emulated (and is thus slower)
texture.type=FloatType;texture.needsUpdate=true;// fill buffer
const vertexDataStride=vertexDataCount*4;for(let i=0;i<morphTargetsCount;i++){const morphTarget=morphTargets[i];const morphNormal=morphNormals[i];const morphColor=morphColors[i];const offset=width*height*4*i;for(let j=0;j<morphTarget.count;j++){const stride=j*vertexDataStride;if(hasMorphPosition===true){morph.fromBufferAttribute(morphTarget,j);if(morphTarget.normalized===true)denormalize(morph,morphTarget);buffer[offset+stride+0]=morph.x;buffer[offset+stride+1]=morph.y;buffer[offset+stride+2]=morph.z;buffer[offset+stride+3]=0;}if(hasMorphNormals===true){morph.fromBufferAttribute(morphNormal,j);if(morphNormal.normalized===true)denormalize(morph,morphNormal);buffer[offset+stride+4]=morph.x;buffer[offset+stride+5]=morph.y;buffer[offset+stride+6]=morph.z;buffer[offset+stride+7]=0;}if(hasMorphColors===true){morph.fromBufferAttribute(morphColor,j);if(morphColor.normalized===true)denormalize(morph,morphNormal);buffer[offset+stride+8]=morph.x;buffer[offset+stride+9]=morph.y;buffer[offset+stride+10]=morph.z;buffer[offset+stride+11]=morphColor.itemSize===4?morph.w:1;}}}entry={count:morphTargetsCount,texture:texture,size:new Vector2(width,height)};morphTextures.set(geometry,entry);function disposeTexture(){texture.dispose();morphTextures.delete(geometry);geometry.removeEventListener('dispose',disposeTexture);}geometry.addEventListener('dispose',disposeTexture);}//
let morphInfluencesSum=0;for(let i=0;i<objectInfluences.length;i++){morphInfluencesSum+=objectInfluences[i];}const morphBaseInfluence=geometry.morphTargetsRelative?1:1-morphInfluencesSum;program.getUniforms().setValue(gl,'morphTargetBaseInfluence',morphBaseInfluence);program.getUniforms().setValue(gl,'morphTargetInfluences',objectInfluences);program.getUniforms().setValue(gl,'morphTargetsTexture',entry.texture,textures);program.getUniforms().setValue(gl,'morphTargetsTextureSize',entry.size);}else{// When object doesn't have morph target influences defined, we treat it as a 0-length array
// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
const length=objectInfluences===undefined?0:objectInfluences.length;let influences=influencesList[geometry.id];if(influences===undefined||influences.length!==length){// initialise list
influences=[];for(let i=0;i<length;i++){influences[i]=[i,0];}influencesList[geometry.id]=influences;}// Collect influences
for(let i=0;i<length;i++){const influence=influences[i];influence[0]=i;influence[1]=objectInfluences[i];}influences.sort(absNumericalSort);for(let i=0;i<8;i++){if(i<length&&influences[i][1]){workInfluences[i][0]=influences[i][0];workInfluences[i][1]=influences[i][1];}else{workInfluences[i][0]=Number.MAX_SAFE_INTEGER;workInfluences[i][1]=0;}}workInfluences.sort(numericalSort);const morphTargets=geometry.morphAttributes.position;const morphNormals=geometry.morphAttributes.normal;let morphInfluencesSum=0;for(let i=0;i<8;i++){const influence=workInfluences[i];const index=influence[0];const value=influence[1];if(index!==Number.MAX_SAFE_INTEGER&&value){if(morphTargets&&geometry.getAttribute('morphTarget'+i)!==morphTargets[index]){geometry.setAttribute('morphTarget'+i,morphTargets[index]);}if(morphNormals&&geometry.getAttribute('morphNormal'+i)!==morphNormals[index]){geometry.setAttribute('morphNormal'+i,morphNormals[index]);}morphInfluences[i]=value;morphInfluencesSum+=value;}else{if(morphTargets&&geometry.hasAttribute('morphTarget'+i)===true){geometry.deleteAttribute('morphTarget'+i);}if(morphNormals&&geometry.hasAttribute('morphNormal'+i)===true){geometry.deleteAttribute('morphNormal'+i);}morphInfluences[i]=0;}}// GLSL shader uses formula baseinfluence * base + sum(target * influence)
// This allows us to switch between absolute morphs and relative morphs without changing shader code
// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
const morphBaseInfluence=geometry.morphTargetsRelative?1:1-morphInfluencesSum;program.getUniforms().setValue(gl,'morphTargetBaseInfluence',morphBaseInfluence);program.getUniforms().setValue(gl,'morphTargetInfluences',morphInfluences);}}return{update:update};}function WebGLObjects(gl,geometries,attributes,info){let updateMap=new WeakMap();function update(object){const frame=info.render.frame;const geometry=object.geometry;const buffergeometry=geometries.get(object,geometry);// Update once per frame
if(updateMap.get(buffergeometry)!==frame){geometries.update(buffergeometry);updateMap.set(buffergeometry,frame);}if(object.isInstancedMesh){if(object.hasEventListener('dispose',onInstancedMeshDispose)===false){object.addEventListener('dispose',onInstancedMeshDispose);}attributes.update(object.instanceMatrix,34962);if(object.instanceColor!==null){attributes.update(object.instanceColor,34962);}}return buffergeometry;}function dispose(){updateMap=new WeakMap();}function onInstancedMeshDispose(event){const instancedMesh=event.target;instancedMesh.removeEventListener('dispose',onInstancedMeshDispose);attributes.remove(instancedMesh.instanceMatrix);if(instancedMesh.instanceColor!==null)attributes.remove(instancedMesh.instanceColor);}return{update:update,dispose:dispose};}/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */const emptyTexture=new Texture();const emptyArrayTexture=new DataArrayTexture();const empty3dTexture=new Data3DTexture();const emptyCubeTexture=new CubeTexture();// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
const arrayCacheF32=[];const arrayCacheI32=[];// Float32Array caches used for uploading Matrix uniforms
const mat4array=new Float32Array(16);const mat3array=new Float32Array(9);const mat2array=new Float32Array(4);// Flattening for arrays of vectors and matrices
function flatten(array,nBlocks,blockSize){const firstElem=array[0];if(firstElem<=0||firstElem>0)return array;// unoptimized: ! isNaN( firstElem )
// see http://jacksondunstan.com/articles/983
const n=nBlocks*blockSize;let r=arrayCacheF32[n];if(r===undefined){r=new Float32Array(n);arrayCacheF32[n]=r;}if(nBlocks!==0){firstElem.toArray(r,0);for(let i=1,offset=0;i!==nBlocks;++i){offset+=blockSize;array[i].toArray(r,offset);}}return r;}function arraysEqual(a,b){if(a.length!==b.length)return false;for(let i=0,l=a.length;i<l;i++){if(a[i]!==b[i])return false;}return true;}function copyArray(a,b){for(let i=0,l=b.length;i<l;i++){a[i]=b[i];}}// Texture unit allocation
function allocTexUnits(textures,n){let r=arrayCacheI32[n];if(r===undefined){r=new Int32Array(n);arrayCacheI32[n]=r;}for(let i=0;i!==n;++i){r[i]=textures.allocateTextureUnit();}return r;}// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function setValueV1f(gl,v){const cache=this.cache;if(cache[0]===v)return;gl.uniform1f(this.addr,v);cache[0]=v;}// Single float vector (from flat array or THREE.VectorN)
function setValueV2f(gl,v){const cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y){gl.uniform2f(this.addr,v.x,v.y);cache[0]=v.x;cache[1]=v.y;}}else{if(arraysEqual(cache,v))return;gl.uniform2fv(this.addr,v);copyArray(cache,v);}}function setValueV3f(gl,v){const cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z){gl.uniform3f(this.addr,v.x,v.y,v.z);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;}}else if(v.r!==undefined){if(cache[0]!==v.r||cache[1]!==v.g||cache[2]!==v.b){gl.uniform3f(this.addr,v.r,v.g,v.b);cache[0]=v.r;cache[1]=v.g;cache[2]=v.b;}}else{if(arraysEqual(cache,v))return;gl.uniform3fv(this.addr,v);copyArray(cache,v);}}function setValueV4f(gl,v){const cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z||cache[3]!==v.w){gl.uniform4f(this.addr,v.x,v.y,v.z,v.w);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;cache[3]=v.w;}}else{if(arraysEqual(cache,v))return;gl.uniform4fv(this.addr,v);copyArray(cache,v);}}// Single matrix (from flat array or THREE.MatrixN)
function setValueM2(gl,v){const cache=this.cache;const elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix2fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat2array.set(elements);gl.uniformMatrix2fv(this.addr,false,mat2array);copyArray(cache,elements);}}function setValueM3(gl,v){const cache=this.cache;const elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix3fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat3array.set(elements);gl.uniformMatrix3fv(this.addr,false,mat3array);copyArray(cache,elements);}}function setValueM4(gl,v){const cache=this.cache;const elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix4fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat4array.set(elements);gl.uniformMatrix4fv(this.addr,false,mat4array);copyArray(cache,elements);}}// Single integer / boolean
function setValueV1i(gl,v){const cache=this.cache;if(cache[0]===v)return;gl.uniform1i(this.addr,v);cache[0]=v;}// Single integer / boolean vector (from flat array)
function setValueV2i(gl,v){const cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform2iv(this.addr,v);copyArray(cache,v);}function setValueV3i(gl,v){const cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform3iv(this.addr,v);copyArray(cache,v);}function setValueV4i(gl,v){const cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform4iv(this.addr,v);copyArray(cache,v);}// Single unsigned integer
function setValueV1ui(gl,v){const cache=this.cache;if(cache[0]===v)return;gl.uniform1ui(this.addr,v);cache[0]=v;}// Single unsigned integer vector (from flat array)
function setValueV2ui(gl,v){const cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform2uiv(this.addr,v);copyArray(cache,v);}function setValueV3ui(gl,v){const cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform3uiv(this.addr,v);copyArray(cache,v);}function setValueV4ui(gl,v){const cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform4uiv(this.addr,v);copyArray(cache,v);}// Single texture (2D / Cube)
function setValueT1(gl,v,textures){const cache=this.cache;const unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture2D(v||emptyTexture,unit);}function setValueT3D1(gl,v,textures){const cache=this.cache;const unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture3D(v||empty3dTexture,unit);}function setValueT6(gl,v,textures){const cache=this.cache;const unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTextureCube(v||emptyCubeTexture,unit);}function setValueT2DArray1(gl,v,textures){const cache=this.cache;const unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture2DArray(v||emptyArrayTexture,unit);}// Helper to pick the right setter for the singular case
function getSingularSetter(type){switch(type){case 0x1406:return setValueV1f;// FLOAT
case 0x8b50:return setValueV2f;// _VEC2
case 0x8b51:return setValueV3f;// _VEC3
case 0x8b52:return setValueV4f;// _VEC4
case 0x8b5a:return setValueM2;// _MAT2
case 0x8b5b:return setValueM3;// _MAT3
case 0x8b5c:return setValueM4;// _MAT4
case 0x1404:case 0x8b56:return setValueV1i;// INT, BOOL
case 0x8b53:case 0x8b57:return setValueV2i;// _VEC2
case 0x8b54:case 0x8b58:return setValueV3i;// _VEC3
case 0x8b55:case 0x8b59:return setValueV4i;// _VEC4
case 0x1405:return setValueV1ui;// UINT
case 0x8dc6:return setValueV2ui;// _VEC2
case 0x8dc7:return setValueV3ui;// _VEC3
case 0x8dc8:return setValueV4ui;// _VEC4
case 0x8b5e:// SAMPLER_2D
case 0x8d66:// SAMPLER_EXTERNAL_OES
case 0x8dca:// INT_SAMPLER_2D
case 0x8dd2:// UNSIGNED_INT_SAMPLER_2D
case 0x8b62:// SAMPLER_2D_SHADOW
return setValueT1;case 0x8b5f:// SAMPLER_3D
case 0x8dcb:// INT_SAMPLER_3D
case 0x8dd3:// UNSIGNED_INT_SAMPLER_3D
return setValueT3D1;case 0x8b60:// SAMPLER_CUBE
case 0x8dcc:// INT_SAMPLER_CUBE
case 0x8dd4:// UNSIGNED_INT_SAMPLER_CUBE
case 0x8dc5:// SAMPLER_CUBE_SHADOW
return setValueT6;case 0x8dc1:// SAMPLER_2D_ARRAY
case 0x8dcf:// INT_SAMPLER_2D_ARRAY
case 0x8dd7:// UNSIGNED_INT_SAMPLER_2D_ARRAY
case 0x8dc4:// SAMPLER_2D_ARRAY_SHADOW
return setValueT2DArray1;}}// Array of scalars
function setValueV1fArray(gl,v){gl.uniform1fv(this.addr,v);}// Array of vectors (from flat array or array of THREE.VectorN)
function setValueV2fArray(gl,v){const data=flatten(v,this.size,2);gl.uniform2fv(this.addr,data);}function setValueV3fArray(gl,v){const data=flatten(v,this.size,3);gl.uniform3fv(this.addr,data);}function setValueV4fArray(gl,v){const data=flatten(v,this.size,4);gl.uniform4fv(this.addr,data);}// Array of matrices (from flat array or array of THREE.MatrixN)
function setValueM2Array(gl,v){const data=flatten(v,this.size,4);gl.uniformMatrix2fv(this.addr,false,data);}function setValueM3Array(gl,v){const data=flatten(v,this.size,9);gl.uniformMatrix3fv(this.addr,false,data);}function setValueM4Array(gl,v){const data=flatten(v,this.size,16);gl.uniformMatrix4fv(this.addr,false,data);}// Array of integer / boolean
function setValueV1iArray(gl,v){gl.uniform1iv(this.addr,v);}// Array of integer / boolean vectors (from flat array)
function setValueV2iArray(gl,v){gl.uniform2iv(this.addr,v);}function setValueV3iArray(gl,v){gl.uniform3iv(this.addr,v);}function setValueV4iArray(gl,v){gl.uniform4iv(this.addr,v);}// Array of unsigned integer
function setValueV1uiArray(gl,v){gl.uniform1uiv(this.addr,v);}// Array of unsigned integer vectors (from flat array)
function setValueV2uiArray(gl,v){gl.uniform2uiv(this.addr,v);}function setValueV3uiArray(gl,v){gl.uniform3uiv(this.addr,v);}function setValueV4uiArray(gl,v){gl.uniform4uiv(this.addr,v);}// Array of textures (2D / 3D / Cube / 2DArray)
function setValueT1Array(gl,v,textures){const n=v.length;const units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(let i=0;i!==n;++i){textures.setTexture2D(v[i]||emptyTexture,units[i]);}}function setValueT3DArray(gl,v,textures){const n=v.length;const units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(let i=0;i!==n;++i){textures.setTexture3D(v[i]||empty3dTexture,units[i]);}}function setValueT6Array(gl,v,textures){const n=v.length;const units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(let i=0;i!==n;++i){textures.setTextureCube(v[i]||emptyCubeTexture,units[i]);}}function setValueT2DArrayArray(gl,v,textures){const n=v.length;const units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(let i=0;i!==n;++i){textures.setTexture2DArray(v[i]||emptyArrayTexture,units[i]);}}// Helper to pick the right setter for a pure (bottom-level) array
function getPureArraySetter(type){switch(type){case 0x1406:return setValueV1fArray;// FLOAT
case 0x8b50:return setValueV2fArray;// _VEC2
case 0x8b51:return setValueV3fArray;// _VEC3
case 0x8b52:return setValueV4fArray;// _VEC4
case 0x8b5a:return setValueM2Array;// _MAT2
case 0x8b5b:return setValueM3Array;// _MAT3
case 0x8b5c:return setValueM4Array;// _MAT4
case 0x1404:case 0x8b56:return setValueV1iArray;// INT, BOOL
case 0x8b53:case 0x8b57:return setValueV2iArray;// _VEC2
case 0x8b54:case 0x8b58:return setValueV3iArray;// _VEC3
case 0x8b55:case 0x8b59:return setValueV4iArray;// _VEC4
case 0x1405:return setValueV1uiArray;// UINT
case 0x8dc6:return setValueV2uiArray;// _VEC2
case 0x8dc7:return setValueV3uiArray;// _VEC3
case 0x8dc8:return setValueV4uiArray;// _VEC4
case 0x8b5e:// SAMPLER_2D
case 0x8d66:// SAMPLER_EXTERNAL_OES
case 0x8dca:// INT_SAMPLER_2D
case 0x8dd2:// UNSIGNED_INT_SAMPLER_2D
case 0x8b62:// SAMPLER_2D_SHADOW
return setValueT1Array;case 0x8b5f:// SAMPLER_3D
case 0x8dcb:// INT_SAMPLER_3D
case 0x8dd3:// UNSIGNED_INT_SAMPLER_3D
return setValueT3DArray;case 0x8b60:// SAMPLER_CUBE
case 0x8dcc:// INT_SAMPLER_CUBE
case 0x8dd4:// UNSIGNED_INT_SAMPLER_CUBE
case 0x8dc5:// SAMPLER_CUBE_SHADOW
return setValueT6Array;case 0x8dc1:// SAMPLER_2D_ARRAY
case 0x8dcf:// INT_SAMPLER_2D_ARRAY
case 0x8dd7:// UNSIGNED_INT_SAMPLER_2D_ARRAY
case 0x8dc4:// SAMPLER_2D_ARRAY_SHADOW
return setValueT2DArrayArray;}}// --- Uniform Classes ---
function SingleUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.setValue=getSingularSetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
}function PureArrayUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.size=activeInfo.size;this.setValue=getPureArraySetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
}PureArrayUniform.prototype.updateCache=function(data){const cache=this.cache;if(data instanceof Float32Array&&cache.length!==data.length){this.cache=new Float32Array(data.length);}copyArray(cache,data);};function StructuredUniform(id){this.id=id;this.seq=[];this.map={};}StructuredUniform.prototype.setValue=function(gl,value,textures){const seq=this.seq;for(let i=0,n=seq.length;i!==n;++i){const u=seq[i];u.setValue(gl,value[u.id],textures);}};// --- Top-level ---
// Parser - builds up the property tree from the path strings
const RePathPart=/(\w+)(\])?(\[|\.)?/g;// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function addUniform(container,uniformObject){container.seq.push(uniformObject);container.map[uniformObject.id]=uniformObject;}function parseUniform(activeInfo,addr,container){const path=activeInfo.name,pathLength=path.length;// reset RegExp object, because of the early exit of a previous run
RePathPart.lastIndex=0;while(true){const match=RePathPart.exec(path),matchEnd=RePathPart.lastIndex;let id=match[1];const idIsIndex=match[2]===']',subscript=match[3];if(idIsIndex)id=id|0;// convert to integer
if(subscript===undefined||subscript==='['&&matchEnd+2===pathLength){// bare name or "pure" bottom-level array "[0]" suffix
addUniform(container,subscript===undefined?new SingleUniform(id,activeInfo,addr):new PureArrayUniform(id,activeInfo,addr));break;}else{// step into inner node / create it in case it doesn't exist
const map=container.map;let next=map[id];if(next===undefined){next=new StructuredUniform(id);addUniform(container,next);}container=next;}}}// Root Container
function WebGLUniforms(gl,program){this.seq=[];this.map={};const n=gl.getProgramParameter(program,35718);for(let i=0;i<n;++i){const info=gl.getActiveUniform(program,i),addr=gl.getUniformLocation(program,info.name);parseUniform(info,addr,this);}}WebGLUniforms.prototype.setValue=function(gl,name,value,textures){const u=this.map[name];if(u!==undefined)u.setValue(gl,value,textures);};WebGLUniforms.prototype.setOptional=function(gl,object,name){const v=object[name];if(v!==undefined)this.setValue(gl,name,v);};// Static interface
WebGLUniforms.upload=function(gl,seq,values,textures){for(let i=0,n=seq.length;i!==n;++i){const u=seq[i],v=values[u.id];if(v.needsUpdate!==false){// note: always updating when .needsUpdate is undefined
u.setValue(gl,v.value,textures);}}};WebGLUniforms.seqWithValue=function(seq,values){const r=[];for(let i=0,n=seq.length;i!==n;++i){const u=seq[i];if(u.id in values)r.push(u);}return r;};function WebGLShader(gl,type,string){const shader=gl.createShader(type);gl.shaderSource(shader,string);gl.compileShader(shader);return shader;}let programIdCount=0;function addLineNumbers(string){const lines=string.split('\n');for(let i=0;i<lines.length;i++){lines[i]=i+1+': '+lines[i];}return lines.join('\n');}function getEncodingComponents(encoding){switch(encoding){case LinearEncoding:return['Linear','( value )'];case sRGBEncoding:return['sRGB','( value )'];default:console.warn('THREE.WebGLProgram: Unsupported encoding:',encoding);return['Linear','( value )'];}}function getShaderErrors(gl,shader,type){const status=gl.getShaderParameter(shader,35713);const errors=gl.getShaderInfoLog(shader).trim();if(status&&errors==='')return'';// --enable-privileged-webgl-extension
// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
return type.toUpperCase()+'\n\n'+errors+'\n\n'+addLineNumbers(gl.getShaderSource(shader));}function getTexelEncodingFunction(functionName,encoding){const components=getEncodingComponents(encoding);return'vec4 '+functionName+'( vec4 value ) { return LinearTo'+components[0]+components[1]+'; }';}function getToneMappingFunction(functionName,toneMapping){let toneMappingName;switch(toneMapping){case LinearToneMapping:toneMappingName='Linear';break;case ReinhardToneMapping:toneMappingName='Reinhard';break;case CineonToneMapping:toneMappingName='OptimizedCineon';break;case ACESFilmicToneMapping:toneMappingName='ACESFilmic';break;case CustomToneMapping:toneMappingName='Custom';break;default:console.warn('THREE.WebGLProgram: Unsupported toneMapping:',toneMapping);toneMappingName='Linear';}return'vec3 '+functionName+'( vec3 color ) { return '+toneMappingName+'ToneMapping( color ); }';}function generateExtensions(parameters){const chunks=[parameters.extensionDerivatives||!!parameters.envMapCubeUVHeight||parameters.bumpMap||parameters.tangentSpaceNormalMap||parameters.clearcoatNormalMap||parameters.flatShading||parameters.shaderID==='physical'?'#extension GL_OES_standard_derivatives : enable':'',(parameters.extensionFragDepth||parameters.logarithmicDepthBuffer)&&parameters.rendererExtensionFragDepth?'#extension GL_EXT_frag_depth : enable':'',parameters.extensionDrawBuffers&&parameters.rendererExtensionDrawBuffers?'#extension GL_EXT_draw_buffers : require':'',(parameters.extensionShaderTextureLOD||parameters.envMap||parameters.transmission)&&parameters.rendererExtensionShaderTextureLod?'#extension GL_EXT_shader_texture_lod : enable':''];return chunks.filter(filterEmptyLine).join('\n');}function generateDefines(defines){const chunks=[];for(const name in defines){const value=defines[name];if(value===false)continue;chunks.push('#define '+name+' '+value);}return chunks.join('\n');}function fetchAttributeLocations(gl,program){const attributes={};const n=gl.getProgramParameter(program,35721);for(let i=0;i<n;i++){const info=gl.getActiveAttrib(program,i);const name=info.name;let locationSize=1;if(info.type===35674)locationSize=2;if(info.type===35675)locationSize=3;if(info.type===35676)locationSize=4;// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
attributes[name]={type:info.type,location:gl.getAttribLocation(program,name),locationSize:locationSize};}return attributes;}function filterEmptyLine(string){return string!=='';}function replaceLightNums(string,parameters){return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,parameters.numPointLightShadows);}function replaceClippingPlaneNums(string,parameters){return string.replace(/NUM_CLIPPING_PLANES/g,parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,parameters.numClippingPlanes-parameters.numClipIntersection);}// Resolve Includes
const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(string){return string.replace(includePattern,includeReplacer);}function includeReplacer(match,include){const string=ShaderChunk[include];if(string===undefined){throw new Error('Can not resolve #include <'+include+'>');}return resolveIncludes(string);}// Unroll Loops
const deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;const unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(string){return string.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer);}function deprecatedLoopReplacer(match,start,end,snippet){console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');return loopReplacer(match,start,end,snippet);}function loopReplacer(match,start,end,snippet){let string='';for(let i=parseInt(start);i<parseInt(end);i++){string+=snippet.replace(/\[\s*i\s*\]/g,'[ '+i+' ]').replace(/UNROLLED_LOOP_INDEX/g,i);}return string;}//
function generatePrecision(parameters){let precisionstring='precision '+parameters.precision+' float;\nprecision '+parameters.precision+' int;';if(parameters.precision==='highp'){precisionstring+='\n#define HIGH_PRECISION';}else if(parameters.precision==='mediump'){precisionstring+='\n#define MEDIUM_PRECISION';}else if(parameters.precision==='lowp'){precisionstring+='\n#define LOW_PRECISION';}return precisionstring;}function generateShadowMapTypeDefine(parameters){let shadowMapTypeDefine='SHADOWMAP_TYPE_BASIC';if(parameters.shadowMapType===PCFShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF';}else if(parameters.shadowMapType===PCFSoftShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF_SOFT';}else if(parameters.shadowMapType===VSMShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_VSM';}return shadowMapTypeDefine;}function generateEnvMapTypeDefine(parameters){let envMapTypeDefine='ENVMAP_TYPE_CUBE';if(parameters.envMap){switch(parameters.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE';break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE_UV';break;}}return envMapTypeDefine;}function generateEnvMapModeDefine(parameters){let envMapModeDefine='ENVMAP_MODE_REFLECTION';if(parameters.envMap){switch(parameters.envMapMode){case CubeRefractionMapping:case CubeUVRefractionMapping:envMapModeDefine='ENVMAP_MODE_REFRACTION';break;}}return envMapModeDefine;}function generateEnvMapBlendingDefine(parameters){let envMapBlendingDefine='ENVMAP_BLENDING_NONE';if(parameters.envMap){switch(parameters.combine){case MultiplyOperation:envMapBlendingDefine='ENVMAP_BLENDING_MULTIPLY';break;case MixOperation:envMapBlendingDefine='ENVMAP_BLENDING_MIX';break;case AddOperation:envMapBlendingDefine='ENVMAP_BLENDING_ADD';break;}}return envMapBlendingDefine;}function generateCubeUVSize(parameters){const imageHeight=parameters.envMapCubeUVHeight;if(imageHeight===null)return null;const maxMip=Math.log2(imageHeight/32+1)+3;const texelHeight=1.0/imageHeight;const texelWidth=1.0/(3*Math.max(Math.pow(2,maxMip),7*16));return{texelWidth,texelHeight,maxMip};}function WebGLProgram(renderer,cacheKey,parameters,bindingStates){// TODO Send this event to Three.js DevTools
// console.log( 'WebGLProgram', cacheKey );
const gl=renderer.getContext();const defines=parameters.defines;let vertexShader=parameters.vertexShader;let fragmentShader=parameters.fragmentShader;const shadowMapTypeDefine=generateShadowMapTypeDefine(parameters);const envMapTypeDefine=generateEnvMapTypeDefine(parameters);const envMapModeDefine=generateEnvMapModeDefine(parameters);const envMapBlendingDefine=generateEnvMapBlendingDefine(parameters);const envMapCubeUVSize=generateCubeUVSize(parameters);const customExtensions=parameters.isWebGL2?'':generateExtensions(parameters);const customDefines=generateDefines(defines);const program=gl.createProgram();let prefixVertex,prefixFragment;let versionString=parameters.glslVersion?'#version '+parameters.glslVersion+'\n':'';if(parameters.isRawShaderMaterial){prefixVertex=[customDefines].filter(filterEmptyLine).join('\n');if(prefixVertex.length>0){prefixVertex+='\n';}prefixFragment=[customExtensions,customDefines].filter(filterEmptyLine).join('\n');if(prefixFragment.length>0){prefixFragment+='\n';}}else{prefixVertex=[generatePrecision(parameters),'#define SHADER_NAME '+parameters.shaderName,customDefines,parameters.instancing?'#define USE_INSTANCING':'',parameters.instancingColor?'#define USE_INSTANCING_COLOR':'',parameters.supportsVertexTextures?'#define VERTEX_TEXTURES':'','#define MAX_BONES '+parameters.maxBones,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp2?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.normalMap&&parameters.tangentSpaceNormalMap?'#define TANGENTSPACE_NORMALMAP':'',parameters.clearcoatMap?'#define USE_CLEARCOATMAP':'',parameters.clearcoatRoughnessMap?'#define USE_CLEARCOAT_ROUGHNESSMAP':'',parameters.clearcoatNormalMap?'#define USE_CLEARCOAT_NORMALMAP':'',parameters.displacementMap&&parameters.supportsVertexTextures?'#define USE_DISPLACEMENTMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.specularIntensityMap?'#define USE_SPECULARINTENSITYMAP':'',parameters.specularColorMap?'#define USE_SPECULARCOLORMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.transmission?'#define USE_TRANSMISSION':'',parameters.transmissionMap?'#define USE_TRANSMISSIONMAP':'',parameters.thicknessMap?'#define USE_THICKNESSMAP':'',parameters.sheenColorMap?'#define USE_SHEENCOLORMAP':'',parameters.sheenRoughnessMap?'#define USE_SHEENROUGHNESSMAP':'',parameters.vertexTangents?'#define USE_TANGENT':'',parameters.vertexColors?'#define USE_COLOR':'',parameters.vertexAlphas?'#define USE_COLOR_ALPHA':'',parameters.vertexUvs?'#define USE_UV':'',parameters.uvsVertexOnly?'#define UVS_VERTEX_ONLY':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.skinning?'#define USE_SKINNING':'',parameters.useVertexTexture?'#define BONE_TEXTURE':'',parameters.morphTargets?'#define USE_MORPHTARGETS':'',parameters.morphNormals&&parameters.flatShading===false?'#define USE_MORPHNORMALS':'',parameters.morphColors&&parameters.isWebGL2?'#define USE_MORPHCOLORS':'',parameters.morphTargetsCount>0&&parameters.isWebGL2?'#define MORPHTARGETS_TEXTURE':'',parameters.morphTargetsCount>0&&parameters.isWebGL2?'#define MORPHTARGETS_TEXTURE_STRIDE '+parameters.morphTextureStride:'',parameters.morphTargetsCount>0&&parameters.isWebGL2?'#define MORPHTARGETS_COUNT '+parameters.morphTargetsCount:'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.sizeAttenuation?'#define USE_SIZEATTENUATION':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?'#define USE_LOGDEPTHBUF_EXT':'','uniform mat4 modelMatrix;','uniform mat4 modelViewMatrix;','uniform mat4 projectionMatrix;','uniform mat4 viewMatrix;','uniform mat3 normalMatrix;','uniform vec3 cameraPosition;','uniform bool isOrthographic;','#ifdef USE_INSTANCING','	attribute mat4 instanceMatrix;','#endif','#ifdef USE_INSTANCING_COLOR','	attribute vec3 instanceColor;','#endif','attribute vec3 position;','attribute vec3 normal;','attribute vec2 uv;','#ifdef USE_TANGENT','	attribute vec4 tangent;','#endif','#if defined( USE_COLOR_ALPHA )','	attribute vec4 color;','#elif defined( USE_COLOR )','	attribute vec3 color;','#endif','#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )','	attribute vec3 morphTarget0;','	attribute vec3 morphTarget1;','	attribute vec3 morphTarget2;','	attribute vec3 morphTarget3;','	#ifdef USE_MORPHNORMALS','		attribute vec3 morphNormal0;','		attribute vec3 morphNormal1;','		attribute vec3 morphNormal2;','		attribute vec3 morphNormal3;','	#else','		attribute vec3 morphTarget4;','		attribute vec3 morphTarget5;','		attribute vec3 morphTarget6;','		attribute vec3 morphTarget7;','	#endif','#endif','#ifdef USE_SKINNING','	attribute vec4 skinIndex;','	attribute vec4 skinWeight;','#endif','\n'].filter(filterEmptyLine).join('\n');prefixFragment=[customExtensions,generatePrecision(parameters),'#define SHADER_NAME '+parameters.shaderName,customDefines,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp2?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.matcap?'#define USE_MATCAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapTypeDefine:'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.envMap?'#define '+envMapBlendingDefine:'',envMapCubeUVSize?'#define CUBEUV_TEXEL_WIDTH '+envMapCubeUVSize.texelWidth:'',envMapCubeUVSize?'#define CUBEUV_TEXEL_HEIGHT '+envMapCubeUVSize.texelHeight:'',envMapCubeUVSize?'#define CUBEUV_MAX_MIP '+envMapCubeUVSize.maxMip+'.0':'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.normalMap&&parameters.tangentSpaceNormalMap?'#define TANGENTSPACE_NORMALMAP':'',parameters.clearcoat?'#define USE_CLEARCOAT':'',parameters.clearcoatMap?'#define USE_CLEARCOATMAP':'',parameters.clearcoatRoughnessMap?'#define USE_CLEARCOAT_ROUGHNESSMAP':'',parameters.clearcoatNormalMap?'#define USE_CLEARCOAT_NORMALMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.specularIntensityMap?'#define USE_SPECULARINTENSITYMAP':'',parameters.specularColorMap?'#define USE_SPECULARCOLORMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.alphaTest?'#define USE_ALPHATEST':'',parameters.sheen?'#define USE_SHEEN':'',parameters.sheenColorMap?'#define USE_SHEENCOLORMAP':'',parameters.sheenRoughnessMap?'#define USE_SHEENROUGHNESSMAP':'',parameters.transmission?'#define USE_TRANSMISSION':'',parameters.transmissionMap?'#define USE_TRANSMISSIONMAP':'',parameters.thicknessMap?'#define USE_THICKNESSMAP':'',parameters.decodeVideoTexture?'#define DECODE_VIDEO_TEXTURE':'',parameters.vertexTangents?'#define USE_TANGENT':'',parameters.vertexColors||parameters.instancingColor?'#define USE_COLOR':'',parameters.vertexAlphas?'#define USE_COLOR_ALPHA':'',parameters.vertexUvs?'#define USE_UV':'',parameters.uvsVertexOnly?'#define UVS_VERTEX_ONLY':'',parameters.gradientMap?'#define USE_GRADIENTMAP':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.premultipliedAlpha?'#define PREMULTIPLIED_ALPHA':'',parameters.physicallyCorrectLights?'#define PHYSICALLY_CORRECT_LIGHTS':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?'#define USE_LOGDEPTHBUF_EXT':'','uniform mat4 viewMatrix;','uniform vec3 cameraPosition;','uniform bool isOrthographic;',parameters.toneMapping!==NoToneMapping?'#define TONE_MAPPING':'',parameters.toneMapping!==NoToneMapping?ShaderChunk['tonemapping_pars_fragment']:'',// this code is required here because it is used by the toneMapping() function defined below
parameters.toneMapping!==NoToneMapping?getToneMappingFunction('toneMapping',parameters.toneMapping):'',parameters.dithering?'#define DITHERING':'',parameters.opaque?'#define OPAQUE':'',ShaderChunk['encodings_pars_fragment'],// this code is required here because it is used by the various encoding/decoding function defined below
getTexelEncodingFunction('linearToOutputTexel',parameters.outputEncoding),parameters.depthPacking?'#define DEPTH_PACKING '+parameters.depthPacking:'','\n'].filter(filterEmptyLine).join('\n');}vertexShader=resolveIncludes(vertexShader);vertexShader=replaceLightNums(vertexShader,parameters);vertexShader=replaceClippingPlaneNums(vertexShader,parameters);fragmentShader=resolveIncludes(fragmentShader);fragmentShader=replaceLightNums(fragmentShader,parameters);fragmentShader=replaceClippingPlaneNums(fragmentShader,parameters);vertexShader=unrollLoops(vertexShader);fragmentShader=unrollLoops(fragmentShader);if(parameters.isWebGL2&&parameters.isRawShaderMaterial!==true){// GLSL 3.0 conversion for built-in materials and ShaderMaterial
versionString='#version 300 es\n';prefixVertex=['precision mediump sampler2DArray;','#define attribute in','#define varying out','#define texture2D texture'].join('\n')+'\n'+prefixVertex;prefixFragment=['#define varying in',parameters.glslVersion===GLSL3?'':'layout(location = 0) out highp vec4 pc_fragColor;',parameters.glslVersion===GLSL3?'':'#define gl_FragColor pc_fragColor','#define gl_FragDepthEXT gl_FragDepth','#define texture2D texture','#define textureCube texture','#define texture2DProj textureProj','#define texture2DLodEXT textureLod','#define texture2DProjLodEXT textureProjLod','#define textureCubeLodEXT textureLod','#define texture2DGradEXT textureGrad','#define texture2DProjGradEXT textureProjGrad','#define textureCubeGradEXT textureGrad'].join('\n')+'\n'+prefixFragment;}const vertexGlsl=versionString+prefixVertex+vertexShader;const fragmentGlsl=versionString+prefixFragment+fragmentShader;// console.log( '*VERTEX*', vertexGlsl );
// console.log( '*FRAGMENT*', fragmentGlsl );
const glVertexShader=WebGLShader(gl,35633,vertexGlsl);const glFragmentShader=WebGLShader(gl,35632,fragmentGlsl);gl.attachShader(program,glVertexShader);gl.attachShader(program,glFragmentShader);// Force a particular attribute to index 0.
if(parameters.index0AttributeName!==undefined){gl.bindAttribLocation(program,0,parameters.index0AttributeName);}else if(parameters.morphTargets===true){// programs with morphTargets displace position out of attribute 0
gl.bindAttribLocation(program,0,'position');}gl.linkProgram(program);// check for link errors
if(renderer.debug.checkShaderErrors){const programLog=gl.getProgramInfoLog(program).trim();const vertexLog=gl.getShaderInfoLog(glVertexShader).trim();const fragmentLog=gl.getShaderInfoLog(glFragmentShader).trim();let runnable=true;let haveDiagnostics=true;if(gl.getProgramParameter(program,35714)===false){runnable=false;const vertexErrors=getShaderErrors(gl,glVertexShader,'vertex');const fragmentErrors=getShaderErrors(gl,glFragmentShader,'fragment');console.error('THREE.WebGLProgram: Shader Error '+gl.getError()+' - '+'VALIDATE_STATUS '+gl.getProgramParameter(program,35715)+'\n\n'+'Program Info Log: '+programLog+'\n'+vertexErrors+'\n'+fragmentErrors);}else if(programLog!==''){console.warn('THREE.WebGLProgram: Program Info Log:',programLog);}else if(vertexLog===''||fragmentLog===''){haveDiagnostics=false;}if(haveDiagnostics){this.diagnostics={runnable:runnable,programLog:programLog,vertexShader:{log:vertexLog,prefix:prefixVertex},fragmentShader:{log:fragmentLog,prefix:prefixFragment}};}}// Clean up
// Crashes in iOS9 and iOS10. #18402
// gl.detachShader( program, glVertexShader );
// gl.detachShader( program, glFragmentShader );
gl.deleteShader(glVertexShader);gl.deleteShader(glFragmentShader);// set up caching for uniform locations
let cachedUniforms;this.getUniforms=function(){if(cachedUniforms===undefined){cachedUniforms=new WebGLUniforms(gl,program);}return cachedUniforms;};// set up caching for attribute locations
let cachedAttributes;this.getAttributes=function(){if(cachedAttributes===undefined){cachedAttributes=fetchAttributeLocations(gl,program);}return cachedAttributes;};// free resource
this.destroy=function(){bindingStates.releaseStatesOfProgram(this);gl.deleteProgram(program);this.program=undefined;};//
this.name=parameters.shaderName;this.id=programIdCount++;this.cacheKey=cacheKey;this.usedTimes=1;this.program=program;this.vertexShader=glVertexShader;this.fragmentShader=glFragmentShader;return this;}let _id=0;class WebGLShaderCache{constructor(){this.shaderCache=new Map();this.materialCache=new Map();}update(material){const vertexShader=material.vertexShader;const fragmentShader=material.fragmentShader;const vertexShaderStage=this._getShaderStage(vertexShader);const fragmentShaderStage=this._getShaderStage(fragmentShader);const materialShaders=this._getShaderCacheForMaterial(material);if(materialShaders.has(vertexShaderStage)===false){materialShaders.add(vertexShaderStage);vertexShaderStage.usedTimes++;}if(materialShaders.has(fragmentShaderStage)===false){materialShaders.add(fragmentShaderStage);fragmentShaderStage.usedTimes++;}return this;}remove(material){const materialShaders=this.materialCache.get(material);for(const shaderStage of materialShaders){shaderStage.usedTimes--;if(shaderStage.usedTimes===0)this.shaderCache.delete(shaderStage);}this.materialCache.delete(material);return this;}getVertexShaderID(material){return this._getShaderStage(material.vertexShader).id;}getFragmentShaderID(material){return this._getShaderStage(material.fragmentShader).id;}dispose(){this.shaderCache.clear();this.materialCache.clear();}_getShaderCacheForMaterial(material){const cache=this.materialCache;if(cache.has(material)===false){cache.set(material,new Set());}return cache.get(material);}_getShaderStage(code){const cache=this.shaderCache;if(cache.has(code)===false){const stage=new WebGLShaderStage();cache.set(code,stage);}return cache.get(code);}}class WebGLShaderStage{constructor(){this.id=_id++;this.usedTimes=0;}}function WebGLPrograms(renderer,cubemaps,cubeuvmaps,extensions,capabilities,bindingStates,clipping){const _programLayers=new Layers();const _customShaders=new WebGLShaderCache();const programs=[];const isWebGL2=capabilities.isWebGL2;const logarithmicDepthBuffer=capabilities.logarithmicDepthBuffer;const floatVertexTextures=capabilities.floatVertexTextures;const maxVertexUniforms=capabilities.maxVertexUniforms;const vertexTextures=capabilities.vertexTextures;let precision=capabilities.precision;const shaderIDs={MeshDepthMaterial:'depth',MeshDistanceMaterial:'distanceRGBA',MeshNormalMaterial:'normal',MeshBasicMaterial:'basic',MeshLambertMaterial:'lambert',MeshPhongMaterial:'phong',MeshToonMaterial:'toon',MeshStandardMaterial:'physical',MeshPhysicalMaterial:'physical',MeshMatcapMaterial:'matcap',LineBasicMaterial:'basic',LineDashedMaterial:'dashed',PointsMaterial:'points',ShadowMaterial:'shadow',SpriteMaterial:'sprite'};function getMaxBones(object){const skeleton=object.skeleton;const bones=skeleton.bones;if(floatVertexTextures){return 1024;}else{// default for when object is not specified
// ( for example when prebuilding shader to be used with multiple objects )
//
//  - leave some extra space for other uniforms
//  - limit here is ANGLE's 254 max uniform vectors
//    (up to 54 should be safe)
const nVertexUniforms=maxVertexUniforms;const nVertexMatrices=Math.floor((nVertexUniforms-20)/4);const maxBones=Math.min(nVertexMatrices,bones.length);if(maxBones<bones.length){console.warn('THREE.WebGLRenderer: Skeleton has '+bones.length+' bones. This GPU supports '+maxBones+'.');return 0;}return maxBones;}}function getParameters(material,lights,shadows,scene,object){const fog=scene.fog;const geometry=object.geometry;const environment=material.isMeshStandardMaterial?scene.environment:null;const envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||environment);const envMapCubeUVHeight=!!envMap&&(envMap.mapping===CubeUVReflectionMapping||envMap.mapping===CubeUVRefractionMapping)?envMap.image.height:null;const shaderID=shaderIDs[material.type];// heuristics to create shader parameters according to lights in the scene
// (not to blow over maxLights budget)
const maxBones=object.isSkinnedMesh?getMaxBones(object):0;if(material.precision!==null){precision=capabilities.getMaxPrecision(material.precision);if(precision!==material.precision){console.warn('THREE.WebGLProgram.getParameters:',material.precision,'not supported, using',precision,'instead.');}}//
const morphAttribute=geometry.morphAttributes.position||geometry.morphAttributes.normal||geometry.morphAttributes.color;const morphTargetsCount=morphAttribute!==undefined?morphAttribute.length:0;let morphTextureStride=0;if(geometry.morphAttributes.position!==undefined)morphTextureStride=1;if(geometry.morphAttributes.normal!==undefined)morphTextureStride=2;if(geometry.morphAttributes.color!==undefined)morphTextureStride=3;//
let vertexShader,fragmentShader;let customVertexShaderID,customFragmentShaderID;if(shaderID){const shader=ShaderLib[shaderID];vertexShader=shader.vertexShader;fragmentShader=shader.fragmentShader;}else{vertexShader=material.vertexShader;fragmentShader=material.fragmentShader;_customShaders.update(material);customVertexShaderID=_customShaders.getVertexShaderID(material);customFragmentShaderID=_customShaders.getFragmentShaderID(material);}const currentRenderTarget=renderer.getRenderTarget();const useAlphaTest=material.alphaTest>0;const useClearcoat=material.clearcoat>0;const parameters={isWebGL2:isWebGL2,shaderID:shaderID,shaderName:material.type,vertexShader:vertexShader,fragmentShader:fragmentShader,defines:material.defines,customVertexShaderID:customVertexShaderID,customFragmentShaderID:customFragmentShaderID,isRawShaderMaterial:material.isRawShaderMaterial===true,glslVersion:material.glslVersion,precision:precision,instancing:object.isInstancedMesh===true,instancingColor:object.isInstancedMesh===true&&object.instanceColor!==null,supportsVertexTextures:vertexTextures,outputEncoding:currentRenderTarget===null?renderer.outputEncoding:currentRenderTarget.isXRRenderTarget===true?currentRenderTarget.texture.encoding:LinearEncoding,map:!!material.map,matcap:!!material.matcap,envMap:!!envMap,envMapMode:envMap&&envMap.mapping,envMapCubeUVHeight:envMapCubeUVHeight,lightMap:!!material.lightMap,aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,objectSpaceNormalMap:material.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:material.normalMapType===TangentSpaceNormalMap,decodeVideoTexture:!!material.map&&material.map.isVideoTexture===true&&material.map.encoding===sRGBEncoding,clearcoat:useClearcoat,clearcoatMap:useClearcoat&&!!material.clearcoatMap,clearcoatRoughnessMap:useClearcoat&&!!material.clearcoatRoughnessMap,clearcoatNormalMap:useClearcoat&&!!material.clearcoatNormalMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,specularIntensityMap:!!material.specularIntensityMap,specularColorMap:!!material.specularColorMap,opaque:material.transparent===false&&material.blending===NormalBlending,alphaMap:!!material.alphaMap,alphaTest:useAlphaTest,gradientMap:!!material.gradientMap,sheen:material.sheen>0,sheenColorMap:!!material.sheenColorMap,sheenRoughnessMap:!!material.sheenRoughnessMap,transmission:material.transmission>0,transmissionMap:!!material.transmissionMap,thicknessMap:!!material.thicknessMap,combine:material.combine,vertexTangents:!!material.normalMap&&!!geometry.attributes.tangent,vertexColors:material.vertexColors,vertexAlphas:material.vertexColors===true&&!!geometry.attributes.color&&geometry.attributes.color.itemSize===4,vertexUvs:!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatMap||!!material.clearcoatRoughnessMap||!!material.clearcoatNormalMap||!!material.displacementMap||!!material.transmissionMap||!!material.thicknessMap||!!material.specularIntensityMap||!!material.specularColorMap||!!material.sheenColorMap||!!material.sheenRoughnessMap,uvsVertexOnly:!(!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatNormalMap||material.transmission>0||!!material.transmissionMap||!!material.thicknessMap||!!material.specularIntensityMap||!!material.specularColorMap||material.sheen>0||!!material.sheenColorMap||!!material.sheenRoughnessMap)&&!!material.displacementMap,fog:!!fog,useFog:material.fog,fogExp2:fog&&fog.isFogExp2,flatShading:!!material.flatShading,sizeAttenuation:material.sizeAttenuation,logarithmicDepthBuffer:logarithmicDepthBuffer,skinning:object.isSkinnedMesh===true&&maxBones>0,maxBones:maxBones,useVertexTexture:floatVertexTextures,morphTargets:geometry.morphAttributes.position!==undefined,morphNormals:geometry.morphAttributes.normal!==undefined,morphColors:geometry.morphAttributes.color!==undefined,morphTargetsCount:morphTargetsCount,morphTextureStride:morphTextureStride,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numRectAreaLights:lights.rectArea.length,numHemiLights:lights.hemi.length,numDirLightShadows:lights.directionalShadowMap.length,numPointLightShadows:lights.pointShadowMap.length,numSpotLightShadows:lights.spotShadowMap.length,numClippingPlanes:clipping.numPlanes,numClipIntersection:clipping.numIntersection,dithering:material.dithering,shadowMapEnabled:renderer.shadowMap.enabled&&shadows.length>0,shadowMapType:renderer.shadowMap.type,toneMapping:material.toneMapped?renderer.toneMapping:NoToneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,doubleSided:material.side===DoubleSide,flipSided:material.side===BackSide,depthPacking:material.depthPacking!==undefined?material.depthPacking:false,index0AttributeName:material.index0AttributeName,extensionDerivatives:material.extensions&&material.extensions.derivatives,extensionFragDepth:material.extensions&&material.extensions.fragDepth,extensionDrawBuffers:material.extensions&&material.extensions.drawBuffers,extensionShaderTextureLOD:material.extensions&&material.extensions.shaderTextureLOD,rendererExtensionFragDepth:isWebGL2||extensions.has('EXT_frag_depth'),rendererExtensionDrawBuffers:isWebGL2||extensions.has('WEBGL_draw_buffers'),rendererExtensionShaderTextureLod:isWebGL2||extensions.has('EXT_shader_texture_lod'),customProgramCacheKey:material.customProgramCacheKey()};return parameters;}function getProgramCacheKey(parameters){const array=[];if(parameters.shaderID){array.push(parameters.shaderID);}else{array.push(parameters.customVertexShaderID);array.push(parameters.customFragmentShaderID);}if(parameters.defines!==undefined){for(const name in parameters.defines){array.push(name);array.push(parameters.defines[name]);}}if(parameters.isRawShaderMaterial===false){getProgramCacheKeyParameters(array,parameters);getProgramCacheKeyBooleans(array,parameters);array.push(renderer.outputEncoding);}array.push(parameters.customProgramCacheKey);return array.join();}function getProgramCacheKeyParameters(array,parameters){array.push(parameters.precision);array.push(parameters.outputEncoding);array.push(parameters.envMapMode);array.push(parameters.envMapCubeUVHeight);array.push(parameters.combine);array.push(parameters.vertexUvs);array.push(parameters.fogExp2);array.push(parameters.sizeAttenuation);array.push(parameters.maxBones);array.push(parameters.morphTargetsCount);array.push(parameters.morphAttributeCount);array.push(parameters.numDirLights);array.push(parameters.numPointLights);array.push(parameters.numSpotLights);array.push(parameters.numHemiLights);array.push(parameters.numRectAreaLights);array.push(parameters.numDirLightShadows);array.push(parameters.numPointLightShadows);array.push(parameters.numSpotLightShadows);array.push(parameters.shadowMapType);array.push(parameters.toneMapping);array.push(parameters.numClippingPlanes);array.push(parameters.numClipIntersection);}function getProgramCacheKeyBooleans(array,parameters){_programLayers.disableAll();if(parameters.isWebGL2)_programLayers.enable(0);if(parameters.supportsVertexTextures)_programLayers.enable(1);if(parameters.instancing)_programLayers.enable(2);if(parameters.instancingColor)_programLayers.enable(3);if(parameters.map)_programLayers.enable(4);if(parameters.matcap)_programLayers.enable(5);if(parameters.envMap)_programLayers.enable(6);if(parameters.lightMap)_programLayers.enable(7);if(parameters.aoMap)_programLayers.enable(8);if(parameters.emissiveMap)_programLayers.enable(9);if(parameters.bumpMap)_programLayers.enable(10);if(parameters.normalMap)_programLayers.enable(11);if(parameters.objectSpaceNormalMap)_programLayers.enable(12);if(parameters.tangentSpaceNormalMap)_programLayers.enable(13);if(parameters.clearcoat)_programLayers.enable(14);if(parameters.clearcoatMap)_programLayers.enable(15);if(parameters.clearcoatRoughnessMap)_programLayers.enable(16);if(parameters.clearcoatNormalMap)_programLayers.enable(17);if(parameters.displacementMap)_programLayers.enable(18);if(parameters.specularMap)_programLayers.enable(19);if(parameters.roughnessMap)_programLayers.enable(20);if(parameters.metalnessMap)_programLayers.enable(21);if(parameters.gradientMap)_programLayers.enable(22);if(parameters.alphaMap)_programLayers.enable(23);if(parameters.alphaTest)_programLayers.enable(24);if(parameters.vertexColors)_programLayers.enable(25);if(parameters.vertexAlphas)_programLayers.enable(26);if(parameters.vertexUvs)_programLayers.enable(27);if(parameters.vertexTangents)_programLayers.enable(28);if(parameters.uvsVertexOnly)_programLayers.enable(29);if(parameters.fog)_programLayers.enable(30);array.push(_programLayers.mask);_programLayers.disableAll();if(parameters.useFog)_programLayers.enable(0);if(parameters.flatShading)_programLayers.enable(1);if(parameters.logarithmicDepthBuffer)_programLayers.enable(2);if(parameters.skinning)_programLayers.enable(3);if(parameters.useVertexTexture)_programLayers.enable(4);if(parameters.morphTargets)_programLayers.enable(5);if(parameters.morphNormals)_programLayers.enable(6);if(parameters.morphColors)_programLayers.enable(7);if(parameters.premultipliedAlpha)_programLayers.enable(8);if(parameters.shadowMapEnabled)_programLayers.enable(9);if(parameters.physicallyCorrectLights)_programLayers.enable(10);if(parameters.doubleSided)_programLayers.enable(11);if(parameters.flipSided)_programLayers.enable(12);if(parameters.depthPacking)_programLayers.enable(13);if(parameters.dithering)_programLayers.enable(14);if(parameters.specularIntensityMap)_programLayers.enable(15);if(parameters.specularColorMap)_programLayers.enable(16);if(parameters.transmission)_programLayers.enable(17);if(parameters.transmissionMap)_programLayers.enable(18);if(parameters.thicknessMap)_programLayers.enable(19);if(parameters.sheen)_programLayers.enable(20);if(parameters.sheenColorMap)_programLayers.enable(21);if(parameters.sheenRoughnessMap)_programLayers.enable(22);if(parameters.decodeVideoTexture)_programLayers.enable(23);if(parameters.opaque)_programLayers.enable(24);array.push(_programLayers.mask);}function getUniforms(material){const shaderID=shaderIDs[material.type];let uniforms;if(shaderID){const shader=ShaderLib[shaderID];uniforms=UniformsUtils.clone(shader.uniforms);}else{uniforms=material.uniforms;}return uniforms;}function acquireProgram(parameters,cacheKey){let program;// Check if code has been already compiled
for(let p=0,pl=programs.length;p<pl;p++){const preexistingProgram=programs[p];if(preexistingProgram.cacheKey===cacheKey){program=preexistingProgram;++program.usedTimes;break;}}if(program===undefined){program=new WebGLProgram(renderer,cacheKey,parameters,bindingStates);programs.push(program);}return program;}function releaseProgram(program){if(--program.usedTimes===0){// Remove from unordered set
const i=programs.indexOf(program);programs[i]=programs[programs.length-1];programs.pop();// Free WebGL resources
program.destroy();}}function releaseShaderCache(material){_customShaders.remove(material);}function dispose(){_customShaders.dispose();}return{getParameters:getParameters,getProgramCacheKey:getProgramCacheKey,getUniforms:getUniforms,acquireProgram:acquireProgram,releaseProgram:releaseProgram,releaseShaderCache:releaseShaderCache,// Exposed for resource monitoring & error feedback via renderer.info:
programs:programs,dispose:dispose};}function WebGLProperties(){let properties=new WeakMap();function get(object){let map=properties.get(object);if(map===undefined){map={};properties.set(object,map);}return map;}function remove(object){properties.delete(object);}function update(object,key,value){properties.get(object)[key]=value;}function dispose(){properties=new WeakMap();}return{get:get,remove:remove,update:update,dispose:dispose};}function painterSortStable(a,b){if(a.groupOrder!==b.groupOrder){return a.groupOrder-b.groupOrder;}else if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.material.id!==b.material.id){return a.material.id-b.material.id;}else if(a.z!==b.z){return a.z-b.z;}else{return a.id-b.id;}}function reversePainterSortStable(a,b){if(a.groupOrder!==b.groupOrder){return a.groupOrder-b.groupOrder;}else if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.z!==b.z){return b.z-a.z;}else{return a.id-b.id;}}function WebGLRenderList(){const renderItems=[];let renderItemsIndex=0;const opaque=[];const transmissive=[];const transparent=[];function init(){renderItemsIndex=0;opaque.length=0;transmissive.length=0;transparent.length=0;}function getNextRenderItem(object,geometry,material,groupOrder,z,group){let renderItem=renderItems[renderItemsIndex];if(renderItem===undefined){renderItem={id:object.id,object:object,geometry:geometry,material:material,groupOrder:groupOrder,renderOrder:object.renderOrder,z:z,group:group};renderItems[renderItemsIndex]=renderItem;}else{renderItem.id=object.id;renderItem.object=object;renderItem.geometry=geometry;renderItem.material=material;renderItem.groupOrder=groupOrder;renderItem.renderOrder=object.renderOrder;renderItem.z=z;renderItem.group=group;}renderItemsIndex++;return renderItem;}function push(object,geometry,material,groupOrder,z,group){const renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);if(material.transmission>0.0){transmissive.push(renderItem);}else if(material.transparent===true){transparent.push(renderItem);}else{opaque.push(renderItem);}}function unshift(object,geometry,material,groupOrder,z,group){const renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);if(material.transmission>0.0){transmissive.unshift(renderItem);}else if(material.transparent===true){transparent.unshift(renderItem);}else{opaque.unshift(renderItem);}}function sort(customOpaqueSort,customTransparentSort){if(opaque.length>1)opaque.sort(customOpaqueSort||painterSortStable);if(transmissive.length>1)transmissive.sort(customTransparentSort||reversePainterSortStable);if(transparent.length>1)transparent.sort(customTransparentSort||reversePainterSortStable);}function finish(){// Clear references from inactive renderItems in the list
for(let i=renderItemsIndex,il=renderItems.length;i<il;i++){const renderItem=renderItems[i];if(renderItem.id===null)break;renderItem.id=null;renderItem.object=null;renderItem.geometry=null;renderItem.material=null;renderItem.group=null;}}return{opaque:opaque,transmissive:transmissive,transparent:transparent,init:init,push:push,unshift:unshift,finish:finish,sort:sort};}function WebGLRenderLists(){let lists=new WeakMap();function get(scene,renderCallDepth){let list;if(lists.has(scene)===false){list=new WebGLRenderList();lists.set(scene,[list]);}else{if(renderCallDepth>=lists.get(scene).length){list=new WebGLRenderList();lists.get(scene).push(list);}else{list=lists.get(scene)[renderCallDepth];}}return list;}function dispose(){lists=new WeakMap();}return{get:get,dispose:dispose};}function UniformsCache(){const lights={};return{get:function(light){if(lights[light.id]!==undefined){return lights[light.id];}let uniforms;switch(light.type){case'DirectionalLight':uniforms={direction:new Vector3(),color:new Color()};break;case'SpotLight':uniforms={position:new Vector3(),direction:new Vector3(),color:new Color(),distance:0,coneCos:0,penumbraCos:0,decay:0};break;case'PointLight':uniforms={position:new Vector3(),color:new Color(),distance:0,decay:0};break;case'HemisphereLight':uniforms={direction:new Vector3(),skyColor:new Color(),groundColor:new Color()};break;case'RectAreaLight':uniforms={color:new Color(),position:new Vector3(),halfWidth:new Vector3(),halfHeight:new Vector3()};break;}lights[light.id]=uniforms;return uniforms;}};}function ShadowUniformsCache(){const lights={};return{get:function(light){if(lights[light.id]!==undefined){return lights[light.id];}let uniforms;switch(light.type){case'DirectionalLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'SpotLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'PointLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2(),shadowCameraNear:1,shadowCameraFar:1000};break;// TODO (abelnation): set RectAreaLight shadow uniforms
}lights[light.id]=uniforms;return uniforms;}};}let nextVersion=0;function shadowCastingLightsFirst(lightA,lightB){return(lightB.castShadow?1:0)-(lightA.castShadow?1:0);}function WebGLLights(extensions,capabilities){const cache=new UniformsCache();const shadowCache=ShadowUniformsCache();const state={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let i=0;i<9;i++)state.probe.push(new Vector3());const vector3=new Vector3();const matrix4=new Matrix4();const matrix42=new Matrix4();function setup(lights,physicallyCorrectLights){let r=0,g=0,b=0;for(let i=0;i<9;i++)state.probe[i].set(0,0,0);let directionalLength=0;let pointLength=0;let spotLength=0;let rectAreaLength=0;let hemiLength=0;let numDirectionalShadows=0;let numPointShadows=0;let numSpotShadows=0;lights.sort(shadowCastingLightsFirst);// artist-friendly light intensity scaling factor
const scaleFactor=physicallyCorrectLights!==true?Math.PI:1;for(let i=0,l=lights.length;i<l;i++){const light=lights[i];const color=light.color;const intensity=light.intensity;const distance=light.distance;const shadowMap=light.shadow&&light.shadow.map?light.shadow.map.texture:null;if(light.isAmbientLight){r+=color.r*intensity*scaleFactor;g+=color.g*intensity*scaleFactor;b+=color.b*intensity*scaleFactor;}else if(light.isLightProbe){for(let j=0;j<9;j++){state.probe[j].addScaledVector(light.sh.coefficients[j],intensity);}}else if(light.isDirectionalLight){const uniforms=cache.get(light);uniforms.color.copy(light.color).multiplyScalar(light.intensity*scaleFactor);if(light.castShadow){const shadow=light.shadow;const shadowUniforms=shadowCache.get(light);shadowUniforms.shadowBias=shadow.bias;shadowUniforms.shadowNormalBias=shadow.normalBias;shadowUniforms.shadowRadius=shadow.radius;shadowUniforms.shadowMapSize=shadow.mapSize;state.directionalShadow[directionalLength]=shadowUniforms;state.directionalShadowMap[directionalLength]=shadowMap;state.directionalShadowMatrix[directionalLength]=light.shadow.matrix;numDirectionalShadows++;}state.directional[directionalLength]=uniforms;directionalLength++;}else if(light.isSpotLight){const uniforms=cache.get(light);uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.color.copy(color).multiplyScalar(intensity*scaleFactor);uniforms.distance=distance;uniforms.coneCos=Math.cos(light.angle);uniforms.penumbraCos=Math.cos(light.angle*(1-light.penumbra));uniforms.decay=light.decay;if(light.castShadow){const shadow=light.shadow;const shadowUniforms=shadowCache.get(light);shadowUniforms.shadowBias=shadow.bias;shadowUniforms.shadowNormalBias=shadow.normalBias;shadowUniforms.shadowRadius=shadow.radius;shadowUniforms.shadowMapSize=shadow.mapSize;state.spotShadow[spotLength]=shadowUniforms;state.spotShadowMap[spotLength]=shadowMap;state.spotShadowMatrix[spotLength]=light.shadow.matrix;numSpotShadows++;}state.spot[spotLength]=uniforms;spotLength++;}else if(light.isRectAreaLight){const uniforms=cache.get(light);// (a) intensity is the total visible light emitted
//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
// (b) intensity is the brightness of the light
uniforms.color.copy(color).multiplyScalar(intensity);uniforms.halfWidth.set(light.width*0.5,0.0,0.0);uniforms.halfHeight.set(0.0,light.height*0.5,0.0);state.rectArea[rectAreaLength]=uniforms;rectAreaLength++;}else if(light.isPointLight){const uniforms=cache.get(light);uniforms.color.copy(light.color).multiplyScalar(light.intensity*scaleFactor);uniforms.distance=light.distance;uniforms.decay=light.decay;if(light.castShadow){const shadow=light.shadow;const shadowUniforms=shadowCache.get(light);shadowUniforms.shadowBias=shadow.bias;shadowUniforms.shadowNormalBias=shadow.normalBias;shadowUniforms.shadowRadius=shadow.radius;shadowUniforms.shadowMapSize=shadow.mapSize;shadowUniforms.shadowCameraNear=shadow.camera.near;shadowUniforms.shadowCameraFar=shadow.camera.far;state.pointShadow[pointLength]=shadowUniforms;state.pointShadowMap[pointLength]=shadowMap;state.pointShadowMatrix[pointLength]=light.shadow.matrix;numPointShadows++;}state.point[pointLength]=uniforms;pointLength++;}else if(light.isHemisphereLight){const uniforms=cache.get(light);uniforms.skyColor.copy(light.color).multiplyScalar(intensity*scaleFactor);uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity*scaleFactor);state.hemi[hemiLength]=uniforms;hemiLength++;}}if(rectAreaLength>0){if(capabilities.isWebGL2){// WebGL 2
state.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;state.rectAreaLTC2=UniformsLib.LTC_FLOAT_2;}else{// WebGL 1
if(extensions.has('OES_texture_float_linear')===true){state.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;state.rectAreaLTC2=UniformsLib.LTC_FLOAT_2;}else if(extensions.has('OES_texture_half_float_linear')===true){state.rectAreaLTC1=UniformsLib.LTC_HALF_1;state.rectAreaLTC2=UniformsLib.LTC_HALF_2;}else{console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');}}}state.ambient[0]=r;state.ambient[1]=g;state.ambient[2]=b;const hash=state.hash;if(hash.directionalLength!==directionalLength||hash.pointLength!==pointLength||hash.spotLength!==spotLength||hash.rectAreaLength!==rectAreaLength||hash.hemiLength!==hemiLength||hash.numDirectionalShadows!==numDirectionalShadows||hash.numPointShadows!==numPointShadows||hash.numSpotShadows!==numSpotShadows){state.directional.length=directionalLength;state.spot.length=spotLength;state.rectArea.length=rectAreaLength;state.point.length=pointLength;state.hemi.length=hemiLength;state.directionalShadow.length=numDirectionalShadows;state.directionalShadowMap.length=numDirectionalShadows;state.pointShadow.length=numPointShadows;state.pointShadowMap.length=numPointShadows;state.spotShadow.length=numSpotShadows;state.spotShadowMap.length=numSpotShadows;state.directionalShadowMatrix.length=numDirectionalShadows;state.pointShadowMatrix.length=numPointShadows;state.spotShadowMatrix.length=numSpotShadows;hash.directionalLength=directionalLength;hash.pointLength=pointLength;hash.spotLength=spotLength;hash.rectAreaLength=rectAreaLength;hash.hemiLength=hemiLength;hash.numDirectionalShadows=numDirectionalShadows;hash.numPointShadows=numPointShadows;hash.numSpotShadows=numSpotShadows;state.version=nextVersion++;}}function setupView(lights,camera){let directionalLength=0;let pointLength=0;let spotLength=0;let rectAreaLength=0;let hemiLength=0;const viewMatrix=camera.matrixWorldInverse;for(let i=0,l=lights.length;i<l;i++){const light=lights[i];if(light.isDirectionalLight){const uniforms=state.directional[directionalLength];uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);uniforms.direction.sub(vector3);uniforms.direction.transformDirection(viewMatrix);directionalLength++;}else if(light.isSpotLight){const uniforms=state.spot[spotLength];uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);uniforms.direction.sub(vector3);uniforms.direction.transformDirection(viewMatrix);spotLength++;}else if(light.isRectAreaLight){const uniforms=state.rectArea[rectAreaLength];uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);// extract local rotation of light to derive width/height half vectors
matrix42.identity();matrix4.copy(light.matrixWorld);matrix4.premultiply(viewMatrix);matrix42.extractRotation(matrix4);uniforms.halfWidth.set(light.width*0.5,0.0,0.0);uniforms.halfHeight.set(0.0,light.height*0.5,0.0);uniforms.halfWidth.applyMatrix4(matrix42);uniforms.halfHeight.applyMatrix4(matrix42);rectAreaLength++;}else if(light.isPointLight){const uniforms=state.point[pointLength];uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);pointLength++;}else if(light.isHemisphereLight){const uniforms=state.hemi[hemiLength];uniforms.direction.setFromMatrixPosition(light.matrixWorld);uniforms.direction.transformDirection(viewMatrix);uniforms.direction.normalize();hemiLength++;}}}return{setup:setup,setupView:setupView,state:state};}function WebGLRenderState(extensions,capabilities){const lights=new WebGLLights(extensions,capabilities);const lightsArray=[];const shadowsArray=[];function init(){lightsArray.length=0;shadowsArray.length=0;}function pushLight(light){lightsArray.push(light);}function pushShadow(shadowLight){shadowsArray.push(shadowLight);}function setupLights(physicallyCorrectLights){lights.setup(lightsArray,physicallyCorrectLights);}function setupLightsView(camera){lights.setupView(lightsArray,camera);}const state={lightsArray:lightsArray,shadowsArray:shadowsArray,lights:lights};return{init:init,state:state,setupLights:setupLights,setupLightsView:setupLightsView,pushLight:pushLight,pushShadow:pushShadow};}function WebGLRenderStates(extensions,capabilities){let renderStates=new WeakMap();function get(scene,renderCallDepth=0){let renderState;if(renderStates.has(scene)===false){renderState=new WebGLRenderState(extensions,capabilities);renderStates.set(scene,[renderState]);}else{if(renderCallDepth>=renderStates.get(scene).length){renderState=new WebGLRenderState(extensions,capabilities);renderStates.get(scene).push(renderState);}else{renderState=renderStates.get(scene)[renderCallDepth];}}return renderState;}function dispose(){renderStates=new WeakMap();}return{get:get,dispose:dispose};}/**
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */class MeshDepthMaterial extends Material{constructor(parameters){super();this.type='MeshDepthMaterial';this.depthPacking=BasicDepthPacking;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.setValues(parameters);}copy(source){super.copy(source);this.depthPacking=source.depthPacking;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;return this;}}exports.MeshDepthMaterial=MeshDepthMaterial;MeshDepthMaterial.prototype.isMeshDepthMaterial=true;/**
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */class MeshDistanceMaterial extends Material{constructor(parameters){super();this.type='MeshDistanceMaterial';this.referencePosition=new Vector3();this.nearDistance=1;this.farDistance=1000;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.fog=false;this.setValues(parameters);}copy(source){super.copy(source);this.referencePosition.copy(source.referencePosition);this.nearDistance=source.nearDistance;this.farDistance=source.farDistance;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;return this;}}exports.MeshDistanceMaterial=MeshDistanceMaterial;MeshDistanceMaterial.prototype.isMeshDistanceMaterial=true;const vertex="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";const fragment="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function WebGLShadowMap(_renderer,_objects,_capabilities){let _frustum=new Frustum();const _shadowMapSize=new Vector2(),_viewportSize=new Vector2(),_viewport=new Vector4(),_depthMaterial=new MeshDepthMaterial({depthPacking:RGBADepthPacking}),_distanceMaterial=new MeshDistanceMaterial(),_materialCache={},_maxTextureSize=_capabilities.maxTextureSize;const shadowSide={0:BackSide,1:FrontSide,2:DoubleSide};const shadowMaterialVertical=new ShaderMaterial({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2()},radius:{value:4.0}},vertexShader:vertex,fragmentShader:fragment});const shadowMaterialHorizontal=shadowMaterialVertical.clone();shadowMaterialHorizontal.defines.HORIZONTAL_PASS=1;const fullScreenTri=new BufferGeometry();fullScreenTri.setAttribute('position',new BufferAttribute(new Float32Array([-1,-1,0.5,3,-1,0.5,-1,3,0.5]),3));const fullScreenMesh=new Mesh(fullScreenTri,shadowMaterialVertical);const scope=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;this.render=function(lights,scene,camera){if(scope.enabled===false)return;if(scope.autoUpdate===false&&scope.needsUpdate===false)return;if(lights.length===0)return;const currentRenderTarget=_renderer.getRenderTarget();const activeCubeFace=_renderer.getActiveCubeFace();const activeMipmapLevel=_renderer.getActiveMipmapLevel();const _state=_renderer.state;// Set GL state for depth map.
_state.setBlending(NoBlending);_state.buffers.color.setClear(1,1,1,1);_state.buffers.depth.setTest(true);_state.setScissorTest(false);// render depth map
for(let i=0,il=lights.length;i<il;i++){const light=lights[i];const shadow=light.shadow;if(shadow===undefined){console.warn('THREE.WebGLShadowMap:',light,'has no shadow.');continue;}if(shadow.autoUpdate===false&&shadow.needsUpdate===false)continue;_shadowMapSize.copy(shadow.mapSize);const shadowFrameExtents=shadow.getFrameExtents();_shadowMapSize.multiply(shadowFrameExtents);_viewportSize.copy(shadow.mapSize);if(_shadowMapSize.x>_maxTextureSize||_shadowMapSize.y>_maxTextureSize){if(_shadowMapSize.x>_maxTextureSize){_viewportSize.x=Math.floor(_maxTextureSize/shadowFrameExtents.x);_shadowMapSize.x=_viewportSize.x*shadowFrameExtents.x;shadow.mapSize.x=_viewportSize.x;}if(_shadowMapSize.y>_maxTextureSize){_viewportSize.y=Math.floor(_maxTextureSize/shadowFrameExtents.y);_shadowMapSize.y=_viewportSize.y*shadowFrameExtents.y;shadow.mapSize.y=_viewportSize.y;}}if(shadow.map===null&&!shadow.isPointLightShadow&&this.type===VSMShadowMap){const pars={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.map.texture.name=light.name+'.shadowMap';shadow.mapPass=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.camera.updateProjectionMatrix();}if(shadow.map===null){const pars={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.map.texture.name=light.name+'.shadowMap';shadow.camera.updateProjectionMatrix();}_renderer.setRenderTarget(shadow.map);_renderer.clear();const viewportCount=shadow.getViewportCount();for(let vp=0;vp<viewportCount;vp++){const viewport=shadow.getViewport(vp);_viewport.set(_viewportSize.x*viewport.x,_viewportSize.y*viewport.y,_viewportSize.x*viewport.z,_viewportSize.y*viewport.w);_state.viewport(_viewport);shadow.updateMatrices(light,vp);_frustum=shadow.getFrustum();renderObject(scene,camera,shadow.camera,light,this.type);}// do blur pass for VSM
if(!shadow.isPointLightShadow&&this.type===VSMShadowMap){VSMPass(shadow,camera);}shadow.needsUpdate=false;}scope.needsUpdate=false;_renderer.setRenderTarget(currentRenderTarget,activeCubeFace,activeMipmapLevel);};function VSMPass(shadow,camera){const geometry=_objects.update(fullScreenMesh);if(shadowMaterialVertical.defines.VSM_SAMPLES!==shadow.blurSamples){shadowMaterialVertical.defines.VSM_SAMPLES=shadow.blurSamples;shadowMaterialHorizontal.defines.VSM_SAMPLES=shadow.blurSamples;shadowMaterialVertical.needsUpdate=true;shadowMaterialHorizontal.needsUpdate=true;}// vertical pass
shadowMaterialVertical.uniforms.shadow_pass.value=shadow.map.texture;shadowMaterialVertical.uniforms.resolution.value=shadow.mapSize;shadowMaterialVertical.uniforms.radius.value=shadow.radius;_renderer.setRenderTarget(shadow.mapPass);_renderer.clear();_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialVertical,fullScreenMesh,null);// horizontal pass
shadowMaterialHorizontal.uniforms.shadow_pass.value=shadow.mapPass.texture;shadowMaterialHorizontal.uniforms.resolution.value=shadow.mapSize;shadowMaterialHorizontal.uniforms.radius.value=shadow.radius;_renderer.setRenderTarget(shadow.map);_renderer.clear();_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialHorizontal,fullScreenMesh,null);}function getDepthMaterial(object,material,light,shadowCameraNear,shadowCameraFar,type){let result=null;const customMaterial=light.isPointLight===true?object.customDistanceMaterial:object.customDepthMaterial;if(customMaterial!==undefined){result=customMaterial;}else{result=light.isPointLight===true?_distanceMaterial:_depthMaterial;}if(_renderer.localClippingEnabled&&material.clipShadows===true&&material.clippingPlanes.length!==0||material.displacementMap&&material.displacementScale!==0||material.alphaMap&&material.alphaTest>0){// in this case we need a unique material instance reflecting the
// appropriate state
const keyA=result.uuid,keyB=material.uuid;let materialsForVariant=_materialCache[keyA];if(materialsForVariant===undefined){materialsForVariant={};_materialCache[keyA]=materialsForVariant;}let cachedMaterial=materialsForVariant[keyB];if(cachedMaterial===undefined){cachedMaterial=result.clone();materialsForVariant[keyB]=cachedMaterial;}result=cachedMaterial;}result.visible=material.visible;result.wireframe=material.wireframe;if(type===VSMShadowMap){result.side=material.shadowSide!==null?material.shadowSide:material.side;}else{result.side=material.shadowSide!==null?material.shadowSide:shadowSide[material.side];}result.alphaMap=material.alphaMap;result.alphaTest=material.alphaTest;result.clipShadows=material.clipShadows;result.clippingPlanes=material.clippingPlanes;result.clipIntersection=material.clipIntersection;result.displacementMap=material.displacementMap;result.displacementScale=material.displacementScale;result.displacementBias=material.displacementBias;result.wireframeLinewidth=material.wireframeLinewidth;result.linewidth=material.linewidth;if(light.isPointLight===true&&result.isMeshDistanceMaterial===true){result.referencePosition.setFromMatrixPosition(light.matrixWorld);result.nearDistance=shadowCameraNear;result.farDistance=shadowCameraFar;}return result;}function renderObject(object,camera,shadowCamera,light,type){if(object.visible===false)return;const visible=object.layers.test(camera.layers);if(visible&&(object.isMesh||object.isLine||object.isPoints)){if((object.castShadow||object.receiveShadow&&type===VSMShadowMap)&&(!object.frustumCulled||_frustum.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse,object.matrixWorld);const geometry=_objects.update(object);const material=object.material;if(Array.isArray(material)){const groups=geometry.groups;for(let k=0,kl=groups.length;k<kl;k++){const group=groups[k];const groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){const depthMaterial=getDepthMaterial(object,groupMaterial,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,group);}}}else if(material.visible){const depthMaterial=getDepthMaterial(object,material,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,null);}}}const children=object.children;for(let i=0,l=children.length;i<l;i++){renderObject(children[i],camera,shadowCamera,light,type);}}}function WebGLState(gl,extensions,capabilities){const isWebGL2=capabilities.isWebGL2;function ColorBuffer(){let locked=false;const color=new Vector4();let currentColorMask=null;const currentColorClear=new Vector4(0,0,0,0);return{setMask:function(colorMask){if(currentColorMask!==colorMask&&!locked){gl.colorMask(colorMask,colorMask,colorMask,colorMask);currentColorMask=colorMask;}},setLocked:function(lock){locked=lock;},setClear:function(r,g,b,a,premultipliedAlpha){if(premultipliedAlpha===true){r*=a;g*=a;b*=a;}color.set(r,g,b,a);if(currentColorClear.equals(color)===false){gl.clearColor(r,g,b,a);currentColorClear.copy(color);}},reset:function(){locked=false;currentColorMask=null;currentColorClear.set(-1,0,0,0);// set to invalid state
}};}function DepthBuffer(){let locked=false;let currentDepthMask=null;let currentDepthFunc=null;let currentDepthClear=null;return{setTest:function(depthTest){if(depthTest){enable(2929);}else{disable(2929);}},setMask:function(depthMask){if(currentDepthMask!==depthMask&&!locked){gl.depthMask(depthMask);currentDepthMask=depthMask;}},setFunc:function(depthFunc){if(currentDepthFunc!==depthFunc){if(depthFunc){switch(depthFunc){case NeverDepth:gl.depthFunc(512);break;case AlwaysDepth:gl.depthFunc(519);break;case LessDepth:gl.depthFunc(513);break;case LessEqualDepth:gl.depthFunc(515);break;case EqualDepth:gl.depthFunc(514);break;case GreaterEqualDepth:gl.depthFunc(518);break;case GreaterDepth:gl.depthFunc(516);break;case NotEqualDepth:gl.depthFunc(517);break;default:gl.depthFunc(515);}}else{gl.depthFunc(515);}currentDepthFunc=depthFunc;}},setLocked:function(lock){locked=lock;},setClear:function(depth){if(currentDepthClear!==depth){gl.clearDepth(depth);currentDepthClear=depth;}},reset:function(){locked=false;currentDepthMask=null;currentDepthFunc=null;currentDepthClear=null;}};}function StencilBuffer(){let locked=false;let currentStencilMask=null;let currentStencilFunc=null;let currentStencilRef=null;let currentStencilFuncMask=null;let currentStencilFail=null;let currentStencilZFail=null;let currentStencilZPass=null;let currentStencilClear=null;return{setTest:function(stencilTest){if(!locked){if(stencilTest){enable(2960);}else{disable(2960);}}},setMask:function(stencilMask){if(currentStencilMask!==stencilMask&&!locked){gl.stencilMask(stencilMask);currentStencilMask=stencilMask;}},setFunc:function(stencilFunc,stencilRef,stencilMask){if(currentStencilFunc!==stencilFunc||currentStencilRef!==stencilRef||currentStencilFuncMask!==stencilMask){gl.stencilFunc(stencilFunc,stencilRef,stencilMask);currentStencilFunc=stencilFunc;currentStencilRef=stencilRef;currentStencilFuncMask=stencilMask;}},setOp:function(stencilFail,stencilZFail,stencilZPass){if(currentStencilFail!==stencilFail||currentStencilZFail!==stencilZFail||currentStencilZPass!==stencilZPass){gl.stencilOp(stencilFail,stencilZFail,stencilZPass);currentStencilFail=stencilFail;currentStencilZFail=stencilZFail;currentStencilZPass=stencilZPass;}},setLocked:function(lock){locked=lock;},setClear:function(stencil){if(currentStencilClear!==stencil){gl.clearStencil(stencil);currentStencilClear=stencil;}},reset:function(){locked=false;currentStencilMask=null;currentStencilFunc=null;currentStencilRef=null;currentStencilFuncMask=null;currentStencilFail=null;currentStencilZFail=null;currentStencilZPass=null;currentStencilClear=null;}};}//
const colorBuffer=new ColorBuffer();const depthBuffer=new DepthBuffer();const stencilBuffer=new StencilBuffer();let enabledCapabilities={};let currentBoundFramebuffers={};let currentDrawbuffers=new WeakMap();let defaultDrawbuffers=[];let currentProgram=null;let currentBlendingEnabled=false;let currentBlending=null;let currentBlendEquation=null;let currentBlendSrc=null;let currentBlendDst=null;let currentBlendEquationAlpha=null;let currentBlendSrcAlpha=null;let currentBlendDstAlpha=null;let currentPremultipledAlpha=false;let currentFlipSided=null;let currentCullFace=null;let currentLineWidth=null;let currentPolygonOffsetFactor=null;let currentPolygonOffsetUnits=null;const maxTextures=gl.getParameter(35661);let lineWidthAvailable=false;let version=0;const glVersion=gl.getParameter(7938);if(glVersion.indexOf('WebGL')!==-1){version=parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);lineWidthAvailable=version>=1.0;}else if(glVersion.indexOf('OpenGL ES')!==-1){version=parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);lineWidthAvailable=version>=2.0;}let currentTextureSlot=null;let currentBoundTextures={};const scissorParam=gl.getParameter(3088);const viewportParam=gl.getParameter(2978);const currentScissor=new Vector4().fromArray(scissorParam);const currentViewport=new Vector4().fromArray(viewportParam);function createTexture(type,target,count){const data=new Uint8Array(4);// 4 is required to match default unpack alignment of 4.
const texture=gl.createTexture();gl.bindTexture(type,texture);gl.texParameteri(type,10241,9728);gl.texParameteri(type,10240,9728);for(let i=0;i<count;i++){gl.texImage2D(target+i,0,6408,1,1,0,6408,5121,data);}return texture;}const emptyTextures={};emptyTextures[3553]=createTexture(3553,3553,1);emptyTextures[34067]=createTexture(34067,34069,6);// init
colorBuffer.setClear(0,0,0,1);depthBuffer.setClear(1);stencilBuffer.setClear(0);enable(2929);depthBuffer.setFunc(LessEqualDepth);setFlipSided(false);setCullFace(CullFaceBack);enable(2884);setBlending(NoBlending);//
function enable(id){if(enabledCapabilities[id]!==true){gl.enable(id);enabledCapabilities[id]=true;}}function disable(id){if(enabledCapabilities[id]!==false){gl.disable(id);enabledCapabilities[id]=false;}}function bindFramebuffer(target,framebuffer){if(currentBoundFramebuffers[target]!==framebuffer){gl.bindFramebuffer(target,framebuffer);currentBoundFramebuffers[target]=framebuffer;if(isWebGL2){// 36009 is equivalent to 36160
if(target===36009){currentBoundFramebuffers[36160]=framebuffer;}if(target===36160){currentBoundFramebuffers[36009]=framebuffer;}}return true;}return false;}function drawBuffers(renderTarget,framebuffer){let drawBuffers=defaultDrawbuffers;let needsUpdate=false;if(renderTarget){drawBuffers=currentDrawbuffers.get(framebuffer);if(drawBuffers===undefined){drawBuffers=[];currentDrawbuffers.set(framebuffer,drawBuffers);}if(renderTarget.isWebGLMultipleRenderTargets){const textures=renderTarget.texture;if(drawBuffers.length!==textures.length||drawBuffers[0]!==36064){for(let i=0,il=textures.length;i<il;i++){drawBuffers[i]=36064+i;}drawBuffers.length=textures.length;needsUpdate=true;}}else{if(drawBuffers[0]!==36064){drawBuffers[0]=36064;needsUpdate=true;}}}else{if(drawBuffers[0]!==1029){drawBuffers[0]=1029;needsUpdate=true;}}if(needsUpdate){if(capabilities.isWebGL2){gl.drawBuffers(drawBuffers);}else{extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(drawBuffers);}}}function useProgram(program){if(currentProgram!==program){gl.useProgram(program);currentProgram=program;return true;}return false;}const equationToGL={[AddEquation]:32774,[SubtractEquation]:32778,[ReverseSubtractEquation]:32779};if(isWebGL2){equationToGL[MinEquation]=32775;equationToGL[MaxEquation]=32776;}else{const extension=extensions.get('EXT_blend_minmax');if(extension!==null){equationToGL[MinEquation]=extension.MIN_EXT;equationToGL[MaxEquation]=extension.MAX_EXT;}}const factorToGL={[ZeroFactor]:0,[OneFactor]:1,[SrcColorFactor]:768,[SrcAlphaFactor]:770,[SrcAlphaSaturateFactor]:776,[DstColorFactor]:774,[DstAlphaFactor]:772,[OneMinusSrcColorFactor]:769,[OneMinusSrcAlphaFactor]:771,[OneMinusDstColorFactor]:775,[OneMinusDstAlphaFactor]:773};function setBlending(blending,blendEquation,blendSrc,blendDst,blendEquationAlpha,blendSrcAlpha,blendDstAlpha,premultipliedAlpha){if(blending===NoBlending){if(currentBlendingEnabled===true){disable(3042);currentBlendingEnabled=false;}return;}if(currentBlendingEnabled===false){enable(3042);currentBlendingEnabled=true;}if(blending!==CustomBlending){if(blending!==currentBlending||premultipliedAlpha!==currentPremultipledAlpha){if(currentBlendEquation!==AddEquation||currentBlendEquationAlpha!==AddEquation){gl.blendEquation(32774);currentBlendEquation=AddEquation;currentBlendEquationAlpha=AddEquation;}if(premultipliedAlpha){switch(blending){case NormalBlending:gl.blendFuncSeparate(1,771,1,771);break;case AdditiveBlending:gl.blendFunc(1,1);break;case SubtractiveBlending:gl.blendFuncSeparate(0,769,0,1);break;case MultiplyBlending:gl.blendFuncSeparate(0,768,0,770);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}else{switch(blending){case NormalBlending:gl.blendFuncSeparate(770,771,1,771);break;case AdditiveBlending:gl.blendFunc(770,1);break;case SubtractiveBlending:gl.blendFuncSeparate(0,769,0,1);break;case MultiplyBlending:gl.blendFunc(0,768);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}currentBlendSrc=null;currentBlendDst=null;currentBlendSrcAlpha=null;currentBlendDstAlpha=null;currentBlending=blending;currentPremultipledAlpha=premultipliedAlpha;}return;}// custom blending
blendEquationAlpha=blendEquationAlpha||blendEquation;blendSrcAlpha=blendSrcAlpha||blendSrc;blendDstAlpha=blendDstAlpha||blendDst;if(blendEquation!==currentBlendEquation||blendEquationAlpha!==currentBlendEquationAlpha){gl.blendEquationSeparate(equationToGL[blendEquation],equationToGL[blendEquationAlpha]);currentBlendEquation=blendEquation;currentBlendEquationAlpha=blendEquationAlpha;}if(blendSrc!==currentBlendSrc||blendDst!==currentBlendDst||blendSrcAlpha!==currentBlendSrcAlpha||blendDstAlpha!==currentBlendDstAlpha){gl.blendFuncSeparate(factorToGL[blendSrc],factorToGL[blendDst],factorToGL[blendSrcAlpha],factorToGL[blendDstAlpha]);currentBlendSrc=blendSrc;currentBlendDst=blendDst;currentBlendSrcAlpha=blendSrcAlpha;currentBlendDstAlpha=blendDstAlpha;}currentBlending=blending;currentPremultipledAlpha=null;}function setMaterial(material,frontFaceCW){material.side===DoubleSide?disable(2884):enable(2884);let flipSided=material.side===BackSide;if(frontFaceCW)flipSided=!flipSided;setFlipSided(flipSided);material.blending===NormalBlending&&material.transparent===false?setBlending(NoBlending):setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha);depthBuffer.setFunc(material.depthFunc);depthBuffer.setTest(material.depthTest);depthBuffer.setMask(material.depthWrite);colorBuffer.setMask(material.colorWrite);const stencilWrite=material.stencilWrite;stencilBuffer.setTest(stencilWrite);if(stencilWrite){stencilBuffer.setMask(material.stencilWriteMask);stencilBuffer.setFunc(material.stencilFunc,material.stencilRef,material.stencilFuncMask);stencilBuffer.setOp(material.stencilFail,material.stencilZFail,material.stencilZPass);}setPolygonOffset(material.polygonOffset,material.polygonOffsetFactor,material.polygonOffsetUnits);material.alphaToCoverage===true?enable(32926):disable(32926);}//
function setFlipSided(flipSided){if(currentFlipSided!==flipSided){if(flipSided){gl.frontFace(2304);}else{gl.frontFace(2305);}currentFlipSided=flipSided;}}function setCullFace(cullFace){if(cullFace!==CullFaceNone){enable(2884);if(cullFace!==currentCullFace){if(cullFace===CullFaceBack){gl.cullFace(1029);}else if(cullFace===CullFaceFront){gl.cullFace(1028);}else{gl.cullFace(1032);}}}else{disable(2884);}currentCullFace=cullFace;}function setLineWidth(width){if(width!==currentLineWidth){if(lineWidthAvailable)gl.lineWidth(width);currentLineWidth=width;}}function setPolygonOffset(polygonOffset,factor,units){if(polygonOffset){enable(32823);if(currentPolygonOffsetFactor!==factor||currentPolygonOffsetUnits!==units){gl.polygonOffset(factor,units);currentPolygonOffsetFactor=factor;currentPolygonOffsetUnits=units;}}else{disable(32823);}}function setScissorTest(scissorTest){if(scissorTest){enable(3089);}else{disable(3089);}}// texture
function activeTexture(webglSlot){if(webglSlot===undefined)webglSlot=33984+maxTextures-1;if(currentTextureSlot!==webglSlot){gl.activeTexture(webglSlot);currentTextureSlot=webglSlot;}}function bindTexture(webglType,webglTexture){if(currentTextureSlot===null){activeTexture();}let boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture===undefined){boundTexture={type:undefined,texture:undefined};currentBoundTextures[currentTextureSlot]=boundTexture;}if(boundTexture.type!==webglType||boundTexture.texture!==webglTexture){gl.bindTexture(webglType,webglTexture||emptyTextures[webglType]);boundTexture.type=webglType;boundTexture.texture=webglTexture;}}function unbindTexture(){const boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture!==undefined&&boundTexture.type!==undefined){gl.bindTexture(boundTexture.type,null);boundTexture.type=undefined;boundTexture.texture=undefined;}}function compressedTexImage2D(){try{gl.compressedTexImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texSubImage2D(){try{gl.texSubImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texSubImage3D(){try{gl.texSubImage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function compressedTexSubImage2D(){try{gl.compressedTexSubImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texStorage2D(){try{gl.texStorage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texStorage3D(){try{gl.texStorage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage2D(){try{gl.texImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage3D(){try{gl.texImage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}//
function scissor(scissor){if(currentScissor.equals(scissor)===false){gl.scissor(scissor.x,scissor.y,scissor.z,scissor.w);currentScissor.copy(scissor);}}function viewport(viewport){if(currentViewport.equals(viewport)===false){gl.viewport(viewport.x,viewport.y,viewport.z,viewport.w);currentViewport.copy(viewport);}}//
function reset(){// reset state
gl.disable(3042);gl.disable(2884);gl.disable(2929);gl.disable(32823);gl.disable(3089);gl.disable(2960);gl.disable(32926);gl.blendEquation(32774);gl.blendFunc(1,0);gl.blendFuncSeparate(1,0,1,0);gl.colorMask(true,true,true,true);gl.clearColor(0,0,0,0);gl.depthMask(true);gl.depthFunc(513);gl.clearDepth(1);gl.stencilMask(0xffffffff);gl.stencilFunc(519,0,0xffffffff);gl.stencilOp(7680,7680,7680);gl.clearStencil(0);gl.cullFace(1029);gl.frontFace(2305);gl.polygonOffset(0,0);gl.activeTexture(33984);gl.bindFramebuffer(36160,null);if(isWebGL2===true){gl.bindFramebuffer(36009,null);gl.bindFramebuffer(36008,null);}gl.useProgram(null);gl.lineWidth(1);gl.scissor(0,0,gl.canvas.width,gl.canvas.height);gl.viewport(0,0,gl.canvas.width,gl.canvas.height);// reset internals
enabledCapabilities={};currentTextureSlot=null;currentBoundTextures={};currentBoundFramebuffers={};currentDrawbuffers=new WeakMap();defaultDrawbuffers=[];currentProgram=null;currentBlendingEnabled=false;currentBlending=null;currentBlendEquation=null;currentBlendSrc=null;currentBlendDst=null;currentBlendEquationAlpha=null;currentBlendSrcAlpha=null;currentBlendDstAlpha=null;currentPremultipledAlpha=false;currentFlipSided=null;currentCullFace=null;currentLineWidth=null;currentPolygonOffsetFactor=null;currentPolygonOffsetUnits=null;currentScissor.set(0,0,gl.canvas.width,gl.canvas.height);currentViewport.set(0,0,gl.canvas.width,gl.canvas.height);colorBuffer.reset();depthBuffer.reset();stencilBuffer.reset();}return{buffers:{color:colorBuffer,depth:depthBuffer,stencil:stencilBuffer},enable:enable,disable:disable,bindFramebuffer:bindFramebuffer,drawBuffers:drawBuffers,useProgram:useProgram,setBlending:setBlending,setMaterial:setMaterial,setFlipSided:setFlipSided,setCullFace:setCullFace,setLineWidth:setLineWidth,setPolygonOffset:setPolygonOffset,setScissorTest:setScissorTest,activeTexture:activeTexture,bindTexture:bindTexture,unbindTexture:unbindTexture,compressedTexImage2D:compressedTexImage2D,texImage2D:texImage2D,texImage3D:texImage3D,texStorage2D:texStorage2D,texStorage3D:texStorage3D,texSubImage2D:texSubImage2D,texSubImage3D:texSubImage3D,compressedTexSubImage2D:compressedTexSubImage2D,scissor:scissor,viewport:viewport,reset:reset};}function WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info){const isWebGL2=capabilities.isWebGL2;const maxTextures=capabilities.maxTextures;const maxCubemapSize=capabilities.maxCubemapSize;const maxTextureSize=capabilities.maxTextureSize;const maxSamples=capabilities.maxSamples;const multisampledRTTExt=extensions.has('WEBGL_multisampled_render_to_texture')?extensions.get('WEBGL_multisampled_render_to_texture'):null;const _videoTextures=new WeakMap();let _canvas;const _sources=new WeakMap();// maps WebglTexture objects to instances of Source
// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
let useOffscreenCanvas=false;try{useOffscreenCanvas=typeof OffscreenCanvas!=='undefined'&&new OffscreenCanvas(1,1).getContext('2d')!==null;}catch(err){// Ignore any errors
}function createCanvas(width,height){// Use OffscreenCanvas when available. Specially needed in web workers
return useOffscreenCanvas?new OffscreenCanvas(width,height):createElementNS('canvas');}function resizeImage(image,needsPowerOfTwo,needsNewCanvas,maxSize){let scale=1;// handle case if texture exceeds max size
if(image.width>maxSize||image.height>maxSize){scale=maxSize/Math.max(image.width,image.height);}// only perform resize if necessary
if(scale<1||needsPowerOfTwo===true){// only perform resize for certain image types
if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){const floor=needsPowerOfTwo?floorPowerOfTwo:Math.floor;const width=floor(scale*image.width);const height=floor(scale*image.height);if(_canvas===undefined)_canvas=createCanvas(width,height);// cube textures can't reuse the same canvas
const canvas=needsNewCanvas?createCanvas(width,height):_canvas;canvas.width=width;canvas.height=height;const context=canvas.getContext('2d');context.drawImage(image,0,0,width,height);console.warn('THREE.WebGLRenderer: Texture has been resized from ('+image.width+'x'+image.height+') to ('+width+'x'+height+').');return canvas;}else{if('data'in image){console.warn('THREE.WebGLRenderer: Image in DataTexture is too big ('+image.width+'x'+image.height+').');}return image;}}return image;}function isPowerOfTwo$1(image){return isPowerOfTwo(image.width)&&isPowerOfTwo(image.height);}function textureNeedsPowerOfTwo(texture){if(isWebGL2)return false;return texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping||texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function textureNeedsGenerateMipmaps(texture,supportsMips){return texture.generateMipmaps&&supportsMips&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function generateMipmap(target){_gl.generateMipmap(target);}function getInternalFormat(internalFormatName,glFormat,glType,encoding,isVideoTexture=false){if(isWebGL2===false)return glFormat;if(internalFormatName!==null){if(_gl[internalFormatName]!==undefined)return _gl[internalFormatName];console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \''+internalFormatName+'\'');}let internalFormat=glFormat;if(glFormat===6403){if(glType===5126)internalFormat=33326;if(glType===5131)internalFormat=33325;if(glType===5121)internalFormat=33321;}if(glFormat===33319){if(glType===5126)internalFormat=33328;if(glType===5131)internalFormat=33327;if(glType===5121)internalFormat=33323;}if(glFormat===6408){if(glType===5126)internalFormat=34836;if(glType===5131)internalFormat=34842;if(glType===5121)internalFormat=encoding===sRGBEncoding&&isVideoTexture===false?35907:32856;if(glType===32819)internalFormat=32854;if(glType===32820)internalFormat=32855;}if(internalFormat===33325||internalFormat===33326||internalFormat===33327||internalFormat===33328||internalFormat===34842||internalFormat===34836){extensions.get('EXT_color_buffer_float');}return internalFormat;}function getMipLevels(texture,image,supportsMips){if(textureNeedsGenerateMipmaps(texture,supportsMips)===true||texture.isFramebufferTexture&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter){return Math.log2(Math.max(image.width,image.height))+1;}else if(texture.mipmaps!==undefined&&texture.mipmaps.length>0){// user-defined mipmaps
return texture.mipmaps.length;}else if(texture.isCompressedTexture&&Array.isArray(texture.image)){return image.mipmaps.length;}else{// texture without mipmaps (only base level)
return 1;}}// Fallback filters for non-power-of-2 textures
function filterFallback(f){if(f===NearestFilter||f===NearestMipmapNearestFilter||f===NearestMipmapLinearFilter){return 9728;}return 9729;}//
function onTextureDispose(event){const texture=event.target;texture.removeEventListener('dispose',onTextureDispose);deallocateTexture(texture);if(texture.isVideoTexture){_videoTextures.delete(texture);}}function onRenderTargetDispose(event){const renderTarget=event.target;renderTarget.removeEventListener('dispose',onRenderTargetDispose);deallocateRenderTarget(renderTarget);}//
function deallocateTexture(texture){const textureProperties=properties.get(texture);if(textureProperties.__webglInit===undefined)return;// check if it's necessary to remove the WebGLTexture object
const source=texture.source;const webglTextures=_sources.get(source);if(webglTextures){const webglTexture=webglTextures[textureProperties.__cacheKey];webglTexture.usedTimes--;// the WebGLTexture object is not used anymore, remove it
if(webglTexture.usedTimes===0){deleteTexture(texture);}// remove the weak map entry if no WebGLTexture uses the source anymore
if(Object.keys(webglTextures).length===0){_sources.delete(source);}}properties.remove(texture);}function deleteTexture(texture){const textureProperties=properties.get(texture);_gl.deleteTexture(textureProperties.__webglTexture);const source=texture.source;const webglTextures=_sources.get(source);delete webglTextures[textureProperties.__cacheKey];info.memory.textures--;}function deallocateRenderTarget(renderTarget){const texture=renderTarget.texture;const renderTargetProperties=properties.get(renderTarget);const textureProperties=properties.get(texture);if(textureProperties.__webglTexture!==undefined){_gl.deleteTexture(textureProperties.__webglTexture);info.memory.textures--;}if(renderTarget.depthTexture){renderTarget.depthTexture.dispose();}if(renderTarget.isWebGLCubeRenderTarget){for(let i=0;i<6;i++){_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);}}else{_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);if(renderTargetProperties.__webglMultisampledFramebuffer)_gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);if(renderTargetProperties.__webglColorRenderbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);if(renderTargetProperties.__webglDepthRenderbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);}if(renderTarget.isWebGLMultipleRenderTargets){for(let i=0,il=texture.length;i<il;i++){const attachmentProperties=properties.get(texture[i]);if(attachmentProperties.__webglTexture){_gl.deleteTexture(attachmentProperties.__webglTexture);info.memory.textures--;}properties.remove(texture[i]);}}properties.remove(texture);properties.remove(renderTarget);}//
let textureUnits=0;function resetTextureUnits(){textureUnits=0;}function allocateTextureUnit(){const textureUnit=textureUnits;if(textureUnit>=maxTextures){console.warn('THREE.WebGLTextures: Trying to use '+textureUnit+' texture units while this GPU supports only '+maxTextures);}textureUnits+=1;return textureUnit;}function getTextureCacheKey(texture){const array=[];array.push(texture.wrapS);array.push(texture.wrapT);array.push(texture.magFilter);array.push(texture.minFilter);array.push(texture.anisotropy);array.push(texture.internalFormat);array.push(texture.format);array.push(texture.type);array.push(texture.generateMipmaps);array.push(texture.premultiplyAlpha);array.push(texture.flipY);array.push(texture.unpackAlignment);array.push(texture.encoding);return array.join();}//
function setTexture2D(texture,slot){const textureProperties=properties.get(texture);if(texture.isVideoTexture)updateVideoTexture(texture);if(texture.version>0&&textureProperties.__version!==texture.version){const image=texture.image;if(image===null){console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');}else if(image.complete===false){console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');}else{uploadTexture(textureProperties,texture,slot);return;}}state.activeTexture(33984+slot);state.bindTexture(3553,textureProperties.__webglTexture);}function setTexture2DArray(texture,slot){const textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(35866,textureProperties.__webglTexture);}function setTexture3D(texture,slot){const textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(32879,textureProperties.__webglTexture);}function setTextureCube(texture,slot){const textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadCubeTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(34067,textureProperties.__webglTexture);}const wrappingToGL={[RepeatWrapping]:10497,[ClampToEdgeWrapping]:33071,[MirroredRepeatWrapping]:33648};const filterToGL={[NearestFilter]:9728,[NearestMipmapNearestFilter]:9984,[NearestMipmapLinearFilter]:9986,[LinearFilter]:9729,[LinearMipmapNearestFilter]:9985,[LinearMipmapLinearFilter]:9987};function setTextureParameters(textureType,texture,supportsMips){if(supportsMips){_gl.texParameteri(textureType,10242,wrappingToGL[texture.wrapS]);_gl.texParameteri(textureType,10243,wrappingToGL[texture.wrapT]);if(textureType===32879||textureType===35866){_gl.texParameteri(textureType,32882,wrappingToGL[texture.wrapR]);}_gl.texParameteri(textureType,10240,filterToGL[texture.magFilter]);_gl.texParameteri(textureType,10241,filterToGL[texture.minFilter]);}else{_gl.texParameteri(textureType,10242,33071);_gl.texParameteri(textureType,10243,33071);if(textureType===32879||textureType===35866){_gl.texParameteri(textureType,32882,33071);}if(texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');}_gl.texParameteri(textureType,10240,filterFallback(texture.magFilter));_gl.texParameteri(textureType,10241,filterFallback(texture.minFilter));if(texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');}}if(extensions.has('EXT_texture_filter_anisotropic')===true){const extension=extensions.get('EXT_texture_filter_anisotropic');if(texture.type===FloatType&&extensions.has('OES_texture_float_linear')===false)return;// verify extension for WebGL 1 and WebGL 2
if(isWebGL2===false&&texture.type===HalfFloatType&&extensions.has('OES_texture_half_float_linear')===false)return;// verify extension for WebGL 1 only
if(texture.anisotropy>1||properties.get(texture).__currentAnisotropy){_gl.texParameterf(textureType,extension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy()));properties.get(texture).__currentAnisotropy=texture.anisotropy;}}}function initTexture(textureProperties,texture){let forceUpload=false;if(textureProperties.__webglInit===undefined){textureProperties.__webglInit=true;texture.addEventListener('dispose',onTextureDispose);}// create Source <-> WebGLTextures mapping if necessary
const source=texture.source;let webglTextures=_sources.get(source);if(webglTextures===undefined){webglTextures={};_sources.set(source,webglTextures);}// check if there is already a WebGLTexture object for the given texture parameters
const textureCacheKey=getTextureCacheKey(texture);if(textureCacheKey!==textureProperties.__cacheKey){// if not, create a new instance of WebGLTexture
if(webglTextures[textureCacheKey]===undefined){// create new entry
webglTextures[textureCacheKey]={texture:_gl.createTexture(),usedTimes:0};info.memory.textures++;// when a new instance of WebGLTexture was created, a texture upload is required
// even if the image contents are identical
forceUpload=true;}webglTextures[textureCacheKey].usedTimes++;// every time the texture cache key changes, it's necessary to check if an instance of
// WebGLTexture can be deleted in order to avoid a memory leak.
const webglTexture=webglTextures[textureProperties.__cacheKey];if(webglTexture!==undefined){webglTextures[textureProperties.__cacheKey].usedTimes--;if(webglTexture.usedTimes===0){deleteTexture(texture);}}// store references to cache key and WebGLTexture object
textureProperties.__cacheKey=textureCacheKey;textureProperties.__webglTexture=webglTextures[textureCacheKey].texture;}return forceUpload;}function uploadTexture(textureProperties,texture,slot){let textureType=3553;if(texture.isDataArrayTexture)textureType=35866;if(texture.isData3DTexture)textureType=32879;const forceUpload=initTexture(textureProperties,texture);const source=texture.source;state.activeTexture(33984+slot);state.bindTexture(textureType,textureProperties.__webglTexture);if(source.version!==source.__currentVersion||forceUpload===true){_gl.pixelStorei(37440,texture.flipY);_gl.pixelStorei(37441,texture.premultiplyAlpha);_gl.pixelStorei(3317,texture.unpackAlignment);_gl.pixelStorei(37443,0);const needsPowerOfTwo=textureNeedsPowerOfTwo(texture)&&isPowerOfTwo$1(texture.image)===false;let image=resizeImage(texture.image,needsPowerOfTwo,false,maxTextureSize);image=verifyColorSpace(texture,image);const supportsMips=isPowerOfTwo$1(image)||isWebGL2,glFormat=utils.convert(texture.format,texture.encoding);let glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding,texture.isVideoTexture);setTextureParameters(textureType,texture,supportsMips);let mipmap;const mipmaps=texture.mipmaps;const useTexStorage=isWebGL2&&texture.isVideoTexture!==true;const allocateMemory=textureProperties.__version===undefined;const levels=getMipLevels(texture,image,supportsMips);if(texture.isDepthTexture){// populate depth texture with dummy data
glInternalFormat=6402;if(isWebGL2){if(texture.type===FloatType){glInternalFormat=36012;}else if(texture.type===UnsignedIntType){glInternalFormat=33190;}else if(texture.type===UnsignedInt248Type){glInternalFormat=35056;}else{glInternalFormat=33189;// WebGL2 requires sized internalformat for glTexImage2D
}}else{if(texture.type===FloatType){console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');}}// validation checks for WebGL 1
if(texture.format===DepthFormat&&glInternalFormat===6402){// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.type!==UnsignedShortType&&texture.type!==UnsignedIntType){console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');texture.type=UnsignedShortType;glType=utils.convert(texture.type);}}if(texture.format===DepthStencilFormat&&glInternalFormat===6402){// Depth stencil textures need the DEPTH_STENCIL internal format
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
glInternalFormat=34041;// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.type!==UnsignedInt248Type){console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');texture.type=UnsignedInt248Type;glType=utils.convert(texture.type);}}//
if(useTexStorage&&allocateMemory){state.texStorage2D(3553,1,glInternalFormat,image.width,image.height);}else{state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);}}else if(texture.isDataTexture){// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(mipmaps.length>0&&supportsMips){if(useTexStorage&&allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);}for(let i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];if(useTexStorage){state.texSubImage2D(3553,i,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data);}else{state.texImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}texture.generateMipmaps=false;}else{if(useTexStorage){if(allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height);}state.texSubImage2D(3553,0,0,0,image.width,image.height,glFormat,glType,image.data);}else{state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);}}}else if(texture.isCompressedTexture){if(useTexStorage&&allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);}for(let i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];if(texture.format!==RGBAFormat){if(glFormat!==null){if(useTexStorage){state.compressedTexSubImage2D(3553,i,0,0,mipmap.width,mipmap.height,glFormat,mipmap.data);}else{state.compressedTexImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}}else{console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');}}else{if(useTexStorage){state.texSubImage2D(3553,i,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data);}else{state.texImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}}}else if(texture.isDataArrayTexture){if(useTexStorage){if(allocateMemory){state.texStorage3D(35866,levels,glInternalFormat,image.width,image.height,image.depth);}state.texSubImage3D(35866,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data);}else{state.texImage3D(35866,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);}}else if(texture.isData3DTexture){if(useTexStorage){if(allocateMemory){state.texStorage3D(32879,levels,glInternalFormat,image.width,image.height,image.depth);}state.texSubImage3D(32879,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data);}else{state.texImage3D(32879,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);}}else if(texture.isFramebufferTexture){if(useTexStorage&&allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height);}else{state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);}}else{// regular Texture (image, video, canvas)
// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(mipmaps.length>0&&supportsMips){if(useTexStorage&&allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);}for(let i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];if(useTexStorage){state.texSubImage2D(3553,i,0,0,glFormat,glType,mipmap);}else{state.texImage2D(3553,i,glInternalFormat,glFormat,glType,mipmap);}}texture.generateMipmaps=false;}else{if(useTexStorage){if(allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height);}state.texSubImage2D(3553,0,0,0,glFormat,glType,image);}else{state.texImage2D(3553,0,glInternalFormat,glFormat,glType,image);}}}if(textureNeedsGenerateMipmaps(texture,supportsMips)){generateMipmap(textureType);}source.__currentVersion=source.version;if(texture.onUpdate)texture.onUpdate(texture);}textureProperties.__version=texture.version;}function uploadCubeTexture(textureProperties,texture,slot){if(texture.image.length!==6)return;const forceUpload=initTexture(textureProperties,texture);const source=texture.source;state.activeTexture(33984+slot);state.bindTexture(34067,textureProperties.__webglTexture);if(source.version!==source.__currentVersion||forceUpload===true){_gl.pixelStorei(37440,texture.flipY);_gl.pixelStorei(37441,texture.premultiplyAlpha);_gl.pixelStorei(3317,texture.unpackAlignment);_gl.pixelStorei(37443,0);const isCompressed=texture.isCompressedTexture||texture.image[0].isCompressedTexture;const isDataTexture=texture.image[0]&&texture.image[0].isDataTexture;const cubeImage=[];for(let i=0;i<6;i++){if(!isCompressed&&!isDataTexture){cubeImage[i]=resizeImage(texture.image[i],false,true,maxCubemapSize);}else{cubeImage[i]=isDataTexture?texture.image[i].image:texture.image[i];}cubeImage[i]=verifyColorSpace(texture,cubeImage[i]);}const image=cubeImage[0],supportsMips=isPowerOfTwo$1(image)||isWebGL2,glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);const useTexStorage=isWebGL2&&texture.isVideoTexture!==true;const allocateMemory=textureProperties.__version===undefined;let levels=getMipLevels(texture,image,supportsMips);setTextureParameters(34067,texture,supportsMips);let mipmaps;if(isCompressed){if(useTexStorage&&allocateMemory){state.texStorage2D(34067,levels,glInternalFormat,image.width,image.height);}for(let i=0;i<6;i++){mipmaps=cubeImage[i].mipmaps;for(let j=0;j<mipmaps.length;j++){const mipmap=mipmaps[j];if(texture.format!==RGBAFormat){if(glFormat!==null){if(useTexStorage){state.compressedTexSubImage2D(34069+i,j,0,0,mipmap.width,mipmap.height,glFormat,mipmap.data);}else{state.compressedTexImage2D(34069+i,j,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}}else{console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');}}else{if(useTexStorage){state.texSubImage2D(34069+i,j,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data);}else{state.texImage2D(34069+i,j,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}}}}else{mipmaps=texture.mipmaps;if(useTexStorage&&allocateMemory){// TODO: Uniformly handle mipmap definitions
// Normal textures and compressed cube textures define base level + mips with their mipmap array
// Uncompressed cube textures use their mipmap array only for mips (no base level)
if(mipmaps.length>0)levels++;state.texStorage2D(34067,levels,glInternalFormat,cubeImage[0].width,cubeImage[0].height);}for(let i=0;i<6;i++){if(isDataTexture){if(useTexStorage){state.texSubImage2D(34069+i,0,0,0,cubeImage[i].width,cubeImage[i].height,glFormat,glType,cubeImage[i].data);}else{state.texImage2D(34069+i,0,glInternalFormat,cubeImage[i].width,cubeImage[i].height,0,glFormat,glType,cubeImage[i].data);}for(let j=0;j<mipmaps.length;j++){const mipmap=mipmaps[j];const mipmapImage=mipmap.image[i].image;if(useTexStorage){state.texSubImage2D(34069+i,j+1,0,0,mipmapImage.width,mipmapImage.height,glFormat,glType,mipmapImage.data);}else{state.texImage2D(34069+i,j+1,glInternalFormat,mipmapImage.width,mipmapImage.height,0,glFormat,glType,mipmapImage.data);}}}else{if(useTexStorage){state.texSubImage2D(34069+i,0,0,0,glFormat,glType,cubeImage[i]);}else{state.texImage2D(34069+i,0,glInternalFormat,glFormat,glType,cubeImage[i]);}for(let j=0;j<mipmaps.length;j++){const mipmap=mipmaps[j];if(useTexStorage){state.texSubImage2D(34069+i,j+1,0,0,glFormat,glType,mipmap.image[i]);}else{state.texImage2D(34069+i,j+1,glInternalFormat,glFormat,glType,mipmap.image[i]);}}}}}if(textureNeedsGenerateMipmaps(texture,supportsMips)){// We assume images for cube map have the same size.
generateMipmap(34067);}source.__currentVersion=source.version;if(texture.onUpdate)texture.onUpdate(texture);}textureProperties.__version=texture.version;}// Render targets
// Setup storage for target texture and bind it to correct framebuffer
function setupFrameBufferTexture(framebuffer,renderTarget,texture,attachment,textureTarget){const glFormat=utils.convert(texture.format,texture.encoding);const glType=utils.convert(texture.type);const glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);const renderTargetProperties=properties.get(renderTarget);if(!renderTargetProperties.__hasExternalTextures){if(textureTarget===32879||textureTarget===35866){state.texImage3D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,renderTarget.depth,0,glFormat,glType,null);}else{state.texImage2D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null);}}state.bindFramebuffer(36160,framebuffer);if(useMultisampledRTT(renderTarget)){multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160,attachment,textureTarget,properties.get(texture).__webglTexture,0,getRenderTargetSamples(renderTarget));}else{_gl.framebufferTexture2D(36160,attachment,textureTarget,properties.get(texture).__webglTexture,0);}state.bindFramebuffer(36160,null);}// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
function setupRenderBufferStorage(renderbuffer,renderTarget,isMultisample){_gl.bindRenderbuffer(36161,renderbuffer);if(renderTarget.depthBuffer&&!renderTarget.stencilBuffer){let glInternalFormat=33189;if(isMultisample||useMultisampledRTT(renderTarget)){const depthTexture=renderTarget.depthTexture;if(depthTexture&&depthTexture.isDepthTexture){if(depthTexture.type===FloatType){glInternalFormat=36012;}else if(depthTexture.type===UnsignedIntType){glInternalFormat=33190;}}const samples=getRenderTargetSamples(renderTarget);if(useMultisampledRTT(renderTarget)){multisampledRTTExt.renderbufferStorageMultisampleEXT(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);}else{_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);}}else{_gl.renderbufferStorage(36161,glInternalFormat,renderTarget.width,renderTarget.height);}_gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer);}else if(renderTarget.depthBuffer&&renderTarget.stencilBuffer){const samples=getRenderTargetSamples(renderTarget);if(isMultisample&&useMultisampledRTT(renderTarget)===false){_gl.renderbufferStorageMultisample(36161,samples,35056,renderTarget.width,renderTarget.height);}else if(useMultisampledRTT(renderTarget)){multisampledRTTExt.renderbufferStorageMultisampleEXT(36161,samples,35056,renderTarget.width,renderTarget.height);}else{_gl.renderbufferStorage(36161,34041,renderTarget.width,renderTarget.height);}_gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer);}else{// Use the first texture for MRT so far
const texture=renderTarget.isWebGLMultipleRenderTargets===true?renderTarget.texture[0]:renderTarget.texture;const glFormat=utils.convert(texture.format,texture.encoding);const glType=utils.convert(texture.type);const glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);const samples=getRenderTargetSamples(renderTarget);if(isMultisample&&useMultisampledRTT(renderTarget)===false){_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);}else if(useMultisampledRTT(renderTarget)){multisampledRTTExt.renderbufferStorageMultisampleEXT(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);}else{_gl.renderbufferStorage(36161,glInternalFormat,renderTarget.width,renderTarget.height);}}_gl.bindRenderbuffer(36161,null);}// Setup resources for a Depth Texture for a FBO (needs an extension)
function setupDepthTexture(framebuffer,renderTarget){const isCube=renderTarget&&renderTarget.isWebGLCubeRenderTarget;if(isCube)throw new Error('Depth Texture with cube render targets is not supported');state.bindFramebuffer(36160,framebuffer);if(!(renderTarget.depthTexture&&renderTarget.depthTexture.isDepthTexture)){throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');}// upload an empty depth texture with framebuffer size
if(!properties.get(renderTarget.depthTexture).__webglTexture||renderTarget.depthTexture.image.width!==renderTarget.width||renderTarget.depthTexture.image.height!==renderTarget.height){renderTarget.depthTexture.image.width=renderTarget.width;renderTarget.depthTexture.image.height=renderTarget.height;renderTarget.depthTexture.needsUpdate=true;}setTexture2D(renderTarget.depthTexture,0);const webglDepthTexture=properties.get(renderTarget.depthTexture).__webglTexture;const samples=getRenderTargetSamples(renderTarget);if(renderTarget.depthTexture.format===DepthFormat){if(useMultisampledRTT(renderTarget)){multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160,36096,3553,webglDepthTexture,0,samples);}else{_gl.framebufferTexture2D(36160,36096,3553,webglDepthTexture,0);}}else if(renderTarget.depthTexture.format===DepthStencilFormat){if(useMultisampledRTT(renderTarget)){multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160,33306,3553,webglDepthTexture,0,samples);}else{_gl.framebufferTexture2D(36160,33306,3553,webglDepthTexture,0);}}else{throw new Error('Unknown depthTexture format');}}// Setup GL resources for a non-texture depth buffer
function setupDepthRenderbuffer(renderTarget){const renderTargetProperties=properties.get(renderTarget);const isCube=renderTarget.isWebGLCubeRenderTarget===true;if(renderTarget.depthTexture&&!renderTargetProperties.__autoAllocateDepthBuffer){if(isCube)throw new Error('target.depthTexture not supported in Cube render targets');setupDepthTexture(renderTargetProperties.__webglFramebuffer,renderTarget);}else{if(isCube){renderTargetProperties.__webglDepthbuffer=[];for(let i=0;i<6;i++){state.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer[i]);renderTargetProperties.__webglDepthbuffer[i]=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i],renderTarget,false);}}else{state.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer);renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget,false);}}state.bindFramebuffer(36160,null);}// rebind framebuffer with external textures
function rebindTextures(renderTarget,colorTexture,depthTexture){const renderTargetProperties=properties.get(renderTarget);if(colorTexture!==undefined){setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,renderTarget.texture,36064,3553);}if(depthTexture!==undefined){setupDepthRenderbuffer(renderTarget);}}// Set up GL resources for the render target
function setupRenderTarget(renderTarget){const texture=renderTarget.texture;const renderTargetProperties=properties.get(renderTarget);const textureProperties=properties.get(texture);renderTarget.addEventListener('dispose',onRenderTargetDispose);if(renderTarget.isWebGLMultipleRenderTargets!==true){if(textureProperties.__webglTexture===undefined){textureProperties.__webglTexture=_gl.createTexture();}textureProperties.__version=texture.version;info.memory.textures++;}const isCube=renderTarget.isWebGLCubeRenderTarget===true;const isMultipleRenderTargets=renderTarget.isWebGLMultipleRenderTargets===true;const supportsMips=isPowerOfTwo$1(renderTarget)||isWebGL2;// Setup framebuffer
if(isCube){renderTargetProperties.__webglFramebuffer=[];for(let i=0;i<6;i++){renderTargetProperties.__webglFramebuffer[i]=_gl.createFramebuffer();}}else{renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer();if(isMultipleRenderTargets){if(capabilities.drawBuffers){const textures=renderTarget.texture;for(let i=0,il=textures.length;i<il;i++){const attachmentProperties=properties.get(textures[i]);if(attachmentProperties.__webglTexture===undefined){attachmentProperties.__webglTexture=_gl.createTexture();info.memory.textures++;}}}else{console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');}}else if(isWebGL2&&renderTarget.samples>0&&useMultisampledRTT(renderTarget)===false){renderTargetProperties.__webglMultisampledFramebuffer=_gl.createFramebuffer();renderTargetProperties.__webglColorRenderbuffer=_gl.createRenderbuffer();_gl.bindRenderbuffer(36161,renderTargetProperties.__webglColorRenderbuffer);const glFormat=utils.convert(texture.format,texture.encoding);const glType=utils.convert(texture.type);const glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);const samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);state.bindFramebuffer(36160,renderTargetProperties.__webglMultisampledFramebuffer);_gl.framebufferRenderbuffer(36160,36064,36161,renderTargetProperties.__webglColorRenderbuffer);_gl.bindRenderbuffer(36161,null);if(renderTarget.depthBuffer){renderTargetProperties.__webglDepthRenderbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer,renderTarget,true);}state.bindFramebuffer(36160,null);}}// Setup color buffer
if(isCube){state.bindTexture(34067,textureProperties.__webglTexture);setTextureParameters(34067,texture,supportsMips);for(let i=0;i<6;i++){setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i],renderTarget,texture,36064,34069+i);}if(textureNeedsGenerateMipmaps(texture,supportsMips)){generateMipmap(34067);}state.unbindTexture();}else if(isMultipleRenderTargets){const textures=renderTarget.texture;for(let i=0,il=textures.length;i<il;i++){const attachment=textures[i];const attachmentProperties=properties.get(attachment);state.bindTexture(3553,attachmentProperties.__webglTexture);setTextureParameters(3553,attachment,supportsMips);setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,attachment,36064+i,3553);if(textureNeedsGenerateMipmaps(attachment,supportsMips)){generateMipmap(3553);}}state.unbindTexture();}else{let glTextureType=3553;if(renderTarget.isWebGL3DRenderTarget||renderTarget.isWebGLArrayRenderTarget){if(isWebGL2){glTextureType=renderTarget.isWebGL3DRenderTarget?32879:35866;}else{console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');}}state.bindTexture(glTextureType,textureProperties.__webglTexture);setTextureParameters(glTextureType,texture,supportsMips);setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,texture,36064,glTextureType);if(textureNeedsGenerateMipmaps(texture,supportsMips)){generateMipmap(glTextureType);}state.unbindTexture();}// Setup depth and stencil buffers
if(renderTarget.depthBuffer){setupDepthRenderbuffer(renderTarget);}}function updateRenderTargetMipmap(renderTarget){const supportsMips=isPowerOfTwo$1(renderTarget)||isWebGL2;const textures=renderTarget.isWebGLMultipleRenderTargets===true?renderTarget.texture:[renderTarget.texture];for(let i=0,il=textures.length;i<il;i++){const texture=textures[i];if(textureNeedsGenerateMipmaps(texture,supportsMips)){const target=renderTarget.isWebGLCubeRenderTarget?34067:3553;const webglTexture=properties.get(texture).__webglTexture;state.bindTexture(target,webglTexture);generateMipmap(target);state.unbindTexture();}}}function updateMultisampleRenderTarget(renderTarget){if(isWebGL2&&renderTarget.samples>0&&useMultisampledRTT(renderTarget)===false){const width=renderTarget.width;const height=renderTarget.height;let mask=16384;const invalidationArray=[36064];const depthStyle=renderTarget.stencilBuffer?33306:36096;if(renderTarget.depthBuffer){invalidationArray.push(depthStyle);}const renderTargetProperties=properties.get(renderTarget);const ignoreDepthValues=renderTargetProperties.__ignoreDepthValues!==undefined?renderTargetProperties.__ignoreDepthValues:true;if(ignoreDepthValues===false){if(renderTarget.depthBuffer)mask|=256;if(renderTarget.stencilBuffer)mask|=1024;}state.bindFramebuffer(36008,renderTargetProperties.__webglMultisampledFramebuffer);state.bindFramebuffer(36009,renderTargetProperties.__webglFramebuffer);if(ignoreDepthValues===true){_gl.invalidateFramebuffer(36008,[depthStyle]);_gl.invalidateFramebuffer(36009,[depthStyle]);}_gl.blitFramebuffer(0,0,width,height,0,0,width,height,mask,9728);_gl.invalidateFramebuffer(36008,invalidationArray);state.bindFramebuffer(36008,null);state.bindFramebuffer(36009,renderTargetProperties.__webglMultisampledFramebuffer);}}function getRenderTargetSamples(renderTarget){return Math.min(maxSamples,renderTarget.samples);}function useMultisampledRTT(renderTarget){const renderTargetProperties=properties.get(renderTarget);return isWebGL2&&renderTarget.samples>0&&extensions.has('WEBGL_multisampled_render_to_texture')===true&&renderTargetProperties.__useRenderToTexture!==false;}function updateVideoTexture(texture){const frame=info.render.frame;// Check the last frame we updated the VideoTexture
if(_videoTextures.get(texture)!==frame){_videoTextures.set(texture,frame);texture.update();}}function verifyColorSpace(texture,image){const encoding=texture.encoding;const format=texture.format;const type=texture.type;if(texture.isCompressedTexture===true||texture.isVideoTexture===true||texture.format===_SRGBAFormat)return image;if(encoding!==LinearEncoding){// sRGB
if(encoding===sRGBEncoding){if(isWebGL2===false){// in WebGL 1, try to use EXT_sRGB extension and unsized formats
if(extensions.has('EXT_sRGB')===true&&format===RGBAFormat){texture.format=_SRGBAFormat;// it's not possible to generate mips in WebGL 1 with this extension
texture.minFilter=LinearFilter;texture.generateMipmaps=false;}else{// slow fallback (CPU decode)
image=ImageUtils.sRGBToLinear(image);}}else{// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
if(format!==RGBAFormat||type!==UnsignedByteType){console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');}}}else{console.error('THREE.WebGLTextures: Unsupported texture encoding:',encoding);}}return image;}//
this.allocateTextureUnit=allocateTextureUnit;this.resetTextureUnits=resetTextureUnits;this.setTexture2D=setTexture2D;this.setTexture2DArray=setTexture2DArray;this.setTexture3D=setTexture3D;this.setTextureCube=setTextureCube;this.rebindTextures=rebindTextures;this.setupRenderTarget=setupRenderTarget;this.updateRenderTargetMipmap=updateRenderTargetMipmap;this.updateMultisampleRenderTarget=updateMultisampleRenderTarget;this.setupDepthRenderbuffer=setupDepthRenderbuffer;this.setupFrameBufferTexture=setupFrameBufferTexture;this.useMultisampledRTT=useMultisampledRTT;}function WebGLUtils(gl,extensions,capabilities){const isWebGL2=capabilities.isWebGL2;function convert(p,encoding=null){let extension;if(p===UnsignedByteType)return 5121;if(p===UnsignedShort4444Type)return 32819;if(p===UnsignedShort5551Type)return 32820;if(p===ByteType)return 5120;if(p===ShortType)return 5122;if(p===UnsignedShortType)return 5123;if(p===IntType)return 5124;if(p===UnsignedIntType)return 5125;if(p===FloatType)return 5126;if(p===HalfFloatType){if(isWebGL2)return 5131;extension=extensions.get('OES_texture_half_float');if(extension!==null){return extension.HALF_FLOAT_OES;}else{return null;}}if(p===AlphaFormat)return 6406;if(p===RGBAFormat)return 6408;if(p===LuminanceFormat)return 6409;if(p===LuminanceAlphaFormat)return 6410;if(p===DepthFormat)return 6402;if(p===DepthStencilFormat)return 34041;if(p===RedFormat)return 6403;if(p===RGBFormat){console.warn('THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228');return 6408;}// WebGL 1 sRGB fallback
if(p===_SRGBAFormat){extension=extensions.get('EXT_sRGB');if(extension!==null){return extension.SRGB_ALPHA_EXT;}else{return null;}}// WebGL2 formats.
if(p===RedIntegerFormat)return 36244;if(p===RGFormat)return 33319;if(p===RGIntegerFormat)return 33320;if(p===RGBAIntegerFormat)return 36249;// S3TC
if(p===RGB_S3TC_DXT1_Format||p===RGBA_S3TC_DXT1_Format||p===RGBA_S3TC_DXT3_Format||p===RGBA_S3TC_DXT5_Format){if(encoding===sRGBEncoding){extension=extensions.get('WEBGL_compressed_texture_s3tc_srgb');if(extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;}else{return null;}}else{extension=extensions.get('WEBGL_compressed_texture_s3tc');if(extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;}else{return null;}}}// PVRTC
if(p===RGB_PVRTC_4BPPV1_Format||p===RGB_PVRTC_2BPPV1_Format||p===RGBA_PVRTC_4BPPV1_Format||p===RGBA_PVRTC_2BPPV1_Format){extension=extensions.get('WEBGL_compressed_texture_pvrtc');if(extension!==null){if(p===RGB_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===RGB_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===RGBA_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===RGBA_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;}else{return null;}}// ETC1
if(p===RGB_ETC1_Format){extension=extensions.get('WEBGL_compressed_texture_etc1');if(extension!==null){return extension.COMPRESSED_RGB_ETC1_WEBGL;}else{return null;}}// ETC2
if(p===RGB_ETC2_Format||p===RGBA_ETC2_EAC_Format){extension=extensions.get('WEBGL_compressed_texture_etc');if(extension!==null){if(p===RGB_ETC2_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ETC2:extension.COMPRESSED_RGB8_ETC2;if(p===RGBA_ETC2_EAC_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:extension.COMPRESSED_RGBA8_ETC2_EAC;}else{return null;}}// ASTC
if(p===RGBA_ASTC_4x4_Format||p===RGBA_ASTC_5x4_Format||p===RGBA_ASTC_5x5_Format||p===RGBA_ASTC_6x5_Format||p===RGBA_ASTC_6x6_Format||p===RGBA_ASTC_8x5_Format||p===RGBA_ASTC_8x6_Format||p===RGBA_ASTC_8x8_Format||p===RGBA_ASTC_10x5_Format||p===RGBA_ASTC_10x6_Format||p===RGBA_ASTC_10x8_Format||p===RGBA_ASTC_10x10_Format||p===RGBA_ASTC_12x10_Format||p===RGBA_ASTC_12x12_Format){extension=extensions.get('WEBGL_compressed_texture_astc');if(extension!==null){if(p===RGBA_ASTC_4x4_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:extension.COMPRESSED_RGBA_ASTC_4x4_KHR;if(p===RGBA_ASTC_5x4_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:extension.COMPRESSED_RGBA_ASTC_5x4_KHR;if(p===RGBA_ASTC_5x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:extension.COMPRESSED_RGBA_ASTC_5x5_KHR;if(p===RGBA_ASTC_6x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:extension.COMPRESSED_RGBA_ASTC_6x5_KHR;if(p===RGBA_ASTC_6x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:extension.COMPRESSED_RGBA_ASTC_6x6_KHR;if(p===RGBA_ASTC_8x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:extension.COMPRESSED_RGBA_ASTC_8x5_KHR;if(p===RGBA_ASTC_8x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:extension.COMPRESSED_RGBA_ASTC_8x6_KHR;if(p===RGBA_ASTC_8x8_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:extension.COMPRESSED_RGBA_ASTC_8x8_KHR;if(p===RGBA_ASTC_10x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:extension.COMPRESSED_RGBA_ASTC_10x5_KHR;if(p===RGBA_ASTC_10x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:extension.COMPRESSED_RGBA_ASTC_10x6_KHR;if(p===RGBA_ASTC_10x8_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:extension.COMPRESSED_RGBA_ASTC_10x8_KHR;if(p===RGBA_ASTC_10x10_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:extension.COMPRESSED_RGBA_ASTC_10x10_KHR;if(p===RGBA_ASTC_12x10_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:extension.COMPRESSED_RGBA_ASTC_12x10_KHR;if(p===RGBA_ASTC_12x12_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:extension.COMPRESSED_RGBA_ASTC_12x12_KHR;}else{return null;}}// BPTC
if(p===RGBA_BPTC_Format){extension=extensions.get('EXT_texture_compression_bptc');if(extension!==null){if(p===RGBA_BPTC_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;}else{return null;}}//
if(p===UnsignedInt248Type){if(isWebGL2)return 34042;extension=extensions.get('WEBGL_depth_texture');if(extension!==null){return extension.UNSIGNED_INT_24_8_WEBGL;}else{return null;}}}return{convert:convert};}class ArrayCamera extends PerspectiveCamera{constructor(array=[]){super();this.cameras=array;}}exports.ArrayCamera=ArrayCamera;ArrayCamera.prototype.isArrayCamera=true;class Group extends Object3D{constructor(){super();this.type='Group';}}exports.Group=Group;Group.prototype.isGroup=true;const _moveEvent={type:'move'};class WebXRController{constructor(){this._targetRay=null;this._grip=null;this._hand=null;}getHandSpace(){if(this._hand===null){this._hand=new Group();this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false};}return this._hand;}getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Group();this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new Vector3();this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new Vector3();}return this._targetRay;}getGripSpace(){if(this._grip===null){this._grip=new Group();this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new Vector3();this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new Vector3();}return this._grip;}dispatchEvent(event){if(this._targetRay!==null){this._targetRay.dispatchEvent(event);}if(this._grip!==null){this._grip.dispatchEvent(event);}if(this._hand!==null){this._hand.dispatchEvent(event);}return this;}disconnect(inputSource){this.dispatchEvent({type:'disconnected',data:inputSource});if(this._targetRay!==null){this._targetRay.visible=false;}if(this._grip!==null){this._grip.visible=false;}if(this._hand!==null){this._hand.visible=false;}return this;}update(inputSource,frame,referenceSpace){let inputPose=null;let gripPose=null;let handPose=null;const targetRay=this._targetRay;const grip=this._grip;const hand=this._hand;if(inputSource&&frame.session.visibilityState!=='visible-blurred'){if(targetRay!==null){inputPose=frame.getPose(inputSource.targetRaySpace,referenceSpace);if(inputPose!==null){targetRay.matrix.fromArray(inputPose.transform.matrix);targetRay.matrix.decompose(targetRay.position,targetRay.rotation,targetRay.scale);if(inputPose.linearVelocity){targetRay.hasLinearVelocity=true;targetRay.linearVelocity.copy(inputPose.linearVelocity);}else{targetRay.hasLinearVelocity=false;}if(inputPose.angularVelocity){targetRay.hasAngularVelocity=true;targetRay.angularVelocity.copy(inputPose.angularVelocity);}else{targetRay.hasAngularVelocity=false;}this.dispatchEvent(_moveEvent);}}if(hand&&inputSource.hand){handPose=true;for(const inputjoint of inputSource.hand.values()){// Update the joints groups with the XRJoint poses
const jointPose=frame.getJointPose(inputjoint,referenceSpace);if(hand.joints[inputjoint.jointName]===undefined){// The transform of this joint will be updated with the joint pose on each frame
const joint=new Group();joint.matrixAutoUpdate=false;joint.visible=false;hand.joints[inputjoint.jointName]=joint;// ??
hand.add(joint);}const joint=hand.joints[inputjoint.jointName];if(jointPose!==null){joint.matrix.fromArray(jointPose.transform.matrix);joint.matrix.decompose(joint.position,joint.rotation,joint.scale);joint.jointRadius=jointPose.radius;}joint.visible=jointPose!==null;}// Custom events
// Check pinchz
const indexTip=hand.joints['index-finger-tip'];const thumbTip=hand.joints['thumb-tip'];const distance=indexTip.position.distanceTo(thumbTip.position);const distanceToPinch=0.02;const threshold=0.005;if(hand.inputState.pinching&&distance>distanceToPinch+threshold){hand.inputState.pinching=false;this.dispatchEvent({type:'pinchend',handedness:inputSource.handedness,target:this});}else if(!hand.inputState.pinching&&distance<=distanceToPinch-threshold){hand.inputState.pinching=true;this.dispatchEvent({type:'pinchstart',handedness:inputSource.handedness,target:this});}}else{if(grip!==null&&inputSource.gripSpace){gripPose=frame.getPose(inputSource.gripSpace,referenceSpace);if(gripPose!==null){grip.matrix.fromArray(gripPose.transform.matrix);grip.matrix.decompose(grip.position,grip.rotation,grip.scale);if(gripPose.linearVelocity){grip.hasLinearVelocity=true;grip.linearVelocity.copy(gripPose.linearVelocity);}else{grip.hasLinearVelocity=false;}if(gripPose.angularVelocity){grip.hasAngularVelocity=true;grip.angularVelocity.copy(gripPose.angularVelocity);}else{grip.hasAngularVelocity=false;}}}}}if(targetRay!==null){targetRay.visible=inputPose!==null;}if(grip!==null){grip.visible=gripPose!==null;}if(hand!==null){hand.visible=handPose!==null;}return this;}}class DepthTexture extends Texture{constructor(width,height,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,format){format=format!==undefined?format:DepthFormat;if(format!==DepthFormat&&format!==DepthStencilFormat){throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');}if(type===undefined&&format===DepthFormat)type=UnsignedShortType;if(type===undefined&&format===DepthStencilFormat)type=UnsignedInt248Type;super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.image={width:width,height:height};this.magFilter=magFilter!==undefined?magFilter:NearestFilter;this.minFilter=minFilter!==undefined?minFilter:NearestFilter;this.flipY=false;this.generateMipmaps=false;}}exports.DepthTexture=DepthTexture;DepthTexture.prototype.isDepthTexture=true;class WebXRManager extends EventDispatcher{constructor(renderer,gl){super();const scope=this;let session=null;let framebufferScaleFactor=1.0;let referenceSpace=null;let referenceSpaceType='local-floor';let pose=null;let glBinding=null;let glProjLayer=null;let glBaseLayer=null;let xrFrame=null;const attributes=gl.getContextAttributes();let initialRenderTarget=null;let newRenderTarget=null;const controllers=[];const inputSourcesMap=new Map();//
const cameraL=new PerspectiveCamera();cameraL.layers.enable(1);cameraL.viewport=new Vector4();const cameraR=new PerspectiveCamera();cameraR.layers.enable(2);cameraR.viewport=new Vector4();const cameras=[cameraL,cameraR];const cameraVR=new ArrayCamera();cameraVR.layers.enable(1);cameraVR.layers.enable(2);let _currentDepthNear=null;let _currentDepthFar=null;//
this.cameraAutoUpdate=true;this.enabled=false;this.isPresenting=false;this.getController=function(index){let controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getTargetRaySpace();};this.getControllerGrip=function(index){let controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getGripSpace();};this.getHand=function(index){let controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getHandSpace();};//
function onSessionEvent(event){const controller=inputSourcesMap.get(event.inputSource);if(controller){controller.dispatchEvent({type:event.type,data:event.inputSource});}}function onSessionEnd(){inputSourcesMap.forEach(function(controller,inputSource){controller.disconnect(inputSource);});inputSourcesMap.clear();_currentDepthNear=null;_currentDepthFar=null;// restore framebuffer/rendering state
renderer.setRenderTarget(initialRenderTarget);glBaseLayer=null;glProjLayer=null;glBinding=null;session=null;newRenderTarget=null;//
animation.stop();scope.isPresenting=false;scope.dispatchEvent({type:'sessionend'});}this.setFramebufferScaleFactor=function(value){framebufferScaleFactor=value;if(scope.isPresenting===true){console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');}};this.setReferenceSpaceType=function(value){referenceSpaceType=value;if(scope.isPresenting===true){console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');}};this.getReferenceSpace=function(){return referenceSpace;};this.getBaseLayer=function(){return glProjLayer!==null?glProjLayer:glBaseLayer;};this.getBinding=function(){return glBinding;};this.getFrame=function(){return xrFrame;};this.getSession=function(){return session;};this.setSession=async function(value){session=value;if(session!==null){initialRenderTarget=renderer.getRenderTarget();session.addEventListener('select',onSessionEvent);session.addEventListener('selectstart',onSessionEvent);session.addEventListener('selectend',onSessionEvent);session.addEventListener('squeeze',onSessionEvent);session.addEventListener('squeezestart',onSessionEvent);session.addEventListener('squeezeend',onSessionEvent);session.addEventListener('end',onSessionEnd);session.addEventListener('inputsourceschange',onInputSourcesChange);if(attributes.xrCompatible!==true){await gl.makeXRCompatible();}if(session.renderState.layers===undefined||renderer.capabilities.isWebGL2===false){const layerInit={antialias:session.renderState.layers===undefined?attributes.antialias:true,alpha:attributes.alpha,depth:attributes.depth,stencil:attributes.stencil,framebufferScaleFactor:framebufferScaleFactor};glBaseLayer=new XRWebGLLayer(session,gl,layerInit);session.updateRenderState({baseLayer:glBaseLayer});newRenderTarget=new WebGLRenderTarget(glBaseLayer.framebufferWidth,glBaseLayer.framebufferHeight,{format:RGBAFormat,type:UnsignedByteType,encoding:renderer.outputEncoding});}else{let depthFormat=null;let depthType=null;let glDepthFormat=null;if(attributes.depth){glDepthFormat=attributes.stencil?35056:33190;depthFormat=attributes.stencil?DepthStencilFormat:DepthFormat;depthType=attributes.stencil?UnsignedInt248Type:UnsignedShortType;}const projectionlayerInit={colorFormat:renderer.outputEncoding===sRGBEncoding?35907:32856,depthFormat:glDepthFormat,scaleFactor:framebufferScaleFactor};glBinding=new XRWebGLBinding(session,gl);glProjLayer=glBinding.createProjectionLayer(projectionlayerInit);session.updateRenderState({layers:[glProjLayer]});newRenderTarget=new WebGLRenderTarget(glProjLayer.textureWidth,glProjLayer.textureHeight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(glProjLayer.textureWidth,glProjLayer.textureHeight,depthType,undefined,undefined,undefined,undefined,undefined,undefined,depthFormat),stencilBuffer:attributes.stencil,encoding:renderer.outputEncoding,samples:attributes.antialias?4:0});const renderTargetProperties=renderer.properties.get(newRenderTarget);renderTargetProperties.__ignoreDepthValues=glProjLayer.ignoreDepthValues;}newRenderTarget.isXRRenderTarget=true;// TODO Remove this when possible, see #23278
// Set foveation to maximum.
this.setFoveation(1.0);referenceSpace=await session.requestReferenceSpace(referenceSpaceType);animation.setContext(session);animation.start();scope.isPresenting=true;scope.dispatchEvent({type:'sessionstart'});}};function onInputSourcesChange(event){const inputSources=session.inputSources;// Assign inputSources to available controllers
for(let i=0;i<controllers.length;i++){inputSourcesMap.set(inputSources[i],controllers[i]);}// Notify disconnected
for(let i=0;i<event.removed.length;i++){const inputSource=event.removed[i];const controller=inputSourcesMap.get(inputSource);if(controller){controller.dispatchEvent({type:'disconnected',data:inputSource});inputSourcesMap.delete(inputSource);}}// Notify connected
for(let i=0;i<event.added.length;i++){const inputSource=event.added[i];const controller=inputSourcesMap.get(inputSource);if(controller){controller.dispatchEvent({type:'connected',data:inputSource});}}}//
const cameraLPos=new Vector3();const cameraRPos=new Vector3();/**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */function setProjectionFromUnion(camera,cameraL,cameraR){cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);const ipd=cameraLPos.distanceTo(cameraRPos);const projL=cameraL.projectionMatrix.elements;const projR=cameraR.projectionMatrix.elements;// VR systems will have identical far and near planes, and
// most likely identical top and bottom frustum extents.
// Use the left camera for these values.
const near=projL[14]/(projL[10]-1);const far=projL[14]/(projL[10]+1);const topFov=(projL[9]+1)/projL[5];const bottomFov=(projL[9]-1)/projL[5];const leftFov=(projL[8]-1)/projL[0];const rightFov=(projR[8]+1)/projR[0];const left=near*leftFov;const right=near*rightFov;// Calculate the new camera's position offset from the
// left camera. xOffset should be roughly half `ipd`.
const zOffset=ipd/(-leftFov+rightFov);const xOffset=zOffset*-leftFov;// TODO: Better way to apply this offset?
cameraL.matrixWorld.decompose(camera.position,camera.quaternion,camera.scale);camera.translateX(xOffset);camera.translateZ(zOffset);camera.matrixWorld.compose(camera.position,camera.quaternion,camera.scale);camera.matrixWorldInverse.copy(camera.matrixWorld).invert();// Find the union of the frustum values of the cameras and scale
// the values so that the near plane's position does not change in world space,
// although must now be relative to the new union camera.
const near2=near+zOffset;const far2=far+zOffset;const left2=left-xOffset;const right2=right+(ipd-xOffset);const top2=topFov*far/far2*near2;const bottom2=bottomFov*far/far2*near2;camera.projectionMatrix.makePerspective(left2,right2,top2,bottom2,near2,far2);}function updateCamera(camera,parent){if(parent===null){camera.matrixWorld.copy(camera.matrix);}else{camera.matrixWorld.multiplyMatrices(parent.matrixWorld,camera.matrix);}camera.matrixWorldInverse.copy(camera.matrixWorld).invert();}this.updateCamera=function(camera){if(session===null)return;cameraVR.near=cameraR.near=cameraL.near=camera.near;cameraVR.far=cameraR.far=cameraL.far=camera.far;if(_currentDepthNear!==cameraVR.near||_currentDepthFar!==cameraVR.far){// Note that the new renderState won't apply until the next frame. See #18320
session.updateRenderState({depthNear:cameraVR.near,depthFar:cameraVR.far});_currentDepthNear=cameraVR.near;_currentDepthFar=cameraVR.far;}const parent=camera.parent;const cameras=cameraVR.cameras;updateCamera(cameraVR,parent);for(let i=0;i<cameras.length;i++){updateCamera(cameras[i],parent);}cameraVR.matrixWorld.decompose(cameraVR.position,cameraVR.quaternion,cameraVR.scale);// update user camera and its children
camera.position.copy(cameraVR.position);camera.quaternion.copy(cameraVR.quaternion);camera.scale.copy(cameraVR.scale);camera.matrix.copy(cameraVR.matrix);camera.matrixWorld.copy(cameraVR.matrixWorld);const children=camera.children;for(let i=0,l=children.length;i<l;i++){children[i].updateMatrixWorld(true);}// update projection matrix for proper view frustum culling
if(cameras.length===2){setProjectionFromUnion(cameraVR,cameraL,cameraR);}else{// assume single camera setup (AR)
cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);}};this.getCamera=function(){return cameraVR;};this.getFoveation=function(){if(glProjLayer!==null){return glProjLayer.fixedFoveation;}if(glBaseLayer!==null){return glBaseLayer.fixedFoveation;}return undefined;};this.setFoveation=function(foveation){// 0 = no foveation = full resolution
// 1 = maximum foveation = the edges render at lower resolution
if(glProjLayer!==null){glProjLayer.fixedFoveation=foveation;}if(glBaseLayer!==null&&glBaseLayer.fixedFoveation!==undefined){glBaseLayer.fixedFoveation=foveation;}};// Animation Loop
let onAnimationFrameCallback=null;function onAnimationFrame(time,frame){pose=frame.getViewerPose(referenceSpace);xrFrame=frame;if(pose!==null){const views=pose.views;if(glBaseLayer!==null){renderer.setRenderTargetFramebuffer(newRenderTarget,glBaseLayer.framebuffer);renderer.setRenderTarget(newRenderTarget);}let cameraVRNeedsUpdate=false;// check if it's necessary to rebuild cameraVR's camera list
if(views.length!==cameraVR.cameras.length){cameraVR.cameras.length=0;cameraVRNeedsUpdate=true;}for(let i=0;i<views.length;i++){const view=views[i];let viewport=null;if(glBaseLayer!==null){viewport=glBaseLayer.getViewport(view);}else{const glSubImage=glBinding.getViewSubImage(glProjLayer,view);viewport=glSubImage.viewport;// For side-by-side projection, we only produce a single texture for both eyes.
if(i===0){renderer.setRenderTargetTextures(newRenderTarget,glSubImage.colorTexture,glProjLayer.ignoreDepthValues?undefined:glSubImage.depthStencilTexture);renderer.setRenderTarget(newRenderTarget);}}const camera=cameras[i];camera.matrix.fromArray(view.transform.matrix);camera.projectionMatrix.fromArray(view.projectionMatrix);camera.viewport.set(viewport.x,viewport.y,viewport.width,viewport.height);if(i===0){cameraVR.matrix.copy(camera.matrix);}if(cameraVRNeedsUpdate===true){cameraVR.cameras.push(camera);}}}//
const inputSources=session.inputSources;for(let i=0;i<controllers.length;i++){const controller=controllers[i];const inputSource=inputSources[i];controller.update(inputSource,frame,referenceSpace);}if(onAnimationFrameCallback)onAnimationFrameCallback(time,frame);xrFrame=null;}const animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;};this.dispose=function(){};}}function WebGLMaterials(properties){function refreshFogUniforms(uniforms,fog){uniforms.fogColor.value.copy(fog.color);if(fog.isFog){uniforms.fogNear.value=fog.near;uniforms.fogFar.value=fog.far;}else if(fog.isFogExp2){uniforms.fogDensity.value=fog.density;}}function refreshMaterialUniforms(uniforms,material,pixelRatio,height,transmissionRenderTarget){if(material.isMeshBasicMaterial){refreshUniformsCommon(uniforms,material);}else if(material.isMeshLambertMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsLambert(uniforms,material);}else if(material.isMeshToonMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsToon(uniforms,material);}else if(material.isMeshPhongMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsPhong(uniforms,material);}else if(material.isMeshStandardMaterial){refreshUniformsCommon(uniforms,material);if(material.isMeshPhysicalMaterial){refreshUniformsPhysical(uniforms,material,transmissionRenderTarget);}else{refreshUniformsStandard(uniforms,material);}}else if(material.isMeshMatcapMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsMatcap(uniforms,material);}else if(material.isMeshDepthMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsDepth(uniforms,material);}else if(material.isMeshDistanceMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsDistance(uniforms,material);}else if(material.isMeshNormalMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsNormal(uniforms,material);}else if(material.isLineBasicMaterial){refreshUniformsLine(uniforms,material);if(material.isLineDashedMaterial){refreshUniformsDash(uniforms,material);}}else if(material.isPointsMaterial){refreshUniformsPoints(uniforms,material,pixelRatio,height);}else if(material.isSpriteMaterial){refreshUniformsSprites(uniforms,material);}else if(material.isShadowMaterial){uniforms.color.value.copy(material.color);uniforms.opacity.value=material.opacity;}else if(material.isShaderMaterial){material.uniformsNeedUpdate=false;// #15581
}}function refreshUniformsCommon(uniforms,material){uniforms.opacity.value=material.opacity;if(material.color){uniforms.diffuse.value.copy(material.color);}if(material.emissive){uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);}if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.specularMap){uniforms.specularMap.value=material.specularMap;}if(material.alphaTest>0){uniforms.alphaTest.value=material.alphaTest;}const envMap=properties.get(material).envMap;if(envMap){uniforms.envMap.value=envMap;uniforms.flipEnvMap.value=envMap.isCubeTexture&&envMap.isRenderTargetTexture===false?-1:1;uniforms.reflectivity.value=material.reflectivity;uniforms.ior.value=material.ior;uniforms.refractionRatio.value=material.refractionRatio;}if(material.lightMap){uniforms.lightMap.value=material.lightMap;uniforms.lightMapIntensity.value=material.lightMapIntensity;}if(material.aoMap){uniforms.aoMap.value=material.aoMap;uniforms.aoMapIntensity.value=material.aoMapIntensity;}// uv repeat and offset setting priorities
// 1. color map
// 2. specular map
// 3. displacementMap map
// 4. normal map
// 5. bump map
// 6. roughnessMap map
// 7. metalnessMap map
// 8. alphaMap map
// 9. emissiveMap map
// 10. clearcoat map
// 11. clearcoat normal map
// 12. clearcoat roughnessMap map
// 13. specular intensity map
// 14. specular tint map
// 15. transmission map
// 16. thickness map
let uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.specularMap){uvScaleMap=material.specularMap;}else if(material.displacementMap){uvScaleMap=material.displacementMap;}else if(material.normalMap){uvScaleMap=material.normalMap;}else if(material.bumpMap){uvScaleMap=material.bumpMap;}else if(material.roughnessMap){uvScaleMap=material.roughnessMap;}else if(material.metalnessMap){uvScaleMap=material.metalnessMap;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}else if(material.emissiveMap){uvScaleMap=material.emissiveMap;}else if(material.clearcoatMap){uvScaleMap=material.clearcoatMap;}else if(material.clearcoatNormalMap){uvScaleMap=material.clearcoatNormalMap;}else if(material.clearcoatRoughnessMap){uvScaleMap=material.clearcoatRoughnessMap;}else if(material.specularIntensityMap){uvScaleMap=material.specularIntensityMap;}else if(material.specularColorMap){uvScaleMap=material.specularColorMap;}else if(material.transmissionMap){uvScaleMap=material.transmissionMap;}else if(material.thicknessMap){uvScaleMap=material.thicknessMap;}else if(material.sheenColorMap){uvScaleMap=material.sheenColorMap;}else if(material.sheenRoughnessMap){uvScaleMap=material.sheenRoughnessMap;}if(uvScaleMap!==undefined){// backwards compatibility
if(uvScaleMap.isWebGLRenderTarget){uvScaleMap=uvScaleMap.texture;}if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}// uv repeat and offset setting priorities for uv2
// 1. ao map
// 2. light map
let uv2ScaleMap;if(material.aoMap){uv2ScaleMap=material.aoMap;}else if(material.lightMap){uv2ScaleMap=material.lightMap;}if(uv2ScaleMap!==undefined){// backwards compatibility
if(uv2ScaleMap.isWebGLRenderTarget){uv2ScaleMap=uv2ScaleMap.texture;}if(uv2ScaleMap.matrixAutoUpdate===true){uv2ScaleMap.updateMatrix();}uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);}}function refreshUniformsLine(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;}function refreshUniformsDash(uniforms,material){uniforms.dashSize.value=material.dashSize;uniforms.totalSize.value=material.dashSize+material.gapSize;uniforms.scale.value=material.scale;}function refreshUniformsPoints(uniforms,material,pixelRatio,height){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.size.value=material.size*pixelRatio;uniforms.scale.value=height*0.5;if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.alphaTest>0){uniforms.alphaTest.value=material.alphaTest;}// uv repeat and offset setting priorities
// 1. color map
// 2. alpha map
let uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}if(uvScaleMap!==undefined){if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsSprites(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.rotation.value=material.rotation;if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.alphaTest>0){uniforms.alphaTest.value=material.alphaTest;}// uv repeat and offset setting priorities
// 1. color map
// 2. alpha map
let uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}if(uvScaleMap!==undefined){if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsLambert(uniforms,material){if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}}function refreshUniformsPhong(uniforms,material){uniforms.specular.value.copy(material.specular);uniforms.shininess.value=Math.max(material.shininess,1e-4);// to prevent pow( 0.0, 0.0 )
if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsToon(uniforms,material){if(material.gradientMap){uniforms.gradientMap.value=material.gradientMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsStandard(uniforms,material){uniforms.roughness.value=material.roughness;uniforms.metalness.value=material.metalness;if(material.roughnessMap){uniforms.roughnessMap.value=material.roughnessMap;}if(material.metalnessMap){uniforms.metalnessMap.value=material.metalnessMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}const envMap=properties.get(material).envMap;if(envMap){//uniforms.envMap.value = material.envMap; // part of uniforms common
uniforms.envMapIntensity.value=material.envMapIntensity;}}function refreshUniformsPhysical(uniforms,material,transmissionRenderTarget){refreshUniformsStandard(uniforms,material);uniforms.ior.value=material.ior;// also part of uniforms common
if(material.sheen>0){uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);uniforms.sheenRoughness.value=material.sheenRoughness;if(material.sheenColorMap){uniforms.sheenColorMap.value=material.sheenColorMap;}if(material.sheenRoughnessMap){uniforms.sheenRoughnessMap.value=material.sheenRoughnessMap;}}if(material.clearcoat>0){uniforms.clearcoat.value=material.clearcoat;uniforms.clearcoatRoughness.value=material.clearcoatRoughness;if(material.clearcoatMap){uniforms.clearcoatMap.value=material.clearcoatMap;}if(material.clearcoatRoughnessMap){uniforms.clearcoatRoughnessMap.value=material.clearcoatRoughnessMap;}if(material.clearcoatNormalMap){uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);uniforms.clearcoatNormalMap.value=material.clearcoatNormalMap;if(material.side===BackSide){uniforms.clearcoatNormalScale.value.negate();}}}if(material.transmission>0){uniforms.transmission.value=material.transmission;uniforms.transmissionSamplerMap.value=transmissionRenderTarget.texture;uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width,transmissionRenderTarget.height);if(material.transmissionMap){uniforms.transmissionMap.value=material.transmissionMap;}uniforms.thickness.value=material.thickness;if(material.thicknessMap){uniforms.thicknessMap.value=material.thicknessMap;}uniforms.attenuationDistance.value=material.attenuationDistance;uniforms.attenuationColor.value.copy(material.attenuationColor);}uniforms.specularIntensity.value=material.specularIntensity;uniforms.specularColor.value.copy(material.specularColor);if(material.specularIntensityMap){uniforms.specularIntensityMap.value=material.specularIntensityMap;}if(material.specularColorMap){uniforms.specularColorMap.value=material.specularColorMap;}}function refreshUniformsMatcap(uniforms,material){if(material.matcap){uniforms.matcap.value=material.matcap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDepth(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDistance(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}uniforms.referencePosition.value.copy(material.referencePosition);uniforms.nearDistance.value=material.nearDistance;uniforms.farDistance.value=material.farDistance;}function refreshUniformsNormal(uniforms,material){if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}return{refreshFogUniforms:refreshFogUniforms,refreshMaterialUniforms:refreshMaterialUniforms};}function createCanvasElement(){const canvas=createElementNS('canvas');canvas.style.display='block';return canvas;}function WebGLRenderer(parameters={}){const _canvas=parameters.canvas!==undefined?parameters.canvas:createCanvasElement(),_context=parameters.context!==undefined?parameters.context:null,_depth=parameters.depth!==undefined?parameters.depth:true,_stencil=parameters.stencil!==undefined?parameters.stencil:true,_antialias=parameters.antialias!==undefined?parameters.antialias:false,_premultipliedAlpha=parameters.premultipliedAlpha!==undefined?parameters.premultipliedAlpha:true,_preserveDrawingBuffer=parameters.preserveDrawingBuffer!==undefined?parameters.preserveDrawingBuffer:false,_powerPreference=parameters.powerPreference!==undefined?parameters.powerPreference:'default',_failIfMajorPerformanceCaveat=parameters.failIfMajorPerformanceCaveat!==undefined?parameters.failIfMajorPerformanceCaveat:false;let _alpha;if(parameters.context!==undefined){_alpha=_context.getContextAttributes().alpha;}else{_alpha=parameters.alpha!==undefined?parameters.alpha:false;}let currentRenderList=null;let currentRenderState=null;// render() can be called from within a callback triggered by another render.
// We track this so that the nested render call gets its list and state isolated from the parent render call.
const renderListStack=[];const renderStateStack=[];// public properties
this.domElement=_canvas;// Debug configuration container
this.debug={/**
		 * Enables error checking and reporting when shader programs are being compiled
		 * @type {boolean}
		 */checkShaderErrors:true};// clearing
this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;// scene graph
this.sortObjects=true;// user-defined clipping
this.clippingPlanes=[];this.localClippingEnabled=false;// physically based shading
this.outputEncoding=LinearEncoding;// physical lights
this.physicallyCorrectLights=false;// tone mapping
this.toneMapping=NoToneMapping;this.toneMappingExposure=1.0;// internal properties
const _this=this;let _isContextLost=false;// internal state cache
let _currentActiveCubeFace=0;let _currentActiveMipmapLevel=0;let _currentRenderTarget=null;let _currentMaterialId=-1;let _currentCamera=null;const _currentViewport=new Vector4();const _currentScissor=new Vector4();let _currentScissorTest=null;//
let _width=_canvas.width;let _height=_canvas.height;let _pixelRatio=1;let _opaqueSort=null;let _transparentSort=null;const _viewport=new Vector4(0,0,_width,_height);const _scissor=new Vector4(0,0,_width,_height);let _scissorTest=false;// frustum
const _frustum=new Frustum();// clipping
let _clippingEnabled=false;let _localClippingEnabled=false;// transmission
let _transmissionRenderTarget=null;// camera matrices cache
const _projScreenMatrix=new Matrix4();const _vector2=new Vector2();const _vector3=new Vector3();const _emptyScene={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function getTargetPixelRatio(){return _currentRenderTarget===null?_pixelRatio:1;}// initialize
let _gl=_context;function getContext(contextNames,contextAttributes){for(let i=0;i<contextNames.length;i++){const contextName=contextNames[i];const context=_canvas.getContext(contextName,contextAttributes);if(context!==null)return context;}return null;}try{const contextAttributes={alpha:true,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer,powerPreference:_powerPreference,failIfMajorPerformanceCaveat:_failIfMajorPerformanceCaveat};// OffscreenCanvas does not have setAttribute, see #22811
if('setAttribute'in _canvas)_canvas.setAttribute('data-engine',`three.js r${REVISION}`);// event listeners must be registered before WebGL context is created, see #12753
_canvas.addEventListener('webglcontextlost',onContextLost,false);_canvas.addEventListener('webglcontextrestored',onContextRestore,false);if(_gl===null){const contextNames=['webgl2','webgl','experimental-webgl'];if(_this.isWebGL1Renderer===true){contextNames.shift();}_gl=getContext(contextNames,contextAttributes);if(_gl===null){if(getContext(contextNames)){throw new Error('Error creating WebGL context with your selected attributes.');}else{throw new Error('Error creating WebGL context.');}}}// Some experimental-webgl implementations do not have getShaderPrecisionFormat
if(_gl.getShaderPrecisionFormat===undefined){_gl.getShaderPrecisionFormat=function(){return{'rangeMin':1,'rangeMax':1,'precision':1};};}}catch(error){console.error('THREE.WebGLRenderer: '+error.message);throw error;}let extensions,capabilities,state,info;let properties,textures,cubemaps,cubeuvmaps,attributes,geometries,objects;let programCache,materials,renderLists,renderStates,clipping,shadowMap;let background,morphtargets,bufferRenderer,indexedBufferRenderer;let utils,bindingStates;function initGLContext(){extensions=new WebGLExtensions(_gl);capabilities=new WebGLCapabilities(_gl,extensions,parameters);extensions.init(capabilities);utils=new WebGLUtils(_gl,extensions,capabilities);state=new WebGLState(_gl,extensions,capabilities);info=new WebGLInfo(_gl);properties=new WebGLProperties();textures=new WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info);cubemaps=new WebGLCubeMaps(_this);cubeuvmaps=new WebGLCubeUVMaps(_this);attributes=new WebGLAttributes(_gl,capabilities);bindingStates=new WebGLBindingStates(_gl,extensions,attributes,capabilities);geometries=new WebGLGeometries(_gl,attributes,info,bindingStates);objects=new WebGLObjects(_gl,geometries,attributes,info);morphtargets=new WebGLMorphtargets(_gl,capabilities,textures);clipping=new WebGLClipping(properties);programCache=new WebGLPrograms(_this,cubemaps,cubeuvmaps,extensions,capabilities,bindingStates,clipping);materials=new WebGLMaterials(properties);renderLists=new WebGLRenderLists();renderStates=new WebGLRenderStates(extensions,capabilities);background=new WebGLBackground(_this,cubemaps,state,objects,_alpha,_premultipliedAlpha);shadowMap=new WebGLShadowMap(_this,objects,capabilities);bufferRenderer=new WebGLBufferRenderer(_gl,extensions,info,capabilities);indexedBufferRenderer=new WebGLIndexedBufferRenderer(_gl,extensions,info,capabilities);info.programs=programCache.programs;_this.capabilities=capabilities;_this.extensions=extensions;_this.properties=properties;_this.renderLists=renderLists;_this.shadowMap=shadowMap;_this.state=state;_this.info=info;}initGLContext();// xr
const xr=new WebXRManager(_this,_gl);this.xr=xr;// API
this.getContext=function(){return _gl;};this.getContextAttributes=function(){return _gl.getContextAttributes();};this.forceContextLoss=function(){const extension=extensions.get('WEBGL_lose_context');if(extension)extension.loseContext();};this.forceContextRestore=function(){const extension=extensions.get('WEBGL_lose_context');if(extension)extension.restoreContext();};this.getPixelRatio=function(){return _pixelRatio;};this.setPixelRatio=function(value){if(value===undefined)return;_pixelRatio=value;this.setSize(_width,_height,false);};this.getSize=function(target){return target.set(_width,_height);};this.setSize=function(width,height,updateStyle){if(xr.isPresenting){console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');return;}_width=width;_height=height;_canvas.width=Math.floor(width*_pixelRatio);_canvas.height=Math.floor(height*_pixelRatio);if(updateStyle!==false){_canvas.style.width=width+'px';_canvas.style.height=height+'px';}this.setViewport(0,0,width,height);};this.getDrawingBufferSize=function(target){return target.set(_width*_pixelRatio,_height*_pixelRatio).floor();};this.setDrawingBufferSize=function(width,height,pixelRatio){_width=width;_height=height;_pixelRatio=pixelRatio;_canvas.width=Math.floor(width*pixelRatio);_canvas.height=Math.floor(height*pixelRatio);this.setViewport(0,0,width,height);};this.getCurrentViewport=function(target){return target.copy(_currentViewport);};this.getViewport=function(target){return target.copy(_viewport);};this.setViewport=function(x,y,width,height){if(x.isVector4){_viewport.set(x.x,x.y,x.z,x.w);}else{_viewport.set(x,y,width,height);}state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());};this.getScissor=function(target){return target.copy(_scissor);};this.setScissor=function(x,y,width,height){if(x.isVector4){_scissor.set(x.x,x.y,x.z,x.w);}else{_scissor.set(x,y,width,height);}state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());};this.getScissorTest=function(){return _scissorTest;};this.setScissorTest=function(boolean){state.setScissorTest(_scissorTest=boolean);};this.setOpaqueSort=function(method){_opaqueSort=method;};this.setTransparentSort=function(method){_transparentSort=method;};// Clearing
this.getClearColor=function(target){return target.copy(background.getClearColor());};this.setClearColor=function(){background.setClearColor.apply(background,arguments);};this.getClearAlpha=function(){return background.getClearAlpha();};this.setClearAlpha=function(){background.setClearAlpha.apply(background,arguments);};this.clear=function(color=true,depth=true,stencil=true){let bits=0;if(color)bits|=16384;if(depth)bits|=256;if(stencil)bits|=1024;_gl.clear(bits);};this.clearColor=function(){this.clear(true,false,false);};this.clearDepth=function(){this.clear(false,true,false);};this.clearStencil=function(){this.clear(false,false,true);};//
this.dispose=function(){_canvas.removeEventListener('webglcontextlost',onContextLost,false);_canvas.removeEventListener('webglcontextrestored',onContextRestore,false);renderLists.dispose();renderStates.dispose();properties.dispose();cubemaps.dispose();cubeuvmaps.dispose();objects.dispose();bindingStates.dispose();programCache.dispose();xr.dispose();xr.removeEventListener('sessionstart',onXRSessionStart);xr.removeEventListener('sessionend',onXRSessionEnd);if(_transmissionRenderTarget){_transmissionRenderTarget.dispose();_transmissionRenderTarget=null;}animation.stop();};// Events
function onContextLost(event){event.preventDefault();console.log('THREE.WebGLRenderer: Context Lost.');_isContextLost=true;}function/* event */onContextRestore(){console.log('THREE.WebGLRenderer: Context Restored.');_isContextLost=false;const infoAutoReset=info.autoReset;const shadowMapEnabled=shadowMap.enabled;const shadowMapAutoUpdate=shadowMap.autoUpdate;const shadowMapNeedsUpdate=shadowMap.needsUpdate;const shadowMapType=shadowMap.type;initGLContext();info.autoReset=infoAutoReset;shadowMap.enabled=shadowMapEnabled;shadowMap.autoUpdate=shadowMapAutoUpdate;shadowMap.needsUpdate=shadowMapNeedsUpdate;shadowMap.type=shadowMapType;}function onMaterialDispose(event){const material=event.target;material.removeEventListener('dispose',onMaterialDispose);deallocateMaterial(material);}// Buffer deallocation
function deallocateMaterial(material){releaseMaterialProgramReferences(material);properties.remove(material);}function releaseMaterialProgramReferences(material){const programs=properties.get(material).programs;if(programs!==undefined){programs.forEach(function(program){programCache.releaseProgram(program);});if(material.isShaderMaterial){programCache.releaseShaderCache(material);}}}// Buffer rendering
this.renderBufferDirect=function(camera,scene,geometry,material,object,group){if(scene===null)scene=_emptyScene;// renderBufferDirect second parameter used to be fog (could be null)
const frontFaceCW=object.isMesh&&object.matrixWorld.determinant()<0;const program=setProgram(camera,scene,geometry,material,object);state.setMaterial(material,frontFaceCW);//
let index=geometry.index;const position=geometry.attributes.position;//
if(index===null){if(position===undefined||position.count===0)return;}else if(index.count===0){return;}//
let rangeFactor=1;if(material.wireframe===true){index=geometries.getWireframeAttribute(geometry);rangeFactor=2;}bindingStates.setup(object,material,program,geometry,index);let attribute;let renderer=bufferRenderer;if(index!==null){attribute=attributes.get(index);renderer=indexedBufferRenderer;renderer.setIndex(attribute);}//
const dataCount=index!==null?index.count:position.count;const rangeStart=geometry.drawRange.start*rangeFactor;const rangeCount=geometry.drawRange.count*rangeFactor;const groupStart=group!==null?group.start*rangeFactor:0;const groupCount=group!==null?group.count*rangeFactor:Infinity;const drawStart=Math.max(rangeStart,groupStart);const drawEnd=Math.min(dataCount,rangeStart+rangeCount,groupStart+groupCount)-1;const drawCount=Math.max(0,drawEnd-drawStart+1);if(drawCount===0)return;//
if(object.isMesh){if(material.wireframe===true){state.setLineWidth(material.wireframeLinewidth*getTargetPixelRatio());renderer.setMode(1);}else{renderer.setMode(4);}}else if(object.isLine){let lineWidth=material.linewidth;if(lineWidth===undefined)lineWidth=1;// Not using Line*Material
state.setLineWidth(lineWidth*getTargetPixelRatio());if(object.isLineSegments){renderer.setMode(1);}else if(object.isLineLoop){renderer.setMode(2);}else{renderer.setMode(3);}}else if(object.isPoints){renderer.setMode(0);}else if(object.isSprite){renderer.setMode(4);}if(object.isInstancedMesh){renderer.renderInstances(drawStart,drawCount,object.count);}else if(geometry.isInstancedBufferGeometry){const instanceCount=Math.min(geometry.instanceCount,geometry._maxInstanceCount);renderer.renderInstances(drawStart,drawCount,instanceCount);}else{renderer.render(drawStart,drawCount);}};// Compile
this.compile=function(scene,camera){currentRenderState=renderStates.get(scene);currentRenderState.init();renderStateStack.push(currentRenderState);scene.traverseVisible(function(object){if(object.isLight&&object.layers.test(camera.layers)){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}});currentRenderState.setupLights(_this.physicallyCorrectLights);scene.traverse(function(object){const material=object.material;if(material){if(Array.isArray(material)){for(let i=0;i<material.length;i++){const material2=material[i];getProgram(material2,scene,object);}}else{getProgram(material,scene,object);}}});renderStateStack.pop();currentRenderState=null;};// Animation Loop
let onAnimationFrameCallback=null;function onAnimationFrame(time){if(onAnimationFrameCallback)onAnimationFrameCallback(time);}function onXRSessionStart(){animation.stop();}function onXRSessionEnd(){animation.start();}const animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);if(typeof window!=='undefined')animation.setContext(window);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;xr.setAnimationLoop(callback);callback===null?animation.stop():animation.start();};xr.addEventListener('sessionstart',onXRSessionStart);xr.addEventListener('sessionend',onXRSessionEnd);// Rendering
this.render=function(scene,camera){if(camera!==undefined&&camera.isCamera!==true){console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');return;}if(_isContextLost===true)return;// update scene graph
if(scene.autoUpdate===true)scene.updateMatrixWorld();// update camera matrices and frustum
if(camera.parent===null)camera.updateMatrixWorld();if(xr.enabled===true&&xr.isPresenting===true){if(xr.cameraAutoUpdate===true)xr.updateCamera(camera);camera=xr.getCamera();// use XR camera for rendering
}//
if(scene.isScene===true)scene.onBeforeRender(_this,scene,camera,_currentRenderTarget);currentRenderState=renderStates.get(scene,renderStateStack.length);currentRenderState.init();renderStateStack.push(currentRenderState);_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum.setFromProjectionMatrix(_projScreenMatrix);_localClippingEnabled=this.localClippingEnabled;_clippingEnabled=clipping.init(this.clippingPlanes,_localClippingEnabled,camera);currentRenderList=renderLists.get(scene,renderListStack.length);currentRenderList.init();renderListStack.push(currentRenderList);projectObject(scene,camera,0,_this.sortObjects);currentRenderList.finish();if(_this.sortObjects===true){currentRenderList.sort(_opaqueSort,_transparentSort);}//
if(_clippingEnabled===true)clipping.beginShadows();const shadowsArray=currentRenderState.state.shadowsArray;shadowMap.render(shadowsArray,scene,camera);if(_clippingEnabled===true)clipping.endShadows();//
if(this.info.autoReset===true)this.info.reset();//
background.render(currentRenderList,scene);// render scene
currentRenderState.setupLights(_this.physicallyCorrectLights);if(camera.isArrayCamera){const cameras=camera.cameras;for(let i=0,l=cameras.length;i<l;i++){const camera2=cameras[i];renderScene(currentRenderList,scene,camera2,camera2.viewport);}}else{renderScene(currentRenderList,scene,camera);}//
if(_currentRenderTarget!==null){// resolve multisample renderbuffers to a single-sample texture if necessary
textures.updateMultisampleRenderTarget(_currentRenderTarget);// Generate mipmap if we're using any kind of mipmap filtering
textures.updateRenderTargetMipmap(_currentRenderTarget);}//
if(scene.isScene===true)scene.onAfterRender(_this,scene,camera);// _gl.finish();
bindingStates.resetDefaultState();_currentMaterialId=-1;_currentCamera=null;renderStateStack.pop();if(renderStateStack.length>0){currentRenderState=renderStateStack[renderStateStack.length-1];}else{currentRenderState=null;}renderListStack.pop();if(renderListStack.length>0){currentRenderList=renderListStack[renderListStack.length-1];}else{currentRenderList=null;}};function projectObject(object,camera,groupOrder,sortObjects){if(object.visible===false)return;const visible=object.layers.test(camera.layers);if(visible){if(object.isGroup){groupOrder=object.renderOrder;}else if(object.isLOD){if(object.autoUpdate===true)object.update(camera);}else if(object.isLight){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}else if(object.isSprite){if(!object.frustumCulled||_frustum.intersectsSprite(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}const geometry=objects.update(object);const material=object.material;if(material.visible){currentRenderList.push(object,geometry,material,groupOrder,_vector3.z,null);}}}else if(object.isMesh||object.isLine||object.isPoints){if(object.isSkinnedMesh){// update skeleton only once in a frame
if(object.skeleton.frame!==info.render.frame){object.skeleton.update();object.skeleton.frame=info.render.frame;}}if(!object.frustumCulled||_frustum.intersectsObject(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}const geometry=objects.update(object);const material=object.material;if(Array.isArray(material)){const groups=geometry.groups;for(let i=0,l=groups.length;i<l;i++){const group=groups[i];const groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){currentRenderList.push(object,geometry,groupMaterial,groupOrder,_vector3.z,group);}}}else if(material.visible){currentRenderList.push(object,geometry,material,groupOrder,_vector3.z,null);}}}}const children=object.children;for(let i=0,l=children.length;i<l;i++){projectObject(children[i],camera,groupOrder,sortObjects);}}function renderScene(currentRenderList,scene,camera,viewport){const opaqueObjects=currentRenderList.opaque;const transmissiveObjects=currentRenderList.transmissive;const transparentObjects=currentRenderList.transparent;currentRenderState.setupLightsView(camera);if(transmissiveObjects.length>0)renderTransmissionPass(opaqueObjects,scene,camera);if(viewport)state.viewport(_currentViewport.copy(viewport));if(opaqueObjects.length>0)renderObjects(opaqueObjects,scene,camera);if(transmissiveObjects.length>0)renderObjects(transmissiveObjects,scene,camera);if(transparentObjects.length>0)renderObjects(transparentObjects,scene,camera);// Ensure depth buffer writing is enabled so it can be cleared on next render
state.buffers.depth.setTest(true);state.buffers.depth.setMask(true);state.buffers.color.setMask(true);state.setPolygonOffset(false);}function renderTransmissionPass(opaqueObjects,scene,camera){const isWebGL2=capabilities.isWebGL2;if(_transmissionRenderTarget===null){_transmissionRenderTarget=new WebGLRenderTarget(1,1,{generateMipmaps:true,type:utils.convert(HalfFloatType)!==null?HalfFloatType:UnsignedByteType,minFilter:LinearMipmapLinearFilter,samples:isWebGL2&&_antialias===true?4:0});}_this.getDrawingBufferSize(_vector2);if(isWebGL2){_transmissionRenderTarget.setSize(_vector2.x,_vector2.y);}else{_transmissionRenderTarget.setSize(floorPowerOfTwo(_vector2.x),floorPowerOfTwo(_vector2.y));}//
const currentRenderTarget=_this.getRenderTarget();_this.setRenderTarget(_transmissionRenderTarget);_this.clear();// Turn off the features which can affect the frag color for opaque objects pass.
// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
const currentToneMapping=_this.toneMapping;_this.toneMapping=NoToneMapping;renderObjects(opaqueObjects,scene,camera);_this.toneMapping=currentToneMapping;textures.updateMultisampleRenderTarget(_transmissionRenderTarget);textures.updateRenderTargetMipmap(_transmissionRenderTarget);_this.setRenderTarget(currentRenderTarget);}function renderObjects(renderList,scene,camera){const overrideMaterial=scene.isScene===true?scene.overrideMaterial:null;for(let i=0,l=renderList.length;i<l;i++){const renderItem=renderList[i];const object=renderItem.object;const geometry=renderItem.geometry;const material=overrideMaterial===null?renderItem.material:overrideMaterial;const group=renderItem.group;if(object.layers.test(camera.layers)){renderObject(object,scene,camera,geometry,material,group);}}}function renderObject(object,scene,camera,geometry,material,group){object.onBeforeRender(_this,scene,camera,geometry,material,group);object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object.matrixWorld);object.normalMatrix.getNormalMatrix(object.modelViewMatrix);material.onBeforeRender(_this,scene,camera,geometry,object,group);if(material.transparent===true&&material.side===DoubleSide){material.side=BackSide;material.needsUpdate=true;_this.renderBufferDirect(camera,scene,geometry,material,object,group);material.side=FrontSide;material.needsUpdate=true;_this.renderBufferDirect(camera,scene,geometry,material,object,group);material.side=DoubleSide;}else{_this.renderBufferDirect(camera,scene,geometry,material,object,group);}object.onAfterRender(_this,scene,camera,geometry,material,group);}function getProgram(material,scene,object){if(scene.isScene!==true)scene=_emptyScene;// scene could be a Mesh, Line, Points, ...
const materialProperties=properties.get(material);const lights=currentRenderState.state.lights;const shadowsArray=currentRenderState.state.shadowsArray;const lightsStateVersion=lights.state.version;const parameters=programCache.getParameters(material,lights.state,shadowsArray,scene,object);const programCacheKey=programCache.getProgramCacheKey(parameters);let programs=materialProperties.programs;// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
materialProperties.environment=material.isMeshStandardMaterial?scene.environment:null;materialProperties.fog=scene.fog;materialProperties.envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||materialProperties.environment);if(programs===undefined){// new material
material.addEventListener('dispose',onMaterialDispose);programs=new Map();materialProperties.programs=programs;}let program=programs.get(programCacheKey);if(program!==undefined){// early out if program and light state is identical
if(materialProperties.currentProgram===program&&materialProperties.lightsStateVersion===lightsStateVersion){updateCommonMaterialProperties(material,parameters);return program;}}else{parameters.uniforms=programCache.getUniforms(material);material.onBuild(object,parameters,_this);material.onBeforeCompile(parameters,_this);program=programCache.acquireProgram(parameters,programCacheKey);programs.set(programCacheKey,program);materialProperties.uniforms=parameters.uniforms;}const uniforms=materialProperties.uniforms;if(!material.isShaderMaterial&&!material.isRawShaderMaterial||material.clipping===true){uniforms.clippingPlanes=clipping.uniform;}updateCommonMaterialProperties(material,parameters);// store the light setup it was created for
materialProperties.needsLights=materialNeedsLights(material);materialProperties.lightsStateVersion=lightsStateVersion;if(materialProperties.needsLights){// wire up the material to this renderer's lighting state
uniforms.ambientLightColor.value=lights.state.ambient;uniforms.lightProbe.value=lights.state.probe;uniforms.directionalLights.value=lights.state.directional;uniforms.directionalLightShadows.value=lights.state.directionalShadow;uniforms.spotLights.value=lights.state.spot;uniforms.spotLightShadows.value=lights.state.spotShadow;uniforms.rectAreaLights.value=lights.state.rectArea;uniforms.ltc_1.value=lights.state.rectAreaLTC1;uniforms.ltc_2.value=lights.state.rectAreaLTC2;uniforms.pointLights.value=lights.state.point;uniforms.pointLightShadows.value=lights.state.pointShadow;uniforms.hemisphereLights.value=lights.state.hemi;uniforms.directionalShadowMap.value=lights.state.directionalShadowMap;uniforms.directionalShadowMatrix.value=lights.state.directionalShadowMatrix;uniforms.spotShadowMap.value=lights.state.spotShadowMap;uniforms.spotShadowMatrix.value=lights.state.spotShadowMatrix;uniforms.pointShadowMap.value=lights.state.pointShadowMap;uniforms.pointShadowMatrix.value=lights.state.pointShadowMatrix;// TODO (abelnation): add area lights shadow info to uniforms
}const progUniforms=program.getUniforms();const uniformsList=WebGLUniforms.seqWithValue(progUniforms.seq,uniforms);materialProperties.currentProgram=program;materialProperties.uniformsList=uniformsList;return program;}function updateCommonMaterialProperties(material,parameters){const materialProperties=properties.get(material);materialProperties.outputEncoding=parameters.outputEncoding;materialProperties.instancing=parameters.instancing;materialProperties.skinning=parameters.skinning;materialProperties.morphTargets=parameters.morphTargets;materialProperties.morphNormals=parameters.morphNormals;materialProperties.morphColors=parameters.morphColors;materialProperties.morphTargetsCount=parameters.morphTargetsCount;materialProperties.numClippingPlanes=parameters.numClippingPlanes;materialProperties.numIntersection=parameters.numClipIntersection;materialProperties.vertexAlphas=parameters.vertexAlphas;materialProperties.vertexTangents=parameters.vertexTangents;materialProperties.toneMapping=parameters.toneMapping;}function setProgram(camera,scene,geometry,material,object){if(scene.isScene!==true)scene=_emptyScene;// scene could be a Mesh, Line, Points, ...
textures.resetTextureUnits();const fog=scene.fog;const environment=material.isMeshStandardMaterial?scene.environment:null;const encoding=_currentRenderTarget===null?_this.outputEncoding:_currentRenderTarget.isXRRenderTarget===true?_currentRenderTarget.texture.encoding:LinearEncoding;const envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||environment);const vertexAlphas=material.vertexColors===true&&!!geometry.attributes.color&&geometry.attributes.color.itemSize===4;const vertexTangents=!!material.normalMap&&!!geometry.attributes.tangent;const morphTargets=!!geometry.morphAttributes.position;const morphNormals=!!geometry.morphAttributes.normal;const morphColors=!!geometry.morphAttributes.color;const toneMapping=material.toneMapped?_this.toneMapping:NoToneMapping;const morphAttribute=geometry.morphAttributes.position||geometry.morphAttributes.normal||geometry.morphAttributes.color;const morphTargetsCount=morphAttribute!==undefined?morphAttribute.length:0;const materialProperties=properties.get(material);const lights=currentRenderState.state.lights;if(_clippingEnabled===true){if(_localClippingEnabled===true||camera!==_currentCamera){const useCache=camera===_currentCamera&&material.id===_currentMaterialId;// we might want to call this function with some ClippingGroup
// object instead of the material, once it becomes feasible
// (#8465, #8379)
clipping.setState(material,camera,useCache);}}//
let needsProgramChange=false;if(material.version===materialProperties.__version){if(materialProperties.needsLights&&materialProperties.lightsStateVersion!==lights.state.version){needsProgramChange=true;}else if(materialProperties.outputEncoding!==encoding){needsProgramChange=true;}else if(object.isInstancedMesh&&materialProperties.instancing===false){needsProgramChange=true;}else if(!object.isInstancedMesh&&materialProperties.instancing===true){needsProgramChange=true;}else if(object.isSkinnedMesh&&materialProperties.skinning===false){needsProgramChange=true;}else if(!object.isSkinnedMesh&&materialProperties.skinning===true){needsProgramChange=true;}else if(materialProperties.envMap!==envMap){needsProgramChange=true;}else if(material.fog&&materialProperties.fog!==fog){needsProgramChange=true;}else if(materialProperties.numClippingPlanes!==undefined&&(materialProperties.numClippingPlanes!==clipping.numPlanes||materialProperties.numIntersection!==clipping.numIntersection)){needsProgramChange=true;}else if(materialProperties.vertexAlphas!==vertexAlphas){needsProgramChange=true;}else if(materialProperties.vertexTangents!==vertexTangents){needsProgramChange=true;}else if(materialProperties.morphTargets!==morphTargets){needsProgramChange=true;}else if(materialProperties.morphNormals!==morphNormals){needsProgramChange=true;}else if(materialProperties.morphColors!==morphColors){needsProgramChange=true;}else if(materialProperties.toneMapping!==toneMapping){needsProgramChange=true;}else if(capabilities.isWebGL2===true&&materialProperties.morphTargetsCount!==morphTargetsCount){needsProgramChange=true;}}else{needsProgramChange=true;materialProperties.__version=material.version;}//
let program=materialProperties.currentProgram;if(needsProgramChange===true){program=getProgram(material,scene,object);}let refreshProgram=false;let refreshMaterial=false;let refreshLights=false;const p_uniforms=program.getUniforms(),m_uniforms=materialProperties.uniforms;if(state.useProgram(program.program)){refreshProgram=true;refreshMaterial=true;refreshLights=true;}if(material.id!==_currentMaterialId){_currentMaterialId=material.id;refreshMaterial=true;}if(refreshProgram||_currentCamera!==camera){p_uniforms.setValue(_gl,'projectionMatrix',camera.projectionMatrix);if(capabilities.logarithmicDepthBuffer){p_uniforms.setValue(_gl,'logDepthBufFC',2.0/(Math.log(camera.far+1.0)/Math.LN2));}if(_currentCamera!==camera){_currentCamera=camera;// lighting uniforms depend on the camera so enforce an update
// now, in case this material supports lights - or later, when
// the next material that does gets activated:
refreshMaterial=true;// set to true on material change
refreshLights=true;// remains set until update done
}// load material specific uniforms
// (shader material also gets them for the sake of genericity)
if(material.isShaderMaterial||material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshStandardMaterial||material.envMap){const uCamPos=p_uniforms.map.cameraPosition;if(uCamPos!==undefined){uCamPos.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld));}}if(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial){p_uniforms.setValue(_gl,'isOrthographic',camera.isOrthographicCamera===true);}if(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial||material.isShadowMaterial||object.isSkinnedMesh){p_uniforms.setValue(_gl,'viewMatrix',camera.matrixWorldInverse);}}// skinning and morph target uniforms must be set even if material didn't change
// auto-setting of texture unit for bone and morph texture must go before other textures
// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
if(object.isSkinnedMesh){p_uniforms.setOptional(_gl,object,'bindMatrix');p_uniforms.setOptional(_gl,object,'bindMatrixInverse');const skeleton=object.skeleton;if(skeleton){if(capabilities.floatVertexTextures){if(skeleton.boneTexture===null)skeleton.computeBoneTexture();p_uniforms.setValue(_gl,'boneTexture',skeleton.boneTexture,textures);p_uniforms.setValue(_gl,'boneTextureSize',skeleton.boneTextureSize);}else{p_uniforms.setOptional(_gl,skeleton,'boneMatrices');}}}const morphAttributes=geometry.morphAttributes;if(morphAttributes.position!==undefined||morphAttributes.normal!==undefined||morphAttributes.color!==undefined&&capabilities.isWebGL2===true){morphtargets.update(object,geometry,material,program);}if(refreshMaterial||materialProperties.receiveShadow!==object.receiveShadow){materialProperties.receiveShadow=object.receiveShadow;p_uniforms.setValue(_gl,'receiveShadow',object.receiveShadow);}if(refreshMaterial){p_uniforms.setValue(_gl,'toneMappingExposure',_this.toneMappingExposure);if(materialProperties.needsLights){// the current material requires lighting info
// note: all lighting uniforms are always set correctly
// they simply reference the renderer's state for their
// values
//
// use the current material's .needsUpdate flags to set
// the GL state when required
markUniformsLightsNeedsUpdate(m_uniforms,refreshLights);}// refresh uniforms common to several materials
if(fog&&material.fog){materials.refreshFogUniforms(m_uniforms,fog);}materials.refreshMaterialUniforms(m_uniforms,material,_pixelRatio,_height,_transmissionRenderTarget);WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures);}if(material.isShaderMaterial&&material.uniformsNeedUpdate===true){WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures);material.uniformsNeedUpdate=false;}if(material.isSpriteMaterial){p_uniforms.setValue(_gl,'center',object.center);}// common matrices
p_uniforms.setValue(_gl,'modelViewMatrix',object.modelViewMatrix);p_uniforms.setValue(_gl,'normalMatrix',object.normalMatrix);p_uniforms.setValue(_gl,'modelMatrix',object.matrixWorld);return program;}// If uniforms are marked as clean, they don't need to be loaded to the GPU.
function markUniformsLightsNeedsUpdate(uniforms,value){uniforms.ambientLightColor.needsUpdate=value;uniforms.lightProbe.needsUpdate=value;uniforms.directionalLights.needsUpdate=value;uniforms.directionalLightShadows.needsUpdate=value;uniforms.pointLights.needsUpdate=value;uniforms.pointLightShadows.needsUpdate=value;uniforms.spotLights.needsUpdate=value;uniforms.spotLightShadows.needsUpdate=value;uniforms.rectAreaLights.needsUpdate=value;uniforms.hemisphereLights.needsUpdate=value;uniforms.directionalShadowMap.needsUpdate=value;uniforms.directionalShadowMatrix.needsUpdate=value;uniforms.spotShadowMap.needsUpdate=value;uniforms.spotShadowMatrix.needsUpdate=value;uniforms.pointShadowMap.needsUpdate=value;uniforms.pointShadowMatrix.needsUpdate=value;}function materialNeedsLights(material){return material.isMeshLambertMaterial||material.isMeshToonMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.isShadowMaterial||material.isShaderMaterial&&material.lights===true;}this.getActiveCubeFace=function(){return _currentActiveCubeFace;};this.getActiveMipmapLevel=function(){return _currentActiveMipmapLevel;};this.getRenderTarget=function(){return _currentRenderTarget;};this.setRenderTargetTextures=function(renderTarget,colorTexture,depthTexture){properties.get(renderTarget.texture).__webglTexture=colorTexture;properties.get(renderTarget.depthTexture).__webglTexture=depthTexture;const renderTargetProperties=properties.get(renderTarget);renderTargetProperties.__hasExternalTextures=true;if(renderTargetProperties.__hasExternalTextures){renderTargetProperties.__autoAllocateDepthBuffer=depthTexture===undefined;if(!renderTargetProperties.__autoAllocateDepthBuffer){// The multisample_render_to_texture extension doesn't work properly if there
// are midframe flushes and an external depth buffer. Disable use of the extension.
if(extensions.has('WEBGL_multisampled_render_to_texture')===true){console.warn('THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided');renderTarget.useRenderToTexture=false;renderTarget.useRenderbuffer=true;}}}};this.setRenderTargetFramebuffer=function(renderTarget,defaultFramebuffer){const renderTargetProperties=properties.get(renderTarget);renderTargetProperties.__webglFramebuffer=defaultFramebuffer;renderTargetProperties.__useDefaultFramebuffer=defaultFramebuffer===undefined;};this.setRenderTarget=function(renderTarget,activeCubeFace=0,activeMipmapLevel=0){_currentRenderTarget=renderTarget;_currentActiveCubeFace=activeCubeFace;_currentActiveMipmapLevel=activeMipmapLevel;let useDefaultFramebuffer=true;if(renderTarget){const renderTargetProperties=properties.get(renderTarget);if(renderTargetProperties.__useDefaultFramebuffer!==undefined){// We need to make sure to rebind the framebuffer.
state.bindFramebuffer(36160,null);useDefaultFramebuffer=false;}else if(renderTargetProperties.__webglFramebuffer===undefined){textures.setupRenderTarget(renderTarget);}else if(renderTargetProperties.__hasExternalTextures){// Color and depth texture must be rebound in order for the swapchain to update.
textures.rebindTextures(renderTarget,properties.get(renderTarget.texture).__webglTexture,properties.get(renderTarget.depthTexture).__webglTexture);}}let framebuffer=null;let isCube=false;let isRenderTarget3D=false;if(renderTarget){const texture=renderTarget.texture;if(texture.isData3DTexture||texture.isDataArrayTexture){isRenderTarget3D=true;}const __webglFramebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget){framebuffer=__webglFramebuffer[activeCubeFace];isCube=true;}else if(capabilities.isWebGL2&&renderTarget.samples>0&&textures.useMultisampledRTT(renderTarget)===false){framebuffer=properties.get(renderTarget).__webglMultisampledFramebuffer;}else{framebuffer=__webglFramebuffer;}_currentViewport.copy(renderTarget.viewport);_currentScissor.copy(renderTarget.scissor);_currentScissorTest=renderTarget.scissorTest;}else{_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();_currentScissorTest=_scissorTest;}const framebufferBound=state.bindFramebuffer(36160,framebuffer);if(framebufferBound&&capabilities.drawBuffers&&useDefaultFramebuffer){state.drawBuffers(renderTarget,framebuffer);}state.viewport(_currentViewport);state.scissor(_currentScissor);state.setScissorTest(_currentScissorTest);if(isCube){const textureProperties=properties.get(renderTarget.texture);_gl.framebufferTexture2D(36160,36064,34069+activeCubeFace,textureProperties.__webglTexture,activeMipmapLevel);}else if(isRenderTarget3D){const textureProperties=properties.get(renderTarget.texture);const layer=activeCubeFace||0;_gl.framebufferTextureLayer(36160,36064,textureProperties.__webglTexture,activeMipmapLevel||0,layer);}_currentMaterialId=-1;// reset current material to ensure correct uniform bindings
};this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer,activeCubeFaceIndex){if(!(renderTarget&&renderTarget.isWebGLRenderTarget)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');return;}let framebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget&&activeCubeFaceIndex!==undefined){framebuffer=framebuffer[activeCubeFaceIndex];}if(framebuffer){state.bindFramebuffer(36160,framebuffer);try{const texture=renderTarget.texture;const textureFormat=texture.format;const textureType=texture.type;if(textureFormat!==RGBAFormat&&utils.convert(textureFormat)!==_gl.getParameter(35739)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');return;}const halfFloatSupportedByExt=textureType===HalfFloatType&&(extensions.has('EXT_color_buffer_half_float')||capabilities.isWebGL2&&extensions.has('EXT_color_buffer_float'));if(textureType!==UnsignedByteType&&utils.convert(textureType)!==_gl.getParameter(35738)&&// Edge and Chrome Mac < 52 (#9513)
!(textureType===FloatType&&(capabilities.isWebGL2||extensions.has('OES_texture_float')||extensions.has('WEBGL_color_buffer_float')))&&// Chrome Mac >= 52 and Firefox
!halfFloatSupportedByExt){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');return;}if(_gl.checkFramebufferStatus(36160)===36053){// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
if(x>=0&&x<=renderTarget.width-width&&y>=0&&y<=renderTarget.height-height){_gl.readPixels(x,y,width,height,utils.convert(textureFormat),utils.convert(textureType),buffer);}}else{console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');}}finally{// restore framebuffer of current render target if necessary
const framebuffer=_currentRenderTarget!==null?properties.get(_currentRenderTarget).__webglFramebuffer:null;state.bindFramebuffer(36160,framebuffer);}}};this.copyFramebufferToTexture=function(position,texture,level=0){if(texture.isFramebufferTexture!==true){console.error('THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.');return;}const levelScale=Math.pow(2,-level);const width=Math.floor(texture.image.width*levelScale);const height=Math.floor(texture.image.height*levelScale);textures.setTexture2D(texture,0);_gl.copyTexSubImage2D(3553,level,0,0,position.x,position.y,width,height);state.unbindTexture();};this.copyTextureToTexture=function(position,srcTexture,dstTexture,level=0){const width=srcTexture.image.width;const height=srcTexture.image.height;const glFormat=utils.convert(dstTexture.format);const glType=utils.convert(dstTexture.type);textures.setTexture2D(dstTexture,0);// As another texture upload may have changed pixelStorei
// parameters, make sure they are correct for the dstTexture
_gl.pixelStorei(37440,dstTexture.flipY);_gl.pixelStorei(37441,dstTexture.premultiplyAlpha);_gl.pixelStorei(3317,dstTexture.unpackAlignment);if(srcTexture.isDataTexture){_gl.texSubImage2D(3553,level,position.x,position.y,width,height,glFormat,glType,srcTexture.image.data);}else{if(srcTexture.isCompressedTexture){_gl.compressedTexSubImage2D(3553,level,position.x,position.y,srcTexture.mipmaps[0].width,srcTexture.mipmaps[0].height,glFormat,srcTexture.mipmaps[0].data);}else{_gl.texSubImage2D(3553,level,position.x,position.y,glFormat,glType,srcTexture.image);}}// Generate mipmaps only when copying level 0
if(level===0&&dstTexture.generateMipmaps)_gl.generateMipmap(3553);state.unbindTexture();};this.copyTextureToTexture3D=function(sourceBox,position,srcTexture,dstTexture,level=0){if(_this.isWebGL1Renderer){console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');return;}const width=sourceBox.max.x-sourceBox.min.x+1;const height=sourceBox.max.y-sourceBox.min.y+1;const depth=sourceBox.max.z-sourceBox.min.z+1;const glFormat=utils.convert(dstTexture.format);const glType=utils.convert(dstTexture.type);let glTarget;if(dstTexture.isData3DTexture){textures.setTexture3D(dstTexture,0);glTarget=32879;}else if(dstTexture.isDataArrayTexture){textures.setTexture2DArray(dstTexture,0);glTarget=35866;}else{console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');return;}_gl.pixelStorei(37440,dstTexture.flipY);_gl.pixelStorei(37441,dstTexture.premultiplyAlpha);_gl.pixelStorei(3317,dstTexture.unpackAlignment);const unpackRowLen=_gl.getParameter(3314);const unpackImageHeight=_gl.getParameter(32878);const unpackSkipPixels=_gl.getParameter(3316);const unpackSkipRows=_gl.getParameter(3315);const unpackSkipImages=_gl.getParameter(32877);const image=srcTexture.isCompressedTexture?srcTexture.mipmaps[0]:srcTexture.image;_gl.pixelStorei(3314,image.width);_gl.pixelStorei(32878,image.height);_gl.pixelStorei(3316,sourceBox.min.x);_gl.pixelStorei(3315,sourceBox.min.y);_gl.pixelStorei(32877,sourceBox.min.z);if(srcTexture.isDataTexture||srcTexture.isData3DTexture){_gl.texSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,glType,image.data);}else{if(srcTexture.isCompressedTexture){console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');_gl.compressedTexSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,image.data);}else{_gl.texSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,glType,image);}}_gl.pixelStorei(3314,unpackRowLen);_gl.pixelStorei(32878,unpackImageHeight);_gl.pixelStorei(3316,unpackSkipPixels);_gl.pixelStorei(3315,unpackSkipRows);_gl.pixelStorei(32877,unpackSkipImages);// Generate mipmaps only when copying level 0
if(level===0&&dstTexture.generateMipmaps)_gl.generateMipmap(glTarget);state.unbindTexture();};this.initTexture=function(texture){textures.setTexture2D(texture,0);state.unbindTexture();};this.resetState=function(){_currentActiveCubeFace=0;_currentActiveMipmapLevel=0;_currentRenderTarget=null;state.reset();bindingStates.reset();};if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe',{detail:this}));}}WebGLRenderer.prototype.isWebGLRenderer=true;class WebGL1Renderer extends WebGLRenderer{}exports.WebGL1Renderer=WebGL1Renderer;WebGL1Renderer.prototype.isWebGL1Renderer=true;class FogExp2{constructor(color,density=0.00025){this.name='';this.color=new Color(color);this.density=density;}clone(){return new FogExp2(this.color,this.density);}toJSON(){return{type:'FogExp2',color:this.color.getHex(),density:this.density};}}exports.FogExp2=FogExp2;FogExp2.prototype.isFogExp2=true;class Fog{constructor(color,near=1,far=1000){this.name='';this.color=new Color(color);this.near=near;this.far=far;}clone(){return new Fog(this.color,this.near,this.far);}toJSON(){return{type:'Fog',color:this.color.getHex(),near:this.near,far:this.far};}}exports.Fog=Fog;Fog.prototype.isFog=true;class Scene extends Object3D{constructor(){super();this.type='Scene';this.background=null;this.environment=null;this.fog=null;this.overrideMaterial=null;this.autoUpdate=true;// checked by the renderer
if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe',{detail:this}));}}copy(source,recursive){super.copy(source,recursive);if(source.background!==null)this.background=source.background.clone();if(source.environment!==null)this.environment=source.environment.clone();if(source.fog!==null)this.fog=source.fog.clone();if(source.overrideMaterial!==null)this.overrideMaterial=source.overrideMaterial.clone();this.autoUpdate=source.autoUpdate;this.matrixAutoUpdate=source.matrixAutoUpdate;return this;}toJSON(meta){const data=super.toJSON(meta);if(this.fog!==null)data.object.fog=this.fog.toJSON();return data;}}exports.Scene=Scene;Scene.prototype.isScene=true;class InterleavedBuffer{constructor(array,stride){this.array=array;this.stride=stride;this.count=array!==undefined?array.length/stride:0;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;this.uuid=generateUUID();}onUploadCallback(){}set needsUpdate(value){if(value===true)this.version++;}setUsage(value){this.usage=value;return this;}copy(source){this.array=new source.array.constructor(source.array);this.count=source.count;this.stride=source.stride;this.usage=source.usage;return this;}copyAt(index1,attribute,index2){index1*=this.stride;index2*=attribute.stride;for(let i=0,l=this.stride;i<l;i++){this.array[index1+i]=attribute.array[index2+i];}return this;}set(value,offset=0){this.array.set(value,offset);return this;}clone(data){if(data.arrayBuffers===undefined){data.arrayBuffers={};}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=generateUUID();}if(data.arrayBuffers[this.array.buffer._uuid]===undefined){data.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer;}const array=new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);const ib=new this.constructor(array,this.stride);ib.setUsage(this.usage);return ib;}onUpload(callback){this.onUploadCallback=callback;return this;}toJSON(data){if(data.arrayBuffers===undefined){data.arrayBuffers={};}// generate UUID for array buffer if necessary
if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=generateUUID();}if(data.arrayBuffers[this.array.buffer._uuid]===undefined){data.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer));}//
return{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride};}}exports.InterleavedBuffer=InterleavedBuffer;InterleavedBuffer.prototype.isInterleavedBuffer=true;const _vector$6=/*@__PURE__*/new Vector3();class InterleavedBufferAttribute{constructor(interleavedBuffer,itemSize,offset,normalized=false){this.name='';this.data=interleavedBuffer;this.itemSize=itemSize;this.offset=offset;this.normalized=normalized===true;}get count(){return this.data.count;}get array(){return this.data.array;}set needsUpdate(value){this.data.needsUpdate=value;}applyMatrix4(m){for(let i=0,l=this.data.count;i<l;i++){_vector$6.x=this.getX(i);_vector$6.y=this.getY(i);_vector$6.z=this.getZ(i);_vector$6.applyMatrix4(m);this.setXYZ(i,_vector$6.x,_vector$6.y,_vector$6.z);}return this;}applyNormalMatrix(m){for(let i=0,l=this.count;i<l;i++){_vector$6.x=this.getX(i);_vector$6.y=this.getY(i);_vector$6.z=this.getZ(i);_vector$6.applyNormalMatrix(m);this.setXYZ(i,_vector$6.x,_vector$6.y,_vector$6.z);}return this;}transformDirection(m){for(let i=0,l=this.count;i<l;i++){_vector$6.x=this.getX(i);_vector$6.y=this.getY(i);_vector$6.z=this.getZ(i);_vector$6.transformDirection(m);this.setXYZ(i,_vector$6.x,_vector$6.y,_vector$6.z);}return this;}setX(index,x){this.data.array[index*this.data.stride+this.offset]=x;return this;}setY(index,y){this.data.array[index*this.data.stride+this.offset+1]=y;return this;}setZ(index,z){this.data.array[index*this.data.stride+this.offset+2]=z;return this;}setW(index,w){this.data.array[index*this.data.stride+this.offset+3]=w;return this;}getX(index){return this.data.array[index*this.data.stride+this.offset];}getY(index){return this.data.array[index*this.data.stride+this.offset+1];}getZ(index){return this.data.array[index*this.data.stride+this.offset+2];}getW(index){return this.data.array[index*this.data.stride+this.offset+3];}setXY(index,x,y){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;return this;}setXYZ(index,x,y,z){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;return this;}setXYZW(index,x,y,z,w){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;this.data.array[index+3]=w;return this;}clone(data){if(data===undefined){console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');const array=[];for(let i=0;i<this.count;i++){const index=i*this.data.stride+this.offset;for(let j=0;j<this.itemSize;j++){array.push(this.data.array[index+j]);}}return new BufferAttribute(new this.array.constructor(array),this.itemSize,this.normalized);}else{if(data.interleavedBuffers===undefined){data.interleavedBuffers={};}if(data.interleavedBuffers[this.data.uuid]===undefined){data.interleavedBuffers[this.data.uuid]=this.data.clone(data);}return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized);}}toJSON(data){if(data===undefined){console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');const array=[];for(let i=0;i<this.count;i++){const index=i*this.data.stride+this.offset;for(let j=0;j<this.itemSize;j++){array.push(this.data.array[index+j]);}}// deinterleave data and save it as an ordinary buffer attribute for now
return{itemSize:this.itemSize,type:this.array.constructor.name,array:array,normalized:this.normalized};}else{// save as true interlaved attribtue
if(data.interleavedBuffers===undefined){data.interleavedBuffers={};}if(data.interleavedBuffers[this.data.uuid]===undefined){data.interleavedBuffers[this.data.uuid]=this.data.toJSON(data);}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized};}}}exports.InterleavedBufferAttribute=InterleavedBufferAttribute;InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute=true;/**
 * parameters = {
 *  color: <hex>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *  rotation: <float>,
 *  sizeAttenuation: <bool>
 * }
 */class SpriteMaterial extends Material{constructor(parameters){super();this.type='SpriteMaterial';this.color=new Color(0xffffff);this.map=null;this.alphaMap=null;this.rotation=0;this.sizeAttenuation=true;this.transparent=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.rotation=source.rotation;this.sizeAttenuation=source.sizeAttenuation;return this;}}exports.SpriteMaterial=SpriteMaterial;SpriteMaterial.prototype.isSpriteMaterial=true;let _geometry;const _intersectPoint=/*@__PURE__*/new Vector3();const _worldScale=/*@__PURE__*/new Vector3();const _mvPosition=/*@__PURE__*/new Vector3();const _alignedPosition=/*@__PURE__*/new Vector2();const _rotatedPosition=/*@__PURE__*/new Vector2();const _viewWorldMatrix=/*@__PURE__*/new Matrix4();const _vA=/*@__PURE__*/new Vector3();const _vB=/*@__PURE__*/new Vector3();const _vC=/*@__PURE__*/new Vector3();const _uvA=/*@__PURE__*/new Vector2();const _uvB=/*@__PURE__*/new Vector2();const _uvC=/*@__PURE__*/new Vector2();class Sprite extends Object3D{constructor(material){super();this.type='Sprite';if(_geometry===undefined){_geometry=new BufferGeometry();const float32Array=new Float32Array([-0.5,-0.5,0,0,0,0.5,-0.5,0,1,0,0.5,0.5,0,1,1,-0.5,0.5,0,0,1]);const interleavedBuffer=new InterleavedBuffer(float32Array,5);_geometry.setIndex([0,1,2,0,2,3]);_geometry.setAttribute('position',new InterleavedBufferAttribute(interleavedBuffer,3,0,false));_geometry.setAttribute('uv',new InterleavedBufferAttribute(interleavedBuffer,2,3,false));}this.geometry=_geometry;this.material=material!==undefined?material:new SpriteMaterial();this.center=new Vector2(0.5,0.5);}raycast(raycaster,intersects){if(raycaster.camera===null){console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');}_worldScale.setFromMatrixScale(this.matrixWorld);_viewWorldMatrix.copy(raycaster.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse,this.matrixWorld);_mvPosition.setFromMatrixPosition(this.modelViewMatrix);if(raycaster.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){_worldScale.multiplyScalar(-_mvPosition.z);}const rotation=this.material.rotation;let sin,cos;if(rotation!==0){cos=Math.cos(rotation);sin=Math.sin(rotation);}const center=this.center;transformVertex(_vA.set(-0.5,-0.5,0),_mvPosition,center,_worldScale,sin,cos);transformVertex(_vB.set(0.5,-0.5,0),_mvPosition,center,_worldScale,sin,cos);transformVertex(_vC.set(0.5,0.5,0),_mvPosition,center,_worldScale,sin,cos);_uvA.set(0,0);_uvB.set(1,0);_uvC.set(1,1);// check first triangle
let intersect=raycaster.ray.intersectTriangle(_vA,_vB,_vC,false,_intersectPoint);if(intersect===null){// check second triangle
transformVertex(_vB.set(-0.5,0.5,0),_mvPosition,center,_worldScale,sin,cos);_uvB.set(0,1);intersect=raycaster.ray.intersectTriangle(_vA,_vC,_vB,false,_intersectPoint);if(intersect===null){return;}}const distance=raycaster.ray.origin.distanceTo(_intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,point:_intersectPoint.clone(),uv:Triangle.getUV(_intersectPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2()),face:null,object:this});}copy(source){super.copy(source);if(source.center!==undefined)this.center.copy(source.center);this.material=source.material;return this;}}exports.Sprite=Sprite;Sprite.prototype.isSprite=true;function transformVertex(vertexPosition,mvPosition,center,scale,sin,cos){// compute position in camera space
_alignedPosition.subVectors(vertexPosition,center).addScalar(0.5).multiply(scale);// to check if rotation is not zero
if(sin!==undefined){_rotatedPosition.x=cos*_alignedPosition.x-sin*_alignedPosition.y;_rotatedPosition.y=sin*_alignedPosition.x+cos*_alignedPosition.y;}else{_rotatedPosition.copy(_alignedPosition);}vertexPosition.copy(mvPosition);vertexPosition.x+=_rotatedPosition.x;vertexPosition.y+=_rotatedPosition.y;// transform to world space
vertexPosition.applyMatrix4(_viewWorldMatrix);}const _v1$2=/*@__PURE__*/new Vector3();const _v2$1=/*@__PURE__*/new Vector3();class LOD extends Object3D{constructor(){super();this._currentLevel=0;this.type='LOD';Object.defineProperties(this,{levels:{enumerable:true,value:[]},isLOD:{value:true}});this.autoUpdate=true;}copy(source){super.copy(source,false);const levels=source.levels;for(let i=0,l=levels.length;i<l;i++){const level=levels[i];this.addLevel(level.object.clone(),level.distance);}this.autoUpdate=source.autoUpdate;return this;}addLevel(object,distance=0){distance=Math.abs(distance);const levels=this.levels;let l;for(l=0;l<levels.length;l++){if(distance<levels[l].distance){break;}}levels.splice(l,0,{distance:distance,object:object});this.add(object);return this;}getCurrentLevel(){return this._currentLevel;}getObjectForDistance(distance){const levels=this.levels;if(levels.length>0){let i,l;for(i=1,l=levels.length;i<l;i++){if(distance<levels[i].distance){break;}}return levels[i-1].object;}return null;}raycast(raycaster,intersects){const levels=this.levels;if(levels.length>0){_v1$2.setFromMatrixPosition(this.matrixWorld);const distance=raycaster.ray.origin.distanceTo(_v1$2);this.getObjectForDistance(distance).raycast(raycaster,intersects);}}update(camera){const levels=this.levels;if(levels.length>1){_v1$2.setFromMatrixPosition(camera.matrixWorld);_v2$1.setFromMatrixPosition(this.matrixWorld);const distance=_v1$2.distanceTo(_v2$1)/camera.zoom;levels[0].object.visible=true;let i,l;for(i=1,l=levels.length;i<l;i++){if(distance>=levels[i].distance){levels[i-1].object.visible=false;levels[i].object.visible=true;}else{break;}}this._currentLevel=i-1;for(;i<l;i++){levels[i].object.visible=false;}}}toJSON(meta){const data=super.toJSON(meta);if(this.autoUpdate===false)data.object.autoUpdate=false;data.object.levels=[];const levels=this.levels;for(let i=0,l=levels.length;i<l;i++){const level=levels[i];data.object.levels.push({object:level.object.uuid,distance:level.distance});}return data;}}exports.LOD=LOD;const _basePosition=/*@__PURE__*/new Vector3();const _skinIndex=/*@__PURE__*/new Vector4();const _skinWeight=/*@__PURE__*/new Vector4();const _vector$5=/*@__PURE__*/new Vector3();const _matrix=/*@__PURE__*/new Matrix4();class SkinnedMesh extends Mesh{constructor(geometry,material){super(geometry,material);this.type='SkinnedMesh';this.bindMode='attached';this.bindMatrix=new Matrix4();this.bindMatrixInverse=new Matrix4();}copy(source){super.copy(source);this.bindMode=source.bindMode;this.bindMatrix.copy(source.bindMatrix);this.bindMatrixInverse.copy(source.bindMatrixInverse);this.skeleton=source.skeleton;return this;}bind(skeleton,bindMatrix){this.skeleton=skeleton;if(bindMatrix===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();bindMatrix=this.matrixWorld;}this.bindMatrix.copy(bindMatrix);this.bindMatrixInverse.copy(bindMatrix).invert();}pose(){this.skeleton.pose();}normalizeSkinWeights(){const vector=new Vector4();const skinWeight=this.geometry.attributes.skinWeight;for(let i=0,l=skinWeight.count;i<l;i++){vector.x=skinWeight.getX(i);vector.y=skinWeight.getY(i);vector.z=skinWeight.getZ(i);vector.w=skinWeight.getW(i);const scale=1.0/vector.manhattanLength();if(scale!==Infinity){vector.multiplyScalar(scale);}else{vector.set(1,0,0,0);// do something reasonable
}skinWeight.setXYZW(i,vector.x,vector.y,vector.z,vector.w);}}updateMatrixWorld(force){super.updateMatrixWorld(force);if(this.bindMode==='attached'){this.bindMatrixInverse.copy(this.matrixWorld).invert();}else if(this.bindMode==='detached'){this.bindMatrixInverse.copy(this.bindMatrix).invert();}else{console.warn('THREE.SkinnedMesh: Unrecognized bindMode: '+this.bindMode);}}boneTransform(index,target){const skeleton=this.skeleton;const geometry=this.geometry;_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex,index);_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight,index);_basePosition.copy(target).applyMatrix4(this.bindMatrix);target.set(0,0,0);for(let i=0;i<4;i++){const weight=_skinWeight.getComponent(i);if(weight!==0){const boneIndex=_skinIndex.getComponent(i);_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld,skeleton.boneInverses[boneIndex]);target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix),weight);}}return target.applyMatrix4(this.bindMatrixInverse);}}exports.SkinnedMesh=SkinnedMesh;SkinnedMesh.prototype.isSkinnedMesh=true;class Bone extends Object3D{constructor(){super();this.type='Bone';}}exports.Bone=Bone;Bone.prototype.isBone=true;class DataTexture extends Texture{constructor(data=null,width=1,height=1,format,type,mapping,wrapS,wrapT,magFilter=NearestFilter,minFilter=NearestFilter,anisotropy,encoding){super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={data:data,width:width,height:height};this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;}}exports.DataTexture=DataTexture;DataTexture.prototype.isDataTexture=true;const _offsetMatrix=/*@__PURE__*/new Matrix4();const _identityMatrix=/*@__PURE__*/new Matrix4();class Skeleton{constructor(bones=[],boneInverses=[]){this.uuid=generateUUID();this.bones=bones.slice(0);this.boneInverses=boneInverses;this.boneMatrices=null;this.boneTexture=null;this.boneTextureSize=0;this.frame=-1;this.init();}init(){const bones=this.bones;const boneInverses=this.boneInverses;this.boneMatrices=new Float32Array(bones.length*16);// calculate inverse bone matrices if necessary
if(boneInverses.length===0){this.calculateInverses();}else{// handle special case
if(bones.length!==boneInverses.length){console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');this.boneInverses=[];for(let i=0,il=this.bones.length;i<il;i++){this.boneInverses.push(new Matrix4());}}}}calculateInverses(){this.boneInverses.length=0;for(let i=0,il=this.bones.length;i<il;i++){const inverse=new Matrix4();if(this.bones[i]){inverse.copy(this.bones[i].matrixWorld).invert();}this.boneInverses.push(inverse);}}pose(){// recover the bind-time world matrices
for(let i=0,il=this.bones.length;i<il;i++){const bone=this.bones[i];if(bone){bone.matrixWorld.copy(this.boneInverses[i]).invert();}}// compute the local matrices, positions, rotations and scales
for(let i=0,il=this.bones.length;i<il;i++){const bone=this.bones[i];if(bone){if(bone.parent&&bone.parent.isBone){bone.matrix.copy(bone.parent.matrixWorld).invert();bone.matrix.multiply(bone.matrixWorld);}else{bone.matrix.copy(bone.matrixWorld);}bone.matrix.decompose(bone.position,bone.quaternion,bone.scale);}}}update(){const bones=this.bones;const boneInverses=this.boneInverses;const boneMatrices=this.boneMatrices;const boneTexture=this.boneTexture;// flatten bone matrices to array
for(let i=0,il=bones.length;i<il;i++){// compute the offset between the current and the original transform
const matrix=bones[i]?bones[i].matrixWorld:_identityMatrix;_offsetMatrix.multiplyMatrices(matrix,boneInverses[i]);_offsetMatrix.toArray(boneMatrices,i*16);}if(boneTexture!==null){boneTexture.needsUpdate=true;}}clone(){return new Skeleton(this.bones,this.boneInverses);}computeBoneTexture(){// layout (1 matrix = 4 pixels)
//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
let size=Math.sqrt(this.bones.length*4);// 4 pixels needed for 1 matrix
size=ceilPowerOfTwo(size);size=Math.max(size,4);const boneMatrices=new Float32Array(size*size*4);// 4 floats per RGBA pixel
boneMatrices.set(this.boneMatrices);// copy current values
const boneTexture=new DataTexture(boneMatrices,size,size,RGBAFormat,FloatType);boneTexture.needsUpdate=true;this.boneMatrices=boneMatrices;this.boneTexture=boneTexture;this.boneTextureSize=size;return this;}getBoneByName(name){for(let i=0,il=this.bones.length;i<il;i++){const bone=this.bones[i];if(bone.name===name){return bone;}}return undefined;}dispose(){if(this.boneTexture!==null){this.boneTexture.dispose();this.boneTexture=null;}}fromJSON(json,bones){this.uuid=json.uuid;for(let i=0,l=json.bones.length;i<l;i++){const uuid=json.bones[i];let bone=bones[uuid];if(bone===undefined){console.warn('THREE.Skeleton: No bone found with UUID:',uuid);bone=new Bone();}this.bones.push(bone);this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));}this.init();return this;}toJSON(){const data={metadata:{version:4.5,type:'Skeleton',generator:'Skeleton.toJSON'},bones:[],boneInverses:[]};data.uuid=this.uuid;const bones=this.bones;const boneInverses=this.boneInverses;for(let i=0,l=bones.length;i<l;i++){const bone=bones[i];data.bones.push(bone.uuid);const boneInverse=boneInverses[i];data.boneInverses.push(boneInverse.toArray());}return data;}}exports.Skeleton=Skeleton;class InstancedBufferAttribute extends BufferAttribute{constructor(array,itemSize,normalized,meshPerAttribute=1){if(typeof normalized==='number'){meshPerAttribute=normalized;normalized=false;console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');}super(array,itemSize,normalized);this.meshPerAttribute=meshPerAttribute;}copy(source){super.copy(source);this.meshPerAttribute=source.meshPerAttribute;return this;}toJSON(){const data=super.toJSON();data.meshPerAttribute=this.meshPerAttribute;data.isInstancedBufferAttribute=true;return data;}}exports.InstancedBufferAttribute=InstancedBufferAttribute;InstancedBufferAttribute.prototype.isInstancedBufferAttribute=true;const _instanceLocalMatrix=/*@__PURE__*/new Matrix4();const _instanceWorldMatrix=/*@__PURE__*/new Matrix4();const _instanceIntersects=[];const _mesh=/*@__PURE__*/new Mesh();class InstancedMesh extends Mesh{constructor(geometry,material,count){super(geometry,material);this.instanceMatrix=new InstancedBufferAttribute(new Float32Array(count*16),16);this.instanceColor=null;this.count=count;this.frustumCulled=false;}copy(source){super.copy(source);this.instanceMatrix.copy(source.instanceMatrix);if(source.instanceColor!==null)this.instanceColor=source.instanceColor.clone();this.count=source.count;return this;}getColorAt(index,color){color.fromArray(this.instanceColor.array,index*3);}getMatrixAt(index,matrix){matrix.fromArray(this.instanceMatrix.array,index*16);}raycast(raycaster,intersects){const matrixWorld=this.matrixWorld;const raycastTimes=this.count;_mesh.geometry=this.geometry;_mesh.material=this.material;if(_mesh.material===undefined)return;for(let instanceId=0;instanceId<raycastTimes;instanceId++){// calculate the world matrix for each instance
this.getMatrixAt(instanceId,_instanceLocalMatrix);_instanceWorldMatrix.multiplyMatrices(matrixWorld,_instanceLocalMatrix);// the mesh represents this single instance
_mesh.matrixWorld=_instanceWorldMatrix;_mesh.raycast(raycaster,_instanceIntersects);// process the result of raycast
for(let i=0,l=_instanceIntersects.length;i<l;i++){const intersect=_instanceIntersects[i];intersect.instanceId=instanceId;intersect.object=this;intersects.push(intersect);}_instanceIntersects.length=0;}}setColorAt(index,color){if(this.instanceColor===null){this.instanceColor=new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count*3),3);}color.toArray(this.instanceColor.array,index*3);}setMatrixAt(index,matrix){matrix.toArray(this.instanceMatrix.array,index*16);}updateMorphTargets(){}dispose(){this.dispatchEvent({type:'dispose'});}}exports.InstancedMesh=InstancedMesh;InstancedMesh.prototype.isInstancedMesh=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */class LineBasicMaterial extends Material{constructor(parameters){super();this.type='LineBasicMaterial';this.color=new Color(0xffffff);this.linewidth=1;this.linecap='round';this.linejoin='round';this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.linewidth=source.linewidth;this.linecap=source.linecap;this.linejoin=source.linejoin;return this;}}exports.LineBasicMaterial=LineBasicMaterial;LineBasicMaterial.prototype.isLineBasicMaterial=true;const _start$1=/*@__PURE__*/new Vector3();const _end$1=/*@__PURE__*/new Vector3();const _inverseMatrix$1=/*@__PURE__*/new Matrix4();const _ray$1=/*@__PURE__*/new Ray();const _sphere$1=/*@__PURE__*/new Sphere();class Line extends Object3D{constructor(geometry=new BufferGeometry(),material=new LineBasicMaterial()){super();this.type='Line';this.geometry=geometry;this.material=material;this.updateMorphTargets();}copy(source){super.copy(source);this.material=source.material;this.geometry=source.geometry;return this;}computeLineDistances(){const geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
if(geometry.index===null){const positionAttribute=geometry.attributes.position;const lineDistances=[0];for(let i=1,l=positionAttribute.count;i<l;i++){_start$1.fromBufferAttribute(positionAttribute,i-1);_end$1.fromBufferAttribute(positionAttribute,i);lineDistances[i]=lineDistances[i-1];lineDistances[i]+=_start$1.distanceTo(_end$1);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else{console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){console.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}return this;}raycast(raycaster,intersects){const geometry=this.geometry;const matrixWorld=this.matrixWorld;const threshold=raycaster.params.Line.threshold;const drawRange=geometry.drawRange;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$1.copy(geometry.boundingSphere);_sphere$1.applyMatrix4(matrixWorld);_sphere$1.radius+=threshold;if(raycaster.ray.intersectsSphere(_sphere$1)===false)return;//
_inverseMatrix$1.copy(matrixWorld).invert();_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);const localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);const localThresholdSq=localThreshold*localThreshold;const vStart=new Vector3();const vEnd=new Vector3();const interSegment=new Vector3();const interRay=new Vector3();const step=this.isLineSegments?2:1;if(geometry.isBufferGeometry){const index=geometry.index;const attributes=geometry.attributes;const positionAttribute=attributes.position;if(index!==null){const start=Math.max(0,drawRange.start);const end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,l=end-1;i<l;i+=step){const a=index.getX(i);const b=index.getX(i+1);vStart.fromBufferAttribute(positionAttribute,a);vEnd.fromBufferAttribute(positionAttribute,b);const distSq=_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(distSq>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
const distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this});}}else{const start=Math.max(0,drawRange.start);const end=Math.min(positionAttribute.count,drawRange.start+drawRange.count);for(let i=start,l=end-1;i<l;i+=step){vStart.fromBufferAttribute(positionAttribute,i);vEnd.fromBufferAttribute(positionAttribute,i+1);const distSq=_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(distSq>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
const distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this});}}}else if(geometry.isGeometry){console.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}updateMorphTargets(){const geometry=this.geometry;if(geometry.isBufferGeometry){const morphAttributes=geometry.morphAttributes;const keys=Object.keys(morphAttributes);if(keys.length>0){const morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){const name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else{const morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');}}}}exports.Line=Line;Line.prototype.isLine=true;const _start=/*@__PURE__*/new Vector3();const _end=/*@__PURE__*/new Vector3();class LineSegments extends Line{constructor(geometry,material){super(geometry,material);this.type='LineSegments';}computeLineDistances(){const geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
if(geometry.index===null){const positionAttribute=geometry.attributes.position;const lineDistances=[];for(let i=0,l=positionAttribute.count;i<l;i+=2){_start.fromBufferAttribute(positionAttribute,i);_end.fromBufferAttribute(positionAttribute,i+1);lineDistances[i]=i===0?0:lineDistances[i-1];lineDistances[i+1]=lineDistances[i]+_start.distanceTo(_end);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else{console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}return this;}}exports.LineSegments=LineSegments;LineSegments.prototype.isLineSegments=true;class LineLoop extends Line{constructor(geometry,material){super(geometry,material);this.type='LineLoop';}}exports.LineLoop=LineLoop;LineLoop.prototype.isLineLoop=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 *
 * }
 */class PointsMaterial extends Material{constructor(parameters){super();this.type='PointsMaterial';this.color=new Color(0xffffff);this.map=null;this.alphaMap=null;this.size=1;this.sizeAttenuation=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.size=source.size;this.sizeAttenuation=source.sizeAttenuation;return this;}}exports.PointsMaterial=PointsMaterial;PointsMaterial.prototype.isPointsMaterial=true;const _inverseMatrix=/*@__PURE__*/new Matrix4();const _ray=/*@__PURE__*/new Ray();const _sphere=/*@__PURE__*/new Sphere();const _position$2=/*@__PURE__*/new Vector3();class Points extends Object3D{constructor(geometry=new BufferGeometry(),material=new PointsMaterial()){super();this.type='Points';this.geometry=geometry;this.material=material;this.updateMorphTargets();}copy(source){super.copy(source);this.material=source.material;this.geometry=source.geometry;return this;}raycast(raycaster,intersects){const geometry=this.geometry;const matrixWorld=this.matrixWorld;const threshold=raycaster.params.Points.threshold;const drawRange=geometry.drawRange;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere.copy(geometry.boundingSphere);_sphere.applyMatrix4(matrixWorld);_sphere.radius+=threshold;if(raycaster.ray.intersectsSphere(_sphere)===false)return;//
_inverseMatrix.copy(matrixWorld).invert();_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);const localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);const localThresholdSq=localThreshold*localThreshold;if(geometry.isBufferGeometry){const index=geometry.index;const attributes=geometry.attributes;const positionAttribute=attributes.position;if(index!==null){const start=Math.max(0,drawRange.start);const end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i++){const a=index.getX(i);_position$2.fromBufferAttribute(positionAttribute,a);testPoint(_position$2,a,localThresholdSq,matrixWorld,raycaster,intersects,this);}}else{const start=Math.max(0,drawRange.start);const end=Math.min(positionAttribute.count,drawRange.start+drawRange.count);for(let i=start,l=end;i<l;i++){_position$2.fromBufferAttribute(positionAttribute,i);testPoint(_position$2,i,localThresholdSq,matrixWorld,raycaster,intersects,this);}}}else{console.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}updateMorphTargets(){const geometry=this.geometry;if(geometry.isBufferGeometry){const morphAttributes=geometry.morphAttributes;const keys=Object.keys(morphAttributes);if(keys.length>0){const morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){const name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else{const morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');}}}}exports.Points=Points;Points.prototype.isPoints=true;function testPoint(point,index,localThresholdSq,matrixWorld,raycaster,intersects,object){const rayPointDistanceSq=_ray.distanceSqToPoint(point);if(rayPointDistanceSq<localThresholdSq){const intersectPoint=new Vector3();_ray.closestPointToPoint(point,intersectPoint);intersectPoint.applyMatrix4(matrixWorld);const distance=raycaster.ray.origin.distanceTo(intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,distanceToRay:Math.sqrt(rayPointDistanceSq),point:intersectPoint,index:index,face:null,object:object});}}class VideoTexture extends Texture{constructor(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){super(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.minFilter=minFilter!==undefined?minFilter:LinearFilter;this.magFilter=magFilter!==undefined?magFilter:LinearFilter;this.generateMipmaps=false;const scope=this;function updateVideo(){scope.needsUpdate=true;video.requestVideoFrameCallback(updateVideo);}if('requestVideoFrameCallback'in video){video.requestVideoFrameCallback(updateVideo);}}clone(){return new this.constructor(this.image).copy(this);}update(){const video=this.image;const hasVideoFrameCallback=('requestVideoFrameCallback'in video);if(hasVideoFrameCallback===false&&video.readyState>=video.HAVE_CURRENT_DATA){this.needsUpdate=true;}}}exports.VideoTexture=VideoTexture;VideoTexture.prototype.isVideoTexture=true;class FramebufferTexture extends Texture{constructor(width,height,format){super({width,height});this.format=format;this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.generateMipmaps=false;this.needsUpdate=true;}}exports.FramebufferTexture=FramebufferTexture;FramebufferTexture.prototype.isFramebufferTexture=true;class CompressedTexture extends Texture{constructor(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={width:width,height:height};this.mipmaps=mipmaps;// no flipping for cube textures
// (also flipping doesn't work for compressed textures )
this.flipY=false;// can't generate mipmaps for compressed textures
// mips must be embedded in DDS files
this.generateMipmaps=false;}}exports.CompressedTexture=CompressedTexture;CompressedTexture.prototype.isCompressedTexture=true;class CanvasTexture extends Texture{constructor(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){super(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.needsUpdate=true;}}exports.CanvasTexture=CanvasTexture;CanvasTexture.prototype.isCanvasTexture=true;class CircleGeometry extends BufferGeometry{constructor(radius=1,segments=8,thetaStart=0,thetaLength=Math.PI*2){super();this.type='CircleGeometry';this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength};segments=Math.max(3,segments);// buffers
const indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables
const vertex=new Vector3();const uv=new Vector2();// center point
vertices.push(0,0,0);normals.push(0,0,1);uvs.push(0.5,0.5);for(let s=0,i=3;s<=segments;s++,i+=3){const segment=thetaStart+s/segments*thetaLength;// vertex
vertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,0,1);// uvs
uv.x=(vertices[i]/radius+1)/2;uv.y=(vertices[i+1]/radius+1)/2;uvs.push(uv.x,uv.y);}// indices
for(let i=1;i<=segments;i++){indices.push(i,i+1,0);}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}static fromJSON(data){return new CircleGeometry(data.radius,data.segments,data.thetaStart,data.thetaLength);}}exports.CircleGeometry=exports.CircleBufferGeometry=CircleGeometry;class CylinderGeometry extends BufferGeometry{constructor(radiusTop=1,radiusBottom=1,height=1,radialSegments=8,heightSegments=1,openEnded=false,thetaStart=0,thetaLength=Math.PI*2){super();this.type='CylinderGeometry';this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};const scope=this;radialSegments=Math.floor(radialSegments);heightSegments=Math.floor(heightSegments);// buffers
const indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables
let index=0;const indexArray=[];const halfHeight=height/2;let groupStart=0;// generate geometry
generateTorso();if(openEnded===false){if(radiusTop>0)generateCap(true);if(radiusBottom>0)generateCap(false);}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));function generateTorso(){const normal=new Vector3();const vertex=new Vector3();let groupCount=0;// this will be used to calculate the normal
const slope=(radiusBottom-radiusTop)/height;// generate vertices, normals and uvs
for(let y=0;y<=heightSegments;y++){const indexRow=[];const v=y/heightSegments;// calculate the radius of the current row
const radius=v*(radiusBottom-radiusTop)+radiusTop;for(let x=0;x<=radialSegments;x++){const u=x/radialSegments;const theta=u*thetaLength+thetaStart;const sinTheta=Math.sin(theta);const cosTheta=Math.cos(theta);// vertex
vertex.x=radius*sinTheta;vertex.y=-v*height+halfHeight;vertex.z=radius*cosTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal
normal.set(sinTheta,slope,cosTheta).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(u,1-v);// save index of vertex in respective row
indexRow.push(index++);}// now save vertices of the row in our index array
indexArray.push(indexRow);}// generate indices
for(let x=0;x<radialSegments;x++){for(let y=0;y<heightSegments;y++){// we use the index array to access the correct indices
const a=indexArray[y][x];const b=indexArray[y+1][x];const c=indexArray[y+1][x+1];const d=indexArray[y][x+1];// faces
indices.push(a,b,d);indices.push(b,c,d);// update group counter
groupCount+=6;}}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,0);// calculate new start value for groups
groupStart+=groupCount;}function generateCap(top){// save the index of the first center vertex
const centerIndexStart=index;const uv=new Vector2();const vertex=new Vector3();let groupCount=0;const radius=top===true?radiusTop:radiusBottom;const sign=top===true?1:-1;// first we generate the center vertex data of the cap.
// because the geometry needs one set of uvs per face,
// we must generate a center vertex per face/segment
for(let x=1;x<=radialSegments;x++){// vertex
vertices.push(0,halfHeight*sign,0);// normal
normals.push(0,sign,0);// uv
uvs.push(0.5,0.5);// increase index
index++;}// save the index of the last center vertex
const centerIndexEnd=index;// now we generate the surrounding vertices, normals and uvs
for(let x=0;x<=radialSegments;x++){const u=x/radialSegments;const theta=u*thetaLength+thetaStart;const cosTheta=Math.cos(theta);const sinTheta=Math.sin(theta);// vertex
vertex.x=radius*sinTheta;vertex.y=halfHeight*sign;vertex.z=radius*cosTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,sign,0);// uv
uv.x=cosTheta*0.5+0.5;uv.y=sinTheta*0.5*sign+0.5;uvs.push(uv.x,uv.y);// increase index
index++;}// generate indices
for(let x=0;x<radialSegments;x++){const c=centerIndexStart+x;const i=centerIndexEnd+x;if(top===true){// face top
indices.push(i,i+1,c);}else{// face bottom
indices.push(i+1,i,c);}groupCount+=3;}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,top===true?1:2);// calculate new start value for groups
groupStart+=groupCount;}}static fromJSON(data){return new CylinderGeometry(data.radiusTop,data.radiusBottom,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);}}exports.CylinderGeometry=exports.CylinderBufferGeometry=CylinderGeometry;class ConeGeometry extends CylinderGeometry{constructor(radius=1,height=1,radialSegments=8,heightSegments=1,openEnded=false,thetaStart=0,thetaLength=Math.PI*2){super(0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength);this.type='ConeGeometry';this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};}static fromJSON(data){return new ConeGeometry(data.radius,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);}}exports.ConeGeometry=exports.ConeBufferGeometry=ConeGeometry;class PolyhedronGeometry extends BufferGeometry{constructor(vertices=[],indices=[],radius=1,detail=0){super();this.type='PolyhedronGeometry';this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail};// default buffer data
const vertexBuffer=[];const uvBuffer=[];// the subdivision creates the vertex buffer data
subdivide(detail);// all vertices should lie on a conceptual sphere with a given radius
applyRadius(radius);// finally, create the uv data
generateUVs();// build non-indexed geometry
this.setAttribute('position',new Float32BufferAttribute(vertexBuffer,3));this.setAttribute('normal',new Float32BufferAttribute(vertexBuffer.slice(),3));this.setAttribute('uv',new Float32BufferAttribute(uvBuffer,2));if(detail===0){this.computeVertexNormals();// flat normals
}else{this.normalizeNormals();// smooth normals
}// helper functions
function subdivide(detail){const a=new Vector3();const b=new Vector3();const c=new Vector3();// iterate over all faces and apply a subdivison with the given detail value
for(let i=0;i<indices.length;i+=3){// get the vertices of the face
getVertexByIndex(indices[i+0],a);getVertexByIndex(indices[i+1],b);getVertexByIndex(indices[i+2],c);// perform subdivision
subdivideFace(a,b,c,detail);}}function subdivideFace(a,b,c,detail){const cols=detail+1;// we use this multidimensional array as a data structure for creating the subdivision
const v=[];// construct all of the vertices for this subdivision
for(let i=0;i<=cols;i++){v[i]=[];const aj=a.clone().lerp(c,i/cols);const bj=b.clone().lerp(c,i/cols);const rows=cols-i;for(let j=0;j<=rows;j++){if(j===0&&i===cols){v[i][j]=aj;}else{v[i][j]=aj.clone().lerp(bj,j/rows);}}}// construct all of the faces
for(let i=0;i<cols;i++){for(let j=0;j<2*(cols-i)-1;j++){const k=Math.floor(j/2);if(j%2===0){pushVertex(v[i][k+1]);pushVertex(v[i+1][k]);pushVertex(v[i][k]);}else{pushVertex(v[i][k+1]);pushVertex(v[i+1][k+1]);pushVertex(v[i+1][k]);}}}}function applyRadius(radius){const vertex=new Vector3();// iterate over the entire buffer and apply the radius to each vertex
for(let i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];vertex.normalize().multiplyScalar(radius);vertexBuffer[i+0]=vertex.x;vertexBuffer[i+1]=vertex.y;vertexBuffer[i+2]=vertex.z;}}function generateUVs(){const vertex=new Vector3();for(let i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];const u=azimuth(vertex)/2/Math.PI+0.5;const v=inclination(vertex)/Math.PI+0.5;uvBuffer.push(u,1-v);}correctUVs();correctSeam();}function correctSeam(){// handle case when face straddles the seam, see #3269
for(let i=0;i<uvBuffer.length;i+=6){// uv data of a single face
const x0=uvBuffer[i+0];const x1=uvBuffer[i+2];const x2=uvBuffer[i+4];const max=Math.max(x0,x1,x2);const min=Math.min(x0,x1,x2);// 0.9 is somewhat arbitrary
if(max>0.9&&min<0.1){if(x0<0.2)uvBuffer[i+0]+=1;if(x1<0.2)uvBuffer[i+2]+=1;if(x2<0.2)uvBuffer[i+4]+=1;}}}function pushVertex(vertex){vertexBuffer.push(vertex.x,vertex.y,vertex.z);}function getVertexByIndex(index,vertex){const stride=index*3;vertex.x=vertices[stride+0];vertex.y=vertices[stride+1];vertex.z=vertices[stride+2];}function correctUVs(){const a=new Vector3();const b=new Vector3();const c=new Vector3();const centroid=new Vector3();const uvA=new Vector2();const uvB=new Vector2();const uvC=new Vector2();for(let i=0,j=0;i<vertexBuffer.length;i+=9,j+=6){a.set(vertexBuffer[i+0],vertexBuffer[i+1],vertexBuffer[i+2]);b.set(vertexBuffer[i+3],vertexBuffer[i+4],vertexBuffer[i+5]);c.set(vertexBuffer[i+6],vertexBuffer[i+7],vertexBuffer[i+8]);uvA.set(uvBuffer[j+0],uvBuffer[j+1]);uvB.set(uvBuffer[j+2],uvBuffer[j+3]);uvC.set(uvBuffer[j+4],uvBuffer[j+5]);centroid.copy(a).add(b).add(c).divideScalar(3);const azi=azimuth(centroid);correctUV(uvA,j+0,a,azi);correctUV(uvB,j+2,b,azi);correctUV(uvC,j+4,c,azi);}}function correctUV(uv,stride,vector,azimuth){if(azimuth<0&&uv.x===1){uvBuffer[stride]=uv.x-1;}if(vector.x===0&&vector.z===0){uvBuffer[stride]=azimuth/2/Math.PI+0.5;}}// Angle around the Y axis, counter-clockwise when looking from above.
function azimuth(vector){return Math.atan2(vector.z,-vector.x);}// Angle above the XZ plane.
function inclination(vector){return Math.atan2(-vector.y,Math.sqrt(vector.x*vector.x+vector.z*vector.z));}}static fromJSON(data){return new PolyhedronGeometry(data.vertices,data.indices,data.radius,data.details);}}exports.PolyhedronGeometry=exports.PolyhedronBufferGeometry=PolyhedronGeometry;class DodecahedronGeometry extends PolyhedronGeometry{constructor(radius=1,detail=0){const t=(1+Math.sqrt(5))/2;const r=1/t;const vertices=[// (±1, ±1, ±1)
-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,// (0, ±1/φ, ±φ)
0,-r,-t,0,-r,t,0,r,-t,0,r,t,// (±1/φ, ±φ, 0)
-r,-t,0,-r,t,0,r,-t,0,r,t,0,// (±φ, 0, ±1/φ)
-t,0,-r,t,0,-r,-t,0,r,t,0,r];const indices=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(vertices,indices,radius,detail);this.type='DodecahedronGeometry';this.parameters={radius:radius,detail:detail};}static fromJSON(data){return new DodecahedronGeometry(data.radius,data.detail);}}exports.DodecahedronGeometry=exports.DodecahedronBufferGeometry=DodecahedronGeometry;const _v0=new Vector3();const _v1$1=new Vector3();const _normal=new Vector3();const _triangle=new Triangle();class EdgesGeometry extends BufferGeometry{constructor(geometry=null,thresholdAngle=1){super();this.type='EdgesGeometry';this.parameters={geometry:geometry,thresholdAngle:thresholdAngle};if(geometry!==null){const precisionPoints=4;const precision=Math.pow(10,precisionPoints);const thresholdDot=Math.cos(DEG2RAD*thresholdAngle);const indexAttr=geometry.getIndex();const positionAttr=geometry.getAttribute('position');const indexCount=indexAttr?indexAttr.count:positionAttr.count;const indexArr=[0,0,0];const vertKeys=['a','b','c'];const hashes=new Array(3);const edgeData={};const vertices=[];for(let i=0;i<indexCount;i+=3){if(indexAttr){indexArr[0]=indexAttr.getX(i);indexArr[1]=indexAttr.getX(i+1);indexArr[2]=indexAttr.getX(i+2);}else{indexArr[0]=i;indexArr[1]=i+1;indexArr[2]=i+2;}const{a,b,c}=_triangle;a.fromBufferAttribute(positionAttr,indexArr[0]);b.fromBufferAttribute(positionAttr,indexArr[1]);c.fromBufferAttribute(positionAttr,indexArr[2]);_triangle.getNormal(_normal);// create hashes for the edge from the vertices
hashes[0]=`${Math.round(a.x*precision)},${Math.round(a.y*precision)},${Math.round(a.z*precision)}`;hashes[1]=`${Math.round(b.x*precision)},${Math.round(b.y*precision)},${Math.round(b.z*precision)}`;hashes[2]=`${Math.round(c.x*precision)},${Math.round(c.y*precision)},${Math.round(c.z*precision)}`;// skip degenerate triangles
if(hashes[0]===hashes[1]||hashes[1]===hashes[2]||hashes[2]===hashes[0]){continue;}// iterate over every edge
for(let j=0;j<3;j++){// get the first and next vertex making up the edge
const jNext=(j+1)%3;const vecHash0=hashes[j];const vecHash1=hashes[jNext];const v0=_triangle[vertKeys[j]];const v1=_triangle[vertKeys[jNext]];const hash=`${vecHash0}_${vecHash1}`;const reverseHash=`${vecHash1}_${vecHash0}`;if(reverseHash in edgeData&&edgeData[reverseHash]){// if we found a sibling edge add it into the vertex array if
// it meets the angle threshold and delete the edge from the map.
if(_normal.dot(edgeData[reverseHash].normal)<=thresholdDot){vertices.push(v0.x,v0.y,v0.z);vertices.push(v1.x,v1.y,v1.z);}edgeData[reverseHash]=null;}else if(!(hash in edgeData)){// if we've already got an edge here then skip adding a new one
edgeData[hash]={index0:indexArr[j],index1:indexArr[jNext],normal:_normal.clone()};}}}// iterate over all remaining, unmatched edges and add them to the vertex array
for(const key in edgeData){if(edgeData[key]){const{index0,index1}=edgeData[key];_v0.fromBufferAttribute(positionAttr,index0);_v1$1.fromBufferAttribute(positionAttr,index1);vertices.push(_v0.x,_v0.y,_v0.z);vertices.push(_v1$1.x,_v1$1.y,_v1$1.z);}}this.setAttribute('position',new Float32BufferAttribute(vertices,3));}}}/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/exports.EdgesGeometry=EdgesGeometry;class Curve{constructor(){this.type='Curve';this.arcLengthDivisions=200;}// Virtual base class method to overwrite and implement in subclasses
//	- t [0 .. 1]
getPoint(){console.warn('THREE.Curve: .getPoint() not implemented.');return null;}// Get point at relative position in curve according to arc length
// - u [0 .. 1]
getPointAt(u,optionalTarget){const t=this.getUtoTmapping(u);return this.getPoint(t,optionalTarget);}// Get sequence of points using getPoint( t )
getPoints(divisions=5){const points=[];for(let d=0;d<=divisions;d++){points.push(this.getPoint(d/divisions));}return points;}// Get sequence of points using getPointAt( u )
getSpacedPoints(divisions=5){const points=[];for(let d=0;d<=divisions;d++){points.push(this.getPointAt(d/divisions));}return points;}// Get total curve arc length
getLength(){const lengths=this.getLengths();return lengths[lengths.length-1];}// Get list of cumulative segment lengths
getLengths(divisions=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate){return this.cacheArcLengths;}this.needsUpdate=false;const cache=[];let current,last=this.getPoint(0);let sum=0;cache.push(0);for(let p=1;p<=divisions;p++){current=this.getPoint(p/divisions);sum+=current.distanceTo(last);cache.push(sum);last=current;}this.cacheArcLengths=cache;return cache;// { sums: cache, sum: sum }; Sum is in the last element.
}updateArcLengths(){this.needsUpdate=true;this.getLengths();}// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
getUtoTmapping(u,distance){const arcLengths=this.getLengths();let i=0;const il=arcLengths.length;let targetArcLength;// The targeted u distance value to get
if(distance){targetArcLength=distance;}else{targetArcLength=u*arcLengths[il-1];}// binary search for the index with largest value smaller than target u distance
let low=0,high=il-1,comparison;while(low<=high){i=Math.floor(low+(high-low)/2);// less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
comparison=arcLengths[i]-targetArcLength;if(comparison<0){low=i+1;}else if(comparison>0){high=i-1;}else{high=i;break;// DONE
}}i=high;if(arcLengths[i]===targetArcLength){return i/(il-1);}// we could get finer grain at lengths, or use simple interpolation between two points
const lengthBefore=arcLengths[i];const lengthAfter=arcLengths[i+1];const segmentLength=lengthAfter-lengthBefore;// determine where we are between the 'before' and 'after' points
const segmentFraction=(targetArcLength-lengthBefore)/segmentLength;// add that fractional amount to t
const t=(i+segmentFraction)/(il-1);return t;}// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation
getTangent(t,optionalTarget){const delta=0.0001;let t1=t-delta;let t2=t+delta;// Capping in case of danger
if(t1<0)t1=0;if(t2>1)t2=1;const pt1=this.getPoint(t1);const pt2=this.getPoint(t2);const tangent=optionalTarget||(pt1.isVector2?new Vector2():new Vector3());tangent.copy(pt2).sub(pt1).normalize();return tangent;}getTangentAt(u,optionalTarget){const t=this.getUtoTmapping(u);return this.getTangent(t,optionalTarget);}computeFrenetFrames(segments,closed){// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
const normal=new Vector3();const tangents=[];const normals=[];const binormals=[];const vec=new Vector3();const mat=new Matrix4();// compute the tangent vectors for each segment on the curve
for(let i=0;i<=segments;i++){const u=i/segments;tangents[i]=this.getTangentAt(u,new Vector3());}// select an initial normal vector perpendicular to the first tangent vector,
// and in the direction of the minimum tangent xyz component
normals[0]=new Vector3();binormals[0]=new Vector3();let min=Number.MAX_VALUE;const tx=Math.abs(tangents[0].x);const ty=Math.abs(tangents[0].y);const tz=Math.abs(tangents[0].z);if(tx<=min){min=tx;normal.set(1,0,0);}if(ty<=min){min=ty;normal.set(0,1,0);}if(tz<=min){normal.set(0,0,1);}vec.crossVectors(tangents[0],normal).normalize();normals[0].crossVectors(tangents[0],vec);binormals[0].crossVectors(tangents[0],normals[0]);// compute the slowly-varying normal and binormal vectors for each segment on the curve
for(let i=1;i<=segments;i++){normals[i]=normals[i-1].clone();binormals[i]=binormals[i-1].clone();vec.crossVectors(tangents[i-1],tangents[i]);if(vec.length()>Number.EPSILON){vec.normalize();const theta=Math.acos(clamp(tangents[i-1].dot(tangents[i]),-1,1));// clamp for floating pt errors
normals[i].applyMatrix4(mat.makeRotationAxis(vec,theta));}binormals[i].crossVectors(tangents[i],normals[i]);}// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
if(closed===true){let theta=Math.acos(clamp(normals[0].dot(normals[segments]),-1,1));theta/=segments;if(tangents[0].dot(vec.crossVectors(normals[0],normals[segments]))>0){theta=-theta;}for(let i=1;i<=segments;i++){// twist a little...
normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i],theta*i));binormals[i].crossVectors(tangents[i],normals[i]);}}return{tangents:tangents,normals:normals,binormals:binormals};}clone(){return new this.constructor().copy(this);}copy(source){this.arcLengthDivisions=source.arcLengthDivisions;return this;}toJSON(){const data={metadata:{version:4.5,type:'Curve',generator:'Curve.toJSON'}};data.arcLengthDivisions=this.arcLengthDivisions;data.type=this.type;return data;}fromJSON(json){this.arcLengthDivisions=json.arcLengthDivisions;return this;}}exports.Curve=Curve;class EllipseCurve extends Curve{constructor(aX=0,aY=0,xRadius=1,yRadius=1,aStartAngle=0,aEndAngle=Math.PI*2,aClockwise=false,aRotation=0){super();this.type='EllipseCurve';this.aX=aX;this.aY=aY;this.xRadius=xRadius;this.yRadius=yRadius;this.aStartAngle=aStartAngle;this.aEndAngle=aEndAngle;this.aClockwise=aClockwise;this.aRotation=aRotation;}getPoint(t,optionalTarget){const point=optionalTarget||new Vector2();const twoPi=Math.PI*2;let deltaAngle=this.aEndAngle-this.aStartAngle;const samePoints=Math.abs(deltaAngle)<Number.EPSILON;// ensures that deltaAngle is 0 .. 2 PI
while(deltaAngle<0)deltaAngle+=twoPi;while(deltaAngle>twoPi)deltaAngle-=twoPi;if(deltaAngle<Number.EPSILON){if(samePoints){deltaAngle=0;}else{deltaAngle=twoPi;}}if(this.aClockwise===true&&!samePoints){if(deltaAngle===twoPi){deltaAngle=-twoPi;}else{deltaAngle=deltaAngle-twoPi;}}const angle=this.aStartAngle+t*deltaAngle;let x=this.aX+this.xRadius*Math.cos(angle);let y=this.aY+this.yRadius*Math.sin(angle);if(this.aRotation!==0){const cos=Math.cos(this.aRotation);const sin=Math.sin(this.aRotation);const tx=x-this.aX;const ty=y-this.aY;// Rotate the point about the center of the ellipse.
x=tx*cos-ty*sin+this.aX;y=tx*sin+ty*cos+this.aY;}return point.set(x,y);}copy(source){super.copy(source);this.aX=source.aX;this.aY=source.aY;this.xRadius=source.xRadius;this.yRadius=source.yRadius;this.aStartAngle=source.aStartAngle;this.aEndAngle=source.aEndAngle;this.aClockwise=source.aClockwise;this.aRotation=source.aRotation;return this;}toJSON(){const data=super.toJSON();data.aX=this.aX;data.aY=this.aY;data.xRadius=this.xRadius;data.yRadius=this.yRadius;data.aStartAngle=this.aStartAngle;data.aEndAngle=this.aEndAngle;data.aClockwise=this.aClockwise;data.aRotation=this.aRotation;return data;}fromJSON(json){super.fromJSON(json);this.aX=json.aX;this.aY=json.aY;this.xRadius=json.xRadius;this.yRadius=json.yRadius;this.aStartAngle=json.aStartAngle;this.aEndAngle=json.aEndAngle;this.aClockwise=json.aClockwise;this.aRotation=json.aRotation;return this;}}exports.EllipseCurve=EllipseCurve;EllipseCurve.prototype.isEllipseCurve=true;class ArcCurve extends EllipseCurve{constructor(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){super(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);this.type='ArcCurve';}}exports.ArcCurve=ArcCurve;ArcCurve.prototype.isArcCurve=true;/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */ /*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/function CubicPoly(){let c0=0,c1=0,c2=0,c3=0;/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */function init(x0,x1,t0,t1){c0=x0;c1=t0;c2=-3*x0+3*x1-2*t0-t1;c3=2*x0-2*x1+t0+t1;}return{initCatmullRom:function(x0,x1,x2,x3,tension){init(x1,x2,tension*(x2-x0),tension*(x3-x1));},initNonuniformCatmullRom:function(x0,x1,x2,x3,dt0,dt1,dt2){// compute tangents when parameterized in [t1,t2]
let t1=(x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1;let t2=(x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2;// rescale tangents for parametrization in [0,1]
t1*=dt1;t2*=dt1;init(x1,x2,t1,t2);},calc:function(t){const t2=t*t;const t3=t2*t;return c0+c1*t+c2*t2+c3*t3;}};}//
const tmp=new Vector3();const px=new CubicPoly(),py=new CubicPoly(),pz=new CubicPoly();class CatmullRomCurve3 extends Curve{constructor(points=[],closed=false,curveType='centripetal',tension=0.5){super();this.type='CatmullRomCurve3';this.points=points;this.closed=closed;this.curveType=curveType;this.tension=tension;}getPoint(t,optionalTarget=new Vector3()){const point=optionalTarget;const points=this.points;const l=points.length;const p=(l-(this.closed?0:1))*t;let intPoint=Math.floor(p);let weight=p-intPoint;if(this.closed){intPoint+=intPoint>0?0:(Math.floor(Math.abs(intPoint)/l)+1)*l;}else if(weight===0&&intPoint===l-1){intPoint=l-2;weight=1;}let p0,p3;// 4 points (p1 & p2 defined below)
if(this.closed||intPoint>0){p0=points[(intPoint-1)%l];}else{// extrapolate first point
tmp.subVectors(points[0],points[1]).add(points[0]);p0=tmp;}const p1=points[intPoint%l];const p2=points[(intPoint+1)%l];if(this.closed||intPoint+2<l){p3=points[(intPoint+2)%l];}else{// extrapolate last point
tmp.subVectors(points[l-1],points[l-2]).add(points[l-1]);p3=tmp;}if(this.curveType==='centripetal'||this.curveType==='chordal'){// init Centripetal / Chordal Catmull-Rom
const pow=this.curveType==='chordal'?0.5:0.25;let dt0=Math.pow(p0.distanceToSquared(p1),pow);let dt1=Math.pow(p1.distanceToSquared(p2),pow);let dt2=Math.pow(p2.distanceToSquared(p3),pow);// safety check for repeated points
if(dt1<1e-4)dt1=1.0;if(dt0<1e-4)dt0=dt1;if(dt2<1e-4)dt2=dt1;px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,p3.x,dt0,dt1,dt2);py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,p3.y,dt0,dt1,dt2);pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,p3.z,dt0,dt1,dt2);}else if(this.curveType==='catmullrom'){px.initCatmullRom(p0.x,p1.x,p2.x,p3.x,this.tension);py.initCatmullRom(p0.y,p1.y,p2.y,p3.y,this.tension);pz.initCatmullRom(p0.z,p1.z,p2.z,p3.z,this.tension);}point.set(px.calc(weight),py.calc(weight),pz.calc(weight));return point;}copy(source){super.copy(source);this.points=[];for(let i=0,l=source.points.length;i<l;i++){const point=source.points[i];this.points.push(point.clone());}this.closed=source.closed;this.curveType=source.curveType;this.tension=source.tension;return this;}toJSON(){const data=super.toJSON();data.points=[];for(let i=0,l=this.points.length;i<l;i++){const point=this.points[i];data.points.push(point.toArray());}data.closed=this.closed;data.curveType=this.curveType;data.tension=this.tension;return data;}fromJSON(json){super.fromJSON(json);this.points=[];for(let i=0,l=json.points.length;i<l;i++){const point=json.points[i];this.points.push(new Vector3().fromArray(point));}this.closed=json.closed;this.curveType=json.curveType;this.tension=json.tension;return this;}}exports.CatmullRomCurve3=CatmullRomCurve3;CatmullRomCurve3.prototype.isCatmullRomCurve3=true;/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */function CatmullRom(t,p0,p1,p2,p3){const v0=(p2-p0)*0.5;const v1=(p3-p1)*0.5;const t2=t*t;const t3=t*t2;return(2*p1-2*p2+v0+v1)*t3+(-3*p1+3*p2-2*v0-v1)*t2+v0*t+p1;}//
function QuadraticBezierP0(t,p){const k=1-t;return k*k*p;}function QuadraticBezierP1(t,p){return 2*(1-t)*t*p;}function QuadraticBezierP2(t,p){return t*t*p;}function QuadraticBezier(t,p0,p1,p2){return QuadraticBezierP0(t,p0)+QuadraticBezierP1(t,p1)+QuadraticBezierP2(t,p2);}//
function CubicBezierP0(t,p){const k=1-t;return k*k*k*p;}function CubicBezierP1(t,p){const k=1-t;return 3*k*k*t*p;}function CubicBezierP2(t,p){return 3*(1-t)*t*t*p;}function CubicBezierP3(t,p){return t*t*t*p;}function CubicBezier(t,p0,p1,p2,p3){return CubicBezierP0(t,p0)+CubicBezierP1(t,p1)+CubicBezierP2(t,p2)+CubicBezierP3(t,p3);}class CubicBezierCurve extends Curve{constructor(v0=new Vector2(),v1=new Vector2(),v2=new Vector2(),v3=new Vector2()){super();this.type='CubicBezierCurve';this.v0=v0;this.v1=v1;this.v2=v2;this.v3=v3;}getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;const v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y));return point;}copy(source){super.copy(source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;}toJSON(){const data=super.toJSON();data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;}}exports.CubicBezierCurve=CubicBezierCurve;CubicBezierCurve.prototype.isCubicBezierCurve=true;class CubicBezierCurve3 extends Curve{constructor(v0=new Vector3(),v1=new Vector3(),v2=new Vector3(),v3=new Vector3()){super();this.type='CubicBezierCurve3';this.v0=v0;this.v1=v1;this.v2=v2;this.v3=v3;}getPoint(t,optionalTarget=new Vector3()){const point=optionalTarget;const v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y),CubicBezier(t,v0.z,v1.z,v2.z,v3.z));return point;}copy(source){super.copy(source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;}toJSON(){const data=super.toJSON();data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;}}exports.CubicBezierCurve3=CubicBezierCurve3;CubicBezierCurve3.prototype.isCubicBezierCurve3=true;class LineCurve extends Curve{constructor(v1=new Vector2(),v2=new Vector2()){super();this.type='LineCurve';this.v1=v1;this.v2=v2;}getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;if(t===1){point.copy(this.v2);}else{point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;}// Line curve is linear, so we can overwrite default getPointAt
getPointAt(u,optionalTarget){return this.getPoint(u,optionalTarget);}getTangent(t,optionalTarget){const tangent=optionalTarget||new Vector2();tangent.copy(this.v2).sub(this.v1).normalize();return tangent;}copy(source){super.copy(source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}toJSON(){const data=super.toJSON();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}exports.LineCurve=LineCurve;LineCurve.prototype.isLineCurve=true;class LineCurve3 extends Curve{constructor(v1=new Vector3(),v2=new Vector3()){super();this.type='LineCurve3';this.isLineCurve3=true;this.v1=v1;this.v2=v2;}getPoint(t,optionalTarget=new Vector3()){const point=optionalTarget;if(t===1){point.copy(this.v2);}else{point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;}// Line curve is linear, so we can overwrite default getPointAt
getPointAt(u,optionalTarget){return this.getPoint(u,optionalTarget);}copy(source){super.copy(source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}toJSON(){const data=super.toJSON();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}exports.LineCurve3=LineCurve3;class QuadraticBezierCurve extends Curve{constructor(v0=new Vector2(),v1=new Vector2(),v2=new Vector2()){super();this.type='QuadraticBezierCurve';this.v0=v0;this.v1=v1;this.v2=v2;}getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;const v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y));return point;}copy(source){super.copy(source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}toJSON(){const data=super.toJSON();data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}exports.QuadraticBezierCurve=QuadraticBezierCurve;QuadraticBezierCurve.prototype.isQuadraticBezierCurve=true;class QuadraticBezierCurve3 extends Curve{constructor(v0=new Vector3(),v1=new Vector3(),v2=new Vector3()){super();this.type='QuadraticBezierCurve3';this.v0=v0;this.v1=v1;this.v2=v2;}getPoint(t,optionalTarget=new Vector3()){const point=optionalTarget;const v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y),QuadraticBezier(t,v0.z,v1.z,v2.z));return point;}copy(source){super.copy(source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}toJSON(){const data=super.toJSON();data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}exports.QuadraticBezierCurve3=QuadraticBezierCurve3;QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3=true;class SplineCurve extends Curve{constructor(points=[]){super();this.type='SplineCurve';this.points=points;}getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;const points=this.points;const p=(points.length-1)*t;const intPoint=Math.floor(p);const weight=p-intPoint;const p0=points[intPoint===0?intPoint:intPoint-1];const p1=points[intPoint];const p2=points[intPoint>points.length-2?points.length-1:intPoint+1];const p3=points[intPoint>points.length-3?points.length-1:intPoint+2];point.set(CatmullRom(weight,p0.x,p1.x,p2.x,p3.x),CatmullRom(weight,p0.y,p1.y,p2.y,p3.y));return point;}copy(source){super.copy(source);this.points=[];for(let i=0,l=source.points.length;i<l;i++){const point=source.points[i];this.points.push(point.clone());}return this;}toJSON(){const data=super.toJSON();data.points=[];for(let i=0,l=this.points.length;i<l;i++){const point=this.points[i];data.points.push(point.toArray());}return data;}fromJSON(json){super.fromJSON(json);this.points=[];for(let i=0,l=json.points.length;i<l;i++){const point=json.points[i];this.points.push(new Vector2().fromArray(point));}return this;}}exports.SplineCurve=SplineCurve;SplineCurve.prototype.isSplineCurve=true;var Curves=/*#__PURE__*/Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/class CurvePath extends Curve{constructor(){super();this.type='CurvePath';this.curves=[];this.autoClose=false;// Automatically closes the path
}add(curve){this.curves.push(curve);}closePath(){// Add a line curve if start and end of lines are not connected
const startPoint=this.curves[0].getPoint(0);const endPoint=this.curves[this.curves.length-1].getPoint(1);if(!startPoint.equals(endPoint)){this.curves.push(new LineCurve(endPoint,startPoint));}}// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:
// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')
getPoint(t,optionalTarget){const d=t*this.getLength();const curveLengths=this.getCurveLengths();let i=0;// To think about boundaries points.
while(i<curveLengths.length){if(curveLengths[i]>=d){const diff=curveLengths[i]-d;const curve=this.curves[i];const segmentLength=curve.getLength();const u=segmentLength===0?0:1-diff/segmentLength;return curve.getPointAt(u,optionalTarget);}i++;}return null;// loop where sum != 0, sum > d , sum+1 <d
}// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength
getLength(){const lens=this.getCurveLengths();return lens[lens.length-1];}// cacheLengths must be recalculated.
updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths();}// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.
getCurveLengths(){// We use cache values if curves and cache array are same length
if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths;}// Get length of sub-curve
// Push sums into cached array
const lengths=[];let sums=0;for(let i=0,l=this.curves.length;i<l;i++){sums+=this.curves[i].getLength();lengths.push(sums);}this.cacheLengths=lengths;return lengths;}getSpacedPoints(divisions=40){const points=[];for(let i=0;i<=divisions;i++){points.push(this.getPoint(i/divisions));}if(this.autoClose){points.push(points[0]);}return points;}getPoints(divisions=12){const points=[];let last;for(let i=0,curves=this.curves;i<curves.length;i++){const curve=curves[i];const resolution=curve.isEllipseCurve?divisions*2:curve.isLineCurve||curve.isLineCurve3?1:curve.isSplineCurve?divisions*curve.points.length:divisions;const pts=curve.getPoints(resolution);for(let j=0;j<pts.length;j++){const point=pts[j];if(last&&last.equals(point))continue;// ensures no consecutive points are duplicates
points.push(point);last=point;}}if(this.autoClose&&points.length>1&&!points[points.length-1].equals(points[0])){points.push(points[0]);}return points;}copy(source){super.copy(source);this.curves=[];for(let i=0,l=source.curves.length;i<l;i++){const curve=source.curves[i];this.curves.push(curve.clone());}this.autoClose=source.autoClose;return this;}toJSON(){const data=super.toJSON();data.autoClose=this.autoClose;data.curves=[];for(let i=0,l=this.curves.length;i<l;i++){const curve=this.curves[i];data.curves.push(curve.toJSON());}return data;}fromJSON(json){super.fromJSON(json);this.autoClose=json.autoClose;this.curves=[];for(let i=0,l=json.curves.length;i<l;i++){const curve=json.curves[i];this.curves.push(new Curves[curve.type]().fromJSON(curve));}return this;}}exports.CurvePath=CurvePath;class Path extends CurvePath{constructor(points){super();this.type='Path';this.currentPoint=new Vector2();if(points){this.setFromPoints(points);}}setFromPoints(points){this.moveTo(points[0].x,points[0].y);for(let i=1,l=points.length;i<l;i++){this.lineTo(points[i].x,points[i].y);}return this;}moveTo(x,y){this.currentPoint.set(x,y);// TODO consider referencing vectors instead of copying?
return this;}lineTo(x,y){const curve=new LineCurve(this.currentPoint.clone(),new Vector2(x,y));this.curves.push(curve);this.currentPoint.set(x,y);return this;}quadraticCurveTo(aCPx,aCPy,aX,aY){const curve=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(aCPx,aCPy),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;}bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){const curve=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(aCP1x,aCP1y),new Vector2(aCP2x,aCP2y),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;}splineThru(pts/*Array of Vector*/){const npts=[this.currentPoint.clone()].concat(pts);const curve=new SplineCurve(npts);this.curves.push(curve);this.currentPoint.copy(pts[pts.length-1]);return this;}arc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){const x0=this.currentPoint.x;const y0=this.currentPoint.y;this.absarc(aX+x0,aY+y0,aRadius,aStartAngle,aEndAngle,aClockwise);return this;}absarc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);return this;}ellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){const x0=this.currentPoint.x;const y0=this.currentPoint.y;this.absellipse(aX+x0,aY+y0,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);return this;}absellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){const curve=new EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);if(this.curves.length>0){// if a previous curve is present, attempt to join
const firstPoint=curve.getPoint(0);if(!firstPoint.equals(this.currentPoint)){this.lineTo(firstPoint.x,firstPoint.y);}}this.curves.push(curve);const lastPoint=curve.getPoint(1);this.currentPoint.copy(lastPoint);return this;}copy(source){super.copy(source);this.currentPoint.copy(source.currentPoint);return this;}toJSON(){const data=super.toJSON();data.currentPoint=this.currentPoint.toArray();return data;}fromJSON(json){super.fromJSON(json);this.currentPoint.fromArray(json.currentPoint);return this;}}exports.Path=Path;class Shape extends Path{constructor(points){super(points);this.uuid=generateUUID();this.type='Shape';this.holes=[];}getPointsHoles(divisions){const holesPts=[];for(let i=0,l=this.holes.length;i<l;i++){holesPts[i]=this.holes[i].getPoints(divisions);}return holesPts;}// get points of shape and holes (keypoints based on segments parameter)
extractPoints(divisions){return{shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)};}copy(source){super.copy(source);this.holes=[];for(let i=0,l=source.holes.length;i<l;i++){const hole=source.holes[i];this.holes.push(hole.clone());}return this;}toJSON(){const data=super.toJSON();data.uuid=this.uuid;data.holes=[];for(let i=0,l=this.holes.length;i<l;i++){const hole=this.holes[i];data.holes.push(hole.toJSON());}return data;}fromJSON(json){super.fromJSON(json);this.uuid=json.uuid;this.holes=[];for(let i=0,l=json.holes.length;i<l;i++){const hole=json.holes[i];this.holes.push(new Path().fromJSON(hole));}return this;}}/**
 * Port from https://github.com/mapbox/earcut (v2.2.2)
 */exports.Shape=Shape;const Earcut={triangulate:function(data,holeIndices,dim=2){const hasHoles=holeIndices&&holeIndices.length;const outerLen=hasHoles?holeIndices[0]*dim:data.length;let outerNode=linkedList(data,0,outerLen,dim,true);const triangles=[];if(!outerNode||outerNode.next===outerNode.prev)return triangles;let minX,minY,maxX,maxY,x,y,invSize;if(hasHoles)outerNode=eliminateHoles(data,holeIndices,outerNode,dim);// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
if(data.length>80*dim){minX=maxX=data[0];minY=maxY=data[1];for(let i=dim;i<outerLen;i+=dim){x=data[i];y=data[i+1];if(x<minX)minX=x;if(y<minY)minY=y;if(x>maxX)maxX=x;if(y>maxY)maxY=y;}// minX, minY and invSize are later used to transform coords into integers for z-order calculation
invSize=Math.max(maxX-minX,maxY-minY);invSize=invSize!==0?1/invSize:0;}earcutLinked(outerNode,triangles,dim,minX,minY,invSize);return triangles;}};// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data,start,end,dim,clockwise){let i,last;if(clockwise===signedArea(data,start,end,dim)>0){for(i=start;i<end;i+=dim)last=insertNode(i,data[i],data[i+1],last);}else{for(i=end-dim;i>=start;i-=dim)last=insertNode(i,data[i],data[i+1],last);}if(last&&equals(last,last.next)){removeNode(last);last=last.next;}return last;}// eliminate colinear or duplicate points
function filterPoints(start,end){if(!start)return start;if(!end)end=start;let p=start,again;do{again=false;if(!p.steiner&&(equals(p,p.next)||area(p.prev,p,p.next)===0)){removeNode(p);p=end=p.prev;if(p===p.next)break;again=true;}else{p=p.next;}}while(again||p!==end);return end;}// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear,triangles,dim,minX,minY,invSize,pass){if(!ear)return;// interlink polygon nodes in z-order
if(!pass&&invSize)indexCurve(ear,minX,minY,invSize);let stop=ear,prev,next;// iterate through ears, slicing them one by one
while(ear.prev!==ear.next){prev=ear.prev;next=ear.next;if(invSize?isEarHashed(ear,minX,minY,invSize):isEar(ear)){// cut off the triangle
triangles.push(prev.i/dim);triangles.push(ear.i/dim);triangles.push(next.i/dim);removeNode(ear);// skipping the next vertex leads to less sliver triangles
ear=next.next;stop=next.next;continue;}ear=next;// if we looped through the whole remaining polygon and can't find any more ears
if(ear===stop){// try filtering points and slicing again
if(!pass){earcutLinked(filterPoints(ear),triangles,dim,minX,minY,invSize,1);// if this didn't work, try curing all small self-intersections locally
}else if(pass===1){ear=cureLocalIntersections(filterPoints(ear),triangles,dim);earcutLinked(ear,triangles,dim,minX,minY,invSize,2);// as a last resort, try splitting the remaining polygon into two
}else if(pass===2){splitEarcut(ear,triangles,dim,minX,minY,invSize);}break;}}}// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear){const a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
// now make sure we don't have other points inside the potential ear
let p=ear.next.next;while(p!==ear.prev){if(pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.next;}return true;}function isEarHashed(ear,minX,minY,invSize){const a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
// triangle bbox; min & max are calculated like this for speed
const minTX=a.x<b.x?a.x<c.x?a.x:c.x:b.x<c.x?b.x:c.x,minTY=a.y<b.y?a.y<c.y?a.y:c.y:b.y<c.y?b.y:c.y,maxTX=a.x>b.x?a.x>c.x?a.x:c.x:b.x>c.x?b.x:c.x,maxTY=a.y>b.y?a.y>c.y?a.y:c.y:b.y>c.y?b.y:c.y;// z-order range for the current triangle bbox;
const minZ=zOrder(minTX,minTY,minX,minY,invSize),maxZ=zOrder(maxTX,maxTY,minX,minY,invSize);let p=ear.prevZ,n=ear.nextZ;// look for points inside the triangle in both directions
while(p&&p.z>=minZ&&n&&n.z<=maxZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;if(n!==ear.prev&&n!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}// look for remaining points in decreasing z-order
while(p&&p.z>=minZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;}// look for remaining points in increasing z-order
while(n&&n.z<=maxZ){if(n!==ear.prev&&n!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}return true;}// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start,triangles,dim){let p=start;do{const a=p.prev,b=p.next.next;if(!equals(a,b)&&intersects(a,p,p.next,b)&&locallyInside(a,b)&&locallyInside(b,a)){triangles.push(a.i/dim);triangles.push(p.i/dim);triangles.push(b.i/dim);// remove two nodes involved
removeNode(p);removeNode(p.next);p=start=b;}p=p.next;}while(p!==start);return filterPoints(p);}// try splitting polygon into two and triangulate them independently
function splitEarcut(start,triangles,dim,minX,minY,invSize){// look for a valid diagonal that divides the polygon into two
let a=start;do{let b=a.next.next;while(b!==a.prev){if(a.i!==b.i&&isValidDiagonal(a,b)){// split the polygon in two by the diagonal
let c=splitPolygon(a,b);// filter colinear points around the cuts
a=filterPoints(a,a.next);c=filterPoints(c,c.next);// run earcut on each half
earcutLinked(a,triangles,dim,minX,minY,invSize);earcutLinked(c,triangles,dim,minX,minY,invSize);return;}b=b.next;}a=a.next;}while(a!==start);}// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data,holeIndices,outerNode,dim){const queue=[];let i,len,start,end,list;for(i=0,len=holeIndices.length;i<len;i++){start=holeIndices[i]*dim;end=i<len-1?holeIndices[i+1]*dim:data.length;list=linkedList(data,start,end,dim,false);if(list===list.next)list.steiner=true;queue.push(getLeftmost(list));}queue.sort(compareX);// process holes from left to right
for(i=0;i<queue.length;i++){eliminateHole(queue[i],outerNode);outerNode=filterPoints(outerNode,outerNode.next);}return outerNode;}function compareX(a,b){return a.x-b.x;}// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole,outerNode){outerNode=findHoleBridge(hole,outerNode);if(outerNode){const b=splitPolygon(outerNode,hole);// filter collinear points around the cuts
filterPoints(outerNode,outerNode.next);filterPoints(b,b.next);}}// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole,outerNode){let p=outerNode;const hx=hole.x;const hy=hole.y;let qx=-Infinity,m;// find a segment intersected by a ray from the hole's leftmost point to the left;
// segment's endpoint with lesser x will be potential connection point
do{if(hy<=p.y&&hy>=p.next.y&&p.next.y!==p.y){const x=p.x+(hy-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(x<=hx&&x>qx){qx=x;if(x===hx){if(hy===p.y)return p;if(hy===p.next.y)return p.next;}m=p.x<p.next.x?p:p.next;}}p=p.next;}while(p!==outerNode);if(!m)return null;if(hx===qx)return m;// hole touches outer segment; pick leftmost endpoint
// look for points inside the triangle of hole point, segment intersection and endpoint;
// if there are no points found, we have a valid connection;
// otherwise choose the point of the minimum angle with the ray as connection point
const stop=m,mx=m.x,my=m.y;let tanMin=Infinity,tan;p=m;do{if(hx>=p.x&&p.x>=mx&&hx!==p.x&&pointInTriangle(hy<my?hx:qx,hy,mx,my,hy<my?qx:hx,hy,p.x,p.y)){tan=Math.abs(hy-p.y)/(hx-p.x);// tangential
if(locallyInside(p,hole)&&(tan<tanMin||tan===tanMin&&(p.x>m.x||p.x===m.x&&sectorContainsSector(m,p)))){m=p;tanMin=tan;}}p=p.next;}while(p!==stop);return m;}// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m,p){return area(m.prev,m,p.prev)<0&&area(p.next,m,m.next)<0;}// interlink polygon nodes in z-order
function indexCurve(start,minX,minY,invSize){let p=start;do{if(p.z===null)p.z=zOrder(p.x,p.y,minX,minY,invSize);p.prevZ=p.prev;p.nextZ=p.next;p=p.next;}while(p!==start);p.prevZ.nextZ=null;p.prevZ=null;sortLinked(p);}// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list){let i,p,q,e,tail,numMerges,pSize,qSize,inSize=1;do{p=list;list=null;tail=null;numMerges=0;while(p){numMerges++;q=p;pSize=0;for(i=0;i<inSize;i++){pSize++;q=q.nextZ;if(!q)break;}qSize=inSize;while(pSize>0||qSize>0&&q){if(pSize!==0&&(qSize===0||!q||p.z<=q.z)){e=p;p=p.nextZ;pSize--;}else{e=q;q=q.nextZ;qSize--;}if(tail)tail.nextZ=e;else list=e;e.prevZ=tail;tail=e;}p=q;}tail.nextZ=null;inSize*=2;}while(numMerges>1);return list;}// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x,y,minX,minY,invSize){// coords are transformed into non-negative 15-bit integer range
x=32767*(x-minX)*invSize;y=32767*(y-minY)*invSize;x=(x|x<<8)&0x00FF00FF;x=(x|x<<4)&0x0F0F0F0F;x=(x|x<<2)&0x33333333;x=(x|x<<1)&0x55555555;y=(y|y<<8)&0x00FF00FF;y=(y|y<<4)&0x0F0F0F0F;y=(y|y<<2)&0x33333333;y=(y|y<<1)&0x55555555;return x|y<<1;}// find the leftmost node of a polygon ring
function getLeftmost(start){let p=start,leftmost=start;do{if(p.x<leftmost.x||p.x===leftmost.x&&p.y<leftmost.y)leftmost=p;p=p.next;}while(p!==start);return leftmost;}// check if a point lies within a convex triangle
function pointInTriangle(ax,ay,bx,by,cx,cy,px,py){return(cx-px)*(ay-py)-(ax-px)*(cy-py)>=0&&(ax-px)*(by-py)-(bx-px)*(ay-py)>=0&&(bx-px)*(cy-py)-(cx-px)*(by-py)>=0;}// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!intersectsPolygon(a,b)&&(// dones't intersect other edges
locallyInside(a,b)&&locallyInside(b,a)&&middleInside(a,b)&&(// locally visible
area(a.prev,a,b.prev)||area(a,b.prev,b))||// does not create opposite-facing sectors
equals(a,b)&&area(a.prev,a,a.next)>0&&area(b.prev,b,b.next)>0);// special zero-length case
}// signed area of a triangle
function area(p,q,r){return(q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);}// check if two points are equal
function equals(p1,p2){return p1.x===p2.x&&p1.y===p2.y;}// check if two segments intersect
function intersects(p1,q1,p2,q2){const o1=sign(area(p1,q1,p2));const o2=sign(area(p1,q1,q2));const o3=sign(area(p2,q2,p1));const o4=sign(area(p2,q2,q1));if(o1!==o2&&o3!==o4)return true;// general case
if(o1===0&&onSegment(p1,p2,q1))return true;// p1, q1 and p2 are collinear and p2 lies on p1q1
if(o2===0&&onSegment(p1,q2,q1))return true;// p1, q1 and q2 are collinear and q2 lies on p1q1
if(o3===0&&onSegment(p2,p1,q2))return true;// p2, q2 and p1 are collinear and p1 lies on p2q2
if(o4===0&&onSegment(p2,q1,q2))return true;// p2, q2 and q1 are collinear and q1 lies on p2q2
return false;}// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p,q,r){return q.x<=Math.max(p.x,r.x)&&q.x>=Math.min(p.x,r.x)&&q.y<=Math.max(p.y,r.y)&&q.y>=Math.min(p.y,r.y);}function sign(num){return num>0?1:num<0?-1:0;}// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a,b){let p=a;do{if(p.i!==a.i&&p.next.i!==a.i&&p.i!==b.i&&p.next.i!==b.i&&intersects(p,p.next,a,b))return true;p=p.next;}while(p!==a);return false;}// check if a polygon diagonal is locally inside the polygon
function locallyInside(a,b){return area(a.prev,a,a.next)<0?area(a,b,a.next)>=0&&area(a,a.prev,b)>=0:area(a,b,a.prev)<0||area(a,a.next,b)<0;}// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a,b){let p=a,inside=false;const px=(a.x+b.x)/2,py=(a.y+b.y)/2;do{if(p.y>py!==p.next.y>py&&p.next.y!==p.y&&px<(p.next.x-p.x)*(py-p.y)/(p.next.y-p.y)+p.x)inside=!inside;p=p.next;}while(p!==a);return inside;}// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a,b){const a2=new Node(a.i,a.x,a.y),b2=new Node(b.i,b.x,b.y),an=a.next,bp=b.prev;a.next=b;b.prev=a;a2.next=an;an.prev=a2;b2.next=a2;a2.prev=b2;bp.next=b2;b2.prev=bp;return b2;}// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i,x,y,last){const p=new Node(i,x,y);if(!last){p.prev=p;p.next=p;}else{p.next=last.next;p.prev=last;last.next.prev=p;last.next=p;}return p;}function removeNode(p){p.next.prev=p.prev;p.prev.next=p.next;if(p.prevZ)p.prevZ.nextZ=p.nextZ;if(p.nextZ)p.nextZ.prevZ=p.prevZ;}function Node(i,x,y){// vertex index in coordinates array
this.i=i;// vertex coordinates
this.x=x;this.y=y;// previous and next vertex nodes in a polygon ring
this.prev=null;this.next=null;// z-order curve value
this.z=null;// previous and next nodes in z-order
this.prevZ=null;this.nextZ=null;// indicates whether this is a steiner point
this.steiner=false;}function signedArea(data,start,end,dim){let sum=0;for(let i=start,j=end-dim;i<end;i+=dim){sum+=(data[j]-data[i])*(data[i+1]+data[j+1]);j=i;}return sum;}class ShapeUtils{// calculate area of the contour polygon
static area(contour){const n=contour.length;let a=0.0;for(let p=n-1,q=0;q<n;p=q++){a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;}return a*0.5;}static isClockWise(pts){return ShapeUtils.area(pts)<0;}static triangulateShape(contour,holes){const vertices=[];// flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
const holeIndices=[];// array of hole indices
const faces=[];// final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
removeDupEndPts(contour);addContour(vertices,contour);//
let holeIndex=contour.length;holes.forEach(removeDupEndPts);for(let i=0;i<holes.length;i++){holeIndices.push(holeIndex);holeIndex+=holes[i].length;addContour(vertices,holes[i]);}//
const triangles=Earcut.triangulate(vertices,holeIndices);//
for(let i=0;i<triangles.length;i+=3){faces.push(triangles.slice(i,i+3));}return faces;}}exports.ShapeUtils=ShapeUtils;function removeDupEndPts(points){const l=points.length;if(l>2&&points[l-1].equals(points[0])){points.pop();}}function addContour(vertices,contour){for(let i=0;i<contour.length;i++){vertices.push(contour[i].x);vertices.push(contour[i].y);}}/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */class ExtrudeGeometry extends BufferGeometry{constructor(shapes=new Shape([new Vector2(0.5,0.5),new Vector2(-0.5,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)]),options={}){super();this.type='ExtrudeGeometry';this.parameters={shapes:shapes,options:options};shapes=Array.isArray(shapes)?shapes:[shapes];const scope=this;const verticesArray=[];const uvArray=[];for(let i=0,l=shapes.length;i<l;i++){const shape=shapes[i];addShape(shape);}// build geometry
this.setAttribute('position',new Float32BufferAttribute(verticesArray,3));this.setAttribute('uv',new Float32BufferAttribute(uvArray,2));this.computeVertexNormals();// functions
function addShape(shape){const placeholder=[];// options
const curveSegments=options.curveSegments!==undefined?options.curveSegments:12;const steps=options.steps!==undefined?options.steps:1;let depth=options.depth!==undefined?options.depth:1;let bevelEnabled=options.bevelEnabled!==undefined?options.bevelEnabled:true;let bevelThickness=options.bevelThickness!==undefined?options.bevelThickness:0.2;let bevelSize=options.bevelSize!==undefined?options.bevelSize:bevelThickness-0.1;let bevelOffset=options.bevelOffset!==undefined?options.bevelOffset:0;let bevelSegments=options.bevelSegments!==undefined?options.bevelSegments:3;const extrudePath=options.extrudePath;const uvgen=options.UVGenerator!==undefined?options.UVGenerator:WorldUVGenerator;// deprecated options
if(options.amount!==undefined){console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');depth=options.amount;}//
let extrudePts,extrudeByPath=false;let splineTube,binormal,normal,position2;if(extrudePath){extrudePts=extrudePath.getSpacedPoints(steps);extrudeByPath=true;bevelEnabled=false;// bevels not supported for path extrusion
// SETUP TNB variables
// TODO1 - have a .isClosed in spline?
splineTube=extrudePath.computeFrenetFrames(steps,false);// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
binormal=new Vector3();normal=new Vector3();position2=new Vector3();}// Safeguards if bevels are not enabled
if(!bevelEnabled){bevelSegments=0;bevelThickness=0;bevelSize=0;bevelOffset=0;}// Variables initialization
const shapePoints=shape.extractPoints(curveSegments);let vertices=shapePoints.shape;const holes=shapePoints.holes;const reverse=!ShapeUtils.isClockWise(vertices);if(reverse){vertices=vertices.reverse();// Maybe we should also check if holes are in the opposite direction, just to be safe ...
for(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];if(ShapeUtils.isClockWise(ahole)){holes[h]=ahole.reverse();}}}const faces=ShapeUtils.triangulateShape(vertices,holes);/* Vertices */const contour=vertices;// vertices has all points but contour has only points of circumference
for(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];vertices=vertices.concat(ahole);}function scalePt2(pt,vec,size){if(!vec)console.error('THREE.ExtrudeGeometry: vec does not exist');return vec.clone().multiplyScalar(size).add(pt);}const vlen=vertices.length,flen=faces.length;// Find directions for point movement
function getBevelVec(inPt,inPrev,inNext){// computes for inPt the corresponding point inPt' on a new contour
//   shifted by 1 unit (length of normalized vector) to the left
// if we walk along contour clockwise, this new contour is outside the old one
//
// inPt' is the intersection of the two lines parallel to the two
//  adjacent edges of inPt at a distance of 1 unit on the left side.
let v_trans_x,v_trans_y,shrink_by;// resulting translation vector for inPt
// good reading for geometry algorithms (here: line-line intersection)
// http://geomalgorithms.com/a05-_intersect-1.html
const v_prev_x=inPt.x-inPrev.x,v_prev_y=inPt.y-inPrev.y;const v_next_x=inNext.x-inPt.x,v_next_y=inNext.y-inPt.y;const v_prev_lensq=v_prev_x*v_prev_x+v_prev_y*v_prev_y;// check for collinear edges
const collinear0=v_prev_x*v_next_y-v_prev_y*v_next_x;if(Math.abs(collinear0)>Number.EPSILON){// not collinear
// length of vectors for normalizing
const v_prev_len=Math.sqrt(v_prev_lensq);const v_next_len=Math.sqrt(v_next_x*v_next_x+v_next_y*v_next_y);// shift adjacent points by unit vectors to the left
const ptPrevShift_x=inPrev.x-v_prev_y/v_prev_len;const ptPrevShift_y=inPrev.y+v_prev_x/v_prev_len;const ptNextShift_x=inNext.x-v_next_y/v_next_len;const ptNextShift_y=inNext.y+v_next_x/v_next_len;// scaling factor for v_prev to intersection point
const sf=((ptNextShift_x-ptPrevShift_x)*v_next_y-(ptNextShift_y-ptPrevShift_y)*v_next_x)/(v_prev_x*v_next_y-v_prev_y*v_next_x);// vector from inPt to intersection point
v_trans_x=ptPrevShift_x+v_prev_x*sf-inPt.x;v_trans_y=ptPrevShift_y+v_prev_y*sf-inPt.y;// Don't normalize!, otherwise sharp corners become ugly
//  but prevent crazy spikes
const v_trans_lensq=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(v_trans_lensq<=2){return new Vector2(v_trans_x,v_trans_y);}else{shrink_by=Math.sqrt(v_trans_lensq/2);}}else{// handle special case of collinear edges
let direction_eq=false;// assumes: opposite
if(v_prev_x>Number.EPSILON){if(v_next_x>Number.EPSILON){direction_eq=true;}}else{if(v_prev_x<-Number.EPSILON){if(v_next_x<-Number.EPSILON){direction_eq=true;}}else{if(Math.sign(v_prev_y)===Math.sign(v_next_y)){direction_eq=true;}}}if(direction_eq){// console.log("Warning: lines are a straight sequence");
v_trans_x=-v_prev_y;v_trans_y=v_prev_x;shrink_by=Math.sqrt(v_prev_lensq);}else{// console.log("Warning: lines are a straight spike");
v_trans_x=v_prev_x;v_trans_y=v_prev_y;shrink_by=Math.sqrt(v_prev_lensq/2);}}return new Vector2(v_trans_x/shrink_by,v_trans_y/shrink_by);}const contourMovements=[];for(let i=0,il=contour.length,j=il-1,k=i+1;i<il;i++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)
// console.log('i,j,k', i, j , k)
contourMovements[i]=getBevelVec(contour[i],contour[j],contour[k]);}const holesMovements=[];let oneHoleMovements,verticesMovements=contourMovements.concat();for(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];oneHoleMovements=[];for(let i=0,il=ahole.length,j=il-1,k=i+1;i<il;i++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)
oneHoleMovements[i]=getBevelVec(ahole[i],ahole[j],ahole[k]);}holesMovements.push(oneHoleMovements);verticesMovements=verticesMovements.concat(oneHoleMovements);}// Loop bevelSegments, 1 for the front, 1 for the back
for(let b=0;b<bevelSegments;b++){//for ( b = bevelSegments; b > 0; b -- ) {
const t=b/bevelSegments;const z=bevelThickness*Math.cos(t*Math.PI/2);const bs=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;// contract shape
for(let i=0,il=contour.length;i<il;i++){const vert=scalePt2(contour[i],contourMovements[i],bs);v(vert.x,vert.y,-z);}// expand holes
for(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];oneHoleMovements=holesMovements[h];for(let i=0,il=ahole.length;i<il;i++){const vert=scalePt2(ahole[i],oneHoleMovements[i],bs);v(vert.x,vert.y,-z);}}}const bs=bevelSize+bevelOffset;// Back facing vertices
for(let i=0;i<vlen;i++){const vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];if(!extrudeByPath){v(vert.x,vert.y,0);}else{// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);position2.copy(extrudePts[0]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}// Add stepped vertices...
// Including front facing vertices
for(let s=1;s<=steps;s++){for(let i=0;i<vlen;i++){const vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];if(!extrudeByPath){v(vert.x,vert.y,depth/steps*s);}else{// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);position2.copy(extrudePts[s]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}}// Add bevel segments planes
//for ( b = 1; b <= bevelSegments; b ++ ) {
for(let b=bevelSegments-1;b>=0;b--){const t=b/bevelSegments;const z=bevelThickness*Math.cos(t*Math.PI/2);const bs=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;// contract shape
for(let i=0,il=contour.length;i<il;i++){const vert=scalePt2(contour[i],contourMovements[i],bs);v(vert.x,vert.y,depth+z);}// expand holes
for(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];oneHoleMovements=holesMovements[h];for(let i=0,il=ahole.length;i<il;i++){const vert=scalePt2(ahole[i],oneHoleMovements[i],bs);if(!extrudeByPath){v(vert.x,vert.y,depth+z);}else{v(vert.x,vert.y+extrudePts[steps-1].y,extrudePts[steps-1].x+z);}}}}/* Faces */ // Top and bottom faces
buildLidFaces();// Sides faces
buildSideFaces();/////  Internal functions
function buildLidFaces(){const start=verticesArray.length/3;if(bevelEnabled){let layer=0;// steps + 1
let offset=vlen*layer;// Bottom faces
for(let i=0;i<flen;i++){const face=faces[i];f3(face[2]+offset,face[1]+offset,face[0]+offset);}layer=steps+bevelSegments*2;offset=vlen*layer;// Top faces
for(let i=0;i<flen;i++){const face=faces[i];f3(face[0]+offset,face[1]+offset,face[2]+offset);}}else{// Bottom faces
for(let i=0;i<flen;i++){const face=faces[i];f3(face[2],face[1],face[0]);}// Top faces
for(let i=0;i<flen;i++){const face=faces[i];f3(face[0]+vlen*steps,face[1]+vlen*steps,face[2]+vlen*steps);}}scope.addGroup(start,verticesArray.length/3-start,0);}// Create faces for the z-sides of the shape
function buildSideFaces(){const start=verticesArray.length/3;let layeroffset=0;sidewalls(contour,layeroffset);layeroffset+=contour.length;for(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];sidewalls(ahole,layeroffset);//, true
layeroffset+=ahole.length;}scope.addGroup(start,verticesArray.length/3-start,1);}function sidewalls(contour,layeroffset){let i=contour.length;while(--i>=0){const j=i;let k=i-1;if(k<0)k=contour.length-1;//console.log('b', i,j, i-1, k,vertices.length);
for(let s=0,sl=steps+bevelSegments*2;s<sl;s++){const slen1=vlen*s;const slen2=vlen*(s+1);const a=layeroffset+j+slen1,b=layeroffset+k+slen1,c=layeroffset+k+slen2,d=layeroffset+j+slen2;f4(a,b,c,d);}}}function v(x,y,z){placeholder.push(x);placeholder.push(y);placeholder.push(z);}function f3(a,b,c){addVertex(a);addVertex(b);addVertex(c);const nextIndex=verticesArray.length/3;const uvs=uvgen.generateTopUV(scope,verticesArray,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[2]);}function f4(a,b,c,d){addVertex(a);addVertex(b);addVertex(d);addVertex(b);addVertex(c);addVertex(d);const nextIndex=verticesArray.length/3;const uvs=uvgen.generateSideWallUV(scope,verticesArray,nextIndex-6,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[3]);addUV(uvs[1]);addUV(uvs[2]);addUV(uvs[3]);}function addVertex(index){verticesArray.push(placeholder[index*3+0]);verticesArray.push(placeholder[index*3+1]);verticesArray.push(placeholder[index*3+2]);}function addUV(vector2){uvArray.push(vector2.x);uvArray.push(vector2.y);}}}toJSON(){const data=super.toJSON();const shapes=this.parameters.shapes;const options=this.parameters.options;return toJSON$1(shapes,options,data);}static fromJSON(data,shapes){const geometryShapes=[];for(let j=0,jl=data.shapes.length;j<jl;j++){const shape=shapes[data.shapes[j]];geometryShapes.push(shape);}const extrudePath=data.options.extrudePath;if(extrudePath!==undefined){data.options.extrudePath=new Curves[extrudePath.type]().fromJSON(extrudePath);}return new ExtrudeGeometry(geometryShapes,data.options);}}exports.ExtrudeGeometry=exports.ExtrudeBufferGeometry=ExtrudeGeometry;const WorldUVGenerator={generateTopUV:function(geometry,vertices,indexA,indexB,indexC){const a_x=vertices[indexA*3];const a_y=vertices[indexA*3+1];const b_x=vertices[indexB*3];const b_y=vertices[indexB*3+1];const c_x=vertices[indexC*3];const c_y=vertices[indexC*3+1];return[new Vector2(a_x,a_y),new Vector2(b_x,b_y),new Vector2(c_x,c_y)];},generateSideWallUV:function(geometry,vertices,indexA,indexB,indexC,indexD){const a_x=vertices[indexA*3];const a_y=vertices[indexA*3+1];const a_z=vertices[indexA*3+2];const b_x=vertices[indexB*3];const b_y=vertices[indexB*3+1];const b_z=vertices[indexB*3+2];const c_x=vertices[indexC*3];const c_y=vertices[indexC*3+1];const c_z=vertices[indexC*3+2];const d_x=vertices[indexD*3];const d_y=vertices[indexD*3+1];const d_z=vertices[indexD*3+2];if(Math.abs(a_y-b_y)<Math.abs(a_x-b_x)){return[new Vector2(a_x,1-a_z),new Vector2(b_x,1-b_z),new Vector2(c_x,1-c_z),new Vector2(d_x,1-d_z)];}else{return[new Vector2(a_y,1-a_z),new Vector2(b_y,1-b_z),new Vector2(c_y,1-c_z),new Vector2(d_y,1-d_z)];}}};function toJSON$1(shapes,options,data){data.shapes=[];if(Array.isArray(shapes)){for(let i=0,l=shapes.length;i<l;i++){const shape=shapes[i];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}if(options.extrudePath!==undefined)data.options.extrudePath=options.extrudePath.toJSON();return data;}class IcosahedronGeometry extends PolyhedronGeometry{constructor(radius=1,detail=0){const t=(1+Math.sqrt(5))/2;const vertices=[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1];const indices=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(vertices,indices,radius,detail);this.type='IcosahedronGeometry';this.parameters={radius:radius,detail:detail};}static fromJSON(data){return new IcosahedronGeometry(data.radius,data.detail);}}exports.IcosahedronGeometry=exports.IcosahedronBufferGeometry=IcosahedronGeometry;class LatheGeometry extends BufferGeometry{constructor(points=[new Vector2(0,0.5),new Vector2(0.5,0),new Vector2(0,-0.5)],segments=12,phiStart=0,phiLength=Math.PI*2){super();this.type='LatheGeometry';this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength};segments=Math.floor(segments);// clamp phiLength so it's in range of [ 0, 2PI ]
phiLength=clamp(phiLength,0,Math.PI*2);// buffers
const indices=[];const vertices=[];const uvs=[];const initNormals=[];const normals=[];// helper variables
const inverseSegments=1.0/segments;const vertex=new Vector3();const uv=new Vector2();const normal=new Vector3();const curNormal=new Vector3();const prevNormal=new Vector3();let dx=0;let dy=0;// pre-compute normals for initial "meridian"
for(let j=0;j<=points.length-1;j++){switch(j){case 0:// special handling for 1st vertex on path
dx=points[j+1].x-points[j].x;dy=points[j+1].y-points[j].y;normal.x=dy*1.0;normal.y=-dx;normal.z=dy*0.0;prevNormal.copy(normal);normal.normalize();initNormals.push(normal.x,normal.y,normal.z);break;case points.length-1:// special handling for last Vertex on path
initNormals.push(prevNormal.x,prevNormal.y,prevNormal.z);break;default:// default handling for all vertices in between
dx=points[j+1].x-points[j].x;dy=points[j+1].y-points[j].y;normal.x=dy*1.0;normal.y=-dx;normal.z=dy*0.0;curNormal.copy(normal);normal.x+=prevNormal.x;normal.y+=prevNormal.y;normal.z+=prevNormal.z;normal.normalize();initNormals.push(normal.x,normal.y,normal.z);prevNormal.copy(curNormal);}}// generate vertices, uvs and normals
for(let i=0;i<=segments;i++){const phi=phiStart+i*inverseSegments*phiLength;const sin=Math.sin(phi);const cos=Math.cos(phi);for(let j=0;j<=points.length-1;j++){// vertex
vertex.x=points[j].x*sin;vertex.y=points[j].y;vertex.z=points[j].x*cos;vertices.push(vertex.x,vertex.y,vertex.z);// uv
uv.x=i/segments;uv.y=j/(points.length-1);uvs.push(uv.x,uv.y);// normal
const x=initNormals[3*j+0]*sin;const y=initNormals[3*j+1];const z=initNormals[3*j+0]*cos;normals.push(x,y,z);}}// indices
for(let i=0;i<segments;i++){for(let j=0;j<points.length-1;j++){const base=j+i*points.length;const a=base;const b=base+points.length;const c=base+points.length+1;const d=base+1;// faces
indices.push(a,b,d);indices.push(c,d,b);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));this.setAttribute('normal',new Float32BufferAttribute(normals,3));}static fromJSON(data){return new LatheGeometry(data.points,data.segments,data.phiStart,data.phiLength);}}exports.LatheGeometry=exports.LatheBufferGeometry=LatheGeometry;class OctahedronGeometry extends PolyhedronGeometry{constructor(radius=1,detail=0){const vertices=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];const indices=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(vertices,indices,radius,detail);this.type='OctahedronGeometry';this.parameters={radius:radius,detail:detail};}static fromJSON(data){return new OctahedronGeometry(data.radius,data.detail);}}exports.OctahedronGeometry=exports.OctahedronBufferGeometry=OctahedronGeometry;class RingGeometry extends BufferGeometry{constructor(innerRadius=0.5,outerRadius=1,thetaSegments=8,phiSegments=1,thetaStart=0,thetaLength=Math.PI*2){super();this.type='RingGeometry';this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength};thetaSegments=Math.max(3,thetaSegments);phiSegments=Math.max(1,phiSegments);// buffers
const indices=[];const vertices=[];const normals=[];const uvs=[];// some helper variables
let radius=innerRadius;const radiusStep=(outerRadius-innerRadius)/phiSegments;const vertex=new Vector3();const uv=new Vector2();// generate vertices, normals and uvs
for(let j=0;j<=phiSegments;j++){for(let i=0;i<=thetaSegments;i++){// values are generate from the inside of the ring to the outside
const segment=thetaStart+i/thetaSegments*thetaLength;// vertex
vertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,0,1);// uv
uv.x=(vertex.x/outerRadius+1)/2;uv.y=(vertex.y/outerRadius+1)/2;uvs.push(uv.x,uv.y);}// increase the radius for next row of vertices
radius+=radiusStep;}// indices
for(let j=0;j<phiSegments;j++){const thetaSegmentLevel=j*(thetaSegments+1);for(let i=0;i<thetaSegments;i++){const segment=i+thetaSegmentLevel;const a=segment;const b=segment+thetaSegments+1;const c=segment+thetaSegments+2;const d=segment+1;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}static fromJSON(data){return new RingGeometry(data.innerRadius,data.outerRadius,data.thetaSegments,data.phiSegments,data.thetaStart,data.thetaLength);}}exports.RingGeometry=exports.RingBufferGeometry=RingGeometry;class ShapeGeometry extends BufferGeometry{constructor(shapes=new Shape([new Vector2(0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)]),curveSegments=12){super();this.type='ShapeGeometry';this.parameters={shapes:shapes,curveSegments:curveSegments};// buffers
const indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables
let groupStart=0;let groupCount=0;// allow single and array values for "shapes" parameter
if(Array.isArray(shapes)===false){addShape(shapes);}else{for(let i=0;i<shapes.length;i++){addShape(shapes[i]);this.addGroup(groupStart,groupCount,i);// enables MultiMaterial support
groupStart+=groupCount;groupCount=0;}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// helper functions
function addShape(shape){const indexOffset=vertices.length/3;const points=shape.extractPoints(curveSegments);let shapeVertices=points.shape;const shapeHoles=points.holes;// check direction of vertices
if(ShapeUtils.isClockWise(shapeVertices)===false){shapeVertices=shapeVertices.reverse();}for(let i=0,l=shapeHoles.length;i<l;i++){const shapeHole=shapeHoles[i];if(ShapeUtils.isClockWise(shapeHole)===true){shapeHoles[i]=shapeHole.reverse();}}const faces=ShapeUtils.triangulateShape(shapeVertices,shapeHoles);// join vertices of inner and outer paths to a single array
for(let i=0,l=shapeHoles.length;i<l;i++){const shapeHole=shapeHoles[i];shapeVertices=shapeVertices.concat(shapeHole);}// vertices, normals, uvs
for(let i=0,l=shapeVertices.length;i<l;i++){const vertex=shapeVertices[i];vertices.push(vertex.x,vertex.y,0);normals.push(0,0,1);uvs.push(vertex.x,vertex.y);// world uvs
}// incides
for(let i=0,l=faces.length;i<l;i++){const face=faces[i];const a=face[0]+indexOffset;const b=face[1]+indexOffset;const c=face[2]+indexOffset;indices.push(a,b,c);groupCount+=3;}}}toJSON(){const data=super.toJSON();const shapes=this.parameters.shapes;return toJSON(shapes,data);}static fromJSON(data,shapes){const geometryShapes=[];for(let j=0,jl=data.shapes.length;j<jl;j++){const shape=shapes[data.shapes[j]];geometryShapes.push(shape);}return new ShapeGeometry(geometryShapes,data.curveSegments);}}exports.ShapeGeometry=exports.ShapeBufferGeometry=ShapeGeometry;function toJSON(shapes,data){data.shapes=[];if(Array.isArray(shapes)){for(let i=0,l=shapes.length;i<l;i++){const shape=shapes[i];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}return data;}class SphereGeometry extends BufferGeometry{constructor(radius=1,widthSegments=32,heightSegments=16,phiStart=0,phiLength=Math.PI*2,thetaStart=0,thetaLength=Math.PI){super();this.type='SphereGeometry';this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength};widthSegments=Math.max(3,Math.floor(widthSegments));heightSegments=Math.max(2,Math.floor(heightSegments));const thetaEnd=Math.min(thetaStart+thetaLength,Math.PI);let index=0;const grid=[];const vertex=new Vector3();const normal=new Vector3();// buffers
const indices=[];const vertices=[];const normals=[];const uvs=[];// generate vertices, normals and uvs
for(let iy=0;iy<=heightSegments;iy++){const verticesRow=[];const v=iy/heightSegments;// special case for the poles
let uOffset=0;if(iy==0&&thetaStart==0){uOffset=0.5/widthSegments;}else if(iy==heightSegments&&thetaEnd==Math.PI){uOffset=-0.5/widthSegments;}for(let ix=0;ix<=widthSegments;ix++){const u=ix/widthSegments;// vertex
vertex.x=-radius*Math.cos(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);vertex.y=radius*Math.cos(thetaStart+v*thetaLength);vertex.z=radius*Math.sin(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normal.copy(vertex).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(u+uOffset,1-v);verticesRow.push(index++);}grid.push(verticesRow);}// indices
for(let iy=0;iy<heightSegments;iy++){for(let ix=0;ix<widthSegments;ix++){const a=grid[iy][ix+1];const b=grid[iy][ix];const c=grid[iy+1][ix];const d=grid[iy+1][ix+1];if(iy!==0||thetaStart>0)indices.push(a,b,d);if(iy!==heightSegments-1||thetaEnd<Math.PI)indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}static fromJSON(data){return new SphereGeometry(data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength);}}exports.SphereGeometry=exports.SphereBufferGeometry=SphereGeometry;class TetrahedronGeometry extends PolyhedronGeometry{constructor(radius=1,detail=0){const vertices=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];const indices=[2,1,0,0,3,2,1,3,0,2,3,1];super(vertices,indices,radius,detail);this.type='TetrahedronGeometry';this.parameters={radius:radius,detail:detail};}static fromJSON(data){return new TetrahedronGeometry(data.radius,data.detail);}}exports.TetrahedronGeometry=exports.TetrahedronBufferGeometry=TetrahedronGeometry;class TorusGeometry extends BufferGeometry{constructor(radius=1,tube=0.4,radialSegments=8,tubularSegments=6,arc=Math.PI*2){super();this.type='TorusGeometry';this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc};radialSegments=Math.floor(radialSegments);tubularSegments=Math.floor(tubularSegments);// buffers
const indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables
const center=new Vector3();const vertex=new Vector3();const normal=new Vector3();// generate vertices, normals and uvs
for(let j=0;j<=radialSegments;j++){for(let i=0;i<=tubularSegments;i++){const u=i/tubularSegments*arc;const v=j/radialSegments*Math.PI*2;// vertex
vertex.x=(radius+tube*Math.cos(v))*Math.cos(u);vertex.y=(radius+tube*Math.cos(v))*Math.sin(u);vertex.z=tube*Math.sin(v);vertices.push(vertex.x,vertex.y,vertex.z);// normal
center.x=radius*Math.cos(u);center.y=radius*Math.sin(u);normal.subVectors(vertex,center).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(i/tubularSegments);uvs.push(j/radialSegments);}}// generate indices
for(let j=1;j<=radialSegments;j++){for(let i=1;i<=tubularSegments;i++){// indices
const a=(tubularSegments+1)*j+i-1;const b=(tubularSegments+1)*(j-1)+i-1;const c=(tubularSegments+1)*(j-1)+i;const d=(tubularSegments+1)*j+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}static fromJSON(data){return new TorusGeometry(data.radius,data.tube,data.radialSegments,data.tubularSegments,data.arc);}}exports.TorusGeometry=exports.TorusBufferGeometry=TorusGeometry;class TorusKnotGeometry extends BufferGeometry{constructor(radius=1,tube=0.4,tubularSegments=64,radialSegments=8,p=2,q=3){super();this.type='TorusKnotGeometry';this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q};tubularSegments=Math.floor(tubularSegments);radialSegments=Math.floor(radialSegments);// buffers
const indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables
const vertex=new Vector3();const normal=new Vector3();const P1=new Vector3();const P2=new Vector3();const B=new Vector3();const T=new Vector3();const N=new Vector3();// generate vertices, normals and uvs
for(let i=0;i<=tubularSegments;++i){// the radian "u" is used to calculate the position on the torus curve of the current tubular segement
const u=i/tubularSegments*p*Math.PI*2;// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
calculatePositionOnCurve(u,p,q,radius,P1);calculatePositionOnCurve(u+0.01,p,q,radius,P2);// calculate orthonormal basis
T.subVectors(P2,P1);N.addVectors(P2,P1);B.crossVectors(T,N);N.crossVectors(B,T);// normalize B, N. T can be ignored, we don't use it
B.normalize();N.normalize();for(let j=0;j<=radialSegments;++j){// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
const v=j/radialSegments*Math.PI*2;const cx=-tube*Math.cos(v);const cy=tube*Math.sin(v);// now calculate the final vertex position.
// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
vertex.x=P1.x+(cx*N.x+cy*B.x);vertex.y=P1.y+(cx*N.y+cy*B.y);vertex.z=P1.z+(cx*N.z+cy*B.z);vertices.push(vertex.x,vertex.y,vertex.z);// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
normal.subVectors(vertex,P1).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(i/tubularSegments);uvs.push(j/radialSegments);}}// generate indices
for(let j=1;j<=tubularSegments;j++){for(let i=1;i<=radialSegments;i++){// indices
const a=(radialSegments+1)*(j-1)+(i-1);const b=(radialSegments+1)*j+(i-1);const c=(radialSegments+1)*j+i;const d=(radialSegments+1)*(j-1)+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// this function calculates the current position on the torus curve
function calculatePositionOnCurve(u,p,q,radius,position){const cu=Math.cos(u);const su=Math.sin(u);const quOverP=q/p*u;const cs=Math.cos(quOverP);position.x=radius*(2+cs)*0.5*cu;position.y=radius*(2+cs)*su*0.5;position.z=radius*Math.sin(quOverP)*0.5;}}static fromJSON(data){return new TorusKnotGeometry(data.radius,data.tube,data.tubularSegments,data.radialSegments,data.p,data.q);}}exports.TorusKnotGeometry=exports.TorusKnotBufferGeometry=TorusKnotGeometry;class TubeGeometry extends BufferGeometry{constructor(path=new QuadraticBezierCurve3(new Vector3(-1,-1,0),new Vector3(-1,1,0),new Vector3(1,1,0)),tubularSegments=64,radius=1,radialSegments=8,closed=false){super();this.type='TubeGeometry';this.parameters={path:path,tubularSegments:tubularSegments,radius:radius,radialSegments:radialSegments,closed:closed};const frames=path.computeFrenetFrames(tubularSegments,closed);// expose internals
this.tangents=frames.tangents;this.normals=frames.normals;this.binormals=frames.binormals;// helper variables
const vertex=new Vector3();const normal=new Vector3();const uv=new Vector2();let P=new Vector3();// buffer
const vertices=[];const normals=[];const uvs=[];const indices=[];// create buffer data
generateBufferData();// build geometry
this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// functions
function generateBufferData(){for(let i=0;i<tubularSegments;i++){generateSegment(i);}// if the geometry is not closed, generate the last row of vertices and normals
// at the regular position on the given path
//
// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
generateSegment(closed===false?tubularSegments:0);// uvs are generated in a separate function.
// this makes it easy compute correct values for closed geometries
generateUVs();// finally create faces
generateIndices();}function generateSegment(i){// we use getPointAt to sample evenly distributed points from the given path
P=path.getPointAt(i/tubularSegments,P);// retrieve corresponding normal and binormal
const N=frames.normals[i];const B=frames.binormals[i];// generate normals and vertices for the current segment
for(let j=0;j<=radialSegments;j++){const v=j/radialSegments*Math.PI*2;const sin=Math.sin(v);const cos=-Math.cos(v);// normal
normal.x=cos*N.x+sin*B.x;normal.y=cos*N.y+sin*B.y;normal.z=cos*N.z+sin*B.z;normal.normalize();normals.push(normal.x,normal.y,normal.z);// vertex
vertex.x=P.x+radius*normal.x;vertex.y=P.y+radius*normal.y;vertex.z=P.z+radius*normal.z;vertices.push(vertex.x,vertex.y,vertex.z);}}function generateIndices(){for(let j=1;j<=tubularSegments;j++){for(let i=1;i<=radialSegments;i++){const a=(radialSegments+1)*(j-1)+(i-1);const b=(radialSegments+1)*j+(i-1);const c=(radialSegments+1)*j+i;const d=(radialSegments+1)*(j-1)+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}}function generateUVs(){for(let i=0;i<=tubularSegments;i++){for(let j=0;j<=radialSegments;j++){uv.x=i/tubularSegments;uv.y=j/radialSegments;uvs.push(uv.x,uv.y);}}}}toJSON(){const data=super.toJSON();data.path=this.parameters.path.toJSON();return data;}static fromJSON(data){// This only works for built-in curves (e.g. CatmullRomCurve3).
// User defined curves or instances of CurvePath will not be deserialized.
return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path),data.tubularSegments,data.radius,data.radialSegments,data.closed);}}exports.TubeGeometry=exports.TubeBufferGeometry=TubeGeometry;class WireframeGeometry extends BufferGeometry{constructor(geometry=null){super();this.type='WireframeGeometry';this.parameters={geometry:geometry};if(geometry!==null){// buffer
const vertices=[];const edges=new Set();// helper variables
const start=new Vector3();const end=new Vector3();if(geometry.index!==null){// indexed BufferGeometry
const position=geometry.attributes.position;const indices=geometry.index;let groups=geometry.groups;if(groups.length===0){groups=[{start:0,count:indices.count,materialIndex:0}];}// create a data structure that contains all eges without duplicates
for(let o=0,ol=groups.length;o<ol;++o){const group=groups[o];const groupStart=group.start;const groupCount=group.count;for(let i=groupStart,l=groupStart+groupCount;i<l;i+=3){for(let j=0;j<3;j++){const index1=indices.getX(i+j);const index2=indices.getX(i+(j+1)%3);start.fromBufferAttribute(position,index1);end.fromBufferAttribute(position,index2);if(isUniqueEdge(start,end,edges)===true){vertices.push(start.x,start.y,start.z);vertices.push(end.x,end.y,end.z);}}}}}else{// non-indexed BufferGeometry
const position=geometry.attributes.position;for(let i=0,l=position.count/3;i<l;i++){for(let j=0;j<3;j++){// three edges per triangle, an edge is represented as (index1, index2)
// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
const index1=3*i+j;const index2=3*i+(j+1)%3;start.fromBufferAttribute(position,index1);end.fromBufferAttribute(position,index2);if(isUniqueEdge(start,end,edges)===true){vertices.push(start.x,start.y,start.z);vertices.push(end.x,end.y,end.z);}}}}// build geometry
this.setAttribute('position',new Float32BufferAttribute(vertices,3));}}}exports.WireframeGeometry=WireframeGeometry;function isUniqueEdge(start,end,edges){const hash1=`${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;const hash2=`${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;// coincident edge
if(edges.has(hash1)===true||edges.has(hash2)===true){return false;}else{edges.add(hash1);edges.add(hash2);return true;}}var Geometries=/*#__PURE__*/Object.freeze({__proto__:null,BoxGeometry:BoxGeometry,BoxBufferGeometry:BoxGeometry,CircleGeometry:CircleGeometry,CircleBufferGeometry:CircleGeometry,ConeGeometry:ConeGeometry,ConeBufferGeometry:ConeGeometry,CylinderGeometry:CylinderGeometry,CylinderBufferGeometry:CylinderGeometry,DodecahedronGeometry:DodecahedronGeometry,DodecahedronBufferGeometry:DodecahedronGeometry,EdgesGeometry:EdgesGeometry,ExtrudeGeometry:ExtrudeGeometry,ExtrudeBufferGeometry:ExtrudeGeometry,IcosahedronGeometry:IcosahedronGeometry,IcosahedronBufferGeometry:IcosahedronGeometry,LatheGeometry:LatheGeometry,LatheBufferGeometry:LatheGeometry,OctahedronGeometry:OctahedronGeometry,OctahedronBufferGeometry:OctahedronGeometry,PlaneGeometry:PlaneGeometry,PlaneBufferGeometry:PlaneGeometry,PolyhedronGeometry:PolyhedronGeometry,PolyhedronBufferGeometry:PolyhedronGeometry,RingGeometry:RingGeometry,RingBufferGeometry:RingGeometry,ShapeGeometry:ShapeGeometry,ShapeBufferGeometry:ShapeGeometry,SphereGeometry:SphereGeometry,SphereBufferGeometry:SphereGeometry,TetrahedronGeometry:TetrahedronGeometry,TetrahedronBufferGeometry:TetrahedronGeometry,TorusGeometry:TorusGeometry,TorusBufferGeometry:TorusGeometry,TorusKnotGeometry:TorusKnotGeometry,TorusKnotBufferGeometry:TorusKnotGeometry,TubeGeometry:TubeGeometry,TubeBufferGeometry:TubeGeometry,WireframeGeometry:WireframeGeometry});/**
 * parameters = {
 *  color: <THREE.Color>
 * }
 */class ShadowMaterial extends Material{constructor(parameters){super();this.type='ShadowMaterial';this.color=new Color(0x000000);this.transparent=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);return this;}}exports.ShadowMaterial=ShadowMaterial;ShadowMaterial.prototype.isShadowMaterial=true;class RawShaderMaterial extends ShaderMaterial{constructor(parameters){super(parameters);this.type='RawShaderMaterial';}}exports.RawShaderMaterial=RawShaderMaterial;RawShaderMaterial.prototype.isRawShaderMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */class MeshStandardMaterial extends Material{constructor(parameters){super();this.defines={'STANDARD':''};this.type='MeshStandardMaterial';this.color=new Color(0xffffff);// diffuse
this.roughness=1.0;this.metalness=0.0;this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapIntensity=1.0;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.flatShading=false;this.setValues(parameters);}copy(source){super.copy(source);this.defines={'STANDARD':''};this.color.copy(source.color);this.roughness=source.roughness;this.metalness=source.metalness;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.roughnessMap=source.roughnessMap;this.metalnessMap=source.metalnessMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapIntensity=source.envMapIntensity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.flatShading=source.flatShading;return this;}}exports.MeshStandardMaterial=MeshStandardMaterial;MeshStandardMaterial.prototype.isMeshStandardMaterial=true;/**
 * parameters = {
 *  clearcoat: <float>,
 *  clearcoatMap: new THREE.Texture( <Image> ),
 *  clearcoatRoughness: <float>,
 *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
 *  clearcoatNormalScale: <Vector2>,
 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
 *
 *  ior: <float>,
 *  reflectivity: <float>,
 *
 *  sheen: <float>,
 *  sheenColor: <Color>,
 *  sheenColorMap: new THREE.Texture( <Image> ),
 *  sheenRoughness: <float>,
 *  sheenRoughnessMap: new THREE.Texture( <Image> ),
 *
 *  transmission: <float>,
 *  transmissionMap: new THREE.Texture( <Image> ),
 *
 *  thickness: <float>,
 *  thicknessMap: new THREE.Texture( <Image> ),
 *  attenuationDistance: <float>,
 *  attenuationColor: <Color>,
 *
 *  specularIntensity: <float>,
 *  specularIntensityMap: new THREE.Texture( <Image> ),
 *  specularColor: <Color>,
 *  specularColorMap: new THREE.Texture( <Image> )
 * }
 */class MeshPhysicalMaterial extends MeshStandardMaterial{constructor(parameters){super();this.defines={'STANDARD':'','PHYSICAL':''};this.type='MeshPhysicalMaterial';this.clearcoatMap=null;this.clearcoatRoughness=0.0;this.clearcoatRoughnessMap=null;this.clearcoatNormalScale=new Vector2(1,1);this.clearcoatNormalMap=null;this.ior=1.5;Object.defineProperty(this,'reflectivity',{get:function(){return clamp(2.5*(this.ior-1)/(this.ior+1),0,1);},set:function(reflectivity){this.ior=(1+0.4*reflectivity)/(1-0.4*reflectivity);}});this.sheenColor=new Color(0x000000);this.sheenColorMap=null;this.sheenRoughness=1.0;this.sheenRoughnessMap=null;this.transmissionMap=null;this.thickness=0;this.thicknessMap=null;this.attenuationDistance=0.0;this.attenuationColor=new Color(1,1,1);this.specularIntensity=1.0;this.specularIntensityMap=null;this.specularColor=new Color(1,1,1);this.specularColorMap=null;this._sheen=0.0;this._clearcoat=0;this._transmission=0;this.setValues(parameters);}get sheen(){return this._sheen;}set sheen(value){if(this._sheen>0!==value>0){this.version++;}this._sheen=value;}get clearcoat(){return this._clearcoat;}set clearcoat(value){if(this._clearcoat>0!==value>0){this.version++;}this._clearcoat=value;}get transmission(){return this._transmission;}set transmission(value){if(this._transmission>0!==value>0){this.version++;}this._transmission=value;}copy(source){super.copy(source);this.defines={'STANDARD':'','PHYSICAL':''};this.clearcoat=source.clearcoat;this.clearcoatMap=source.clearcoatMap;this.clearcoatRoughness=source.clearcoatRoughness;this.clearcoatRoughnessMap=source.clearcoatRoughnessMap;this.clearcoatNormalMap=source.clearcoatNormalMap;this.clearcoatNormalScale.copy(source.clearcoatNormalScale);this.ior=source.ior;this.sheen=source.sheen;this.sheenColor.copy(source.sheenColor);this.sheenColorMap=source.sheenColorMap;this.sheenRoughness=source.sheenRoughness;this.sheenRoughnessMap=source.sheenRoughnessMap;this.transmission=source.transmission;this.transmissionMap=source.transmissionMap;this.thickness=source.thickness;this.thicknessMap=source.thicknessMap;this.attenuationDistance=source.attenuationDistance;this.attenuationColor.copy(source.attenuationColor);this.specularIntensity=source.specularIntensity;this.specularIntensityMap=source.specularIntensityMap;this.specularColor.copy(source.specularColor);this.specularColorMap=source.specularColorMap;return this;}}exports.MeshPhysicalMaterial=MeshPhysicalMaterial;MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.MultiplyOperation,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */class MeshPhongMaterial extends Material{constructor(parameters){super();this.type='MeshPhongMaterial';this.color=new Color(0xffffff);// diffuse
this.specular=new Color(0x111111);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.flatShading=false;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.specular.copy(source.specular);this.shininess=source.shininess;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.flatShading=source.flatShading;return this;}}exports.MeshPhongMaterial=MeshPhongMaterial;MeshPhongMaterial.prototype.isMeshPhongMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *
 *  map: new THREE.Texture( <Image> ),
 *  gradientMap: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */class MeshToonMaterial extends Material{constructor(parameters){super();this.defines={'TOON':''};this.type='MeshToonMaterial';this.color=new Color(0xffffff);this.map=null;this.gradientMap=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.gradientMap=source.gradientMap;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;return this;}}exports.MeshToonMaterial=MeshToonMaterial;MeshToonMaterial.prototype.isMeshToonMaterial=true;/**
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  flatShading: <bool>
 * }
 */class MeshNormalMaterial extends Material{constructor(parameters){super();this.type='MeshNormalMaterial';this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.flatShading=false;this.setValues(parameters);}copy(source){super.copy(source);this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.flatShading=source.flatShading;return this;}}exports.MeshNormalMaterial=MeshNormalMaterial;MeshNormalMaterial.prototype.isMeshNormalMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */class MeshLambertMaterial extends Material{constructor(parameters){super();this.type='MeshLambertMaterial';this.color=new Color(0xffffff);// diffuse
this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;return this;}}exports.MeshLambertMaterial=MeshLambertMaterial;MeshLambertMaterial.prototype.isMeshLambertMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  matcap: new THREE.Texture( <Image> ),
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  flatShading: <bool>
 * }
 */class MeshMatcapMaterial extends Material{constructor(parameters){super();this.defines={'MATCAP':''};this.type='MeshMatcapMaterial';this.color=new Color(0xffffff);// diffuse
this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.flatShading=false;this.setValues(parameters);}copy(source){super.copy(source);this.defines={'MATCAP':''};this.color.copy(source.color);this.matcap=source.matcap;this.map=source.map;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.flatShading=source.flatShading;return this;}}exports.MeshMatcapMaterial=MeshMatcapMaterial;MeshMatcapMaterial.prototype.isMeshMatcapMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */class LineDashedMaterial extends LineBasicMaterial{constructor(parameters){super();this.type='LineDashedMaterial';this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(parameters);}copy(source){super.copy(source);this.scale=source.scale;this.dashSize=source.dashSize;this.gapSize=source.gapSize;return this;}}exports.LineDashedMaterial=LineDashedMaterial;LineDashedMaterial.prototype.isLineDashedMaterial=true;const materialLib={ShadowMaterial,SpriteMaterial,RawShaderMaterial,ShaderMaterial,PointsMaterial,MeshPhysicalMaterial,MeshStandardMaterial,MeshPhongMaterial,MeshToonMaterial,MeshNormalMaterial,MeshLambertMaterial,MeshDepthMaterial,MeshDistanceMaterial,MeshBasicMaterial,MeshMatcapMaterial,LineDashedMaterial,LineBasicMaterial,Material};Material.fromType=function(type){return new materialLib[type]();};const AnimationUtils={// same as Array.prototype.slice, but also works on typed arrays
arraySlice:function(array,from,to){if(AnimationUtils.isTypedArray(array)){// in ios9 array.subarray(from, undefined) will return empty array
// but array.subarray(from) or array.subarray(from, len) is correct
return new array.constructor(array.subarray(from,to!==undefined?to:array.length));}return array.slice(from,to);},// converts an array to a specific type
convertArray:function(array,type,forceClone){if(!array||// let 'undefined' and 'null' pass
!forceClone&&array.constructor===type)return array;if(typeof type.BYTES_PER_ELEMENT==='number'){return new type(array);// create typed array
}return Array.prototype.slice.call(array);// create Array
},isTypedArray:function(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView);},// returns an array by which times and values can be sorted
getKeyframeOrder:function(times){function compareTime(i,j){return times[i]-times[j];}const n=times.length;const result=new Array(n);for(let i=0;i!==n;++i)result[i]=i;result.sort(compareTime);return result;},// uses the array previously returned by 'getKeyframeOrder' to sort data
sortedArray:function(values,stride,order){const nValues=values.length;const result=new values.constructor(nValues);for(let i=0,dstOffset=0;dstOffset!==nValues;++i){const srcOffset=order[i]*stride;for(let j=0;j!==stride;++j){result[dstOffset++]=values[srcOffset+j];}}return result;},// function for parsing AOS keyframe formats
flattenJSON:function(jsonKeys,times,values,valuePropertyName){let i=1,key=jsonKeys[0];while(key!==undefined&&key[valuePropertyName]===undefined){key=jsonKeys[i++];}if(key===undefined)return;// no data
let value=key[valuePropertyName];if(value===undefined)return;// no data
if(Array.isArray(value)){do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push.apply(values,value);// push all elements
}key=jsonKeys[i++];}while(key!==undefined);}else if(value.toArray!==undefined){// ...assume THREE.Math-ish
do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);value.toArray(values,values.length);}key=jsonKeys[i++];}while(key!==undefined);}else{// otherwise push as-is
do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push(value);}key=jsonKeys[i++];}while(key!==undefined);}},subclip:function(sourceClip,name,startFrame,endFrame,fps=30){const clip=sourceClip.clone();clip.name=name;const tracks=[];for(let i=0;i<clip.tracks.length;++i){const track=clip.tracks[i];const valueSize=track.getValueSize();const times=[];const values=[];for(let j=0;j<track.times.length;++j){const frame=track.times[j]*fps;if(frame<startFrame||frame>=endFrame)continue;times.push(track.times[j]);for(let k=0;k<valueSize;++k){values.push(track.values[j*valueSize+k]);}}if(times.length===0)continue;track.times=AnimationUtils.convertArray(times,track.times.constructor);track.values=AnimationUtils.convertArray(values,track.values.constructor);tracks.push(track);}clip.tracks=tracks;// find minimum .times value across all tracks in the trimmed clip
let minStartTime=Infinity;for(let i=0;i<clip.tracks.length;++i){if(minStartTime>clip.tracks[i].times[0]){minStartTime=clip.tracks[i].times[0];}}// shift all tracks such that clip begins at t=0
for(let i=0;i<clip.tracks.length;++i){clip.tracks[i].shift(-1*minStartTime);}clip.resetDuration();return clip;},makeClipAdditive:function(targetClip,referenceFrame=0,referenceClip=targetClip,fps=30){if(fps<=0)fps=30;const numTracks=referenceClip.tracks.length;const referenceTime=referenceFrame/fps;// Make each track's values relative to the values at the reference frame
for(let i=0;i<numTracks;++i){const referenceTrack=referenceClip.tracks[i];const referenceTrackType=referenceTrack.ValueTypeName;// Skip this track if it's non-numeric
if(referenceTrackType==='bool'||referenceTrackType==='string')continue;// Find the track in the target clip whose name and type matches the reference track
const targetTrack=targetClip.tracks.find(function(track){return track.name===referenceTrack.name&&track.ValueTypeName===referenceTrackType;});if(targetTrack===undefined)continue;let referenceOffset=0;const referenceValueSize=referenceTrack.getValueSize();if(referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){referenceOffset=referenceValueSize/3;}let targetOffset=0;const targetValueSize=targetTrack.getValueSize();if(targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){targetOffset=targetValueSize/3;}const lastIndex=referenceTrack.times.length-1;let referenceValue;// Find the value to subtract out of the track
if(referenceTime<=referenceTrack.times[0]){// Reference frame is earlier than the first keyframe, so just use the first keyframe
const startIndex=referenceOffset;const endIndex=referenceValueSize-referenceOffset;referenceValue=AnimationUtils.arraySlice(referenceTrack.values,startIndex,endIndex);}else if(referenceTime>=referenceTrack.times[lastIndex]){// Reference frame is after the last keyframe, so just use the last keyframe
const startIndex=lastIndex*referenceValueSize+referenceOffset;const endIndex=startIndex+referenceValueSize-referenceOffset;referenceValue=AnimationUtils.arraySlice(referenceTrack.values,startIndex,endIndex);}else{// Interpolate to the reference value
const interpolant=referenceTrack.createInterpolant();const startIndex=referenceOffset;const endIndex=referenceValueSize-referenceOffset;interpolant.evaluate(referenceTime);referenceValue=AnimationUtils.arraySlice(interpolant.resultBuffer,startIndex,endIndex);}// Conjugate the quaternion
if(referenceTrackType==='quaternion'){const referenceQuat=new Quaternion().fromArray(referenceValue).normalize().conjugate();referenceQuat.toArray(referenceValue);}// Subtract the reference value from all of the track values
const numTimes=targetTrack.times.length;for(let j=0;j<numTimes;++j){const valueStart=j*targetValueSize+targetOffset;if(referenceTrackType==='quaternion'){// Multiply the conjugate for quaternion track types
Quaternion.multiplyQuaternionsFlat(targetTrack.values,valueStart,referenceValue,0,targetTrack.values,valueStart);}else{const valueEnd=targetValueSize-targetOffset*2;// Subtract each value for all other numeric track types
for(let k=0;k<valueEnd;++k){targetTrack.values[valueStart+k]-=referenceValue[k];}}}}targetClip.blendMode=AdditiveAnimationBlendMode;return targetClip;}};/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */exports.AnimationUtils=AnimationUtils;class Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){this.parameterPositions=parameterPositions;this._cachedIndex=0;this.resultBuffer=resultBuffer!==undefined?resultBuffer:new sampleValues.constructor(sampleSize);this.sampleValues=sampleValues;this.valueSize=sampleSize;this.settings=null;this.DefaultSettings_={};}evaluate(t){const pp=this.parameterPositions;let i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];validate_interval:{seek:{let right;linear_scan:{//- See http://jsperf.com/comparison-to-undefined/3
//- slower code:
//-
//- 				if ( t >= t1 || t1 === undefined ) {
forward_scan:if(!(t<t1)){for(let giveUpAt=i1+2;;){if(t1===undefined){if(t<t0)break forward_scan;// after end
i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t,t0);}if(i1===giveUpAt)break;// this loop
t0=t1;t1=pp[++i1];if(t<t1){// we have arrived at the sought interval
break seek;}}// prepare binary search on the right side of the index
right=pp.length;break linear_scan;}//- slower code:
//-					if ( t < t0 || t0 === undefined ) {
if(!(t>=t0)){// looping?
const t1global=pp[1];if(t<t1global){i1=2;// + 1, using the scan for the details
t0=t1global;}// linear reverse scan
for(let giveUpAt=i1-2;;){if(t0===undefined){// before start
this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(i1===giveUpAt)break;// this loop
t1=t0;t0=pp[--i1-1];if(t>=t0){// we have arrived at the sought interval
break seek;}}// prepare binary search on the left side of the index
right=i1;i1=0;break linear_scan;}// the interval is valid
break validate_interval;}// linear scan
// binary search
while(i1<right){const mid=i1+right>>>1;if(t<pp[mid]){right=mid;}else{i1=mid+1;}}t1=pp[i1];t0=pp[i1-1];// check boundary cases, again
if(t0===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(t1===undefined){i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t0,t);}}// seek
this._cachedIndex=i1;this.intervalChanged_(i1,t0,t1);}// validate_interval
return this.interpolate_(i1,t0,t,t1);}getSettings_(){return this.settings||this.DefaultSettings_;}copySampleValue_(index){// copies a sample value to the result buffer
const result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=index*stride;for(let i=0;i!==stride;++i){result[i]=values[offset+i];}return result;}// Template methods for derived classes:
interpolate_(){throw new Error('call to abstract method');// implementations shall return this.resultBuffer
}intervalChanged_(){// empty
}}// ALIAS DEFINITIONS
exports.Interpolant=Interpolant;Interpolant.prototype.beforeStart_=Interpolant.prototype.copySampleValue_;Interpolant.prototype.afterEnd_=Interpolant.prototype.copySampleValue_;/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */class CubicInterpolant extends Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0;this.DefaultSettings_={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};}intervalChanged_(i1,t0,t1){const pp=this.parameterPositions;let iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(tPrev===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:// f'(t0) = 0
iPrev=i1;tPrev=2*t0-t1;break;case WrapAroundEnding:// use the other end of the curve
iPrev=pp.length-2;tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:// ZeroCurvatureEnding
// f''(t0) = 0 a.k.a. Natural Spline
iPrev=i1;tPrev=t1;}}if(tNext===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:// f'(tN) = 0
iNext=i1;tNext=2*t1-t0;break;case WrapAroundEnding:// use the other end of the curve
iNext=1;tNext=t1+pp[1]-pp[0];break;default:// ZeroCurvatureEnding
// f''(tN) = 0, a.k.a. Natural Spline
iNext=i1-1;tNext=t0;}}const halfDt=(t1-t0)*0.5,stride=this.valueSize;this._weightPrev=halfDt/(t0-tPrev);this._weightNext=halfDt/(tNext-t1);this._offsetPrev=iPrev*stride;this._offsetNext=iNext*stride;}interpolate_(i1,t0,t,t1){const result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,o1=i1*stride,o0=o1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0),pp=p*p,ppp=pp*p;// evaluate polynomials
const sP=-wP*ppp+2*wP*pp-wP*p;const s0=(1+wP)*ppp+(-1.5-2*wP)*pp+(-0.5+wP)*p+1;const s1=(-1-wN)*ppp+(1.5+wN)*pp+0.5*p;const sN=wN*ppp-wN*pp;// combine data linearly
for(let i=0;i!==stride;++i){result[i]=sP*values[oP+i]+s0*values[o0+i]+s1*values[o1+i]+sN*values[oN+i];}return result;}}exports.CubicInterpolant=CubicInterpolant;class LinearInterpolant extends Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer);}interpolate_(i1,t0,t,t1){const result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset1=i1*stride,offset0=offset1-stride,weight1=(t-t0)/(t1-t0),weight0=1-weight1;for(let i=0;i!==stride;++i){result[i]=values[offset0+i]*weight0+values[offset1+i]*weight1;}return result;}}/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 */exports.LinearInterpolant=LinearInterpolant;class DiscreteInterpolant extends Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer);}interpolate_(i1/*, t0, t, t1 */){return this.copySampleValue_(i1-1);}}exports.DiscreteInterpolant=DiscreteInterpolant;class KeyframeTrack{constructor(name,times,values,interpolation){if(name===undefined)throw new Error('THREE.KeyframeTrack: track name is undefined');if(times===undefined||times.length===0)throw new Error('THREE.KeyframeTrack: no keyframes in track named '+name);this.name=name;this.times=AnimationUtils.convertArray(times,this.TimeBufferType);this.values=AnimationUtils.convertArray(values,this.ValueBufferType);this.setInterpolation(interpolation||this.DefaultInterpolation);}// Serialization (in static context, because of constructor invocation
// and automatic invocation of .toJSON):
static toJSON(track){const trackType=track.constructor;let json;// derived classes can define a static toJSON method
if(trackType.toJSON!==this.toJSON){json=trackType.toJSON(track);}else{// by default, we assume the data can be serialized as-is
json={'name':track.name,'times':AnimationUtils.convertArray(track.times,Array),'values':AnimationUtils.convertArray(track.values,Array)};const interpolation=track.getInterpolation();if(interpolation!==track.DefaultInterpolation){json.interpolation=interpolation;}}json.type=track.ValueTypeName;// mandatory
return json;}InterpolantFactoryMethodDiscrete(result){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),result);}InterpolantFactoryMethodLinear(result){return new LinearInterpolant(this.times,this.values,this.getValueSize(),result);}InterpolantFactoryMethodSmooth(result){return new CubicInterpolant(this.times,this.values,this.getValueSize(),result);}setInterpolation(interpolation){let factoryMethod;switch(interpolation){case InterpolateDiscrete:factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth;break;}if(factoryMethod===undefined){const message='unsupported interpolation for '+this.ValueTypeName+' keyframe track named '+this.name;if(this.createInterpolant===undefined){// fall back to default, unless the default itself is messed up
if(interpolation!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation);}else{throw new Error(message);// fatal, in this case
}}console.warn('THREE.KeyframeTrack:',message);return this;}this.createInterpolant=factoryMethod;return this;}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth;}}getValueSize(){return this.values.length/this.times.length;}// move all keyframes either forwards or backwards in time
shift(timeOffset){if(timeOffset!==0.0){const times=this.times;for(let i=0,n=times.length;i!==n;++i){times[i]+=timeOffset;}}return this;}// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
scale(timeScale){if(timeScale!==1.0){const times=this.times;for(let i=0,n=times.length;i!==n;++i){times[i]*=timeScale;}}return this;}// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
trim(startTime,endTime){const times=this.times,nKeys=times.length;let from=0,to=nKeys-1;while(from!==nKeys&&times[from]<startTime){++from;}while(to!==-1&&times[to]>endTime){--to;}++to;// inclusive -> exclusive bound
if(from!==0||to!==nKeys){// empty tracks are forbidden, so keep at least one keyframe
if(from>=to){to=Math.max(to,1);from=to-1;}const stride=this.getValueSize();this.times=AnimationUtils.arraySlice(times,from,to);this.values=AnimationUtils.arraySlice(this.values,from*stride,to*stride);}return this;}// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
validate(){let valid=true;const valueSize=this.getValueSize();if(valueSize-Math.floor(valueSize)!==0){console.error('THREE.KeyframeTrack: Invalid value size in track.',this);valid=false;}const times=this.times,values=this.values,nKeys=times.length;if(nKeys===0){console.error('THREE.KeyframeTrack: Track is empty.',this);valid=false;}let prevTime=null;for(let i=0;i!==nKeys;i++){const currTime=times[i];if(typeof currTime==='number'&&isNaN(currTime)){console.error('THREE.KeyframeTrack: Time is not a valid number.',this,i,currTime);valid=false;break;}if(prevTime!==null&&prevTime>currTime){console.error('THREE.KeyframeTrack: Out of order keys.',this,i,currTime,prevTime);valid=false;break;}prevTime=currTime;}if(values!==undefined){if(AnimationUtils.isTypedArray(values)){for(let i=0,n=values.length;i!==n;++i){const value=values[i];if(isNaN(value)){console.error('THREE.KeyframeTrack: Value is not a valid number.',this,i,value);valid=false;break;}}}}return valid;}// removes equivalent sequential keys as common in morph target sequences
// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
optimize(){// times or values may be shared with other tracks, so overwriting is unsafe
const times=AnimationUtils.arraySlice(this.times),values=AnimationUtils.arraySlice(this.values),stride=this.getValueSize(),smoothInterpolation=this.getInterpolation()===InterpolateSmooth,lastIndex=times.length-1;let writeIndex=1;for(let i=1;i<lastIndex;++i){let keep=false;const time=times[i];const timeNext=times[i+1];// remove adjacent keyframes scheduled at the same time
if(time!==timeNext&&(i!==1||time!==times[0])){if(!smoothInterpolation){// remove unnecessary keyframes same as their neighbors
const offset=i*stride,offsetP=offset-stride,offsetN=offset+stride;for(let j=0;j!==stride;++j){const value=values[offset+j];if(value!==values[offsetP+j]||value!==values[offsetN+j]){keep=true;break;}}}else{keep=true;}}// in-place compaction
if(keep){if(i!==writeIndex){times[writeIndex]=times[i];const readOffset=i*stride,writeOffset=writeIndex*stride;for(let j=0;j!==stride;++j){values[writeOffset+j]=values[readOffset+j];}}++writeIndex;}}// flush last keyframe (compaction looks ahead)
if(lastIndex>0){times[writeIndex]=times[lastIndex];for(let readOffset=lastIndex*stride,writeOffset=writeIndex*stride,j=0;j!==stride;++j){values[writeOffset+j]=values[readOffset+j];}++writeIndex;}if(writeIndex!==times.length){this.times=AnimationUtils.arraySlice(times,0,writeIndex);this.values=AnimationUtils.arraySlice(values,0,writeIndex*stride);}else{this.times=times;this.values=values;}return this;}clone(){const times=AnimationUtils.arraySlice(this.times,0);const values=AnimationUtils.arraySlice(this.values,0);const TypedKeyframeTrack=this.constructor;const track=new TypedKeyframeTrack(this.name,times,values);// Interpolant argument to constructor is not saved, so copy the factory method directly.
track.createInterpolant=this.createInterpolant;return track;}}exports.KeyframeTrack=KeyframeTrack;KeyframeTrack.prototype.TimeBufferType=Float32Array;KeyframeTrack.prototype.ValueBufferType=Float32Array;KeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;/**
 * A Track of Boolean keyframe values.
 */class BooleanKeyframeTrack extends KeyframeTrack{}exports.BooleanKeyframeTrack=BooleanKeyframeTrack;BooleanKeyframeTrack.prototype.ValueTypeName='bool';BooleanKeyframeTrack.prototype.ValueBufferType=Array;BooleanKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;/**
 * A Track of keyframe values that represent color.
 */class ColorKeyframeTrack extends KeyframeTrack{}exports.ColorKeyframeTrack=ColorKeyframeTrack;ColorKeyframeTrack.prototype.ValueTypeName='color';/**
 * A Track of numeric keyframe values.
 */class NumberKeyframeTrack extends KeyframeTrack{}exports.NumberKeyframeTrack=NumberKeyframeTrack;NumberKeyframeTrack.prototype.ValueTypeName='number';/**
 * Spherical linear unit quaternion interpolant.
 */class QuaternionLinearInterpolant extends Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer);}interpolate_(i1,t0,t,t1){const result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,alpha=(t-t0)/(t1-t0);let offset=i1*stride;for(let end=offset+stride;offset!==end;offset+=4){Quaternion.slerpFlat(result,0,values,offset-stride,values,offset,alpha);}return result;}}/**
 * A Track of quaternion keyframe values.
 */exports.QuaternionLinearInterpolant=QuaternionLinearInterpolant;class QuaternionKeyframeTrack extends KeyframeTrack{InterpolantFactoryMethodLinear(result){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),result);}}exports.QuaternionKeyframeTrack=QuaternionKeyframeTrack;QuaternionKeyframeTrack.prototype.ValueTypeName='quaternion';// ValueBufferType is inherited
QuaternionKeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;/**
 * A Track that interpolates Strings
 */class StringKeyframeTrack extends KeyframeTrack{}exports.StringKeyframeTrack=StringKeyframeTrack;StringKeyframeTrack.prototype.ValueTypeName='string';StringKeyframeTrack.prototype.ValueBufferType=Array;StringKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;/**
 * A Track of vectored keyframe values.
 */class VectorKeyframeTrack extends KeyframeTrack{}exports.VectorKeyframeTrack=VectorKeyframeTrack;VectorKeyframeTrack.prototype.ValueTypeName='vector';class AnimationClip{constructor(name,duration=-1,tracks,blendMode=NormalAnimationBlendMode){this.name=name;this.tracks=tracks;this.duration=duration;this.blendMode=blendMode;this.uuid=generateUUID();// this means it should figure out its duration by scanning the tracks
if(this.duration<0){this.resetDuration();}}static parse(json){const tracks=[],jsonTracks=json.tracks,frameTime=1.0/(json.fps||1.0);for(let i=0,n=jsonTracks.length;i!==n;++i){tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));}const clip=new this(json.name,json.duration,tracks,json.blendMode);clip.uuid=json.uuid;return clip;}static toJSON(clip){const tracks=[],clipTracks=clip.tracks;const json={'name':clip.name,'duration':clip.duration,'tracks':tracks,'uuid':clip.uuid,'blendMode':clip.blendMode};for(let i=0,n=clipTracks.length;i!==n;++i){tracks.push(KeyframeTrack.toJSON(clipTracks[i]));}return json;}static CreateFromMorphTargetSequence(name,morphTargetSequence,fps,noLoop){const numMorphTargets=morphTargetSequence.length;const tracks=[];for(let i=0;i<numMorphTargets;i++){let times=[];let values=[];times.push((i+numMorphTargets-1)%numMorphTargets,i,(i+1)%numMorphTargets);values.push(0,1,0);const order=AnimationUtils.getKeyframeOrder(times);times=AnimationUtils.sortedArray(times,1,order);values=AnimationUtils.sortedArray(values,1,order);// if there is a key at the first frame, duplicate it as the
// last frame as well for perfect loop.
if(!noLoop&&times[0]===0){times.push(numMorphTargets);values.push(values[0]);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluences['+morphTargetSequence[i].name+']',times,values).scale(1.0/fps));}return new this(name,-1,tracks);}static findByName(objectOrClipArray,name){let clipArray=objectOrClipArray;if(!Array.isArray(objectOrClipArray)){const o=objectOrClipArray;clipArray=o.geometry&&o.geometry.animations||o.animations;}for(let i=0;i<clipArray.length;i++){if(clipArray[i].name===name){return clipArray[i];}}return null;}static CreateClipsFromMorphTargetSequences(morphTargets,fps,noLoop){const animationToMorphTargets={};// tested with https://regex101.com/ on trick sequences
// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
const pattern=/^([\w-]*?)([\d]+)$/;// sort morph target names into animation groups based
// patterns like Walk_001, Walk_002, Run_001, Run_002
for(let i=0,il=morphTargets.length;i<il;i++){const morphTarget=morphTargets[i];const parts=morphTarget.name.match(pattern);if(parts&&parts.length>1){const name=parts[1];let animationMorphTargets=animationToMorphTargets[name];if(!animationMorphTargets){animationToMorphTargets[name]=animationMorphTargets=[];}animationMorphTargets.push(morphTarget);}}const clips=[];for(const name in animationToMorphTargets){clips.push(this.CreateFromMorphTargetSequence(name,animationToMorphTargets[name],fps,noLoop));}return clips;}// parse the animation.hierarchy format
static parseAnimation(animation,bones){if(!animation){console.error('THREE.AnimationClip: No animation in JSONLoader data.');return null;}const addNonemptyTrack=function(trackType,trackName,animationKeys,propertyName,destTracks){// only return track if there are actually keys.
if(animationKeys.length!==0){const times=[];const values=[];AnimationUtils.flattenJSON(animationKeys,times,values,propertyName);// empty keys are filtered out, so check again
if(times.length!==0){destTracks.push(new trackType(trackName,times,values));}}};const tracks=[];const clipName=animation.name||'default';const fps=animation.fps||30;const blendMode=animation.blendMode;// automatic length determination in AnimationClip.
let duration=animation.length||-1;const hierarchyTracks=animation.hierarchy||[];for(let h=0;h<hierarchyTracks.length;h++){const animationKeys=hierarchyTracks[h].keys;// skip empty tracks
if(!animationKeys||animationKeys.length===0)continue;// process morph targets
if(animationKeys[0].morphTargets){// figure out all morph targets used in this track
const morphTargetNames={};let k;for(k=0;k<animationKeys.length;k++){if(animationKeys[k].morphTargets){for(let m=0;m<animationKeys[k].morphTargets.length;m++){morphTargetNames[animationKeys[k].morphTargets[m]]=-1;}}}// create a track for each morph target with all zero
// morphTargetInfluences except for the keys in which
// the morphTarget is named.
for(const morphTargetName in morphTargetNames){const times=[];const values=[];for(let m=0;m!==animationKeys[k].morphTargets.length;++m){const animationKey=animationKeys[k];times.push(animationKey.time);values.push(animationKey.morphTarget===morphTargetName?1:0);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluence['+morphTargetName+']',times,values));}duration=morphTargetNames.length*fps;}else{// ...assume skeletal animation
const boneName='.bones['+bones[h].name+']';addNonemptyTrack(VectorKeyframeTrack,boneName+'.position',animationKeys,'pos',tracks);addNonemptyTrack(QuaternionKeyframeTrack,boneName+'.quaternion',animationKeys,'rot',tracks);addNonemptyTrack(VectorKeyframeTrack,boneName+'.scale',animationKeys,'scl',tracks);}}if(tracks.length===0){return null;}const clip=new this(clipName,duration,tracks,blendMode);return clip;}resetDuration(){const tracks=this.tracks;let duration=0;for(let i=0,n=tracks.length;i!==n;++i){const track=this.tracks[i];duration=Math.max(duration,track.times[track.times.length-1]);}this.duration=duration;return this;}trim(){for(let i=0;i<this.tracks.length;i++){this.tracks[i].trim(0,this.duration);}return this;}validate(){let valid=true;for(let i=0;i<this.tracks.length;i++){valid=valid&&this.tracks[i].validate();}return valid;}optimize(){for(let i=0;i<this.tracks.length;i++){this.tracks[i].optimize();}return this;}clone(){const tracks=[];for(let i=0;i<this.tracks.length;i++){tracks.push(this.tracks[i].clone());}return new this.constructor(this.name,this.duration,tracks,this.blendMode);}toJSON(){return this.constructor.toJSON(this);}}exports.AnimationClip=AnimationClip;function getTrackTypeForValueTypeName(typeName){switch(typeName.toLowerCase()){case'scalar':case'double':case'float':case'number':case'integer':return NumberKeyframeTrack;case'vector':case'vector2':case'vector3':case'vector4':return VectorKeyframeTrack;case'color':return ColorKeyframeTrack;case'quaternion':return QuaternionKeyframeTrack;case'bool':case'boolean':return BooleanKeyframeTrack;case'string':return StringKeyframeTrack;}throw new Error('THREE.KeyframeTrack: Unsupported typeName: '+typeName);}function parseKeyframeTrack(json){if(json.type===undefined){throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');}const trackType=getTrackTypeForValueTypeName(json.type);if(json.times===undefined){const times=[],values=[];AnimationUtils.flattenJSON(json.keys,times,values,'value');json.times=times;json.values=values;}// derived classes can define a static parse method
if(trackType.parse!==undefined){return trackType.parse(json);}else{// by default, we assume a constructor compatible with the base
return new trackType(json.name,json.times,json.values,json.interpolation);}}const Cache={enabled:false,files:{},add:function(key,file){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Adding key:', key );
this.files[key]=file;},get:function(key){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Checking key:', key );
return this.files[key];},remove:function(key){delete this.files[key];},clear:function(){this.files={};}};exports.Cache=Cache;class LoadingManager{constructor(onLoad,onProgress,onError){const scope=this;let isLoading=false;let itemsLoaded=0;let itemsTotal=0;let urlModifier=undefined;const handlers=[];// Refer to #5689 for the reason why we don't set .onStart
// in the constructor
this.onStart=undefined;this.onLoad=onLoad;this.onProgress=onProgress;this.onError=onError;this.itemStart=function(url){itemsTotal++;if(isLoading===false){if(scope.onStart!==undefined){scope.onStart(url,itemsLoaded,itemsTotal);}}isLoading=true;};this.itemEnd=function(url){itemsLoaded++;if(scope.onProgress!==undefined){scope.onProgress(url,itemsLoaded,itemsTotal);}if(itemsLoaded===itemsTotal){isLoading=false;if(scope.onLoad!==undefined){scope.onLoad();}}};this.itemError=function(url){if(scope.onError!==undefined){scope.onError(url);}};this.resolveURL=function(url){if(urlModifier){return urlModifier(url);}return url;};this.setURLModifier=function(transform){urlModifier=transform;return this;};this.addHandler=function(regex,loader){handlers.push(regex,loader);return this;};this.removeHandler=function(regex){const index=handlers.indexOf(regex);if(index!==-1){handlers.splice(index,2);}return this;};this.getHandler=function(file){for(let i=0,l=handlers.length;i<l;i+=2){const regex=handlers[i];const loader=handlers[i+1];if(regex.global)regex.lastIndex=0;// see #17920
if(regex.test(file)){return loader;}}return null;};}}exports.LoadingManager=LoadingManager;const DefaultLoadingManager=new LoadingManager();exports.DefaultLoadingManager=DefaultLoadingManager;class Loader{constructor(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;this.crossOrigin='anonymous';this.withCredentials=false;this.path='';this.resourcePath='';this.requestHeader={};}load(){}loadAsync(url,onProgress){const scope=this;return new Promise(function(resolve,reject){scope.load(url,resolve,onProgress,reject);});}parse(){}setCrossOrigin(crossOrigin){this.crossOrigin=crossOrigin;return this;}setWithCredentials(value){this.withCredentials=value;return this;}setPath(path){this.path=path;return this;}setResourcePath(resourcePath){this.resourcePath=resourcePath;return this;}setRequestHeader(requestHeader){this.requestHeader=requestHeader;return this;}}exports.Loader=Loader;const loading={};class FileLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);const cached=Cache.get(url);if(cached!==undefined){this.manager.itemStart(url);setTimeout(()=>{if(onLoad)onLoad(cached);this.manager.itemEnd(url);},0);return cached;}// Check if request is duplicate
if(loading[url]!==undefined){loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});return;}// Initialise array for duplicate requests
loading[url]=[];loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});// create request
const req=new Request(url,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?'include':'same-origin'// An abort controller could be added within a future PR
});// record states ( avoid data race )
const mimeType=this.mimeType;const responseType=this.responseType;// start the fetch
fetch(req).then(response=>{if(response.status===200||response.status===0){// Some browsers return HTTP Status 0 when using non-http protocol
// e.g. 'file://' or 'data://'. Handle as success.
if(response.status===0){console.warn('THREE.FileLoader: HTTP Status 0 received.');}// Workaround: Checking if response.body === undefined for Alipay browser #23548
if(typeof ReadableStream==='undefined'||response.body===undefined||response.body.getReader===undefined){return response;}const callbacks=loading[url];const reader=response.body.getReader();const contentLength=response.headers.get('Content-Length');const total=contentLength?parseInt(contentLength):0;const lengthComputable=total!==0;let loaded=0;// periodically read data into the new stream tracking while download progress
const stream=new ReadableStream({start(controller){readData();function readData(){reader.read().then(({done,value})=>{if(done){controller.close();}else{loaded+=value.byteLength;const event=new ProgressEvent('progress',{lengthComputable,loaded,total});for(let i=0,il=callbacks.length;i<il;i++){const callback=callbacks[i];if(callback.onProgress)callback.onProgress(event);}controller.enqueue(value);readData();}});}}});return new Response(stream);}else{throw Error(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`);}}).then(response=>{switch(responseType){case'arraybuffer':return response.arrayBuffer();case'blob':return response.blob();case'document':return response.text().then(text=>{const parser=new DOMParser();return parser.parseFromString(text,mimeType);});case'json':return response.json();default:if(mimeType===undefined){return response.text();}else{// sniff encoding
const re=/charset="?([^;"\s]*)"?/i;const exec=re.exec(mimeType);const label=exec&&exec[1]?exec[1].toLowerCase():undefined;const decoder=new TextDecoder(label);return response.arrayBuffer().then(ab=>decoder.decode(ab));}}}).then(data=>{// Add to cache only on HTTP success, so that we do not cache
// error response bodies as proper responses to requests.
Cache.add(url,data);const callbacks=loading[url];delete loading[url];for(let i=0,il=callbacks.length;i<il;i++){const callback=callbacks[i];if(callback.onLoad)callback.onLoad(data);}}).catch(err=>{// Abort errors and other errors are handled the same
const callbacks=loading[url];if(callbacks===undefined){// When onLoad was called and url was deleted in `loading`
this.manager.itemError(url);throw err;}delete loading[url];for(let i=0,il=callbacks.length;i<il;i++){const callback=callbacks[i];if(callback.onError)callback.onError(err);}this.manager.itemError(url);}).finally(()=>{this.manager.itemEnd(url);});this.manager.itemStart(url);}setResponseType(value){this.responseType=value;return this;}setMimeType(value){this.mimeType=value;return this;}}exports.FileLoader=FileLoader;class AnimationLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){const scope=this;const loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);}parse(json){const animations=[];for(let i=0;i<json.length;i++){const clip=AnimationClip.parse(json[i]);animations.push(clip);}return animations;}}/**
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */exports.AnimationLoader=AnimationLoader;class CompressedTextureLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){const scope=this;const images=[];const texture=new CompressedTexture();const loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType('arraybuffer');loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(scope.withCredentials);let loaded=0;function loadTexture(i){loader.load(url[i],function(buffer){const texDatas=scope.parse(buffer,true);images[i]={width:texDatas.width,height:texDatas.height,format:texDatas.format,mipmaps:texDatas.mipmaps};loaded+=1;if(loaded===6){if(texDatas.mipmapCount===1)texture.minFilter=LinearFilter;texture.image=images;texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);}},onProgress,onError);}if(Array.isArray(url)){for(let i=0,il=url.length;i<il;++i){loadTexture(i);}}else{// compressed cubemap texture stored in a single DDS file
loader.load(url,function(buffer){const texDatas=scope.parse(buffer,true);if(texDatas.isCubemap){const faces=texDatas.mipmaps.length/texDatas.mipmapCount;for(let f=0;f<faces;f++){images[f]={mipmaps:[]};for(let i=0;i<texDatas.mipmapCount;i++){images[f].mipmaps.push(texDatas.mipmaps[f*texDatas.mipmapCount+i]);images[f].format=texDatas.format;images[f].width=texDatas.width;images[f].height=texDatas.height;}}texture.image=images;}else{texture.image.width=texDatas.width;texture.image.height=texDatas.height;texture.mipmaps=texDatas.mipmaps;}if(texDatas.mipmapCount===1){texture.minFilter=LinearFilter;}texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);},onProgress,onError);}return texture;}}exports.CompressedTextureLoader=CompressedTextureLoader;class ImageLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);const scope=this;const cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}const image=createElementNS('img');function onImageLoad(){removeEventListeners();Cache.add(url,this);if(onLoad)onLoad(this);scope.manager.itemEnd(url);}function onImageError(event){removeEventListeners();if(onError)onError(event);scope.manager.itemError(url);scope.manager.itemEnd(url);}function removeEventListeners(){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);}image.addEventListener('load',onImageLoad,false);image.addEventListener('error',onImageError,false);if(url.slice(0,5)!=='data:'){if(this.crossOrigin!==undefined)image.crossOrigin=this.crossOrigin;}scope.manager.itemStart(url);image.src=url;return image;}}exports.ImageLoader=ImageLoader;class CubeTextureLoader extends Loader{constructor(manager){super(manager);}load(urls,onLoad,onProgress,onError){const texture=new CubeTexture();const loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);let loaded=0;function loadTexture(i){loader.load(urls[i],function(image){texture.images[i]=image;loaded++;if(loaded===6){texture.needsUpdate=true;if(onLoad)onLoad(texture);}},undefined,onError);}for(let i=0;i<urls.length;++i){loadTexture(i);}return texture;}}/**
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */exports.CubeTextureLoader=CubeTextureLoader;class DataTextureLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){const scope=this;const texture=new DataTexture();const loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.setRequestHeader(this.requestHeader);loader.setPath(this.path);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(buffer){const texData=scope.parse(buffer);if(!texData)return;if(texData.image!==undefined){texture.image=texData.image;}else if(texData.data!==undefined){texture.image.width=texData.width;texture.image.height=texData.height;texture.image.data=texData.data;}texture.wrapS=texData.wrapS!==undefined?texData.wrapS:ClampToEdgeWrapping;texture.wrapT=texData.wrapT!==undefined?texData.wrapT:ClampToEdgeWrapping;texture.magFilter=texData.magFilter!==undefined?texData.magFilter:LinearFilter;texture.minFilter=texData.minFilter!==undefined?texData.minFilter:LinearFilter;texture.anisotropy=texData.anisotropy!==undefined?texData.anisotropy:1;if(texData.encoding!==undefined){texture.encoding=texData.encoding;}if(texData.flipY!==undefined){texture.flipY=texData.flipY;}if(texData.format!==undefined){texture.format=texData.format;}if(texData.type!==undefined){texture.type=texData.type;}if(texData.mipmaps!==undefined){texture.mipmaps=texData.mipmaps;texture.minFilter=LinearMipmapLinearFilter;// presumably...
}if(texData.mipmapCount===1){texture.minFilter=LinearFilter;}if(texData.generateMipmaps!==undefined){texture.generateMipmaps=texData.generateMipmaps;}texture.needsUpdate=true;if(onLoad)onLoad(texture,texData);},onProgress,onError);return texture;}}exports.DataTextureLoader=DataTextureLoader;class TextureLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){const texture=new Texture();const loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);loader.load(url,function(image){texture.image=image;texture.needsUpdate=true;if(onLoad!==undefined){onLoad(texture);}},onProgress,onError);return texture;}}exports.TextureLoader=TextureLoader;class Light extends Object3D{constructor(color,intensity=1){super();this.type='Light';this.color=new Color(color);this.intensity=intensity;}dispose(){// Empty here in base class; some subclasses override.
}copy(source){super.copy(source);this.color.copy(source.color);this.intensity=source.intensity;return this;}toJSON(meta){const data=super.toJSON(meta);data.object.color=this.color.getHex();data.object.intensity=this.intensity;if(this.groundColor!==undefined)data.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)data.object.distance=this.distance;if(this.angle!==undefined)data.object.angle=this.angle;if(this.decay!==undefined)data.object.decay=this.decay;if(this.penumbra!==undefined)data.object.penumbra=this.penumbra;if(this.shadow!==undefined)data.object.shadow=this.shadow.toJSON();return data;}}exports.Light=Light;Light.prototype.isLight=true;class HemisphereLight extends Light{constructor(skyColor,groundColor,intensity){super(skyColor,intensity);this.type='HemisphereLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.groundColor=new Color(groundColor);}copy(source){Light.prototype.copy.call(this,source);this.groundColor.copy(source.groundColor);return this;}}exports.HemisphereLight=HemisphereLight;HemisphereLight.prototype.isHemisphereLight=true;const _projScreenMatrix$1=/*@__PURE__*/new Matrix4();const _lightPositionWorld$1=/*@__PURE__*/new Vector3();const _lookTarget$1=/*@__PURE__*/new Vector3();class LightShadow{constructor(camera){this.camera=camera;this.bias=0;this.normalBias=0;this.radius=1;this.blurSamples=8;this.mapSize=new Vector2(512,512);this.map=null;this.mapPass=null;this.matrix=new Matrix4();this.autoUpdate=true;this.needsUpdate=false;this._frustum=new Frustum();this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)];}getViewportCount(){return this._viewportCount;}getFrustum(){return this._frustum;}updateMatrices(light){const shadowCamera=this.camera;const shadowMatrix=this.matrix;_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);shadowCamera.position.copy(_lightPositionWorld$1);_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);shadowCamera.lookAt(_lookTarget$1);shadowCamera.updateMatrixWorld();_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);shadowMatrix.set(0.5,0.0,0.0,0.5,0.0,0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);shadowMatrix.multiply(shadowCamera.projectionMatrix);shadowMatrix.multiply(shadowCamera.matrixWorldInverse);}getViewport(viewportIndex){return this._viewports[viewportIndex];}getFrameExtents(){return this._frameExtents;}dispose(){if(this.map){this.map.dispose();}if(this.mapPass){this.mapPass.dispose();}}copy(source){this.camera=source.camera.clone();this.bias=source.bias;this.radius=source.radius;this.mapSize.copy(source.mapSize);return this;}clone(){return new this.constructor().copy(this);}toJSON(){const object={};if(this.bias!==0)object.bias=this.bias;if(this.normalBias!==0)object.normalBias=this.normalBias;if(this.radius!==1)object.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)object.mapSize=this.mapSize.toArray();object.camera=this.camera.toJSON(false).object;delete object.camera.matrix;return object;}}class SpotLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(50,1,0.5,500));this.focus=1;}updateMatrices(light){const camera=this.camera;const fov=RAD2DEG*2*light.angle*this.focus;const aspect=this.mapSize.width/this.mapSize.height;const far=light.distance||camera.far;if(fov!==camera.fov||aspect!==camera.aspect||far!==camera.far){camera.fov=fov;camera.aspect=aspect;camera.far=far;camera.updateProjectionMatrix();}super.updateMatrices(light);}copy(source){super.copy(source);this.focus=source.focus;return this;}}SpotLightShadow.prototype.isSpotLightShadow=true;class SpotLight extends Light{constructor(color,intensity,distance=0,angle=Math.PI/3,penumbra=0,decay=1){super(color,intensity);this.type='SpotLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D();this.distance=distance;this.angle=angle;this.penumbra=penumbra;this.decay=decay;// for physically correct lights, should be 2.
this.shadow=new SpotLightShadow();}get power(){// compute the light's luminous power (in lumens) from its intensity (in candela)
// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
return this.intensity*Math.PI;}set power(power){// set the light's intensity (in candela) from the desired luminous power (in lumens)
this.intensity=power/Math.PI;}dispose(){this.shadow.dispose();}copy(source){super.copy(source);this.distance=source.distance;this.angle=source.angle;this.penumbra=source.penumbra;this.decay=source.decay;this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}}exports.SpotLight=SpotLight;SpotLight.prototype.isSpotLight=true;const _projScreenMatrix=/*@__PURE__*/new Matrix4();const _lightPositionWorld=/*@__PURE__*/new Vector3();const _lookTarget=/*@__PURE__*/new Vector3();class PointLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(90,1,0.5,500));this._frameExtents=new Vector2(4,2);this._viewportCount=6;this._viewports=[// These viewports map a cube-map onto a 2D texture with the
// following orientation:
//
//  xzXZ
//   y Y
//
// X - Positive x direction
// x - Negative x direction
// Y - Positive y direction
// y - Negative y direction
// Z - Positive z direction
// z - Negative z direction
// positive X
new Vector4(2,1,1,1),// negative X
new Vector4(0,1,1,1),// positive Z
new Vector4(3,1,1,1),// negative Z
new Vector4(1,1,1,1),// positive Y
new Vector4(3,0,1,1),// negative Y
new Vector4(1,0,1,1)];this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)];this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)];}updateMatrices(light,viewportIndex=0){const camera=this.camera;const shadowMatrix=this.matrix;const far=light.distance||camera.far;if(far!==camera.far){camera.far=far;camera.updateProjectionMatrix();}_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);camera.position.copy(_lightPositionWorld);_lookTarget.copy(camera.position);_lookTarget.add(this._cubeDirections[viewportIndex]);camera.up.copy(this._cubeUps[viewportIndex]);camera.lookAt(_lookTarget);camera.updateMatrixWorld();shadowMatrix.makeTranslation(-_lightPositionWorld.x,-_lightPositionWorld.y,-_lightPositionWorld.z);_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix);}}PointLightShadow.prototype.isPointLightShadow=true;class PointLight extends Light{constructor(color,intensity,distance=0,decay=1){super(color,intensity);this.type='PointLight';this.distance=distance;this.decay=decay;// for physically correct lights, should be 2.
this.shadow=new PointLightShadow();}get power(){// compute the light's luminous power (in lumens) from its intensity (in candela)
// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
return this.intensity*4*Math.PI;}set power(power){// set the light's intensity (in candela) from the desired luminous power (in lumens)
this.intensity=power/(4*Math.PI);}dispose(){this.shadow.dispose();}copy(source){super.copy(source);this.distance=source.distance;this.decay=source.decay;this.shadow=source.shadow.clone();return this;}}exports.PointLight=PointLight;PointLight.prototype.isPointLight=true;class DirectionalLightShadow extends LightShadow{constructor(){super(new OrthographicCamera(-5,5,5,-5,0.5,500));}}DirectionalLightShadow.prototype.isDirectionalLightShadow=true;class DirectionalLight extends Light{constructor(color,intensity){super(color,intensity);this.type='DirectionalLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D();this.shadow=new DirectionalLightShadow();}dispose(){this.shadow.dispose();}copy(source){super.copy(source);this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}}exports.DirectionalLight=DirectionalLight;DirectionalLight.prototype.isDirectionalLight=true;class AmbientLight extends Light{constructor(color,intensity){super(color,intensity);this.type='AmbientLight';}}exports.AmbientLight=AmbientLight;AmbientLight.prototype.isAmbientLight=true;class RectAreaLight extends Light{constructor(color,intensity,width=10,height=10){super(color,intensity);this.type='RectAreaLight';this.width=width;this.height=height;}get power(){// compute the light's luminous power (in lumens) from its intensity (in nits)
return this.intensity*this.width*this.height*Math.PI;}set power(power){// set the light's intensity (in nits) from the desired luminous power (in lumens)
this.intensity=power/(this.width*this.height*Math.PI);}copy(source){super.copy(source);this.width=source.width;this.height=source.height;return this;}toJSON(meta){const data=super.toJSON(meta);data.object.width=this.width;data.object.height=this.height;return data;}}exports.RectAreaLight=RectAreaLight;RectAreaLight.prototype.isRectAreaLight=true;/**
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */ // 3-band SH defined by 9 coefficients
class SphericalHarmonics3{constructor(){this.coefficients=[];for(let i=0;i<9;i++){this.coefficients.push(new Vector3());}}set(coefficients){for(let i=0;i<9;i++){this.coefficients[i].copy(coefficients[i]);}return this;}zero(){for(let i=0;i<9;i++){this.coefficients[i].set(0,0,0);}return this;}// get the radiance in the direction of the normal
// target is a Vector3
getAt(normal,target){// normal is assumed to be unit length
const x=normal.x,y=normal.y,z=normal.z;const coeff=this.coefficients;// band 0
target.copy(coeff[0]).multiplyScalar(0.282095);// band 1
target.addScaledVector(coeff[1],0.488603*y);target.addScaledVector(coeff[2],0.488603*z);target.addScaledVector(coeff[3],0.488603*x);// band 2
target.addScaledVector(coeff[4],1.092548*(x*y));target.addScaledVector(coeff[5],1.092548*(y*z));target.addScaledVector(coeff[6],0.315392*(3.0*z*z-1.0));target.addScaledVector(coeff[7],1.092548*(x*z));target.addScaledVector(coeff[8],0.546274*(x*x-y*y));return target;}// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
// target is a Vector3
// https://graphics.stanford.edu/papers/envmap/envmap.pdf
getIrradianceAt(normal,target){// normal is assumed to be unit length
const x=normal.x,y=normal.y,z=normal.z;const coeff=this.coefficients;// band 0
target.copy(coeff[0]).multiplyScalar(0.886227);// π * 0.282095
// band 1
target.addScaledVector(coeff[1],2.0*0.511664*y);// ( 2 * π / 3 ) * 0.488603
target.addScaledVector(coeff[2],2.0*0.511664*z);target.addScaledVector(coeff[3],2.0*0.511664*x);// band 2
target.addScaledVector(coeff[4],2.0*0.429043*x*y);// ( π / 4 ) * 1.092548
target.addScaledVector(coeff[5],2.0*0.429043*y*z);target.addScaledVector(coeff[6],0.743125*z*z-0.247708);// ( π / 4 ) * 0.315392 * 3
target.addScaledVector(coeff[7],2.0*0.429043*x*z);target.addScaledVector(coeff[8],0.429043*(x*x-y*y));// ( π / 4 ) * 0.546274
return target;}add(sh){for(let i=0;i<9;i++){this.coefficients[i].add(sh.coefficients[i]);}return this;}addScaledSH(sh,s){for(let i=0;i<9;i++){this.coefficients[i].addScaledVector(sh.coefficients[i],s);}return this;}scale(s){for(let i=0;i<9;i++){this.coefficients[i].multiplyScalar(s);}return this;}lerp(sh,alpha){for(let i=0;i<9;i++){this.coefficients[i].lerp(sh.coefficients[i],alpha);}return this;}equals(sh){for(let i=0;i<9;i++){if(!this.coefficients[i].equals(sh.coefficients[i])){return false;}}return true;}copy(sh){return this.set(sh.coefficients);}clone(){return new this.constructor().copy(this);}fromArray(array,offset=0){const coefficients=this.coefficients;for(let i=0;i<9;i++){coefficients[i].fromArray(array,offset+i*3);}return this;}toArray(array=[],offset=0){const coefficients=this.coefficients;for(let i=0;i<9;i++){coefficients[i].toArray(array,offset+i*3);}return array;}// evaluate the basis functions
// shBasis is an Array[ 9 ]
static getBasisAt(normal,shBasis){// normal is assumed to be unit length
const x=normal.x,y=normal.y,z=normal.z;// band 0
shBasis[0]=0.282095;// band 1
shBasis[1]=0.488603*y;shBasis[2]=0.488603*z;shBasis[3]=0.488603*x;// band 2
shBasis[4]=1.092548*x*y;shBasis[5]=1.092548*y*z;shBasis[6]=0.315392*(3*z*z-1);shBasis[7]=1.092548*x*z;shBasis[8]=0.546274*(x*x-y*y);}}exports.SphericalHarmonics3=SphericalHarmonics3;SphericalHarmonics3.prototype.isSphericalHarmonics3=true;class LightProbe extends Light{constructor(sh=new SphericalHarmonics3(),intensity=1){super(undefined,intensity);this.sh=sh;}copy(source){super.copy(source);this.sh.copy(source.sh);return this;}fromJSON(json){this.intensity=json.intensity;// TODO: Move this bit to Light.fromJSON();
this.sh.fromArray(json.sh);return this;}toJSON(meta){const data=super.toJSON(meta);data.object.sh=this.sh.toArray();return data;}}exports.LightProbe=LightProbe;LightProbe.prototype.isLightProbe=true;class MaterialLoader extends Loader{constructor(manager){super(manager);this.textures={};}load(url,onLoad,onProgress,onError){const scope=this;const loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);}parse(json){const textures=this.textures;function getTexture(name){if(textures[name]===undefined){console.warn('THREE.MaterialLoader: Undefined texture',name);}return textures[name];}const material=Material.fromType(json.type);if(json.uuid!==undefined)material.uuid=json.uuid;if(json.name!==undefined)material.name=json.name;if(json.color!==undefined&&material.color!==undefined)material.color.setHex(json.color);if(json.roughness!==undefined)material.roughness=json.roughness;if(json.metalness!==undefined)material.metalness=json.metalness;if(json.sheen!==undefined)material.sheen=json.sheen;if(json.sheenColor!==undefined)material.sheenColor=new Color().setHex(json.sheenColor);if(json.sheenRoughness!==undefined)material.sheenRoughness=json.sheenRoughness;if(json.emissive!==undefined&&material.emissive!==undefined)material.emissive.setHex(json.emissive);if(json.specular!==undefined&&material.specular!==undefined)material.specular.setHex(json.specular);if(json.specularIntensity!==undefined)material.specularIntensity=json.specularIntensity;if(json.specularColor!==undefined&&material.specularColor!==undefined)material.specularColor.setHex(json.specularColor);if(json.shininess!==undefined)material.shininess=json.shininess;if(json.clearcoat!==undefined)material.clearcoat=json.clearcoat;if(json.clearcoatRoughness!==undefined)material.clearcoatRoughness=json.clearcoatRoughness;if(json.transmission!==undefined)material.transmission=json.transmission;if(json.thickness!==undefined)material.thickness=json.thickness;if(json.attenuationDistance!==undefined)material.attenuationDistance=json.attenuationDistance;if(json.attenuationColor!==undefined&&material.attenuationColor!==undefined)material.attenuationColor.setHex(json.attenuationColor);if(json.fog!==undefined)material.fog=json.fog;if(json.flatShading!==undefined)material.flatShading=json.flatShading;if(json.blending!==undefined)material.blending=json.blending;if(json.combine!==undefined)material.combine=json.combine;if(json.side!==undefined)material.side=json.side;if(json.shadowSide!==undefined)material.shadowSide=json.shadowSide;if(json.opacity!==undefined)material.opacity=json.opacity;if(json.transparent!==undefined)material.transparent=json.transparent;if(json.alphaTest!==undefined)material.alphaTest=json.alphaTest;if(json.depthTest!==undefined)material.depthTest=json.depthTest;if(json.depthWrite!==undefined)material.depthWrite=json.depthWrite;if(json.colorWrite!==undefined)material.colorWrite=json.colorWrite;if(json.stencilWrite!==undefined)material.stencilWrite=json.stencilWrite;if(json.stencilWriteMask!==undefined)material.stencilWriteMask=json.stencilWriteMask;if(json.stencilFunc!==undefined)material.stencilFunc=json.stencilFunc;if(json.stencilRef!==undefined)material.stencilRef=json.stencilRef;if(json.stencilFuncMask!==undefined)material.stencilFuncMask=json.stencilFuncMask;if(json.stencilFail!==undefined)material.stencilFail=json.stencilFail;if(json.stencilZFail!==undefined)material.stencilZFail=json.stencilZFail;if(json.stencilZPass!==undefined)material.stencilZPass=json.stencilZPass;if(json.wireframe!==undefined)material.wireframe=json.wireframe;if(json.wireframeLinewidth!==undefined)material.wireframeLinewidth=json.wireframeLinewidth;if(json.wireframeLinecap!==undefined)material.wireframeLinecap=json.wireframeLinecap;if(json.wireframeLinejoin!==undefined)material.wireframeLinejoin=json.wireframeLinejoin;if(json.rotation!==undefined)material.rotation=json.rotation;if(json.linewidth!==1)material.linewidth=json.linewidth;if(json.dashSize!==undefined)material.dashSize=json.dashSize;if(json.gapSize!==undefined)material.gapSize=json.gapSize;if(json.scale!==undefined)material.scale=json.scale;if(json.polygonOffset!==undefined)material.polygonOffset=json.polygonOffset;if(json.polygonOffsetFactor!==undefined)material.polygonOffsetFactor=json.polygonOffsetFactor;if(json.polygonOffsetUnits!==undefined)material.polygonOffsetUnits=json.polygonOffsetUnits;if(json.dithering!==undefined)material.dithering=json.dithering;if(json.alphaToCoverage!==undefined)material.alphaToCoverage=json.alphaToCoverage;if(json.premultipliedAlpha!==undefined)material.premultipliedAlpha=json.premultipliedAlpha;if(json.visible!==undefined)material.visible=json.visible;if(json.toneMapped!==undefined)material.toneMapped=json.toneMapped;if(json.userData!==undefined)material.userData=json.userData;if(json.vertexColors!==undefined){if(typeof json.vertexColors==='number'){material.vertexColors=json.vertexColors>0?true:false;}else{material.vertexColors=json.vertexColors;}}// Shader Material
if(json.uniforms!==undefined){for(const name in json.uniforms){const uniform=json.uniforms[name];material.uniforms[name]={};switch(uniform.type){case't':material.uniforms[name].value=getTexture(uniform.value);break;case'c':material.uniforms[name].value=new Color().setHex(uniform.value);break;case'v2':material.uniforms[name].value=new Vector2().fromArray(uniform.value);break;case'v3':material.uniforms[name].value=new Vector3().fromArray(uniform.value);break;case'v4':material.uniforms[name].value=new Vector4().fromArray(uniform.value);break;case'm3':material.uniforms[name].value=new Matrix3().fromArray(uniform.value);break;case'm4':material.uniforms[name].value=new Matrix4().fromArray(uniform.value);break;default:material.uniforms[name].value=uniform.value;}}}if(json.defines!==undefined)material.defines=json.defines;if(json.vertexShader!==undefined)material.vertexShader=json.vertexShader;if(json.fragmentShader!==undefined)material.fragmentShader=json.fragmentShader;if(json.extensions!==undefined){for(const key in json.extensions){material.extensions[key]=json.extensions[key];}}// Deprecated
if(json.shading!==undefined)material.flatShading=json.shading===1;// THREE.FlatShading
// for PointsMaterial
if(json.size!==undefined)material.size=json.size;if(json.sizeAttenuation!==undefined)material.sizeAttenuation=json.sizeAttenuation;// maps
if(json.map!==undefined)material.map=getTexture(json.map);if(json.matcap!==undefined)material.matcap=getTexture(json.matcap);if(json.alphaMap!==undefined)material.alphaMap=getTexture(json.alphaMap);if(json.bumpMap!==undefined)material.bumpMap=getTexture(json.bumpMap);if(json.bumpScale!==undefined)material.bumpScale=json.bumpScale;if(json.normalMap!==undefined)material.normalMap=getTexture(json.normalMap);if(json.normalMapType!==undefined)material.normalMapType=json.normalMapType;if(json.normalScale!==undefined){let normalScale=json.normalScale;if(Array.isArray(normalScale)===false){// Blender exporter used to export a scalar. See #7459
normalScale=[normalScale,normalScale];}material.normalScale=new Vector2().fromArray(normalScale);}if(json.displacementMap!==undefined)material.displacementMap=getTexture(json.displacementMap);if(json.displacementScale!==undefined)material.displacementScale=json.displacementScale;if(json.displacementBias!==undefined)material.displacementBias=json.displacementBias;if(json.roughnessMap!==undefined)material.roughnessMap=getTexture(json.roughnessMap);if(json.metalnessMap!==undefined)material.metalnessMap=getTexture(json.metalnessMap);if(json.emissiveMap!==undefined)material.emissiveMap=getTexture(json.emissiveMap);if(json.emissiveIntensity!==undefined)material.emissiveIntensity=json.emissiveIntensity;if(json.specularMap!==undefined)material.specularMap=getTexture(json.specularMap);if(json.specularIntensityMap!==undefined)material.specularIntensityMap=getTexture(json.specularIntensityMap);if(json.specularColorMap!==undefined)material.specularColorMap=getTexture(json.specularColorMap);if(json.envMap!==undefined)material.envMap=getTexture(json.envMap);if(json.envMapIntensity!==undefined)material.envMapIntensity=json.envMapIntensity;if(json.reflectivity!==undefined)material.reflectivity=json.reflectivity;if(json.refractionRatio!==undefined)material.refractionRatio=json.refractionRatio;if(json.lightMap!==undefined)material.lightMap=getTexture(json.lightMap);if(json.lightMapIntensity!==undefined)material.lightMapIntensity=json.lightMapIntensity;if(json.aoMap!==undefined)material.aoMap=getTexture(json.aoMap);if(json.aoMapIntensity!==undefined)material.aoMapIntensity=json.aoMapIntensity;if(json.gradientMap!==undefined)material.gradientMap=getTexture(json.gradientMap);if(json.clearcoatMap!==undefined)material.clearcoatMap=getTexture(json.clearcoatMap);if(json.clearcoatRoughnessMap!==undefined)material.clearcoatRoughnessMap=getTexture(json.clearcoatRoughnessMap);if(json.clearcoatNormalMap!==undefined)material.clearcoatNormalMap=getTexture(json.clearcoatNormalMap);if(json.clearcoatNormalScale!==undefined)material.clearcoatNormalScale=new Vector2().fromArray(json.clearcoatNormalScale);if(json.transmissionMap!==undefined)material.transmissionMap=getTexture(json.transmissionMap);if(json.thicknessMap!==undefined)material.thicknessMap=getTexture(json.thicknessMap);if(json.sheenColorMap!==undefined)material.sheenColorMap=getTexture(json.sheenColorMap);if(json.sheenRoughnessMap!==undefined)material.sheenRoughnessMap=getTexture(json.sheenRoughnessMap);return material;}setTextures(value){this.textures=value;return this;}}exports.MaterialLoader=MaterialLoader;class LoaderUtils{static decodeText(array){if(typeof TextDecoder!=='undefined'){return new TextDecoder().decode(array);}// Avoid the String.fromCharCode.apply(null, array) shortcut, which
// throws a "maximum call stack size exceeded" error for large arrays.
let s='';for(let i=0,il=array.length;i<il;i++){// Implicitly assumes little-endian.
s+=String.fromCharCode(array[i]);}try{// merges multi-byte utf-8 characters.
return decodeURIComponent(escape(s));}catch(e){// see #16358
return s;}}static extractUrlBase(url){const index=url.lastIndexOf('/');if(index===-1)return'./';return url.slice(0,index+1);}static resolveURL(url,path){// Invalid URL
if(typeof url!=='string'||url==='')return'';// Host Relative URL
if(/^https?:\/\//i.test(path)&&/^\//.test(url)){path=path.replace(/(^https?:\/\/[^\/]+).*/i,'$1');}// Absolute URL http://,https://,//
if(/^(https?:)?\/\//i.test(url))return url;// Data URI
if(/^data:.*,.*$/i.test(url))return url;// Blob URL
if(/^blob:.*$/i.test(url))return url;// Relative URL
return path+url;}}exports.LoaderUtils=LoaderUtils;class InstancedBufferGeometry extends BufferGeometry{constructor(){super();this.type='InstancedBufferGeometry';this.instanceCount=Infinity;}copy(source){super.copy(source);this.instanceCount=source.instanceCount;return this;}clone(){return new this.constructor().copy(this);}toJSON(){const data=super.toJSON(this);data.instanceCount=this.instanceCount;data.isInstancedBufferGeometry=true;return data;}}exports.InstancedBufferGeometry=InstancedBufferGeometry;InstancedBufferGeometry.prototype.isInstancedBufferGeometry=true;class BufferGeometryLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){const scope=this;const loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);}parse(json){const interleavedBufferMap={};const arrayBufferMap={};function getInterleavedBuffer(json,uuid){if(interleavedBufferMap[uuid]!==undefined)return interleavedBufferMap[uuid];const interleavedBuffers=json.interleavedBuffers;const interleavedBuffer=interleavedBuffers[uuid];const buffer=getArrayBuffer(json,interleavedBuffer.buffer);const array=getTypedArray(interleavedBuffer.type,buffer);const ib=new InterleavedBuffer(array,interleavedBuffer.stride);ib.uuid=interleavedBuffer.uuid;interleavedBufferMap[uuid]=ib;return ib;}function getArrayBuffer(json,uuid){if(arrayBufferMap[uuid]!==undefined)return arrayBufferMap[uuid];const arrayBuffers=json.arrayBuffers;const arrayBuffer=arrayBuffers[uuid];const ab=new Uint32Array(arrayBuffer).buffer;arrayBufferMap[uuid]=ab;return ab;}const geometry=json.isInstancedBufferGeometry?new InstancedBufferGeometry():new BufferGeometry();const index=json.data.index;if(index!==undefined){const typedArray=getTypedArray(index.type,index.array);geometry.setIndex(new BufferAttribute(typedArray,1));}const attributes=json.data.attributes;for(const key in attributes){const attribute=attributes[key];let bufferAttribute;if(attribute.isInterleavedBufferAttribute){const interleavedBuffer=getInterleavedBuffer(json.data,attribute.data);bufferAttribute=new InterleavedBufferAttribute(interleavedBuffer,attribute.itemSize,attribute.offset,attribute.normalized);}else{const typedArray=getTypedArray(attribute.type,attribute.array);const bufferAttributeConstr=attribute.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;bufferAttribute=new bufferAttributeConstr(typedArray,attribute.itemSize,attribute.normalized);}if(attribute.name!==undefined)bufferAttribute.name=attribute.name;if(attribute.usage!==undefined)bufferAttribute.setUsage(attribute.usage);if(attribute.updateRange!==undefined){bufferAttribute.updateRange.offset=attribute.updateRange.offset;bufferAttribute.updateRange.count=attribute.updateRange.count;}geometry.setAttribute(key,bufferAttribute);}const morphAttributes=json.data.morphAttributes;if(morphAttributes){for(const key in morphAttributes){const attributeArray=morphAttributes[key];const array=[];for(let i=0,il=attributeArray.length;i<il;i++){const attribute=attributeArray[i];let bufferAttribute;if(attribute.isInterleavedBufferAttribute){const interleavedBuffer=getInterleavedBuffer(json.data,attribute.data);bufferAttribute=new InterleavedBufferAttribute(interleavedBuffer,attribute.itemSize,attribute.offset,attribute.normalized);}else{const typedArray=getTypedArray(attribute.type,attribute.array);bufferAttribute=new BufferAttribute(typedArray,attribute.itemSize,attribute.normalized);}if(attribute.name!==undefined)bufferAttribute.name=attribute.name;array.push(bufferAttribute);}geometry.morphAttributes[key]=array;}}const morphTargetsRelative=json.data.morphTargetsRelative;if(morphTargetsRelative){geometry.morphTargetsRelative=true;}const groups=json.data.groups||json.data.drawcalls||json.data.offsets;if(groups!==undefined){for(let i=0,n=groups.length;i!==n;++i){const group=groups[i];geometry.addGroup(group.start,group.count,group.materialIndex);}}const boundingSphere=json.data.boundingSphere;if(boundingSphere!==undefined){const center=new Vector3();if(boundingSphere.center!==undefined){center.fromArray(boundingSphere.center);}geometry.boundingSphere=new Sphere(center,boundingSphere.radius);}if(json.name)geometry.name=json.name;if(json.userData)geometry.userData=json.userData;return geometry;}}exports.BufferGeometryLoader=BufferGeometryLoader;class ObjectLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){const scope=this;const path=this.path===''?LoaderUtils.extractUrlBase(url):this.path;this.resourcePath=this.resourcePath||path;const loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(text){let json=null;try{json=JSON.parse(text);}catch(error){if(onError!==undefined)onError(error);console.error('THREE:ObjectLoader: Can\'t parse '+url+'.',error.message);return;}const metadata=json.metadata;if(metadata===undefined||metadata.type===undefined||metadata.type.toLowerCase()==='geometry'){console.error('THREE.ObjectLoader: Can\'t load '+url);return;}scope.parse(json,onLoad);},onProgress,onError);}async loadAsync(url,onProgress){const scope=this;const path=this.path===''?LoaderUtils.extractUrlBase(url):this.path;this.resourcePath=this.resourcePath||path;const loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);const text=await loader.loadAsync(url,onProgress);const json=JSON.parse(text);const metadata=json.metadata;if(metadata===undefined||metadata.type===undefined||metadata.type.toLowerCase()==='geometry'){throw new Error('THREE.ObjectLoader: Can\'t load '+url);}return await scope.parseAsync(json);}parse(json,onLoad){const animations=this.parseAnimations(json.animations);const shapes=this.parseShapes(json.shapes);const geometries=this.parseGeometries(json.geometries,shapes);const images=this.parseImages(json.images,function(){if(onLoad!==undefined)onLoad(object);});const textures=this.parseTextures(json.textures,images);const materials=this.parseMaterials(json.materials,textures);const object=this.parseObject(json.object,geometries,materials,textures,animations);const skeletons=this.parseSkeletons(json.skeletons,object);this.bindSkeletons(object,skeletons);//
if(onLoad!==undefined){let hasImages=false;for(const uuid in images){if(images[uuid]instanceof HTMLImageElement){hasImages=true;break;}}if(hasImages===false)onLoad(object);}return object;}async parseAsync(json){const animations=this.parseAnimations(json.animations);const shapes=this.parseShapes(json.shapes);const geometries=this.parseGeometries(json.geometries,shapes);const images=await this.parseImagesAsync(json.images);const textures=this.parseTextures(json.textures,images);const materials=this.parseMaterials(json.materials,textures);const object=this.parseObject(json.object,geometries,materials,textures,animations);const skeletons=this.parseSkeletons(json.skeletons,object);this.bindSkeletons(object,skeletons);return object;}parseShapes(json){const shapes={};if(json!==undefined){for(let i=0,l=json.length;i<l;i++){const shape=new Shape().fromJSON(json[i]);shapes[shape.uuid]=shape;}}return shapes;}parseSkeletons(json,object){const skeletons={};const bones={};// generate bone lookup table
object.traverse(function(child){if(child.isBone)bones[child.uuid]=child;});// create skeletons
if(json!==undefined){for(let i=0,l=json.length;i<l;i++){const skeleton=new Skeleton().fromJSON(json[i],bones);skeletons[skeleton.uuid]=skeleton;}}return skeletons;}parseGeometries(json,shapes){const geometries={};if(json!==undefined){const bufferGeometryLoader=new BufferGeometryLoader();for(let i=0,l=json.length;i<l;i++){let geometry;const data=json[i];switch(data.type){case'BufferGeometry':case'InstancedBufferGeometry':geometry=bufferGeometryLoader.parse(data);break;case'Geometry':console.error('THREE.ObjectLoader: The legacy Geometry type is no longer supported.');break;default:if(data.type in Geometries){geometry=Geometries[data.type].fromJSON(data,shapes);}else{console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);}}geometry.uuid=data.uuid;if(data.name!==undefined)geometry.name=data.name;if(geometry.isBufferGeometry===true&&data.userData!==undefined)geometry.userData=data.userData;geometries[data.uuid]=geometry;}}return geometries;}parseMaterials(json,textures){const cache={};// MultiMaterial
const materials={};if(json!==undefined){const loader=new MaterialLoader();loader.setTextures(textures);for(let i=0,l=json.length;i<l;i++){const data=json[i];if(data.type==='MultiMaterial'){// Deprecated
const array=[];for(let j=0;j<data.materials.length;j++){const material=data.materials[j];if(cache[material.uuid]===undefined){cache[material.uuid]=loader.parse(material);}array.push(cache[material.uuid]);}materials[data.uuid]=array;}else{if(cache[data.uuid]===undefined){cache[data.uuid]=loader.parse(data);}materials[data.uuid]=cache[data.uuid];}}}return materials;}parseAnimations(json){const animations={};if(json!==undefined){for(let i=0;i<json.length;i++){const data=json[i];const clip=AnimationClip.parse(data);animations[clip.uuid]=clip;}}return animations;}parseImages(json,onLoad){const scope=this;const images={};let loader;function loadImage(url){scope.manager.itemStart(url);return loader.load(url,function(){scope.manager.itemEnd(url);},undefined,function(){scope.manager.itemError(url);scope.manager.itemEnd(url);});}function deserializeImage(image){if(typeof image==='string'){const url=image;const path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(url)?url:scope.resourcePath+url;return loadImage(path);}else{if(image.data){return{data:getTypedArray(image.type,image.data),width:image.width,height:image.height};}else{return null;}}}if(json!==undefined&&json.length>0){const manager=new LoadingManager(onLoad);loader=new ImageLoader(manager);loader.setCrossOrigin(this.crossOrigin);for(let i=0,il=json.length;i<il;i++){const image=json[i];const url=image.url;if(Array.isArray(url)){// load array of images e.g CubeTexture
const imageArray=[];for(let j=0,jl=url.length;j<jl;j++){const currentUrl=url[j];const deserializedImage=deserializeImage(currentUrl);if(deserializedImage!==null){if(deserializedImage instanceof HTMLImageElement){imageArray.push(deserializedImage);}else{// special case: handle array of data textures for cube textures
imageArray.push(new DataTexture(deserializedImage.data,deserializedImage.width,deserializedImage.height));}}}images[image.uuid]=new Source(imageArray);}else{// load single image
const deserializedImage=deserializeImage(image.url);images[image.uuid]=new Source(deserializedImage);}}}return images;}async parseImagesAsync(json){const scope=this;const images={};let loader;async function deserializeImage(image){if(typeof image==='string'){const url=image;const path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(url)?url:scope.resourcePath+url;return await loader.loadAsync(path);}else{if(image.data){return{data:getTypedArray(image.type,image.data),width:image.width,height:image.height};}else{return null;}}}if(json!==undefined&&json.length>0){loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);for(let i=0,il=json.length;i<il;i++){const image=json[i];const url=image.url;if(Array.isArray(url)){// load array of images e.g CubeTexture
const imageArray=[];for(let j=0,jl=url.length;j<jl;j++){const currentUrl=url[j];const deserializedImage=await deserializeImage(currentUrl);if(deserializedImage!==null){if(deserializedImage instanceof HTMLImageElement){imageArray.push(deserializedImage);}else{// special case: handle array of data textures for cube textures
imageArray.push(new DataTexture(deserializedImage.data,deserializedImage.width,deserializedImage.height));}}}images[image.uuid]=new Source(imageArray);}else{// load single image
const deserializedImage=await deserializeImage(image.url);images[image.uuid]=new Source(deserializedImage);}}}return images;}parseTextures(json,images){function parseConstant(value,type){if(typeof value==='number')return value;console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.',value);return type[value];}const textures={};if(json!==undefined){for(let i=0,l=json.length;i<l;i++){const data=json[i];if(data.image===undefined){console.warn('THREE.ObjectLoader: No "image" specified for',data.uuid);}if(images[data.image]===undefined){console.warn('THREE.ObjectLoader: Undefined image',data.image);}const source=images[data.image];const image=source.data;let texture;if(Array.isArray(image)){texture=new CubeTexture();if(image.length===6)texture.needsUpdate=true;}else{if(image&&image.data){texture=new DataTexture();}else{texture=new Texture();}if(image)texture.needsUpdate=true;// textures can have undefined image data
}texture.source=source;texture.uuid=data.uuid;if(data.name!==undefined)texture.name=data.name;if(data.mapping!==undefined)texture.mapping=parseConstant(data.mapping,TEXTURE_MAPPING);if(data.offset!==undefined)texture.offset.fromArray(data.offset);if(data.repeat!==undefined)texture.repeat.fromArray(data.repeat);if(data.center!==undefined)texture.center.fromArray(data.center);if(data.rotation!==undefined)texture.rotation=data.rotation;if(data.wrap!==undefined){texture.wrapS=parseConstant(data.wrap[0],TEXTURE_WRAPPING);texture.wrapT=parseConstant(data.wrap[1],TEXTURE_WRAPPING);}if(data.format!==undefined)texture.format=data.format;if(data.type!==undefined)texture.type=data.type;if(data.encoding!==undefined)texture.encoding=data.encoding;if(data.minFilter!==undefined)texture.minFilter=parseConstant(data.minFilter,TEXTURE_FILTER);if(data.magFilter!==undefined)texture.magFilter=parseConstant(data.magFilter,TEXTURE_FILTER);if(data.anisotropy!==undefined)texture.anisotropy=data.anisotropy;if(data.flipY!==undefined)texture.flipY=data.flipY;if(data.premultiplyAlpha!==undefined)texture.premultiplyAlpha=data.premultiplyAlpha;if(data.unpackAlignment!==undefined)texture.unpackAlignment=data.unpackAlignment;if(data.userData!==undefined)texture.userData=data.userData;textures[data.uuid]=texture;}}return textures;}parseObject(data,geometries,materials,textures,animations){let object;function getGeometry(name){if(geometries[name]===undefined){console.warn('THREE.ObjectLoader: Undefined geometry',name);}return geometries[name];}function getMaterial(name){if(name===undefined)return undefined;if(Array.isArray(name)){const array=[];for(let i=0,l=name.length;i<l;i++){const uuid=name[i];if(materials[uuid]===undefined){console.warn('THREE.ObjectLoader: Undefined material',uuid);}array.push(materials[uuid]);}return array;}if(materials[name]===undefined){console.warn('THREE.ObjectLoader: Undefined material',name);}return materials[name];}function getTexture(uuid){if(textures[uuid]===undefined){console.warn('THREE.ObjectLoader: Undefined texture',uuid);}return textures[uuid];}let geometry,material;switch(data.type){case'Scene':object=new Scene();if(data.background!==undefined){if(Number.isInteger(data.background)){object.background=new Color(data.background);}else{object.background=getTexture(data.background);}}if(data.environment!==undefined){object.environment=getTexture(data.environment);}if(data.fog!==undefined){if(data.fog.type==='Fog'){object.fog=new Fog(data.fog.color,data.fog.near,data.fog.far);}else if(data.fog.type==='FogExp2'){object.fog=new FogExp2(data.fog.color,data.fog.density);}}break;case'PerspectiveCamera':object=new PerspectiveCamera(data.fov,data.aspect,data.near,data.far);if(data.focus!==undefined)object.focus=data.focus;if(data.zoom!==undefined)object.zoom=data.zoom;if(data.filmGauge!==undefined)object.filmGauge=data.filmGauge;if(data.filmOffset!==undefined)object.filmOffset=data.filmOffset;if(data.view!==undefined)object.view=Object.assign({},data.view);break;case'OrthographicCamera':object=new OrthographicCamera(data.left,data.right,data.top,data.bottom,data.near,data.far);if(data.zoom!==undefined)object.zoom=data.zoom;if(data.view!==undefined)object.view=Object.assign({},data.view);break;case'AmbientLight':object=new AmbientLight(data.color,data.intensity);break;case'DirectionalLight':object=new DirectionalLight(data.color,data.intensity);break;case'PointLight':object=new PointLight(data.color,data.intensity,data.distance,data.decay);break;case'RectAreaLight':object=new RectAreaLight(data.color,data.intensity,data.width,data.height);break;case'SpotLight':object=new SpotLight(data.color,data.intensity,data.distance,data.angle,data.penumbra,data.decay);break;case'HemisphereLight':object=new HemisphereLight(data.color,data.groundColor,data.intensity);break;case'LightProbe':object=new LightProbe().fromJSON(data);break;case'SkinnedMesh':geometry=getGeometry(data.geometry);material=getMaterial(data.material);object=new SkinnedMesh(geometry,material);if(data.bindMode!==undefined)object.bindMode=data.bindMode;if(data.bindMatrix!==undefined)object.bindMatrix.fromArray(data.bindMatrix);if(data.skeleton!==undefined)object.skeleton=data.skeleton;break;case'Mesh':geometry=getGeometry(data.geometry);material=getMaterial(data.material);object=new Mesh(geometry,material);break;case'InstancedMesh':geometry=getGeometry(data.geometry);material=getMaterial(data.material);const count=data.count;const instanceMatrix=data.instanceMatrix;const instanceColor=data.instanceColor;object=new InstancedMesh(geometry,material,count);object.instanceMatrix=new InstancedBufferAttribute(new Float32Array(instanceMatrix.array),16);if(instanceColor!==undefined)object.instanceColor=new InstancedBufferAttribute(new Float32Array(instanceColor.array),instanceColor.itemSize);break;case'LOD':object=new LOD();break;case'Line':object=new Line(getGeometry(data.geometry),getMaterial(data.material));break;case'LineLoop':object=new LineLoop(getGeometry(data.geometry),getMaterial(data.material));break;case'LineSegments':object=new LineSegments(getGeometry(data.geometry),getMaterial(data.material));break;case'PointCloud':case'Points':object=new Points(getGeometry(data.geometry),getMaterial(data.material));break;case'Sprite':object=new Sprite(getMaterial(data.material));break;case'Group':object=new Group();break;case'Bone':object=new Bone();break;default:object=new Object3D();}object.uuid=data.uuid;if(data.name!==undefined)object.name=data.name;if(data.matrix!==undefined){object.matrix.fromArray(data.matrix);if(data.matrixAutoUpdate!==undefined)object.matrixAutoUpdate=data.matrixAutoUpdate;if(object.matrixAutoUpdate)object.matrix.decompose(object.position,object.quaternion,object.scale);}else{if(data.position!==undefined)object.position.fromArray(data.position);if(data.rotation!==undefined)object.rotation.fromArray(data.rotation);if(data.quaternion!==undefined)object.quaternion.fromArray(data.quaternion);if(data.scale!==undefined)object.scale.fromArray(data.scale);}if(data.castShadow!==undefined)object.castShadow=data.castShadow;if(data.receiveShadow!==undefined)object.receiveShadow=data.receiveShadow;if(data.shadow){if(data.shadow.bias!==undefined)object.shadow.bias=data.shadow.bias;if(data.shadow.normalBias!==undefined)object.shadow.normalBias=data.shadow.normalBias;if(data.shadow.radius!==undefined)object.shadow.radius=data.shadow.radius;if(data.shadow.mapSize!==undefined)object.shadow.mapSize.fromArray(data.shadow.mapSize);if(data.shadow.camera!==undefined)object.shadow.camera=this.parseObject(data.shadow.camera);}if(data.visible!==undefined)object.visible=data.visible;if(data.frustumCulled!==undefined)object.frustumCulled=data.frustumCulled;if(data.renderOrder!==undefined)object.renderOrder=data.renderOrder;if(data.userData!==undefined)object.userData=data.userData;if(data.layers!==undefined)object.layers.mask=data.layers;if(data.children!==undefined){const children=data.children;for(let i=0;i<children.length;i++){object.add(this.parseObject(children[i],geometries,materials,textures,animations));}}if(data.animations!==undefined){const objectAnimations=data.animations;for(let i=0;i<objectAnimations.length;i++){const uuid=objectAnimations[i];object.animations.push(animations[uuid]);}}if(data.type==='LOD'){if(data.autoUpdate!==undefined)object.autoUpdate=data.autoUpdate;const levels=data.levels;for(let l=0;l<levels.length;l++){const level=levels[l];const child=object.getObjectByProperty('uuid',level.object);if(child!==undefined){object.addLevel(child,level.distance);}}}return object;}bindSkeletons(object,skeletons){if(Object.keys(skeletons).length===0)return;object.traverse(function(child){if(child.isSkinnedMesh===true&&child.skeleton!==undefined){const skeleton=skeletons[child.skeleton];if(skeleton===undefined){console.warn('THREE.ObjectLoader: No skeleton found with UUID:',child.skeleton);}else{child.bind(skeleton,child.bindMatrix);}}});}/* DEPRECATED */setTexturePath(value){console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');return this.setResourcePath(value);}}exports.ObjectLoader=ObjectLoader;const TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping};const TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping};const TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,LinearFilter:LinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter};class ImageBitmapLoader extends Loader{constructor(manager){super(manager);if(typeof createImageBitmap==='undefined'){console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');}if(typeof fetch==='undefined'){console.warn('THREE.ImageBitmapLoader: fetch() not supported.');}this.options={premultiplyAlpha:'none'};}setOptions(options){this.options=options;return this;}load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);const scope=this;const cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}const fetchOptions={};fetchOptions.credentials=this.crossOrigin==='anonymous'?'same-origin':'include';fetchOptions.headers=this.requestHeader;fetch(url,fetchOptions).then(function(res){return res.blob();}).then(function(blob){return createImageBitmap(blob,Object.assign(scope.options,{colorSpaceConversion:'none'}));}).then(function(imageBitmap){Cache.add(url,imageBitmap);if(onLoad)onLoad(imageBitmap);scope.manager.itemEnd(url);}).catch(function(e){if(onError)onError(e);scope.manager.itemError(url);scope.manager.itemEnd(url);});scope.manager.itemStart(url);}}exports.ImageBitmapLoader=ImageBitmapLoader;ImageBitmapLoader.prototype.isImageBitmapLoader=true;let _context;const AudioContext={getContext:function(){if(_context===undefined){_context=new(window.AudioContext||window.webkitAudioContext)();}return _context;},setContext:function(value){_context=value;}};exports.AudioContext=AudioContext;class AudioLoader extends Loader{constructor(manager){super(manager);}load(url,onLoad,onProgress,onError){const scope=this;const loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(buffer){try{// Create a copy of the buffer. The `decodeAudioData` method
// detaches the buffer when complete, preventing reuse.
const bufferCopy=buffer.slice(0);const context=AudioContext.getContext();context.decodeAudioData(bufferCopy,function(audioBuffer){onLoad(audioBuffer);});}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);}}exports.AudioLoader=AudioLoader;class HemisphereLightProbe extends LightProbe{constructor(skyColor,groundColor,intensity=1){super(undefined,intensity);const color1=new Color().set(skyColor);const color2=new Color().set(groundColor);const sky=new Vector3(color1.r,color1.g,color1.b);const ground=new Vector3(color2.r,color2.g,color2.b);// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
const c0=Math.sqrt(Math.PI);const c1=c0*Math.sqrt(0.75);this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);}}exports.HemisphereLightProbe=HemisphereLightProbe;HemisphereLightProbe.prototype.isHemisphereLightProbe=true;class AmbientLightProbe extends LightProbe{constructor(color,intensity=1){super(undefined,intensity);const color1=new Color().set(color);// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
this.sh.coefficients[0].set(color1.r,color1.g,color1.b).multiplyScalar(2*Math.sqrt(Math.PI));}}exports.AmbientLightProbe=AmbientLightProbe;AmbientLightProbe.prototype.isAmbientLightProbe=true;const _eyeRight=/*@__PURE__*/new Matrix4();const _eyeLeft=/*@__PURE__*/new Matrix4();const _projectionMatrix=/*@__PURE__*/new Matrix4();class StereoCamera{constructor(){this.type='StereoCamera';this.aspect=1;this.eyeSep=0.064;this.cameraL=new PerspectiveCamera();this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new PerspectiveCamera();this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null};}update(camera){const cache=this._cache;const needsUpdate=cache.focus!==camera.focus||cache.fov!==camera.fov||cache.aspect!==camera.aspect*this.aspect||cache.near!==camera.near||cache.far!==camera.far||cache.zoom!==camera.zoom||cache.eyeSep!==this.eyeSep;if(needsUpdate){cache.focus=camera.focus;cache.fov=camera.fov;cache.aspect=camera.aspect*this.aspect;cache.near=camera.near;cache.far=camera.far;cache.zoom=camera.zoom;cache.eyeSep=this.eyeSep;// Off-axis stereoscopic effect based on
// http://paulbourke.net/stereographics/stereorender/
_projectionMatrix.copy(camera.projectionMatrix);const eyeSepHalf=cache.eyeSep/2;const eyeSepOnProjection=eyeSepHalf*cache.near/cache.focus;const ymax=cache.near*Math.tan(DEG2RAD*cache.fov*0.5)/cache.zoom;let xmin,xmax;// translate xOffset
_eyeLeft.elements[12]=-eyeSepHalf;_eyeRight.elements[12]=eyeSepHalf;// for left eye
xmin=-ymax*cache.aspect+eyeSepOnProjection;xmax=ymax*cache.aspect+eyeSepOnProjection;_projectionMatrix.elements[0]=2*cache.near/(xmax-xmin);_projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraL.projectionMatrix.copy(_projectionMatrix);// for right eye
xmin=-ymax*cache.aspect-eyeSepOnProjection;xmax=ymax*cache.aspect-eyeSepOnProjection;_projectionMatrix.elements[0]=2*cache.near/(xmax-xmin);_projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraR.projectionMatrix.copy(_projectionMatrix);}this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);}}exports.StereoCamera=StereoCamera;class Clock{constructor(autoStart=true){this.autoStart=autoStart;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false;}start(){this.startTime=now();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true;}stop(){this.getElapsedTime();this.running=false;this.autoStart=false;}getElapsedTime(){this.getDelta();return this.elapsedTime;}getDelta(){let diff=0;if(this.autoStart&&!this.running){this.start();return 0;}if(this.running){const newTime=now();diff=(newTime-this.oldTime)/1000;this.oldTime=newTime;this.elapsedTime+=diff;}return diff;}}exports.Clock=Clock;function now(){return(typeof performance==='undefined'?Date:performance).now();// see #10732
}const _position$1=/*@__PURE__*/new Vector3();const _quaternion$1=/*@__PURE__*/new Quaternion();const _scale$1=/*@__PURE__*/new Vector3();const _orientation$1=/*@__PURE__*/new Vector3();class AudioListener extends Object3D{constructor(){super();this.type='AudioListener';this.context=AudioContext.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;this.timeDelta=0;// private
this._clock=new Clock();}getInput(){return this.gain;}removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null;}return this;}getFilter(){return this.filter;}setFilter(value){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);}else{this.gain.disconnect(this.context.destination);}this.filter=value;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this;}getMasterVolume(){return this.gain.gain.value;}setMasterVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;}updateMatrixWorld(force){super.updateMatrixWorld(force);const listener=this.context.listener;const up=this.up;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(_position$1,_quaternion$1,_scale$1);_orientation$1.set(0,0,-1).applyQuaternion(_quaternion$1);if(listener.positionX){// code path for Chrome (see #14393)
const endTime=this.context.currentTime+this.timeDelta;listener.positionX.linearRampToValueAtTime(_position$1.x,endTime);listener.positionY.linearRampToValueAtTime(_position$1.y,endTime);listener.positionZ.linearRampToValueAtTime(_position$1.z,endTime);listener.forwardX.linearRampToValueAtTime(_orientation$1.x,endTime);listener.forwardY.linearRampToValueAtTime(_orientation$1.y,endTime);listener.forwardZ.linearRampToValueAtTime(_orientation$1.z,endTime);listener.upX.linearRampToValueAtTime(up.x,endTime);listener.upY.linearRampToValueAtTime(up.y,endTime);listener.upZ.linearRampToValueAtTime(up.z,endTime);}else{listener.setPosition(_position$1.x,_position$1.y,_position$1.z);listener.setOrientation(_orientation$1.x,_orientation$1.y,_orientation$1.z,up.x,up.y,up.z);}}}exports.AudioListener=AudioListener;class Audio extends Object3D{constructor(listener){super();this.type='Audio';this.listener=listener;this.context=listener.context;this.gain=this.context.createGain();this.gain.connect(listener.getInput());this.autoplay=false;this.buffer=null;this.detune=0;this.loop=false;this.loopStart=0;this.loopEnd=0;this.offset=0;this.duration=undefined;this.playbackRate=1;this.isPlaying=false;this.hasPlaybackControl=true;this.source=null;this.sourceType='empty';this._startedAt=0;this._progress=0;this._connected=false;this.filters=[];}getOutput(){return this.gain;}setNodeSource(audioNode){this.hasPlaybackControl=false;this.sourceType='audioNode';this.source=audioNode;this.connect();return this;}setMediaElementSource(mediaElement){this.hasPlaybackControl=false;this.sourceType='mediaNode';this.source=this.context.createMediaElementSource(mediaElement);this.connect();return this;}setMediaStreamSource(mediaStream){this.hasPlaybackControl=false;this.sourceType='mediaStreamNode';this.source=this.context.createMediaStreamSource(mediaStream);this.connect();return this;}setBuffer(audioBuffer){this.buffer=audioBuffer;this.sourceType='buffer';if(this.autoplay)this.play();return this;}play(delay=0){if(this.isPlaying===true){console.warn('THREE.Audio: Audio is already playing.');return;}if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this._startedAt=this.context.currentTime+delay;const source=this.context.createBufferSource();source.buffer=this.buffer;source.loop=this.loop;source.loopStart=this.loopStart;source.loopEnd=this.loopEnd;source.onended=this.onEnded.bind(this);source.start(this._startedAt,this._progress+this.offset,this.duration);this.isPlaying=true;this.source=source;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect();}pause(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}if(this.isPlaying===true){// update current progress
this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate;if(this.loop===true){// ensure _progress does not exceed duration with looped audios
this._progress=this._progress%(this.duration||this.buffer.duration);}this.source.stop();this.source.onended=null;this.isPlaying=false;}return this;}stop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this._progress=0;this.source.stop();this.source.onended=null;this.isPlaying=false;return this;}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let i=1,l=this.filters.length;i<l;i++){this.filters[i-1].connect(this.filters[i]);}this.filters[this.filters.length-1].connect(this.getOutput());}else{this.source.connect(this.getOutput());}this._connected=true;return this;}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let i=1,l=this.filters.length;i<l;i++){this.filters[i-1].disconnect(this.filters[i]);}this.filters[this.filters.length-1].disconnect(this.getOutput());}else{this.source.disconnect(this.getOutput());}this._connected=false;return this;}getFilters(){return this.filters;}setFilters(value){if(!value)value=[];if(this._connected===true){this.disconnect();this.filters=value.slice();this.connect();}else{this.filters=value.slice();}return this;}setDetune(value){this.detune=value;if(this.source.detune===undefined)return;// only set detune when available
if(this.isPlaying===true){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,0.01);}return this;}getDetune(){return this.detune;}getFilter(){return this.getFilters()[0];}setFilter(filter){return this.setFilters(filter?[filter]:[]);}setPlaybackRate(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.playbackRate=value;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,0.01);}return this;}getPlaybackRate(){return this.playbackRate;}onEnded(){this.isPlaying=false;}getLoop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return false;}return this.loop;}setLoop(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.loop=value;if(this.isPlaying===true){this.source.loop=this.loop;}return this;}setLoopStart(value){this.loopStart=value;return this;}setLoopEnd(value){this.loopEnd=value;return this;}getVolume(){return this.gain.gain.value;}setVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;}}exports.Audio=Audio;const _position=/*@__PURE__*/new Vector3();const _quaternion=/*@__PURE__*/new Quaternion();const _scale=/*@__PURE__*/new Vector3();const _orientation=/*@__PURE__*/new Vector3();class PositionalAudio extends Audio{constructor(listener){super(listener);this.panner=this.context.createPanner();this.panner.panningModel='HRTF';this.panner.connect(this.gain);}getOutput(){return this.panner;}getRefDistance(){return this.panner.refDistance;}setRefDistance(value){this.panner.refDistance=value;return this;}getRolloffFactor(){return this.panner.rolloffFactor;}setRolloffFactor(value){this.panner.rolloffFactor=value;return this;}getDistanceModel(){return this.panner.distanceModel;}setDistanceModel(value){this.panner.distanceModel=value;return this;}getMaxDistance(){return this.panner.maxDistance;}setMaxDistance(value){this.panner.maxDistance=value;return this;}setDirectionalCone(coneInnerAngle,coneOuterAngle,coneOuterGain){this.panner.coneInnerAngle=coneInnerAngle;this.panner.coneOuterAngle=coneOuterAngle;this.panner.coneOuterGain=coneOuterGain;return this;}updateMatrixWorld(force){super.updateMatrixWorld(force);if(this.hasPlaybackControl===true&&this.isPlaying===false)return;this.matrixWorld.decompose(_position,_quaternion,_scale);_orientation.set(0,0,1).applyQuaternion(_quaternion);const panner=this.panner;if(panner.positionX){// code path for Chrome and Firefox (see #14393)
const endTime=this.context.currentTime+this.listener.timeDelta;panner.positionX.linearRampToValueAtTime(_position.x,endTime);panner.positionY.linearRampToValueAtTime(_position.y,endTime);panner.positionZ.linearRampToValueAtTime(_position.z,endTime);panner.orientationX.linearRampToValueAtTime(_orientation.x,endTime);panner.orientationY.linearRampToValueAtTime(_orientation.y,endTime);panner.orientationZ.linearRampToValueAtTime(_orientation.z,endTime);}else{panner.setPosition(_position.x,_position.y,_position.z);panner.setOrientation(_orientation.x,_orientation.y,_orientation.z);}}}exports.PositionalAudio=PositionalAudio;class AudioAnalyser{constructor(audio,fftSize=2048){this.analyser=audio.context.createAnalyser();this.analyser.fftSize=fftSize;this.data=new Uint8Array(this.analyser.frequencyBinCount);audio.getOutput().connect(this.analyser);}getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data;}getAverageFrequency(){let value=0;const data=this.getFrequencyData();for(let i=0;i<data.length;i++){value+=data[i];}return value/data.length;}}exports.AudioAnalyser=AudioAnalyser;class PropertyMixer{constructor(binding,typeName,valueSize){this.binding=binding;this.valueSize=valueSize;let mixFunction,mixFunctionAdditive,setIdentity;// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
//
// interpolators can use .buffer as their .result
// the data then goes to 'incoming'
//
// 'accu0' and 'accu1' are used frame-interleaved for
// the cumulative result and are compared to detect
// changes
//
// 'orig' stores the original state of the property
//
// 'add' is used for additive cumulative results
//
// 'work' is optional and is only present for quaternion types. It is used
// to store intermediate quaternion multiplication results
switch(typeName){case'quaternion':mixFunction=this._slerp;mixFunctionAdditive=this._slerpAdditive;setIdentity=this._setAdditiveIdentityQuaternion;this.buffer=new Float64Array(valueSize*6);this._workIndex=5;break;case'string':case'bool':mixFunction=this._select;// Use the regular mix function and for additive on these types,
// additive is not relevant for non-numeric types
mixFunctionAdditive=this._select;setIdentity=this._setAdditiveIdentityOther;this.buffer=new Array(valueSize*5);break;default:mixFunction=this._lerp;mixFunctionAdditive=this._lerpAdditive;setIdentity=this._setAdditiveIdentityNumeric;this.buffer=new Float64Array(valueSize*5);}this._mixBufferRegion=mixFunction;this._mixBufferRegionAdditive=mixFunctionAdditive;this._setIdentity=setIdentity;this._origIndex=3;this._addIndex=4;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;this.useCount=0;this.referenceCount=0;}// accumulate data in the 'incoming' region into 'accu<i>'
accumulate(accuIndex,weight){// note: happily accumulating nothing when weight = 0, the caller knows
// the weight and shouldn't have made the call in the first place
const buffer=this.buffer,stride=this.valueSize,offset=accuIndex*stride+stride;let currentWeight=this.cumulativeWeight;if(currentWeight===0){// accuN := incoming * weight
for(let i=0;i!==stride;++i){buffer[offset+i]=buffer[i];}currentWeight=weight;}else{// accuN := accuN + incoming * weight
currentWeight+=weight;const mix=weight/currentWeight;this._mixBufferRegion(buffer,offset,0,mix,stride);}this.cumulativeWeight=currentWeight;}// accumulate data in the 'incoming' region into 'add'
accumulateAdditive(weight){const buffer=this.buffer,stride=this.valueSize,offset=stride*this._addIndex;if(this.cumulativeWeightAdditive===0){// add = identity
this._setIdentity();}// add := add + incoming * weight
this._mixBufferRegionAdditive(buffer,offset,0,weight,stride);this.cumulativeWeightAdditive+=weight;}// apply the state of 'accu<i>' to the binding when accus differ
apply(accuIndex){const stride=this.valueSize,buffer=this.buffer,offset=accuIndex*stride+stride,weight=this.cumulativeWeight,weightAdditive=this.cumulativeWeightAdditive,binding=this.binding;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;if(weight<1){// accuN := accuN + original * ( 1 - cumulativeWeight )
const originalValueOffset=stride*this._origIndex;this._mixBufferRegion(buffer,offset,originalValueOffset,1-weight,stride);}if(weightAdditive>0){// accuN := accuN + additive accuN
this._mixBufferRegionAdditive(buffer,offset,this._addIndex*stride,1,stride);}for(let i=stride,e=stride+stride;i!==e;++i){if(buffer[i]!==buffer[i+stride]){// value has changed -> update scene graph
binding.setValue(buffer,offset);break;}}}// remember the state of the bound property and copy it to both accus
saveOriginalState(){const binding=this.binding;const buffer=this.buffer,stride=this.valueSize,originalValueOffset=stride*this._origIndex;binding.getValue(buffer,originalValueOffset);// accu[0..1] := orig -- initially detect changes against the original
for(let i=stride,e=originalValueOffset;i!==e;++i){buffer[i]=buffer[originalValueOffset+i%stride];}// Add to identity for additive
this._setIdentity();this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;}// apply the state previously taken via 'saveOriginalState' to the binding
restoreOriginalState(){const originalValueOffset=this.valueSize*3;this.binding.setValue(this.buffer,originalValueOffset);}_setAdditiveIdentityNumeric(){const startIndex=this._addIndex*this.valueSize;const endIndex=startIndex+this.valueSize;for(let i=startIndex;i<endIndex;i++){this.buffer[i]=0;}}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric();this.buffer[this._addIndex*this.valueSize+3]=1;}_setAdditiveIdentityOther(){const startIndex=this._origIndex*this.valueSize;const targetIndex=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++){this.buffer[targetIndex+i]=this.buffer[startIndex+i];}}// mix functions
_select(buffer,dstOffset,srcOffset,t,stride){if(t>=0.5){for(let i=0;i!==stride;++i){buffer[dstOffset+i]=buffer[srcOffset+i];}}}_slerp(buffer,dstOffset,srcOffset,t){Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,srcOffset,t);}_slerpAdditive(buffer,dstOffset,srcOffset,t,stride){const workOffset=this._workIndex*stride;// Store result in intermediate buffer offset
Quaternion.multiplyQuaternionsFlat(buffer,workOffset,buffer,dstOffset,buffer,srcOffset);// Slerp to the intermediate result
Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,workOffset,t);}_lerp(buffer,dstOffset,srcOffset,t,stride){const s=1-t;for(let i=0;i!==stride;++i){const j=dstOffset+i;buffer[j]=buffer[j]*s+buffer[srcOffset+i]*t;}}_lerpAdditive(buffer,dstOffset,srcOffset,t,stride){for(let i=0;i!==stride;++i){const j=dstOffset+i;buffer[j]=buffer[j]+buffer[srcOffset+i]*t;}}}// Characters [].:/ are reserved for track binding syntax.
exports.PropertyMixer=PropertyMixer;const _RESERVED_CHARS_RE='\\[\\]\\.:\\/';const _reservedRe=new RegExp('['+_RESERVED_CHARS_RE+']','g');// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
const _wordChar='[^'+_RESERVED_CHARS_RE+']';const _wordCharOrDot='[^'+_RESERVED_CHARS_RE.replace('\\.','')+']';// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
const _directoryRe=/((?:WC+[\/:])*)/.source.replace('WC',_wordChar);// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
const _nodeRe=/(WCOD+)?/.source.replace('WCOD',_wordCharOrDot);// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
const _objectRe=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC',_wordChar);// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
const _propertyRe=/\.(WC+)(?:\[(.+)\])?/.source.replace('WC',_wordChar);const _trackRe=new RegExp(''+'^'+_directoryRe+_nodeRe+_objectRe+_propertyRe+'$');const _supportedObjectNames=['material','materials','bones'];class Composite{constructor(targetGroup,path,optionalParsedPath){const parsedPath=optionalParsedPath||PropertyBinding.parseTrackName(path);this._targetGroup=targetGroup;this._bindings=targetGroup.subscribe_(path,parsedPath);}getValue(array,offset){this.bind();// bind all binding
const firstValidIndex=this._targetGroup.nCachedObjects_,binding=this._bindings[firstValidIndex];// and only call .getValue on the first
if(binding!==undefined)binding.getValue(array,offset);}setValue(array,offset){const bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].setValue(array,offset);}}bind(){const bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].bind();}}unbind(){const bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].unbind();}}}// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
class PropertyBinding{constructor(rootNode,path,parsedPath){this.path=path;this.parsedPath=parsedPath||PropertyBinding.parseTrackName(path);this.node=PropertyBinding.findNode(rootNode,this.parsedPath.nodeName)||rootNode;this.rootNode=rootNode;// initial state of these methods that calls 'bind'
this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound;}static create(root,path,parsedPath){if(!(root&&root.isAnimationObjectGroup)){return new PropertyBinding(root,path,parsedPath);}else{return new PropertyBinding.Composite(root,path,parsedPath);}}/**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */static sanitizeNodeName(name){return name.replace(/\s/g,'_').replace(_reservedRe,'');}static parseTrackName(trackName){const matches=_trackRe.exec(trackName);if(matches===null){throw new Error('PropertyBinding: Cannot parse trackName: '+trackName);}const results={// directoryName: matches[ 1 ], // (tschw) currently unused
nodeName:matches[2],objectName:matches[3],objectIndex:matches[4],propertyName:matches[5],// required
propertyIndex:matches[6]};const lastDot=results.nodeName&&results.nodeName.lastIndexOf('.');if(lastDot!==undefined&&lastDot!==-1){const objectName=results.nodeName.substring(lastDot+1);// Object names must be checked against an allowlist. Otherwise, there
// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
// 'bar' could be the objectName, or part of a nodeName (which can
// include '.' characters).
if(_supportedObjectNames.indexOf(objectName)!==-1){results.nodeName=results.nodeName.substring(0,lastDot);results.objectName=objectName;}}if(results.propertyName===null||results.propertyName.length===0){throw new Error('PropertyBinding: can not parse propertyName from trackName: '+trackName);}return results;}static findNode(root,nodeName){if(nodeName===undefined||nodeName===''||nodeName==='.'||nodeName===-1||nodeName===root.name||nodeName===root.uuid){return root;}// search into skeleton bones.
if(root.skeleton){const bone=root.skeleton.getBoneByName(nodeName);if(bone!==undefined){return bone;}}// search into node subtree.
if(root.children){const searchNodeSubtree=function(children){for(let i=0;i<children.length;i++){const childNode=children[i];if(childNode.name===nodeName||childNode.uuid===nodeName){return childNode;}const result=searchNodeSubtree(childNode.children);if(result)return result;}return null;};const subTreeNode=searchNodeSubtree(root.children);if(subTreeNode){return subTreeNode;}}return null;}// these are used to "bind" a nonexistent property
_getValue_unavailable(){}_setValue_unavailable(){}// Getters
_getValue_direct(buffer,offset){buffer[offset]=this.targetObject[this.propertyName];}_getValue_array(buffer,offset){const source=this.resolvedProperty;for(let i=0,n=source.length;i!==n;++i){buffer[offset++]=source[i];}}_getValue_arrayElement(buffer,offset){buffer[offset]=this.resolvedProperty[this.propertyIndex];}_getValue_toArray(buffer,offset){this.resolvedProperty.toArray(buffer,offset);}// Direct
_setValue_direct(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];}_setValue_direct_setNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.needsUpdate=true;}_setValue_direct_setMatrixWorldNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}// EntireArray
_setValue_array(buffer,offset){const dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}}_setValue_array_setNeedsUpdate(buffer,offset){const dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}this.targetObject.needsUpdate=true;}_setValue_array_setMatrixWorldNeedsUpdate(buffer,offset){const dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}this.targetObject.matrixWorldNeedsUpdate=true;}// ArrayElement
_setValue_arrayElement(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];}_setValue_arrayElement_setNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.needsUpdate=true;}_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}// HasToFromArray
_setValue_fromArray(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);}_setValue_fromArray_setNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.needsUpdate=true;}_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.matrixWorldNeedsUpdate=true;}_getValue_unbound(targetArray,offset){this.bind();this.getValue(targetArray,offset);}_setValue_unbound(sourceArray,offset){this.bind();this.setValue(sourceArray,offset);}// create getter / setter pair for a property in the scene graph
bind(){let targetObject=this.node;const parsedPath=this.parsedPath;const objectName=parsedPath.objectName;const propertyName=parsedPath.propertyName;let propertyIndex=parsedPath.propertyIndex;if(!targetObject){targetObject=PropertyBinding.findNode(this.rootNode,parsedPath.nodeName)||this.rootNode;this.node=targetObject;}// set fail state so we can just 'return' on error
this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;// ensure there is a value node
if(!targetObject){console.error('THREE.PropertyBinding: Trying to update node for track: '+this.path+' but it wasn\'t found.');return;}if(objectName){let objectIndex=parsedPath.objectIndex;// special cases were we need to reach deeper into the hierarchy to get the face materials....
switch(objectName){case'materials':if(!targetObject.material){console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.',this);return;}if(!targetObject.material.materials){console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.',this);return;}targetObject=targetObject.material.materials;break;case'bones':if(!targetObject.skeleton){console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.',this);return;}// potential future optimization: skip this if propertyIndex is already an integer
// and convert the integer string to a true integer.
targetObject=targetObject.skeleton.bones;// support resolving morphTarget names into indices.
for(let i=0;i<targetObject.length;i++){if(targetObject[i].name===objectIndex){objectIndex=i;break;}}break;default:if(targetObject[objectName]===undefined){console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.',this);return;}targetObject=targetObject[objectName];}if(objectIndex!==undefined){if(targetObject[objectIndex]===undefined){console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.',this,targetObject);return;}targetObject=targetObject[objectIndex];}}// resolve property
const nodeProperty=targetObject[propertyName];if(nodeProperty===undefined){const nodeName=parsedPath.nodeName;console.error('THREE.PropertyBinding: Trying to update property for track: '+nodeName+'.'+propertyName+' but it wasn\'t found.',targetObject);return;}// determine versioning scheme
let versioning=this.Versioning.None;this.targetObject=targetObject;if(targetObject.needsUpdate!==undefined){// material
versioning=this.Versioning.NeedsUpdate;}else if(targetObject.matrixWorldNeedsUpdate!==undefined){// node transform
versioning=this.Versioning.MatrixWorldNeedsUpdate;}// determine how the property gets bound
let bindingType=this.BindingType.Direct;if(propertyIndex!==undefined){// access a sub element of the property array (only primitives are supported right now)
if(propertyName==='morphTargetInfluences'){// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
// support resolving morphTarget names into indices.
if(!targetObject.geometry){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.',this);return;}if(targetObject.geometry.isBufferGeometry){if(!targetObject.geometry.morphAttributes){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.',this);return;}if(targetObject.morphTargetDictionary[propertyIndex]!==undefined){propertyIndex=targetObject.morphTargetDictionary[propertyIndex];}}else{console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.',this);return;}}bindingType=this.BindingType.ArrayElement;this.resolvedProperty=nodeProperty;this.propertyIndex=propertyIndex;}else if(nodeProperty.fromArray!==undefined&&nodeProperty.toArray!==undefined){// must use copy for Object3D.Euler/Quaternion
bindingType=this.BindingType.HasFromToArray;this.resolvedProperty=nodeProperty;}else if(Array.isArray(nodeProperty)){bindingType=this.BindingType.EntireArray;this.resolvedProperty=nodeProperty;}else{this.propertyName=propertyName;}// select getter / setter
this.getValue=this.GetterByBindingType[bindingType];this.setValue=this.SetterByBindingTypeAndVersioning[bindingType][versioning];}unbind(){this.node=null;// back to the prototype version of getValue / setValue
// note: avoiding to mutate the shape of 'this' via 'delete'
this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound;}}exports.PropertyBinding=PropertyBinding;PropertyBinding.Composite=Composite;PropertyBinding.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};PropertyBinding.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};PropertyBinding.prototype.GetterByBindingType=[PropertyBinding.prototype._getValue_direct,PropertyBinding.prototype._getValue_array,PropertyBinding.prototype._getValue_arrayElement,PropertyBinding.prototype._getValue_toArray];PropertyBinding.prototype.SetterByBindingTypeAndVersioning=[[// Direct
PropertyBinding.prototype._setValue_direct,PropertyBinding.prototype._setValue_direct_setNeedsUpdate,PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[// EntireArray
PropertyBinding.prototype._setValue_array,PropertyBinding.prototype._setValue_array_setNeedsUpdate,PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate],[// ArrayElement
PropertyBinding.prototype._setValue_arrayElement,PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[// HasToFromArray
PropertyBinding.prototype._setValue_fromArray,PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 */class AnimationObjectGroup{constructor(){this.uuid=generateUUID();// cached objects followed by the active ones
this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;// threshold
// note: read by PropertyBinding.Composite
const indices={};this._indicesByUUID=indices;// for bookkeeping
for(let i=0,n=arguments.length;i!==n;++i){indices[arguments[i].uuid]=i;}this._paths=[];// inside: string
this._parsedPaths=[];// inside: { we don't care, here }
this._bindings=[];// inside: Array< PropertyBinding >
this._bindingsIndicesByPath={};// inside: indices in these arrays
const scope=this;this.stats={objects:{get total(){return scope._objects.length;},get inUse(){return this.total-scope.nCachedObjects_;}},get bindingsPerObject(){return scope._bindings.length;}};}add(){const objects=this._objects,indicesByUUID=this._indicesByUUID,paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,nBindings=bindings.length;let knownObject=undefined,nObjects=objects.length,nCachedObjects=this.nCachedObjects_;for(let i=0,n=arguments.length;i!==n;++i){const object=arguments[i],uuid=object.uuid;let index=indicesByUUID[uuid];if(index===undefined){// unknown object -> add it to the ACTIVE region
index=nObjects++;indicesByUUID[uuid]=index;objects.push(object);// accounting is done, now do the same for all bindings
for(let j=0,m=nBindings;j!==m;++j){bindings[j].push(new PropertyBinding(object,paths[j],parsedPaths[j]));}}else if(index<nCachedObjects){knownObject=objects[index];// move existing object to the ACTIVE region
const firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex];indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;indicesByUUID[uuid]=firstActiveIndex;objects[firstActiveIndex]=object;// accounting is done, now do the same for all bindings
for(let j=0,m=nBindings;j!==m;++j){const bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex];let binding=bindingsForPath[index];bindingsForPath[index]=lastCached;if(binding===undefined){// since we do not bother to create new bindings
// for objects that are cached, the binding may
// or may not exist
binding=new PropertyBinding(object,paths[j],parsedPaths[j]);}bindingsForPath[firstActiveIndex]=binding;}}else if(objects[index]!==knownObject){console.error('THREE.AnimationObjectGroup: Different objects with the same UUID '+'detected. Clean the caches or recreate your infrastructure when reloading scenes.');}// else the object is already where we want it to be
}// for arguments
this.nCachedObjects_=nCachedObjects;}remove(){const objects=this._objects,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;let nCachedObjects=this.nCachedObjects_;for(let i=0,n=arguments.length;i!==n;++i){const object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined&&index>=nCachedObjects){// move existing object into the CACHED region
const lastCachedIndex=nCachedObjects++,firstActiveObject=objects[lastCachedIndex];indicesByUUID[firstActiveObject.uuid]=index;objects[index]=firstActiveObject;indicesByUUID[uuid]=lastCachedIndex;objects[lastCachedIndex]=object;// accounting is done, now do the same for all bindings
for(let j=0,m=nBindings;j!==m;++j){const bindingsForPath=bindings[j],firstActive=bindingsForPath[lastCachedIndex],binding=bindingsForPath[index];bindingsForPath[index]=firstActive;bindingsForPath[lastCachedIndex]=binding;}}}// for arguments
this.nCachedObjects_=nCachedObjects;}// remove & forget
uncache(){const objects=this._objects,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;let nCachedObjects=this.nCachedObjects_,nObjects=objects.length;for(let i=0,n=arguments.length;i!==n;++i){const object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined){delete indicesByUUID[uuid];if(index<nCachedObjects){// object is cached, shrink the CACHED region
const firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex],lastIndex=--nObjects,lastObject=objects[lastIndex];// last cached object takes this object's place
indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;// last object goes to the activated slot and pop
indicesByUUID[lastObject.uuid]=firstActiveIndex;objects[firstActiveIndex]=lastObject;objects.pop();// accounting is done, now do the same for all bindings
for(let j=0,m=nBindings;j!==m;++j){const bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],last=bindingsForPath[lastIndex];bindingsForPath[index]=lastCached;bindingsForPath[firstActiveIndex]=last;bindingsForPath.pop();}}else{// object is active, just swap with the last and pop
const lastIndex=--nObjects,lastObject=objects[lastIndex];if(lastIndex>0){indicesByUUID[lastObject.uuid]=index;}objects[index]=lastObject;objects.pop();// accounting is done, now do the same for all bindings
for(let j=0,m=nBindings;j!==m;++j){const bindingsForPath=bindings[j];bindingsForPath[index]=bindingsForPath[lastIndex];bindingsForPath.pop();}}// cached or active
}// if object is known
}// for arguments
this.nCachedObjects_=nCachedObjects;}// Internal interface used by befriended PropertyBinding.Composite:
subscribe_(path,parsedPath){// returns an array of bindings for the given path that is changed
// according to the contained objects in the group
const indicesByPath=this._bindingsIndicesByPath;let index=indicesByPath[path];const bindings=this._bindings;if(index!==undefined)return bindings[index];const paths=this._paths,parsedPaths=this._parsedPaths,objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,bindingsForPath=new Array(nObjects);index=bindings.length;indicesByPath[path]=index;paths.push(path);parsedPaths.push(parsedPath);bindings.push(bindingsForPath);for(let i=nCachedObjects,n=objects.length;i!==n;++i){const object=objects[i];bindingsForPath[i]=new PropertyBinding(object,path,parsedPath);}return bindingsForPath;}unsubscribe_(path){// tells the group to forget about a property path and no longer
// update the array previously obtained with 'subscribe_'
const indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path];if(index!==undefined){const paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,lastBindingsIndex=bindings.length-1,lastBindings=bindings[lastBindingsIndex],lastBindingsPath=path[lastBindingsIndex];indicesByPath[lastBindingsPath]=index;bindings[index]=lastBindings;bindings.pop();parsedPaths[index]=parsedPaths[lastBindingsIndex];parsedPaths.pop();paths[index]=paths[lastBindingsIndex];paths.pop();}}}exports.AnimationObjectGroup=AnimationObjectGroup;AnimationObjectGroup.prototype.isAnimationObjectGroup=true;class AnimationAction{constructor(mixer,clip,localRoot=null,blendMode=clip.blendMode){this._mixer=mixer;this._clip=clip;this._localRoot=localRoot;this.blendMode=blendMode;const tracks=clip.tracks,nTracks=tracks.length,interpolants=new Array(nTracks);const interpolantSettings={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(let i=0;i!==nTracks;++i){const interpolant=tracks[i].createInterpolant(null);interpolants[i]=interpolant;interpolant.settings=interpolantSettings;}this._interpolantSettings=interpolantSettings;this._interpolants=interpolants;// bound by the mixer
// inside: PropertyMixer (managed by the mixer)
this._propertyBindings=new Array(nTracks);this._cacheIndex=null;// for the memory manager
this._byClipCacheIndex=null;// for the memory manager
this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=LoopRepeat;this._loopCount=-1;// global mixer time when the action is to be started
// it's set back to 'null' upon start of the action
this._startTime=null;// scaled local time of the action
// gets clamped or wrapped to 0..clip.duration according to loop
this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;// no. of repetitions when looping
this.paused=false;// true -> zero effective time scale
this.enabled=true;// false -> zero effective weight
this.clampWhenFinished=false;// keep feeding the last frame?
this.zeroSlopeAtStart=true;// for smooth interpolation w/o separate
this.zeroSlopeAtEnd=true;// clips for start, loop and end
}// State & Scheduling
play(){this._mixer._activateAction(this);return this;}stop(){this._mixer._deactivateAction(this);return this.reset();}reset(){this.paused=false;this.enabled=true;this.time=0;// restart clip
this._loopCount=-1;// forget previous loops
this._startTime=null;// forget scheduling
return this.stopFading().stopWarping();}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this);}// return true when play has been called
isScheduled(){return this._mixer._isActiveAction(this);}startAt(time){this._startTime=time;return this;}setLoop(mode,repetitions){this.loop=mode;this.repetitions=repetitions;return this;}// Weight
// set the weight stopping any scheduled fading
// although .enabled = false yields an effective weight of zero, this
// method does *not* change .enabled, because it would be confusing
setEffectiveWeight(weight){this.weight=weight;// note: same logic as when updated at runtime
this._effectiveWeight=this.enabled?weight:0;return this.stopFading();}// return the weight considering fading and .enabled
getEffectiveWeight(){return this._effectiveWeight;}fadeIn(duration){return this._scheduleFading(duration,0,1);}fadeOut(duration){return this._scheduleFading(duration,1,0);}crossFadeFrom(fadeOutAction,duration,warp){fadeOutAction.fadeOut(duration);this.fadeIn(duration);if(warp){const fadeInDuration=this._clip.duration,fadeOutDuration=fadeOutAction._clip.duration,startEndRatio=fadeOutDuration/fadeInDuration,endStartRatio=fadeInDuration/fadeOutDuration;fadeOutAction.warp(1.0,startEndRatio,duration);this.warp(endStartRatio,1.0,duration);}return this;}crossFadeTo(fadeInAction,duration,warp){return fadeInAction.crossFadeFrom(this,duration,warp);}stopFading(){const weightInterpolant=this._weightInterpolant;if(weightInterpolant!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(weightInterpolant);}return this;}// Time Scale Control
// set the time scale stopping any scheduled warping
// although .paused = true yields an effective time scale of zero, this
// method does *not* change .paused, because it would be confusing
setEffectiveTimeScale(timeScale){this.timeScale=timeScale;this._effectiveTimeScale=this.paused?0:timeScale;return this.stopWarping();}// return the time scale considering warping and .paused
getEffectiveTimeScale(){return this._effectiveTimeScale;}setDuration(duration){this.timeScale=this._clip.duration/duration;return this.stopWarping();}syncWith(action){this.time=action.time;this.timeScale=action.timeScale;return this.stopWarping();}halt(duration){return this.warp(this._effectiveTimeScale,0,duration);}warp(startTimeScale,endTimeScale,duration){const mixer=this._mixer,now=mixer.time,timeScale=this.timeScale;let interpolant=this._timeScaleInterpolant;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._timeScaleInterpolant=interpolant;}const times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;times[1]=now+duration;values[0]=startTimeScale/timeScale;values[1]=endTimeScale/timeScale;return this;}stopWarping(){const timeScaleInterpolant=this._timeScaleInterpolant;if(timeScaleInterpolant!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(timeScaleInterpolant);}return this;}// Object Accessors
getMixer(){return this._mixer;}getClip(){return this._clip;}getRoot(){return this._localRoot||this._mixer._root;}// Interna
_update(time,deltaTime,timeDirection,accuIndex){// called by the mixer
if(!this.enabled){// call ._updateWeight() to update ._effectiveWeight
this._updateWeight(time);return;}const startTime=this._startTime;if(startTime!==null){// check for scheduled start of action
const timeRunning=(time-startTime)*timeDirection;if(timeRunning<0||timeDirection===0){return;// yet to come / don't decide when delta = 0
}// start
this._startTime=null;// unschedule
deltaTime=timeDirection*timeRunning;}// apply time scale and advance time
deltaTime*=this._updateTimeScale(time);const clipTime=this._updateTime(deltaTime);// note: _updateTime may disable the action resulting in
// an effective weight of 0
const weight=this._updateWeight(time);if(weight>0){const interpolants=this._interpolants;const propertyMixers=this._propertyBindings;switch(this.blendMode){case AdditiveAnimationBlendMode:for(let j=0,m=interpolants.length;j!==m;++j){interpolants[j].evaluate(clipTime);propertyMixers[j].accumulateAdditive(weight);}break;case NormalAnimationBlendMode:default:for(let j=0,m=interpolants.length;j!==m;++j){interpolants[j].evaluate(clipTime);propertyMixers[j].accumulate(accuIndex,weight);}}}}_updateWeight(time){let weight=0;if(this.enabled){weight=this.weight;const interpolant=this._weightInterpolant;if(interpolant!==null){const interpolantValue=interpolant.evaluate(time)[0];weight*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopFading();if(interpolantValue===0){// faded out, disable
this.enabled=false;}}}}this._effectiveWeight=weight;return weight;}_updateTimeScale(time){let timeScale=0;if(!this.paused){timeScale=this.timeScale;const interpolant=this._timeScaleInterpolant;if(interpolant!==null){const interpolantValue=interpolant.evaluate(time)[0];timeScale*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopWarping();if(timeScale===0){// motion has halted, pause
this.paused=true;}else{// warp done - apply final time scale
this.timeScale=timeScale;}}}}this._effectiveTimeScale=timeScale;return timeScale;}_updateTime(deltaTime){const duration=this._clip.duration;const loop=this.loop;let time=this.time+deltaTime;let loopCount=this._loopCount;const pingPong=loop===LoopPingPong;if(deltaTime===0){if(loopCount===-1)return time;return pingPong&&(loopCount&1)===1?duration-time:time;}if(loop===LoopOnce){if(loopCount===-1){// just started
this._loopCount=0;this._setEndings(true,true,false);}handle_stop:{if(time>=duration){time=duration;}else if(time<0){time=0;}else{this.time=time;break handle_stop;}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=time;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime<0?-1:1});}}else{// repetitive Repeat or PingPong
if(loopCount===-1){// just started
if(deltaTime>=0){loopCount=0;this._setEndings(true,this.repetitions===0,pingPong);}else{// when looping in reverse direction, the initial
// transition through zero counts as a repetition,
// so leave loopCount at -1
this._setEndings(this.repetitions===0,true,pingPong);}}if(time>=duration||time<0){// wrap around
const loopDelta=Math.floor(time/duration);// signed
time-=duration*loopDelta;loopCount+=Math.abs(loopDelta);const pending=this.repetitions-loopCount;if(pending<=0){// have to stop (switch state, clamp time, fire event)
if(this.clampWhenFinished)this.paused=true;else this.enabled=false;time=deltaTime>0?duration:0;this.time=time;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime>0?1:-1});}else{// keep running
if(pending===1){// entering the last round
const atStart=deltaTime<0;this._setEndings(atStart,!atStart,pingPong);}else{this._setEndings(false,false,pingPong);}this._loopCount=loopCount;this.time=time;this._mixer.dispatchEvent({type:'loop',action:this,loopDelta:loopDelta});}}else{this.time=time;}if(pingPong&&(loopCount&1)===1){// invert time for the "pong round"
return duration-time;}}return time;}_setEndings(atStart,atEnd,pingPong){const settings=this._interpolantSettings;if(pingPong){settings.endingStart=ZeroSlopeEnding;settings.endingEnd=ZeroSlopeEnding;}else{// assuming for LoopOnce atStart == atEnd == true
if(atStart){settings.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding;}else{settings.endingStart=WrapAroundEnding;}if(atEnd){settings.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding;}else{settings.endingEnd=WrapAroundEnding;}}}_scheduleFading(duration,weightNow,weightThen){const mixer=this._mixer,now=mixer.time;let interpolant=this._weightInterpolant;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._weightInterpolant=interpolant;}const times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;values[0]=weightNow;times[1]=now+duration;values[1]=weightThen;return this;}}class AnimationMixer extends EventDispatcher{constructor(root){super();this._root=root;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1.0;}_bindAction(action,prototypeAction){const root=action._localRoot||this._root,tracks=action._clip.tracks,nTracks=tracks.length,bindings=action._propertyBindings,interpolants=action._interpolants,rootUuid=root.uuid,bindingsByRoot=this._bindingsByRootAndName;let bindingsByName=bindingsByRoot[rootUuid];if(bindingsByName===undefined){bindingsByName={};bindingsByRoot[rootUuid]=bindingsByName;}for(let i=0;i!==nTracks;++i){const track=tracks[i],trackName=track.name;let binding=bindingsByName[trackName];if(binding!==undefined){++binding.referenceCount;bindings[i]=binding;}else{binding=bindings[i];if(binding!==undefined){// existing binding, make sure the cache knows
if(binding._cacheIndex===null){++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);}continue;}const path=prototypeAction&&prototypeAction._propertyBindings[i].binding.parsedPath;binding=new PropertyMixer(PropertyBinding.create(root,trackName,path),track.ValueTypeName,track.getValueSize());++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);bindings[i]=binding;}interpolants[i].resultBuffer=binding.buffer;}}_activateAction(action){if(!this._isActiveAction(action)){if(action._cacheIndex===null){// this action has been forgotten by the cache, but the user
// appears to be still using it -> rebind
const rootUuid=(action._localRoot||this._root).uuid,clipUuid=action._clip.uuid,actionsForClip=this._actionsByClip[clipUuid];this._bindAction(action,actionsForClip&&actionsForClip.knownActions[0]);this._addInactiveAction(action,clipUuid,rootUuid);}const bindings=action._propertyBindings;// increment reference counts / sort out state
for(let i=0,n=bindings.length;i!==n;++i){const binding=bindings[i];if(binding.useCount++===0){this._lendBinding(binding);binding.saveOriginalState();}}this._lendAction(action);}}_deactivateAction(action){if(this._isActiveAction(action)){const bindings=action._propertyBindings;// decrement reference counts / sort out state
for(let i=0,n=bindings.length;i!==n;++i){const binding=bindings[i];if(--binding.useCount===0){binding.restoreOriginalState();this._takeBackBinding(binding);}}this._takeBackAction(action);}}// Memory manager
_initMemoryManager(){this._actions=[];// 'nActiveActions' followed by inactive ones
this._nActiveActions=0;this._actionsByClip={};// inside:
// {
// 	knownActions: Array< AnimationAction > - used as prototypes
// 	actionByRoot: AnimationAction - lookup
// }
this._bindings=[];// 'nActiveBindings' followed by inactive ones
this._nActiveBindings=0;this._bindingsByRootAndName={};// inside: Map< name, PropertyMixer >
this._controlInterpolants=[];// same game as above
this._nActiveControlInterpolants=0;const scope=this;this.stats={actions:{get total(){return scope._actions.length;},get inUse(){return scope._nActiveActions;}},bindings:{get total(){return scope._bindings.length;},get inUse(){return scope._nActiveBindings;}},controlInterpolants:{get total(){return scope._controlInterpolants.length;},get inUse(){return scope._nActiveControlInterpolants;}}};}// Memory management for AnimationAction objects
_isActiveAction(action){const index=action._cacheIndex;return index!==null&&index<this._nActiveActions;}_addInactiveAction(action,clipUuid,rootUuid){const actions=this._actions,actionsByClip=this._actionsByClip;let actionsForClip=actionsByClip[clipUuid];if(actionsForClip===undefined){actionsForClip={knownActions:[action],actionByRoot:{}};action._byClipCacheIndex=0;actionsByClip[clipUuid]=actionsForClip;}else{const knownActions=actionsForClip.knownActions;action._byClipCacheIndex=knownActions.length;knownActions.push(action);}action._cacheIndex=actions.length;actions.push(action);actionsForClip.actionByRoot[rootUuid]=action;}_removeInactiveAction(action){const actions=this._actions,lastInactiveAction=actions[actions.length-1],cacheIndex=action._cacheIndex;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();action._cacheIndex=null;const clipUuid=action._clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid],knownActionsForClip=actionsForClip.knownActions,lastKnownAction=knownActionsForClip[knownActionsForClip.length-1],byClipCacheIndex=action._byClipCacheIndex;lastKnownAction._byClipCacheIndex=byClipCacheIndex;knownActionsForClip[byClipCacheIndex]=lastKnownAction;knownActionsForClip.pop();action._byClipCacheIndex=null;const actionByRoot=actionsForClip.actionByRoot,rootUuid=(action._localRoot||this._root).uuid;delete actionByRoot[rootUuid];if(knownActionsForClip.length===0){delete actionsByClip[clipUuid];}this._removeInactiveBindingsForAction(action);}_removeInactiveBindingsForAction(action){const bindings=action._propertyBindings;for(let i=0,n=bindings.length;i!==n;++i){const binding=bindings[i];if(--binding.referenceCount===0){this._removeInactiveBinding(binding);}}}_lendAction(action){// [ active actions |  inactive actions  ]
// [  active actions >| inactive actions ]
//                 s        a
//                  <-swap->
//                 a        s
const actions=this._actions,prevIndex=action._cacheIndex,lastActiveIndex=this._nActiveActions++,firstInactiveAction=actions[lastActiveIndex];action._cacheIndex=lastActiveIndex;actions[lastActiveIndex]=action;firstInactiveAction._cacheIndex=prevIndex;actions[prevIndex]=firstInactiveAction;}_takeBackAction(action){// [  active actions  | inactive actions ]
// [ active actions |< inactive actions  ]
//        a        s
//         <-swap->
//        s        a
const actions=this._actions,prevIndex=action._cacheIndex,firstInactiveIndex=--this._nActiveActions,lastActiveAction=actions[firstInactiveIndex];action._cacheIndex=firstInactiveIndex;actions[firstInactiveIndex]=action;lastActiveAction._cacheIndex=prevIndex;actions[prevIndex]=lastActiveAction;}// Memory management for PropertyMixer objects
_addInactiveBinding(binding,rootUuid,trackName){const bindingsByRoot=this._bindingsByRootAndName,bindings=this._bindings;let bindingByName=bindingsByRoot[rootUuid];if(bindingByName===undefined){bindingByName={};bindingsByRoot[rootUuid]=bindingByName;}bindingByName[trackName]=binding;binding._cacheIndex=bindings.length;bindings.push(binding);}_removeInactiveBinding(binding){const bindings=this._bindings,propBinding=binding.binding,rootUuid=propBinding.rootNode.uuid,trackName=propBinding.path,bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],lastInactiveBinding=bindings[bindings.length-1],cacheIndex=binding._cacheIndex;lastInactiveBinding._cacheIndex=cacheIndex;bindings[cacheIndex]=lastInactiveBinding;bindings.pop();delete bindingByName[trackName];if(Object.keys(bindingByName).length===0){delete bindingsByRoot[rootUuid];}}_lendBinding(binding){const bindings=this._bindings,prevIndex=binding._cacheIndex,lastActiveIndex=this._nActiveBindings++,firstInactiveBinding=bindings[lastActiveIndex];binding._cacheIndex=lastActiveIndex;bindings[lastActiveIndex]=binding;firstInactiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=firstInactiveBinding;}_takeBackBinding(binding){const bindings=this._bindings,prevIndex=binding._cacheIndex,firstInactiveIndex=--this._nActiveBindings,lastActiveBinding=bindings[firstInactiveIndex];binding._cacheIndex=firstInactiveIndex;bindings[firstInactiveIndex]=binding;lastActiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=lastActiveBinding;}// Memory management of Interpolants for weight and time scale
_lendControlInterpolant(){const interpolants=this._controlInterpolants,lastActiveIndex=this._nActiveControlInterpolants++;let interpolant=interpolants[lastActiveIndex];if(interpolant===undefined){interpolant=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer);interpolant.__cacheIndex=lastActiveIndex;interpolants[lastActiveIndex]=interpolant;}return interpolant;}_takeBackControlInterpolant(interpolant){const interpolants=this._controlInterpolants,prevIndex=interpolant.__cacheIndex,firstInactiveIndex=--this._nActiveControlInterpolants,lastActiveInterpolant=interpolants[firstInactiveIndex];interpolant.__cacheIndex=firstInactiveIndex;interpolants[firstInactiveIndex]=interpolant;lastActiveInterpolant.__cacheIndex=prevIndex;interpolants[prevIndex]=lastActiveInterpolant;}// return an action for a clip optionally using a custom root target
// object (this method allocates a lot of dynamic memory in case a
// previously unknown clip/root combination is specified)
clipAction(clip,optionalRoot,blendMode){const root=optionalRoot||this._root,rootUuid=root.uuid;let clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip;const clipUuid=clipObject!==null?clipObject.uuid:clip;const actionsForClip=this._actionsByClip[clipUuid];let prototypeAction=null;if(blendMode===undefined){if(clipObject!==null){blendMode=clipObject.blendMode;}else{blendMode=NormalAnimationBlendMode;}}if(actionsForClip!==undefined){const existingAction=actionsForClip.actionByRoot[rootUuid];if(existingAction!==undefined&&existingAction.blendMode===blendMode){return existingAction;}// we know the clip, so we don't have to parse all
// the bindings again but can just copy
prototypeAction=actionsForClip.knownActions[0];// also, take the clip from the prototype action
if(clipObject===null)clipObject=prototypeAction._clip;}// clip must be known when specified via string
if(clipObject===null)return null;// allocate all resources required to run it
const newAction=new AnimationAction(this,clipObject,optionalRoot,blendMode);this._bindAction(newAction,prototypeAction);// and make the action known to the memory manager
this._addInactiveAction(newAction,clipUuid,rootUuid);return newAction;}// get an existing action
existingAction(clip,optionalRoot){const root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid];if(actionsForClip!==undefined){return actionsForClip.actionByRoot[rootUuid]||null;}return null;}// deactivates all previously scheduled actions
stopAllAction(){const actions=this._actions,nActions=this._nActiveActions;for(let i=nActions-1;i>=0;--i){actions[i].stop();}return this;}// advance the time and update apply the animation
update(deltaTime){deltaTime*=this.timeScale;const actions=this._actions,nActions=this._nActiveActions,time=this.time+=deltaTime,timeDirection=Math.sign(deltaTime),accuIndex=this._accuIndex^=1;// run active actions
for(let i=0;i!==nActions;++i){const action=actions[i];action._update(time,deltaTime,timeDirection,accuIndex);}// update scene graph
const bindings=this._bindings,nBindings=this._nActiveBindings;for(let i=0;i!==nBindings;++i){bindings[i].apply(accuIndex);}return this;}// Allows you to seek to a specific time in an animation.
setTime(timeInSeconds){this.time=0;// Zero out time attribute for AnimationMixer object;
for(let i=0;i<this._actions.length;i++){this._actions[i].time=0;// Zero out time attribute for all associated AnimationAction objects.
}return this.update(timeInSeconds);// Update used to set exact time. Returns "this" AnimationMixer object.
}// return this mixer's root target object
getRoot(){return this._root;}// free all resources specific to a particular clip
uncacheClip(clip){const actions=this._actions,clipUuid=clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip!==undefined){// note: just calling _removeInactiveAction would mess up the
// iteration state and also require updating the state we can
// just throw away
const actionsToRemove=actionsForClip.knownActions;for(let i=0,n=actionsToRemove.length;i!==n;++i){const action=actionsToRemove[i];this._deactivateAction(action);const cacheIndex=action._cacheIndex,lastInactiveAction=actions[actions.length-1];action._cacheIndex=null;action._byClipCacheIndex=null;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();this._removeInactiveBindingsForAction(action);}delete actionsByClip[clipUuid];}}// free all resources specific to a particular root target object
uncacheRoot(root){const rootUuid=root.uuid,actionsByClip=this._actionsByClip;for(const clipUuid in actionsByClip){const actionByRoot=actionsByClip[clipUuid].actionByRoot,action=actionByRoot[rootUuid];if(action!==undefined){this._deactivateAction(action);this._removeInactiveAction(action);}}const bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid];if(bindingByName!==undefined){for(const trackName in bindingByName){const binding=bindingByName[trackName];binding.restoreOriginalState();this._removeInactiveBinding(binding);}}}// remove a targeted clip from the cache
uncacheAction(clip,optionalRoot){const action=this.existingAction(clip,optionalRoot);if(action!==null){this._deactivateAction(action);this._removeInactiveAction(action);}}}exports.AnimationMixer=AnimationMixer;AnimationMixer.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Uniform{constructor(value){if(typeof value==='string'){console.warn('THREE.Uniform: Type parameter is no longer needed.');value=arguments[1];}this.value=value;}clone(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone());}}exports.Uniform=Uniform;class InstancedInterleavedBuffer extends InterleavedBuffer{constructor(array,stride,meshPerAttribute=1){super(array,stride);this.meshPerAttribute=meshPerAttribute;}copy(source){super.copy(source);this.meshPerAttribute=source.meshPerAttribute;return this;}clone(data){const ib=super.clone(data);ib.meshPerAttribute=this.meshPerAttribute;return ib;}toJSON(data){const json=super.toJSON(data);json.isInstancedInterleavedBuffer=true;json.meshPerAttribute=this.meshPerAttribute;return json;}}exports.InstancedInterleavedBuffer=InstancedInterleavedBuffer;InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer=true;class GLBufferAttribute{constructor(buffer,type,itemSize,elementSize,count){this.buffer=buffer;this.type=type;this.itemSize=itemSize;this.elementSize=elementSize;this.count=count;this.version=0;}set needsUpdate(value){if(value===true)this.version++;}setBuffer(buffer){this.buffer=buffer;return this;}setType(type,elementSize){this.type=type;this.elementSize=elementSize;return this;}setItemSize(itemSize){this.itemSize=itemSize;return this;}setCount(count){this.count=count;return this;}}exports.GLBufferAttribute=GLBufferAttribute;GLBufferAttribute.prototype.isGLBufferAttribute=true;class Raycaster{constructor(origin,direction,near=0,far=Infinity){this.ray=new Ray(origin,direction);// direction is assumed to be normalized (for accurate distance calculations)
this.near=near;this.far=far;this.camera=null;this.layers=new Layers();this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}};}set(origin,direction){// direction is assumed to be normalized (for accurate distance calculations)
this.ray.set(origin,direction);}setFromCamera(coords,camera){if(camera.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(camera.matrixWorld);this.ray.direction.set(coords.x,coords.y,0.5).unproject(camera).sub(this.ray.origin).normalize();this.camera=camera;}else if(camera.isOrthographicCamera){this.ray.origin.set(coords.x,coords.y,(camera.near+camera.far)/(camera.near-camera.far)).unproject(camera);// set origin in plane of camera
this.ray.direction.set(0,0,-1).transformDirection(camera.matrixWorld);this.camera=camera;}else{console.error('THREE.Raycaster: Unsupported camera type: '+camera.type);}}intersectObject(object,recursive=true,intersects=[]){intersectObject(object,this,intersects,recursive);intersects.sort(ascSort);return intersects;}intersectObjects(objects,recursive=true,intersects=[]){for(let i=0,l=objects.length;i<l;i++){intersectObject(objects[i],this,intersects,recursive);}intersects.sort(ascSort);return intersects;}}exports.Raycaster=Raycaster;function ascSort(a,b){return a.distance-b.distance;}function intersectObject(object,raycaster,intersects,recursive){if(object.layers.test(raycaster.layers)){object.raycast(raycaster,intersects);}if(recursive===true){const children=object.children;for(let i=0,l=children.length;i<l;i++){intersectObject(children[i],raycaster,intersects,true);}}}/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */class Spherical{constructor(radius=1,phi=0,theta=0){this.radius=radius;this.phi=phi;// polar angle
this.theta=theta;// azimuthal angle
return this;}set(radius,phi,theta){this.radius=radius;this.phi=phi;this.theta=theta;return this;}copy(other){this.radius=other.radius;this.phi=other.phi;this.theta=other.theta;return this;}// restrict phi to be betwee EPS and PI-EPS
makeSafe(){const EPS=0.000001;this.phi=Math.max(EPS,Math.min(Math.PI-EPS,this.phi));return this;}setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);}setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+y*y+z*z);if(this.radius===0){this.theta=0;this.phi=0;}else{this.theta=Math.atan2(x,z);this.phi=Math.acos(clamp(y/this.radius,-1,1));}return this;}clone(){return new this.constructor().copy(this);}}/**
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 */exports.Spherical=Spherical;class Cylindrical{constructor(radius=1,theta=0,y=0){this.radius=radius;// distance from the origin to a point in the x-z plane
this.theta=theta;// counterclockwise angle in the x-z plane measured in radians from the positive z-axis
this.y=y;// height above the x-z plane
return this;}set(radius,theta,y){this.radius=radius;this.theta=theta;this.y=y;return this;}copy(other){this.radius=other.radius;this.theta=other.theta;this.y=other.y;return this;}setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);}setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+z*z);this.theta=Math.atan2(x,z);this.y=y;return this;}clone(){return new this.constructor().copy(this);}}exports.Cylindrical=Cylindrical;const _vector$4=/*@__PURE__*/new Vector2();class Box2{constructor(min=new Vector2(+Infinity,+Infinity),max=new Vector2(-Infinity,-Infinity)){this.min=min;this.max=max;}set(min,max){this.min.copy(min);this.max.copy(max);return this;}setFromPoints(points){this.makeEmpty();for(let i=0,il=points.length;i<il;i++){this.expandByPoint(points[i]);}return this;}setFromCenterAndSize(center,size){const halfSize=_vector$4.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;}clone(){return new this.constructor().copy(this);}copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;}makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this;}isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
return this.max.x<this.min.x||this.max.y<this.min.y;}getCenter(target){return this.isEmpty()?target.set(0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);}getSize(target){return this.isEmpty()?target.set(0,0):target.subVectors(this.max,this.min);}expandByPoint(point){this.min.min(point);this.max.max(point);return this;}expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;}expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;}containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y?false:true;}containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y;}getParameter(point,target){// This can potentially have a divide by zero if the box
// has a size dimension of 0.
return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y));}intersectsBox(box){// using 4 splitting planes to rule out intersections
return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y?false:true;}clampPoint(point,target){return target.copy(point).clamp(this.min,this.max);}distanceToPoint(point){const clampedPoint=_vector$4.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();}intersect(box){this.min.max(box.min);this.max.min(box.max);return this;}union(box){this.min.min(box.min);this.max.max(box.max);return this;}translate(offset){this.min.add(offset);this.max.add(offset);return this;}equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}}exports.Box2=Box2;Box2.prototype.isBox2=true;const _startP=/*@__PURE__*/new Vector3();const _startEnd=/*@__PURE__*/new Vector3();class Line3{constructor(start=new Vector3(),end=new Vector3()){this.start=start;this.end=end;}set(start,end){this.start.copy(start);this.end.copy(end);return this;}copy(line){this.start.copy(line.start);this.end.copy(line.end);return this;}getCenter(target){return target.addVectors(this.start,this.end).multiplyScalar(0.5);}delta(target){return target.subVectors(this.end,this.start);}distanceSq(){return this.start.distanceToSquared(this.end);}distance(){return this.start.distanceTo(this.end);}at(t,target){return this.delta(target).multiplyScalar(t).add(this.start);}closestPointToPointParameter(point,clampToLine){_startP.subVectors(point,this.start);_startEnd.subVectors(this.end,this.start);const startEnd2=_startEnd.dot(_startEnd);const startEnd_startP=_startEnd.dot(_startP);let t=startEnd_startP/startEnd2;if(clampToLine){t=clamp(t,0,1);}return t;}closestPointToPoint(point,clampToLine,target){const t=this.closestPointToPointParameter(point,clampToLine);return this.delta(target).multiplyScalar(t).add(this.start);}applyMatrix4(matrix){this.start.applyMatrix4(matrix);this.end.applyMatrix4(matrix);return this;}equals(line){return line.start.equals(this.start)&&line.end.equals(this.end);}clone(){return new this.constructor().copy(this);}}exports.Line3=Line3;const _vector$3=/*@__PURE__*/new Vector3();class SpotLightHelper extends Object3D{constructor(light,color){super();this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;const geometry=new BufferGeometry();const positions=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let i=0,j=1,l=32;i<l;i++,j++){const p1=i/l*Math.PI*2;const p2=j/l*Math.PI*2;positions.push(Math.cos(p1),Math.sin(p1),1,Math.cos(p2),Math.sin(p2),1);}geometry.setAttribute('position',new Float32BufferAttribute(positions,3));const material=new LineBasicMaterial({fog:false,toneMapped:false});this.cone=new LineSegments(geometry,material);this.add(this.cone);this.update();}dispose(){this.cone.geometry.dispose();this.cone.material.dispose();}update(){this.light.updateMatrixWorld();const coneLength=this.light.distance?this.light.distance:1000;const coneWidth=coneLength*Math.tan(this.light.angle);this.cone.scale.set(coneWidth,coneWidth,coneLength);_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(_vector$3);if(this.color!==undefined){this.cone.material.color.set(this.color);}else{this.cone.material.color.copy(this.light.color);}}}exports.SpotLightHelper=SpotLightHelper;const _vector$2=/*@__PURE__*/new Vector3();const _boneMatrix=/*@__PURE__*/new Matrix4();const _matrixWorldInv=/*@__PURE__*/new Matrix4();class SkeletonHelper extends LineSegments{constructor(object){const bones=getBoneList(object);const geometry=new BufferGeometry();const vertices=[];const colors=[];const color1=new Color(0,0,1);const color2=new Color(0,1,0);for(let i=0;i<bones.length;i++){const bone=bones[i];if(bone.parent&&bone.parent.isBone){vertices.push(0,0,0);vertices.push(0,0,0);colors.push(color1.r,color1.g,color1.b);colors.push(color2.r,color2.g,color2.b);}}geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));const material=new LineBasicMaterial({vertexColors:true,depthTest:false,depthWrite:false,toneMapped:false,transparent:true});super(geometry,material);this.type='SkeletonHelper';this.isSkeletonHelper=true;this.root=object;this.bones=bones;this.matrix=object.matrixWorld;this.matrixAutoUpdate=false;}updateMatrixWorld(force){const bones=this.bones;const geometry=this.geometry;const position=geometry.getAttribute('position');_matrixWorldInv.copy(this.root.matrixWorld).invert();for(let i=0,j=0;i<bones.length;i++){const bone=bones[i];if(bone.parent&&bone.parent.isBone){_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.matrixWorld);_vector$2.setFromMatrixPosition(_boneMatrix);position.setXYZ(j,_vector$2.x,_vector$2.y,_vector$2.z);_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.parent.matrixWorld);_vector$2.setFromMatrixPosition(_boneMatrix);position.setXYZ(j+1,_vector$2.x,_vector$2.y,_vector$2.z);j+=2;}}geometry.getAttribute('position').needsUpdate=true;super.updateMatrixWorld(force);}}exports.SkeletonHelper=SkeletonHelper;function getBoneList(object){const boneList=[];if(object.isBone===true){boneList.push(object);}for(let i=0;i<object.children.length;i++){boneList.push.apply(boneList,getBoneList(object.children[i]));}return boneList;}class PointLightHelper extends Mesh{constructor(light,sphereSize,color){const geometry=new SphereGeometry(sphereSize,4,2);const material=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});super(geometry,material);this.light=light;this.light.updateMatrixWorld();this.color=color;this.type='PointLightHelper';this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update();/*
	// TODO: delete this comment?
	const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	const d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/}dispose(){this.geometry.dispose();this.material.dispose();}update(){if(this.color!==undefined){this.material.color.set(this.color);}else{this.material.color.copy(this.light.color);}/*
		const d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/}}exports.PointLightHelper=PointLightHelper;const _vector$1=/*@__PURE__*/new Vector3();const _color1=/*@__PURE__*/new Color();const _color2=/*@__PURE__*/new Color();class HemisphereLightHelper extends Object3D{constructor(light,size,color){super();this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;const geometry=new OctahedronGeometry(size);geometry.rotateY(Math.PI*0.5);this.material=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});if(this.color===undefined)this.material.vertexColors=true;const position=geometry.getAttribute('position');const colors=new Float32Array(position.count*3);geometry.setAttribute('color',new BufferAttribute(colors,3));this.add(new Mesh(geometry,this.material));this.update();}dispose(){this.children[0].geometry.dispose();this.children[0].material.dispose();}update(){const mesh=this.children[0];if(this.color!==undefined){this.material.color.set(this.color);}else{const colors=mesh.geometry.getAttribute('color');_color1.copy(this.light.color);_color2.copy(this.light.groundColor);for(let i=0,l=colors.count;i<l;i++){const color=i<l/2?_color1:_color2;colors.setXYZ(i,color.r,color.g,color.b);}colors.needsUpdate=true;}mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());}}exports.HemisphereLightHelper=HemisphereLightHelper;class GridHelper extends LineSegments{constructor(size=10,divisions=10,color1=0x444444,color2=0x888888){color1=new Color(color1);color2=new Color(color2);const center=divisions/2;const step=size/divisions;const halfSize=size/2;const vertices=[],colors=[];for(let i=0,j=0,k=-halfSize;i<=divisions;i++,k+=step){vertices.push(-halfSize,0,k,halfSize,0,k);vertices.push(k,0,-halfSize,k,0,halfSize);const color=i===center?color1:color2;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;}const geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));const material=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(geometry,material);this.type='GridHelper';}}exports.GridHelper=GridHelper;class PolarGridHelper extends LineSegments{constructor(radius=10,radials=16,circles=8,divisions=64,color1=0x444444,color2=0x888888){color1=new Color(color1);color2=new Color(color2);const vertices=[];const colors=[];// create the radials
for(let i=0;i<=radials;i++){const v=i/radials*(Math.PI*2);const x=Math.sin(v)*radius;const z=Math.cos(v)*radius;vertices.push(0,0,0);vertices.push(x,0,z);const color=i&1?color1:color2;colors.push(color.r,color.g,color.b);colors.push(color.r,color.g,color.b);}// create the circles
for(let i=0;i<=circles;i++){const color=i&1?color1:color2;const r=radius-radius/circles*i;for(let j=0;j<divisions;j++){// first vertex
let v=j/divisions*(Math.PI*2);let x=Math.sin(v)*r;let z=Math.cos(v)*r;vertices.push(x,0,z);colors.push(color.r,color.g,color.b);// second vertex
v=(j+1)/divisions*(Math.PI*2);x=Math.sin(v)*r;z=Math.cos(v)*r;vertices.push(x,0,z);colors.push(color.r,color.g,color.b);}}const geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));const material=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(geometry,material);this.type='PolarGridHelper';}}exports.PolarGridHelper=PolarGridHelper;const _v1=/*@__PURE__*/new Vector3();const _v2=/*@__PURE__*/new Vector3();const _v3=/*@__PURE__*/new Vector3();class DirectionalLightHelper extends Object3D{constructor(light,size,color){super();this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;if(size===undefined)size=1;let geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute([-size,size,0,size,size,0,size,-size,0,-size,-size,0,-size,size,0],3));const material=new LineBasicMaterial({fog:false,toneMapped:false});this.lightPlane=new Line(geometry,material);this.add(this.lightPlane);geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute([0,0,0,0,0,1],3));this.targetLine=new Line(geometry,material);this.add(this.targetLine);this.update();}dispose(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose();}update(){_v1.setFromMatrixPosition(this.light.matrixWorld);_v2.setFromMatrixPosition(this.light.target.matrixWorld);_v3.subVectors(_v2,_v1);this.lightPlane.lookAt(_v2);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color);}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color);}this.targetLine.lookAt(_v2);this.targetLine.scale.z=_v3.length();}}exports.DirectionalLightHelper=DirectionalLightHelper;const _vector=/*@__PURE__*/new Vector3();const _camera=/*@__PURE__*/new Camera();/**
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
 */class CameraHelper extends LineSegments{constructor(camera){const geometry=new BufferGeometry();const material=new LineBasicMaterial({color:0xffffff,vertexColors:true,toneMapped:false});const vertices=[];const colors=[];const pointMap={};// colors
const colorFrustum=new Color(0xffaa00);const colorCone=new Color(0xff0000);const colorUp=new Color(0x00aaff);const colorTarget=new Color(0xffffff);const colorCross=new Color(0x333333);// near
addLine('n1','n2',colorFrustum);addLine('n2','n4',colorFrustum);addLine('n4','n3',colorFrustum);addLine('n3','n1',colorFrustum);// far
addLine('f1','f2',colorFrustum);addLine('f2','f4',colorFrustum);addLine('f4','f3',colorFrustum);addLine('f3','f1',colorFrustum);// sides
addLine('n1','f1',colorFrustum);addLine('n2','f2',colorFrustum);addLine('n3','f3',colorFrustum);addLine('n4','f4',colorFrustum);// cone
addLine('p','n1',colorCone);addLine('p','n2',colorCone);addLine('p','n3',colorCone);addLine('p','n4',colorCone);// up
addLine('u1','u2',colorUp);addLine('u2','u3',colorUp);addLine('u3','u1',colorUp);// target
addLine('c','t',colorTarget);addLine('p','c',colorCross);// cross
addLine('cn1','cn2',colorCross);addLine('cn3','cn4',colorCross);addLine('cf1','cf2',colorCross);addLine('cf3','cf4',colorCross);function addLine(a,b,color){addPoint(a,color);addPoint(b,color);}function addPoint(id,color){vertices.push(0,0,0);colors.push(color.r,color.g,color.b);if(pointMap[id]===undefined){pointMap[id]=[];}pointMap[id].push(vertices.length/3-1);}geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));super(geometry,material);this.type='CameraHelper';this.camera=camera;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=camera.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=pointMap;this.update();}update(){const geometry=this.geometry;const pointMap=this.pointMap;const w=1,h=1;// we need just camera projection matrix inverse
// world matrix must be identity
_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);// center / target
setPoint('c',pointMap,geometry,_camera,0,0,-1);setPoint('t',pointMap,geometry,_camera,0,0,1);// near
setPoint('n1',pointMap,geometry,_camera,-w,-h,-1);setPoint('n2',pointMap,geometry,_camera,w,-h,-1);setPoint('n3',pointMap,geometry,_camera,-w,h,-1);setPoint('n4',pointMap,geometry,_camera,w,h,-1);// far
setPoint('f1',pointMap,geometry,_camera,-w,-h,1);setPoint('f2',pointMap,geometry,_camera,w,-h,1);setPoint('f3',pointMap,geometry,_camera,-w,h,1);setPoint('f4',pointMap,geometry,_camera,w,h,1);// up
setPoint('u1',pointMap,geometry,_camera,w*0.7,h*1.1,-1);setPoint('u2',pointMap,geometry,_camera,-w*0.7,h*1.1,-1);setPoint('u3',pointMap,geometry,_camera,0,h*2,-1);// cross
setPoint('cf1',pointMap,geometry,_camera,-w,0,1);setPoint('cf2',pointMap,geometry,_camera,w,0,1);setPoint('cf3',pointMap,geometry,_camera,0,-h,1);setPoint('cf4',pointMap,geometry,_camera,0,h,1);setPoint('cn1',pointMap,geometry,_camera,-w,0,-1);setPoint('cn2',pointMap,geometry,_camera,w,0,-1);setPoint('cn3',pointMap,geometry,_camera,0,-h,-1);setPoint('cn4',pointMap,geometry,_camera,0,h,-1);geometry.getAttribute('position').needsUpdate=true;}dispose(){this.geometry.dispose();this.material.dispose();}}exports.CameraHelper=CameraHelper;function setPoint(point,pointMap,geometry,camera,x,y,z){_vector.set(x,y,z).unproject(camera);const points=pointMap[point];if(points!==undefined){const position=geometry.getAttribute('position');for(let i=0,l=points.length;i<l;i++){position.setXYZ(points[i],_vector.x,_vector.y,_vector.z);}}}const _box=/*@__PURE__*/new Box3();class BoxHelper extends LineSegments{constructor(object,color=0xffff00){const indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const positions=new Float32Array(8*3);const geometry=new BufferGeometry();geometry.setIndex(new BufferAttribute(indices,1));geometry.setAttribute('position',new BufferAttribute(positions,3));super(geometry,new LineBasicMaterial({color:color,toneMapped:false}));this.object=object;this.type='BoxHelper';this.matrixAutoUpdate=false;this.update();}update(object){if(object!==undefined){console.warn('THREE.BoxHelper: .update() has no longer arguments.');}if(this.object!==undefined){_box.setFromObject(this.object);}if(_box.isEmpty())return;const min=_box.min;const max=_box.max;/*
			5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/const position=this.geometry.attributes.position;const array=position.array;array[0]=max.x;array[1]=max.y;array[2]=max.z;array[3]=min.x;array[4]=max.y;array[5]=max.z;array[6]=min.x;array[7]=min.y;array[8]=max.z;array[9]=max.x;array[10]=min.y;array[11]=max.z;array[12]=max.x;array[13]=max.y;array[14]=min.z;array[15]=min.x;array[16]=max.y;array[17]=min.z;array[18]=min.x;array[19]=min.y;array[20]=min.z;array[21]=max.x;array[22]=min.y;array[23]=min.z;position.needsUpdate=true;this.geometry.computeBoundingSphere();}setFromObject(object){this.object=object;this.update();return this;}copy(source){LineSegments.prototype.copy.call(this,source);this.object=source.object;return this;}}exports.BoxHelper=BoxHelper;class Box3Helper extends LineSegments{constructor(box,color=0xffff00){const indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const positions=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];const geometry=new BufferGeometry();geometry.setIndex(new BufferAttribute(indices,1));geometry.setAttribute('position',new Float32BufferAttribute(positions,3));super(geometry,new LineBasicMaterial({color:color,toneMapped:false}));this.box=box;this.type='Box3Helper';this.geometry.computeBoundingSphere();}updateMatrixWorld(force){const box=this.box;if(box.isEmpty())return;box.getCenter(this.position);box.getSize(this.scale);this.scale.multiplyScalar(0.5);super.updateMatrixWorld(force);}}exports.Box3Helper=Box3Helper;class PlaneHelper extends Line{constructor(plane,size=1,hex=0xffff00){const color=hex;const positions=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0];const geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(positions,3));geometry.computeBoundingSphere();super(geometry,new LineBasicMaterial({color:color,toneMapped:false}));this.type='PlaneHelper';this.plane=plane;this.size=size;const positions2=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1];const geometry2=new BufferGeometry();geometry2.setAttribute('position',new Float32BufferAttribute(positions2,3));geometry2.computeBoundingSphere();this.add(new Mesh(geometry2,new MeshBasicMaterial({color:color,opacity:0.2,transparent:true,depthWrite:false,toneMapped:false})));}updateMatrixWorld(force){let scale=-this.plane.constant;if(Math.abs(scale)<1e-8)scale=1e-8;// sign does not matter
this.scale.set(0.5*this.size,0.5*this.size,scale);this.children[0].material.side=scale<0?BackSide:FrontSide;// renderer flips side when determinant < 0; flipping not wanted here
this.lookAt(this.plane.normal);super.updateMatrixWorld(force);}}exports.PlaneHelper=PlaneHelper;const _axis=/*@__PURE__*/new Vector3();let _lineGeometry,_coneGeometry;class ArrowHelper extends Object3D{// dir is assumed to be normalized
constructor(dir=new Vector3(0,0,1),origin=new Vector3(0,0,0),length=1,color=0xffff00,headLength=length*0.2,headWidth=headLength*0.2){super();this.type='ArrowHelper';if(_lineGeometry===undefined){_lineGeometry=new BufferGeometry();_lineGeometry.setAttribute('position',new Float32BufferAttribute([0,0,0,0,1,0],3));_coneGeometry=new CylinderGeometry(0,0.5,1,5,1);_coneGeometry.translate(0,-0.5,0);}this.position.copy(origin);this.line=new Line(_lineGeometry,new LineBasicMaterial({color:color,toneMapped:false}));this.line.matrixAutoUpdate=false;this.add(this.line);this.cone=new Mesh(_coneGeometry,new MeshBasicMaterial({color:color,toneMapped:false}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(dir);this.setLength(length,headLength,headWidth);}setDirection(dir){// dir is assumed to be normalized
if(dir.y>0.99999){this.quaternion.set(0,0,0,1);}else if(dir.y<-0.99999){this.quaternion.set(1,0,0,0);}else{_axis.set(dir.z,0,-dir.x).normalize();const radians=Math.acos(dir.y);this.quaternion.setFromAxisAngle(_axis,radians);}}setLength(length,headLength=length*0.2,headWidth=headLength*0.2){this.line.scale.set(1,Math.max(0.0001,length-headLength),1);// see #17458
this.line.updateMatrix();this.cone.scale.set(headWidth,headLength,headWidth);this.cone.position.y=length;this.cone.updateMatrix();}setColor(color){this.line.material.color.set(color);this.cone.material.color.set(color);}copy(source){super.copy(source,false);this.line.copy(source.line);this.cone.copy(source.cone);return this;}}exports.ArrowHelper=ArrowHelper;class AxesHelper extends LineSegments{constructor(size=1){const vertices=[0,0,0,size,0,0,0,0,0,0,size,0,0,0,0,0,0,size];const colors=[1,0,0,1,0.6,0,0,1,0,0.6,1,0,0,0,1,0,0.6,1];const geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));const material=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(geometry,material);this.type='AxesHelper';}setColors(xAxisColor,yAxisColor,zAxisColor){const color=new Color();const array=this.geometry.attributes.color.array;color.set(xAxisColor);color.toArray(array,0);color.toArray(array,3);color.set(yAxisColor);color.toArray(array,6);color.toArray(array,9);color.set(zAxisColor);color.toArray(array,12);color.toArray(array,15);this.geometry.attributes.color.needsUpdate=true;return this;}dispose(){this.geometry.dispose();this.material.dispose();}}exports.AxesHelper=AxesHelper;class ShapePath{constructor(){this.type='ShapePath';this.color=new Color();this.subPaths=[];this.currentPath=null;}moveTo(x,y){this.currentPath=new Path();this.subPaths.push(this.currentPath);this.currentPath.moveTo(x,y);return this;}lineTo(x,y){this.currentPath.lineTo(x,y);return this;}quadraticCurveTo(aCPx,aCPy,aX,aY){this.currentPath.quadraticCurveTo(aCPx,aCPy,aX,aY);return this;}bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){this.currentPath.bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY);return this;}splineThru(pts){this.currentPath.splineThru(pts);return this;}toShapes(isCCW,noHoles){function toShapesNoHoles(inSubpaths){const shapes=[];for(let i=0,l=inSubpaths.length;i<l;i++){const tmpPath=inSubpaths[i];const tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);}return shapes;}function isPointInsidePolygon(inPt,inPolygon){const polyLen=inPolygon.length;// inPt on polygon contour => immediate success    or
// toggling of inside/outside at every single! intersection point of an edge
//  with the horizontal line through inPt, left of inPt
//  not counting lowerY endpoints of edges and whole edges on that line
let inside=false;for(let p=polyLen-1,q=0;q<polyLen;p=q++){let edgeLowPt=inPolygon[p];let edgeHighPt=inPolygon[q];let edgeDx=edgeHighPt.x-edgeLowPt.x;let edgeDy=edgeHighPt.y-edgeLowPt.y;if(Math.abs(edgeDy)>Number.EPSILON){// not parallel
if(edgeDy<0){edgeLowPt=inPolygon[q];edgeDx=-edgeDx;edgeHighPt=inPolygon[p];edgeDy=-edgeDy;}if(inPt.y<edgeLowPt.y||inPt.y>edgeHighPt.y)continue;if(inPt.y===edgeLowPt.y){if(inPt.x===edgeLowPt.x)return true;// inPt is on contour ?
// continue;				// no intersection or edgeLowPt => doesn't count !!!
}else{const perpEdge=edgeDy*(inPt.x-edgeLowPt.x)-edgeDx*(inPt.y-edgeLowPt.y);if(perpEdge===0)return true;// inPt is on contour ?
if(perpEdge<0)continue;inside=!inside;// true intersection left of inPt
}}else{// parallel or collinear
if(inPt.y!==edgeLowPt.y)continue;// parallel
// edge lies on the same horizontal line as inPt
if(edgeHighPt.x<=inPt.x&&inPt.x<=edgeLowPt.x||edgeLowPt.x<=inPt.x&&inPt.x<=edgeHighPt.x)return true;// inPt: Point on contour !
// continue;
}}return inside;}const isClockWise=ShapeUtils.isClockWise;const subPaths=this.subPaths;if(subPaths.length===0)return[];if(noHoles===true)return toShapesNoHoles(subPaths);let solid,tmpPath,tmpShape;const shapes=[];if(subPaths.length===1){tmpPath=subPaths[0];tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);return shapes;}let holesFirst=!isClockWise(subPaths[0].getPoints());holesFirst=isCCW?!holesFirst:holesFirst;// console.log("Holes first", holesFirst);
const betterShapeHoles=[];const newShapes=[];let newShapeHoles=[];let mainIdx=0;let tmpPoints;newShapes[mainIdx]=undefined;newShapeHoles[mainIdx]=[];for(let i=0,l=subPaths.length;i<l;i++){tmpPath=subPaths[i];tmpPoints=tmpPath.getPoints();solid=isClockWise(tmpPoints);solid=isCCW?!solid:solid;if(solid){if(!holesFirst&&newShapes[mainIdx])mainIdx++;newShapes[mainIdx]={s:new Shape(),p:tmpPoints};newShapes[mainIdx].s.curves=tmpPath.curves;if(holesFirst)mainIdx++;newShapeHoles[mainIdx]=[];//console.log('cw', i);
}else{newShapeHoles[mainIdx].push({h:tmpPath,p:tmpPoints[0]});//console.log('ccw', i);
}}// only Holes? -> probably all Shapes with wrong orientation
if(!newShapes[0])return toShapesNoHoles(subPaths);if(newShapes.length>1){let ambiguous=false;let toChange=0;for(let sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){betterShapeHoles[sIdx]=[];}for(let sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){const sho=newShapeHoles[sIdx];for(let hIdx=0;hIdx<sho.length;hIdx++){const ho=sho[hIdx];let hole_unassigned=true;for(let s2Idx=0;s2Idx<newShapes.length;s2Idx++){if(isPointInsidePolygon(ho.p,newShapes[s2Idx].p)){if(sIdx!==s2Idx)toChange++;if(hole_unassigned){hole_unassigned=false;betterShapeHoles[s2Idx].push(ho);}else{ambiguous=true;}}}if(hole_unassigned){betterShapeHoles[sIdx].push(ho);}}}if(toChange>0&&ambiguous===false){newShapeHoles=betterShapeHoles;}}let tmpHoles;for(let i=0,il=newShapes.length;i<il;i++){tmpShape=newShapes[i].s;shapes.push(tmpShape);tmpHoles=newShapeHoles[i];for(let j=0,jl=tmpHoles.length;j<jl;j++){tmpShape.holes.push(tmpHoles[j].h);}}//console.log("shape", shapes);
return shapes;}}exports.ShapePath=ShapePath;const _floatView=new Float32Array(1);const _int32View=new Int32Array(_floatView.buffer);class DataUtils{// Converts float32 to float16 (stored as uint16 value).
static toHalfFloat(val){if(val>65504){console.warn('THREE.DataUtils.toHalfFloat(): value exceeds 65504.');val=65504;// maximum representable value in float16
}// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410
/* This method is faster than the OpenEXR implementation (very often
		* used, eg. in Ogre), with the additional benefit of rounding, inspired
		* by James Tursa?s half-precision code. */_floatView[0]=val;const x=_int32View[0];let bits=x>>16&0x8000;/* Get the sign */let m=x>>12&0x07ff;/* Keep one extra bit for rounding */const e=x>>23&0xff;/* Using int is faster here */ /* If zero, or denormal, or exponent underflows too much for a denormal
			* half, return signed zero. */if(e<103)return bits;/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */if(e>142){bits|=0x7c00;/* If exponent was 0xff and one mantissa bit was set, it means NaN,
						* not Inf, so make sure we set one mantissa bit too. */bits|=(e==255?0:1)&&x&0x007fffff;return bits;}/* If exponent underflows but not too much, return a denormal */if(e<113){m|=0x0800;/* Extra rounding may overflow and set mantissa to 0 and exponent
				* to 1, which is OK. */bits|=(m>>114-e)+(m>>113-e&1);return bits;}bits|=e-112<<10|m>>1;/* Extra rounding. An overflow will set mantissa to 0 and increment
			* the exponent, which is OK. */bits+=m&1;return bits;}}exports.DataUtils=DataUtils;const LineStrip=0;exports.LineStrip=LineStrip;const LinePieces=1;exports.LinePieces=LinePieces;const NoColors=0;exports.NoColors=NoColors;const FaceColors=1;exports.FaceColors=FaceColors;const VertexColors=2;exports.VertexColors=VertexColors;function MeshFaceMaterial(materials){console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');return materials;}function MultiMaterial(materials=[]){console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');materials.isMultiMaterial=true;materials.materials=materials;materials.clone=function(){return materials.slice();};return materials;}function PointCloud(geometry,material){console.warn('THREE.PointCloud has been renamed to THREE.Points.');return new Points(geometry,material);}function Particle(material){console.warn('THREE.Particle has been renamed to THREE.Sprite.');return new Sprite(material);}function ParticleSystem(geometry,material){console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');return new Points(geometry,material);}function PointCloudMaterial(parameters){console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');return new PointsMaterial(parameters);}function ParticleBasicMaterial(parameters){console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');return new PointsMaterial(parameters);}function ParticleSystemMaterial(parameters){console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');return new PointsMaterial(parameters);}function Vertex(x,y,z){console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');return new Vector3(x,y,z);}//
function DynamicBufferAttribute(array,itemSize){console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');return new BufferAttribute(array,itemSize).setUsage(DynamicDrawUsage);}function Int8Attribute(array,itemSize){console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');return new Int8BufferAttribute(array,itemSize);}function Uint8Attribute(array,itemSize){console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');return new Uint8BufferAttribute(array,itemSize);}function Uint8ClampedAttribute(array,itemSize){console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');return new Uint8ClampedBufferAttribute(array,itemSize);}function Int16Attribute(array,itemSize){console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');return new Int16BufferAttribute(array,itemSize);}function Uint16Attribute(array,itemSize){console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');return new Uint16BufferAttribute(array,itemSize);}function Int32Attribute(array,itemSize){console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');return new Int32BufferAttribute(array,itemSize);}function Uint32Attribute(array,itemSize){console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');return new Uint32BufferAttribute(array,itemSize);}function Float32Attribute(array,itemSize){console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');return new Float32BufferAttribute(array,itemSize);}function Float64Attribute(array,itemSize){console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');return new Float64BufferAttribute(array,itemSize);}//
Curve.create=function(construct,getPoint){console.log('THREE.Curve.create() has been deprecated');construct.prototype=Object.create(Curve.prototype);construct.prototype.constructor=construct;construct.prototype.getPoint=getPoint;return construct;};//
Path.prototype.fromPoints=function(points){console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');return this.setFromPoints(points);};//
function AxisHelper(size){console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');return new AxesHelper(size);}function BoundingBoxHelper(object,color){console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');return new BoxHelper(object,color);}function EdgesHelper(object,hex){console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');return new LineSegments(new EdgesGeometry(object.geometry),new LineBasicMaterial({color:hex!==undefined?hex:0xffffff}));}GridHelper.prototype.setColors=function(){console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');};SkeletonHelper.prototype.update=function(){console.error('THREE.SkeletonHelper: update() no longer needs to be called.');};function WireframeHelper(object,hex){console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');return new LineSegments(new WireframeGeometry(object.geometry),new LineBasicMaterial({color:hex!==undefined?hex:0xffffff}));}//
Loader.prototype.extractUrlBase=function(url){console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');return LoaderUtils.extractUrlBase(url);};Loader.Handlers={add:function/* regex, loader */(){console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');},get:function/* file */(){console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');}};function XHRLoader(manager){console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');return new FileLoader(manager);}function BinaryTextureLoader(manager){console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');return new DataTextureLoader(manager);}//
Box2.prototype.center=function(optionalTarget){console.warn('THREE.Box2: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);};Box2.prototype.empty=function(){console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');return this.isEmpty();};Box2.prototype.isIntersectionBox=function(box){console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);};Box2.prototype.size=function(optionalTarget){console.warn('THREE.Box2: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);};//
Box3.prototype.center=function(optionalTarget){console.warn('THREE.Box3: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);};Box3.prototype.empty=function(){console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');return this.isEmpty();};Box3.prototype.isIntersectionBox=function(box){console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);};Box3.prototype.isIntersectionSphere=function(sphere){console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);};Box3.prototype.size=function(optionalTarget){console.warn('THREE.Box3: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);};//
Euler.prototype.toVector3=function(){console.error('THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead');};//
Sphere.prototype.empty=function(){console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');return this.isEmpty();};//
Frustum.prototype.setFromMatrix=function(m){console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');return this.setFromProjectionMatrix(m);};//
Line3.prototype.center=function(optionalTarget){console.warn('THREE.Line3: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);};//
Matrix3.prototype.flattenToArrayOffset=function(array,offset){console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');return this.toArray(array,offset);};Matrix3.prototype.multiplyVector3=function(vector){console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');return vector.applyMatrix3(this);};Matrix3.prototype.multiplyVector3Array=function/* a */(){console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');};Matrix3.prototype.applyToBufferAttribute=function(attribute){console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');return attribute.applyMatrix3(this);};Matrix3.prototype.applyToVector3Array=function/* array, offset, length */(){console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');};Matrix3.prototype.getInverse=function(matrix){console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');return this.copy(matrix).invert();};//
Matrix4.prototype.extractPosition=function(m){console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');return this.copyPosition(m);};Matrix4.prototype.flattenToArrayOffset=function(array,offset){console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');return this.toArray(array,offset);};Matrix4.prototype.getPosition=function(){console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');return new Vector3().setFromMatrixColumn(this,3);};Matrix4.prototype.setRotationFromQuaternion=function(q){console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');return this.makeRotationFromQuaternion(q);};Matrix4.prototype.multiplyToArray=function(){console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');};Matrix4.prototype.multiplyVector3=function(vector){console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);};Matrix4.prototype.multiplyVector4=function(vector){console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);};Matrix4.prototype.multiplyVector3Array=function/* a */(){console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');};Matrix4.prototype.rotateAxis=function(v){console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');v.transformDirection(this);};Matrix4.prototype.crossVector=function(vector){console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);};Matrix4.prototype.translate=function(){console.error('THREE.Matrix4: .translate() has been removed.');};Matrix4.prototype.rotateX=function(){console.error('THREE.Matrix4: .rotateX() has been removed.');};Matrix4.prototype.rotateY=function(){console.error('THREE.Matrix4: .rotateY() has been removed.');};Matrix4.prototype.rotateZ=function(){console.error('THREE.Matrix4: .rotateZ() has been removed.');};Matrix4.prototype.rotateByAxis=function(){console.error('THREE.Matrix4: .rotateByAxis() has been removed.');};Matrix4.prototype.applyToBufferAttribute=function(attribute){console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');return attribute.applyMatrix4(this);};Matrix4.prototype.applyToVector3Array=function/* array, offset, length */(){console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');};Matrix4.prototype.makeFrustum=function(left,right,bottom,top,near,far){console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');return this.makePerspective(left,right,top,bottom,near,far);};Matrix4.prototype.getInverse=function(matrix){console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');return this.copy(matrix).invert();};//
Plane.prototype.isIntersectionLine=function(line){console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');return this.intersectsLine(line);};//
Quaternion.prototype.multiplyVector3=function(vector){console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');return vector.applyQuaternion(this);};Quaternion.prototype.inverse=function(){console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');return this.invert();};//
Ray.prototype.isIntersectionBox=function(box){console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);};Ray.prototype.isIntersectionPlane=function(plane){console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');return this.intersectsPlane(plane);};Ray.prototype.isIntersectionSphere=function(sphere){console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);};//
Triangle.prototype.area=function(){console.warn('THREE.Triangle: .area() has been renamed to .getArea().');return this.getArea();};Triangle.prototype.barycoordFromPoint=function(point,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return this.getBarycoord(point,target);};Triangle.prototype.midpoint=function(target){console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');return this.getMidpoint(target);};Triangle.prototypenormal=function(target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return this.getNormal(target);};Triangle.prototype.plane=function(target){console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');return this.getPlane(target);};Triangle.barycoordFromPoint=function(point,a,b,c,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return Triangle.getBarycoord(point,a,b,c,target);};Triangle.normal=function(a,b,c,target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return Triangle.getNormal(a,b,c,target);};//
Shape.prototype.extractAllPoints=function(divisions){console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');return this.extractPoints(divisions);};Shape.prototype.extrude=function(options){console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');return new ExtrudeGeometry(this,options);};Shape.prototype.makeGeometry=function(options){console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');return new ShapeGeometry(this,options);};//
Vector2.prototype.fromAttribute=function(attribute,index,offset){console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);};Vector2.prototype.distanceToManhattan=function(v){console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);};Vector2.prototype.lengthManhattan=function(){console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();};//
Vector3.prototype.setEulerFromRotationMatrix=function(){console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');};Vector3.prototype.setEulerFromQuaternion=function(){console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');};Vector3.prototype.getPositionFromMatrix=function(m){console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');return this.setFromMatrixPosition(m);};Vector3.prototype.getScaleFromMatrix=function(m){console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');return this.setFromMatrixScale(m);};Vector3.prototype.getColumnFromMatrix=function(index,matrix){console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');return this.setFromMatrixColumn(matrix,index);};Vector3.prototype.applyProjection=function(m){console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');return this.applyMatrix4(m);};Vector3.prototype.fromAttribute=function(attribute,index,offset){console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);};Vector3.prototype.distanceToManhattan=function(v){console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);};Vector3.prototype.lengthManhattan=function(){console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();};//
Vector4.prototype.fromAttribute=function(attribute,index,offset){console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);};Vector4.prototype.lengthManhattan=function(){console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();};//
Object3D.prototype.getChildByName=function(name){console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');return this.getObjectByName(name);};Object3D.prototype.renderDepth=function(){console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');};Object3D.prototype.translate=function(distance,axis){console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');return this.translateOnAxis(axis,distance);};Object3D.prototype.getWorldRotation=function(){console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');};Object3D.prototype.applyMatrix=function(matrix){console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);};Object.defineProperties(Object3D.prototype,{eulerOrder:{get:function(){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');return this.rotation.order;},set:function(value){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');this.rotation.order=value;}},useQuaternion:{get:function(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');},set:function(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');}}});Mesh.prototype.setDrawMode=function(){console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');};Object.defineProperties(Mesh.prototype,{drawMode:{get:function(){console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');return TrianglesDrawMode;},set:function(){console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');}}});SkinnedMesh.prototype.initBones=function(){console.error('THREE.SkinnedMesh: initBones() has been removed.');};//
PerspectiveCamera.prototype.setLens=function(focalLength,filmGauge){console.warn('THREE.PerspectiveCamera.setLens is deprecated. '+'Use .setFocalLength and .filmGauge for a photographic setup.');if(filmGauge!==undefined)this.filmGauge=filmGauge;this.setFocalLength(focalLength);};//
Object.defineProperties(Light.prototype,{onlyShadow:{set:function(){console.warn('THREE.Light: .onlyShadow has been removed.');}},shadowCameraFov:{set:function(value){console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');this.shadow.camera.fov=value;}},shadowCameraLeft:{set:function(value){console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');this.shadow.camera.left=value;}},shadowCameraRight:{set:function(value){console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');this.shadow.camera.right=value;}},shadowCameraTop:{set:function(value){console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');this.shadow.camera.top=value;}},shadowCameraBottom:{set:function(value){console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');this.shadow.camera.bottom=value;}},shadowCameraNear:{set:function(value){console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');this.shadow.camera.near=value;}},shadowCameraFar:{set:function(value){console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');this.shadow.camera.far=value;}},shadowCameraVisible:{set:function(){console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');}},shadowBias:{set:function(value){console.warn('THREE.Light: .shadowBias is now .shadow.bias.');this.shadow.bias=value;}},shadowDarkness:{set:function(){console.warn('THREE.Light: .shadowDarkness has been removed.');}},shadowMapWidth:{set:function(value){console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');this.shadow.mapSize.width=value;}},shadowMapHeight:{set:function(value){console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');this.shadow.mapSize.height=value;}}});//
Object.defineProperties(BufferAttribute.prototype,{length:{get:function(){console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');return this.array.length;}},dynamic:{get:function(){console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');return this.usage===DynamicDrawUsage;},set:function/* value */(){console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');this.setUsage(DynamicDrawUsage);}}});BufferAttribute.prototype.setDynamic=function(value){console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');this.setUsage(value===true?DynamicDrawUsage:StaticDrawUsage);return this;};BufferAttribute.prototype.copyIndicesArray=function/* indices */(){console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');},BufferAttribute.prototype.setArray=function/* array */(){console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');};//
BufferGeometry.prototype.addIndex=function(index){console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');this.setIndex(index);};BufferGeometry.prototype.addAttribute=function(name,attribute){console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');if(!(attribute&&attribute.isBufferAttribute)&&!(attribute&&attribute.isInterleavedBufferAttribute)){console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');return this.setAttribute(name,new BufferAttribute(arguments[1],arguments[2]));}if(name==='index'){console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');this.setIndex(attribute);return this;}return this.setAttribute(name,attribute);};BufferGeometry.prototype.addDrawCall=function(start,count,indexOffset){if(indexOffset!==undefined){console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');}console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');this.addGroup(start,count);};BufferGeometry.prototype.clearDrawCalls=function(){console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');this.clearGroups();};BufferGeometry.prototype.computeOffsets=function(){console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');};BufferGeometry.prototype.removeAttribute=function(name){console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');return this.deleteAttribute(name);};BufferGeometry.prototype.applyMatrix=function(matrix){console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);};Object.defineProperties(BufferGeometry.prototype,{drawcalls:{get:function(){console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');return this.groups;}},offsets:{get:function(){console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');return this.groups;}}});InterleavedBuffer.prototype.setDynamic=function(value){console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');this.setUsage(value===true?DynamicDrawUsage:StaticDrawUsage);return this;};InterleavedBuffer.prototype.setArray=function/* array */(){console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');};//
ExtrudeGeometry.prototype.getArrays=function(){console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');};ExtrudeGeometry.prototype.addShapeList=function(){console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');};ExtrudeGeometry.prototype.addShape=function(){console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');};//
Scene.prototype.dispose=function(){console.error('THREE.Scene: .dispose() has been removed.');};//
Uniform.prototype.onUpdate=function(){console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');return this;};//
Object.defineProperties(Material.prototype,{wrapAround:{get:function(){console.warn('THREE.Material: .wrapAround has been removed.');},set:function(){console.warn('THREE.Material: .wrapAround has been removed.');}},overdraw:{get:function(){console.warn('THREE.Material: .overdraw has been removed.');},set:function(){console.warn('THREE.Material: .overdraw has been removed.');}},wrapRGB:{get:function(){console.warn('THREE.Material: .wrapRGB has been removed.');return new Color();}},shading:{get:function(){console.error('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');},set:function(value){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=value===FlatShading;}},stencilMask:{get:function(){console.warn('THREE.'+this.type+': .stencilMask has been removed. Use .stencilFuncMask instead.');return this.stencilFuncMask;},set:function(value){console.warn('THREE.'+this.type+': .stencilMask has been removed. Use .stencilFuncMask instead.');this.stencilFuncMask=value;}},vertexTangents:{get:function(){console.warn('THREE.'+this.type+': .vertexTangents has been removed.');},set:function(){console.warn('THREE.'+this.type+': .vertexTangents has been removed.');}}});Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function(){console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');return this.extensions.derivatives;},set:function(value){console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');this.extensions.derivatives=value;}}});//
WebGLRenderer.prototype.clearTarget=function(renderTarget,color,depth,stencil){console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');this.setRenderTarget(renderTarget);this.clear(color,depth,stencil);};WebGLRenderer.prototype.animate=function(callback){console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');this.setAnimationLoop(callback);};WebGLRenderer.prototype.getCurrentRenderTarget=function(){console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');return this.getRenderTarget();};WebGLRenderer.prototype.getMaxAnisotropy=function(){console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');return this.capabilities.getMaxAnisotropy();};WebGLRenderer.prototype.getPrecision=function(){console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');return this.capabilities.precision;};WebGLRenderer.prototype.resetGLState=function(){console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');return this.state.reset();};WebGLRenderer.prototype.supportsFloatTextures=function(){console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');return this.extensions.get('OES_texture_float');};WebGLRenderer.prototype.supportsHalfFloatTextures=function(){console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');return this.extensions.get('OES_texture_half_float');};WebGLRenderer.prototype.supportsStandardDerivatives=function(){console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');return this.extensions.get('OES_standard_derivatives');};WebGLRenderer.prototype.supportsCompressedTextureS3TC=function(){console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');return this.extensions.get('WEBGL_compressed_texture_s3tc');};WebGLRenderer.prototype.supportsCompressedTexturePVRTC=function(){console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');return this.extensions.get('WEBGL_compressed_texture_pvrtc');};WebGLRenderer.prototype.supportsBlendMinMax=function(){console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');return this.extensions.get('EXT_blend_minmax');};WebGLRenderer.prototype.supportsVertexTextures=function(){console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');return this.capabilities.vertexTextures;};WebGLRenderer.prototype.supportsInstancedArrays=function(){console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');return this.extensions.get('ANGLE_instanced_arrays');};WebGLRenderer.prototype.enableScissorTest=function(boolean){console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');this.setScissorTest(boolean);};WebGLRenderer.prototype.initMaterial=function(){console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');};WebGLRenderer.prototype.addPrePlugin=function(){console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');};WebGLRenderer.prototype.addPostPlugin=function(){console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');};WebGLRenderer.prototype.updateShadowMap=function(){console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');};WebGLRenderer.prototype.setFaceCulling=function(){console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');};WebGLRenderer.prototype.allocTextureUnit=function(){console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');};WebGLRenderer.prototype.setTexture=function(){console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');};WebGLRenderer.prototype.setTexture2D=function(){console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');};WebGLRenderer.prototype.setTextureCube=function(){console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');};WebGLRenderer.prototype.getActiveMipMapLevel=function(){console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');return this.getActiveMipmapLevel();};Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled;},set:function(value){console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');this.shadowMap.enabled=value;}},shadowMapType:{get:function(){return this.shadowMap.type;},set:function(value){console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');this.shadowMap.type=value;}},shadowMapCullFace:{get:function(){console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function/* value */(){console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');}},context:{get:function(){console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');return this.getContext();}},vr:{get:function(){console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');return this.xr;}},gammaInput:{get:function(){console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');return false;},set:function(){console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');}},gammaOutput:{get:function(){console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');return false;},set:function(value){console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');this.outputEncoding=value===true?sRGBEncoding:LinearEncoding;}},toneMappingWhitePoint:{get:function(){console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');return 1.0;},set:function(){console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');}},gammaFactor:{get:function(){console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');return 2;},set:function(){console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');}}});Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function(){console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function/* cullFace */(){console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');}},renderReverseSided:{get:function(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');}},renderSingleSided:{get:function(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');}}});function WebGLRenderTargetCube(width,height,options){console.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');return new WebGLCubeRenderTarget(width,options);}//
Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function(){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');return this.texture.wrapS;},set:function(value){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');this.texture.wrapS=value;}},wrapT:{get:function(){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');return this.texture.wrapT;},set:function(value){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');this.texture.wrapT=value;}},magFilter:{get:function(){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');return this.texture.magFilter;},set:function(value){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');this.texture.magFilter=value;}},minFilter:{get:function(){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');return this.texture.minFilter;},set:function(value){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');this.texture.minFilter=value;}},anisotropy:{get:function(){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');return this.texture.anisotropy;},set:function(value){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');this.texture.anisotropy=value;}},offset:{get:function(){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');return this.texture.offset;},set:function(value){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');this.texture.offset=value;}},repeat:{get:function(){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');return this.texture.repeat;},set:function(value){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');this.texture.repeat=value;}},format:{get:function(){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');return this.texture.format;},set:function(value){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');this.texture.format=value;}},type:{get:function(){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');return this.texture.type;},set:function(value){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');this.texture.type=value;}},generateMipmaps:{get:function(){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');return this.texture.generateMipmaps;},set:function(value){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');this.texture.generateMipmaps=value;}}});//
Audio.prototype.load=function(file){console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');const scope=this;const audioLoader=new AudioLoader();audioLoader.load(file,function(buffer){scope.setBuffer(buffer);});return this;};AudioAnalyser.prototype.getData=function(){console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');return this.getFrequencyData();};//
CubeCamera.prototype.updateCubeMap=function(renderer,scene){console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');return this.update(renderer,scene);};CubeCamera.prototype.clear=function(renderer,color,depth,stencil){console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');return this.renderTarget.clear(renderer,color,depth,stencil);};ImageUtils.crossOrigin=undefined;ImageUtils.loadTexture=function(url,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');const loader=new TextureLoader();loader.setCrossOrigin(this.crossOrigin);const texture=loader.load(url,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadTextureCube=function(urls,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');const loader=new CubeTextureLoader();loader.setCrossOrigin(this.crossOrigin);const texture=loader.load(urls,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadCompressedTexture=function(){console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');};ImageUtils.loadCompressedTextureCube=function(){console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');};//
function CanvasRenderer(){console.error('THREE.CanvasRenderer has been removed');}//
function JSONLoader(){console.error('THREE.JSONLoader has been removed.');}//
const SceneUtils={createMultiMaterialObject:function/* geometry, materials */(){console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');},detach:function/* child, parent, scene */(){console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');},attach:function/* child, scene, parent */(){console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');}};//
exports.SceneUtils=SceneUtils;function LensFlare(){console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');}//
function ParametricGeometry(){console.error('THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js');return new BufferGeometry();}function TextGeometry(){console.error('THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js');return new BufferGeometry();}function FontLoader(){console.error('THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js');}function Font(){console.error('THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js');}function ImmediateRenderObject(){console.error('THREE.ImmediateRenderObject has been removed.');}function WebGLMultisampleRenderTarget(width,height,options){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.');const renderTarget=new WebGLRenderTarget(width,height,options);renderTarget.samples=4;return renderTarget;}function DataTexture2DArray(data,width,height,depth){console.warn('THREE.DataTexture2DArray has been renamed to DataArrayTexture.');return new DataArrayTexture(data,width,height,depth);}function DataTexture3D(data,width,height,depth){console.warn('THREE.DataTexture3D has been renamed to Data3DTexture.');return new Data3DTexture(data,width,height,depth);}if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register',{detail:{revision:REVISION}}));}if(typeof window!=='undefined'){if(window.__THREE__){console.warn('WARNING: Multiple instances of Three.js being imported.');}else{window.__THREE__=REVISION;}}

},{}]},{},[9]);
